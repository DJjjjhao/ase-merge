["target . setPseudonymized ( source . isPseudonymized ( ) ) ; target . setFacilityType ( source . getFacilityType ( ) ) ;", "import voldemort . store . slop . HintedHandoffStrategyType ; import voldemort . store . views . View ;", "import org . mifos . test . acceptance . framework . loan . LoanAccountPage ; import org . mifos . test . acceptance . framework . admin . AdminPage ; import org . mifos . test . acceptance . framework . admin . FeesCreatePage ; import org . mifos . test . acceptance . framework . loan . RedoLoanDisbursalChooseLoanInstancePage ;", "import org . n52 . sos . ds . hibernate . dao . observation . ObservationFactory ;", "import io . improbable . keanu . vertices . dbl . nonprobabilistic . diff . PartialDerivatives ; import io . improbable . keanu . vertices . update . NonProbabilisticValueUpdater ;", "import net . minecraft . client . world . ClientWorld ;", "final CommonProfile profile = new CommonProfile ( ) ; final var id = registeredService . getUsernameAttributeProvider ( ) . resolveUsername ( principal , service , registeredService ) ;", "return emitConvert2Op ( LIRKind . value ( Kind . Float ) , D2F , emitConvert2Op ( Kind . Double , L2D , input ) ) ;", "import org . niis . xroad . restapi . openapi . model . Subject ; import org . niis . xroad . restapi . openapi . model . SubjectType ; import org . niis . xroad . restapi . service . AccessRightService ; import org . niis . xroad . restapi . openapi . model . TokenCertificate ;", "assert key . getDataType ( ) . equals ( p . getValue ( ) . getClass ( ) ) : key + \" -> \" + p ; values . add ( new RecordEntry ( p ) ) ;", "private final static ILogger logger = Logger . getLogger ( FileSystemXmlConfig . class ) ;", "\"hawkbit.server.ddi.security.authentication.header.enabled\" , Boolean . class , Boolean . FALSE . toString ( ) , TenantConfigurationBooleanValidator . class ) ,", "\"fakehostname_\" + i , \"fake_datanode_id_\" + i , 100 , 101 , 102 , 103 ) ;", "", "if ( tablAction . column != null && tablAction . DROP ( ) != null ) { loc . setWarningText ( DangerStatement . DROP_COLUMN ) ; } else if ( tablAction . datatype != null ) { loc . setWarningText ( PgObjLocation . ALTER_COLUMN_TYPE ) ; }", "this . clientRpcServer . addProtocol ( RpcKind . RPC_WRITABLE , HAServiceProtocol . class , this ) ;", "import com . cloud . network . rules . FirewallRule . Purpose ; import com . cloud . network . rules . FirewallRule . State ;", "private void createEventsIndex ( final List < EventTableColumn > columnList ) { createIndex ( \"events\" , columnList . stream ( ) . map ( EventTableColumn :: toString ) . collect ( Collectors . toList ( ) ) ) ; } private void createIndex ( final String tableName , final List < String > columnList ) { String indexColumns = columnList . stream ( ) . collect ( Collectors . joining ( \",\" , \"(\" , \")\" ) ) ; String indexName = tableName + StringUtils . join ( columnList , \"_\" ) + \"_idx\" ; try ( Statement stmt = con . createStatement ( ) ) { String sql = \"CREATE INDEX IF NOT EXISTS \" + indexName + \" ON \" + tableName + indexColumns ; stmt . execute ( sql ) ; } catch ( SQLException ex ) { LOGGER . log ( Level . SEVERE , \"problem creating index \" + indexName , ex ) ; } } private boolean hasDBColumn ( final EventTableColumn dbColumn ) { }", "order . setAD_Org_ID ( bp . getAD_OrgBP_ID ( ) ) ; final I_AD_OrgInfo oi = Services . get ( IOrgDAO . class ) . retrieveOrgInfo ( getCtx ( ) , bp . getAD_OrgBP_ID ( ) , ITrx . TRXNAME_None ) ;", "public AlertDialog . Builder setPositiveButton ( int positiveTextId , final DialogInterface . OnClickListener listener ) { return setPositiveButton ( context . getResources ( ) . getText ( positiveTextId ) , listener ) ; } @ Implementation", "Collection < Part > parts = request . getParts ( ) ; if ( ! parts . isEmpty ( ) ) { final Map < String , List < Part > > fileItems = parts . stream ( ) . collect ( Collectors . toMap ( Part :: getName , Collections :: singletonList , ( l1 , l2 ) -> Stream . concat ( l1 . stream ( ) , l2 . stream ( ) ) . collect ( Collectors . toList ( ) ) ) ) ; }", "", "zk . create ( znode , data , create . getAcl ( ) , CreateMode . fromFlag ( create . getFlags ( ) ) ) ;", "public CloseableIterable < Entity > getEntitiesByEntitySeed1And2WithCountGreaterThan1 ( ) { }", "concatenatePrefix ( query . getKey ( ) , query . getSliceEnd ( ) ) , new KeyColumnSliceSelector ( query . getKey ( ) , query . getLimit ( ) ) , txh ) ) ;", "case 'y' : right . setSelectedIndex ( 2 ) ; case 's' : break ; case 'l' : JFrame frame = UtilityManager . LogToViewUtility . supplyDisplay ( ) ; boolean vis = frame . isVisible ( ) ; frame . setVisible ( ! vis ) ; break ; case 'p' : break ;", "assertFalse ( isKeyInCache ( currentTenant . getApiKey ( ) ) ) ;", "tryInitThreadPool ( ) ; ArrayList < FutureTask < ARTrackingTask > > tasks = new ArrayList < > ( ) ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "SortedSet < DocumentPiece > documentBodyParts = doc . getDocumentPart ( SegmentationLabel . BODY ) ; if ( documentBodyParts != null ) { }", "String prefix = new String ( mDfuFile . file , 0 , 5 ) ;", "synchronized void restartNotifyPeers ( ) { assert ( datanode . shouldRun == true && datanode . shutdownForUpgrade ) ; for ( Peer p : peers . keySet ( ) ) { peers . get ( p ) . interrupt ( ) ; } } synchronized void closeAllPeers ( ) { LOG . info ( \"Closing all peers.\" ) ; for ( Peer p : peers . keySet ( ) ) { IOUtils . cleanup ( LOG , p ) ; } peers . clear ( ) ; } synchronized int getNumPeers ( ) { return peers . size ( ) ; }", "MockitoAnnotations . initMocks ( dateUtils ) ; this . predefinedShelfUtils = new PredefinedShelfUtils ( predefinedShelfService ) ; goalView = new ReadingGoalView ( goalService , predefinedShelfService , dateUtils ) ; Mockito . when ( dateUtils . getWeeksInYear ( ) ) . thenReturn ( 52 ) ;", "String contactReportingUserUuid , String contactRegionUuid , String contactDistrictUuid , String contactCommunityUuid , String contactCaseReportingUserUuid , String contactCaseRegionUuid , String contactCaseDistrictUuid , String contactCaseCommunityUuid , String contactCaseHealthFacilityUuid , String contactCasePointOfEntryUuid , String eventReportingUserUuid , String eventOfficerUuid , String eventRegionUuid , String eventDistrictUuid , String eventCommunityUuid ) {", "@ Nonnull", "removeEmptyConsolidation ( taskElement ) ;", "LockStoreImpl getLockStore ( ObjectNamespace namespace ) { return lockStores . get ( namespace ) ; } public Collection < LockStoreImpl > getLockStores ( ) { }", "private ParameterService parameterService ; private PageService pageService ; private ApplicationService applicationService ; @ Override", "import edu . uw . covidsafe . gps . GpsOpsAsyncTask ; import edu . uw . covidsafe . gps . GpsRecord ; import edu . uw . covidsafe . symptoms . SymptomTrackerFragment ; import edu . uw . covidsafe . symptoms . SymptomsOpsAsyncTask ; import edu . uw . covidsafe . symptoms . SymptomsRecord ; import edu . uw . covidsafe . ui . contact_log . ContactLogFragment ;", "private String name ; public Bar ( ) { }", "import vazkii . botania . common . lib . LibItemNames ; import static vazkii . botania . common . item . ModItems . * ; import vazkii . botania . common . lib . LibMisc ;", "assertTrue ( size >= 1 ) ;", "", "", "private final Optional < String > user ; private final List < String > cmdLineArgsList ;", "import de . rub . nds . tlsattacker . core . crypto . ec . CustomECPoint ; import de . rub . nds . tlsattacker . core . protocol . message . extension . SNI . SNIEntry ;", "", "@ XmlElement ( name = \"levelOfDetail\" ) @ XmlJavaTypeAdapter ( InternationalStringAdapter . Since2014 . class ) @ UML ( identifier = \"levelOfDetail\" , obligation = CONDITIONAL , specification = ISO_19115 )", "public void referencePolicy ( ReferenceRenderPolicy < ? > policy ) { referencePolicies . add ( policy ) ; }", "final Object fieldValue = doc . field ( firstField ) ; if ( fieldValue == null || ! ( fieldValue instanceof Iterable ) || fieldValue instanceof ODocument ) { result . addAll ( unwind ( doc , nextFields , iContext ) ) ; }", "public ScriptQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { }", "promote = AnalyzerCaster . promoteNumeric ( last . after , false ) ;", "List < DayAssignment > dayAssignments = getFilteredDayAssignments ( start , finish ) ;", "if ( jobSystemProperties != null && ! jobSystemProperties . isEmpty ( ) ) { for ( Entry < String , String > jobSystemProperty : jobSystemProperties . entrySet ( ) ) { runnerbuilder . addSystemProperty ( jobSystemProperty . getKey ( ) , jobSystemProperty . getValue ( ) ) ; } }", "import com . google . common . annotations . VisibleForTesting ; import com . google . common . collect . HashMultiset ; import com . google . common . collect . ImmutableList ; import com . google . common . collect . Iterables ; import com . google . prefs . Preferences ; import com . google . common . collect . ConcurrentHashMap ; import com . google . common . collect . Set ; import com . google . common . collect . Sets ; import com . google . common . jts . geom . Coordinate ; import org . apache . jackson . jackson . math3 . math3 . geom . Geometry ; import org . apache . gnu . trove . list . JsonNode ; import org . apache . gnu . trove . list . rank ;", "EntityLivingBase actor = ( EntityLivingBase ) player . world . getEntityByID ( message . id ) ; RecordPlayer playback = EntityUtils . getRecordPlayer ( actor ) ;", "SimpleDoubleProperty getTruncateWidth ( ) { return truncateWidth ; }", "import it . unibz . inf . ontop . iq . node . normalization . AscendingSubstitutionNormalizer ; import it . unibz . inf . ontop . iq . node . normalization . AscendingSubstitutionNormalizer . AscendingSubstitutionNormalization ; import it . unibz . inf . ontop . iq . transform . IQTreeVisitingTransformer ;", "import static org . apache . http . conn . ssl . SSLSocketFactory . BROWSER_COMPATIBLE_HOSTNAME_VERIFIER ; import java . net . URL ; import java . security . GeneralSecurityException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ;", "public class EReportingValueTimeDAO extends AbstractSeriesValueTimeDAO implements EReportingDaoHelper { private final Set < Integer > verificationFlags ; private final Set < Integer > validityFlags ; public EReportingValueTimeDAO ( Set < Integer > verificationFlags , Set < Integer > validityFlags ) { this . verificationFlags = verificationFlags ; this . validityFlags = validityFlags ; } @ Override public Set < Integer > getVerificationFlags ( ) { return this . verificationFlags ; } @ Override public Set < Integer > getValidityFlags ( ) { return this . validityFlags ; } @ Override public Set < Integer > getValidityFlags ( ) { return this . validityFlags ; } @ Override public ObservationTimeExtrema getTimeExtremaForSeries ( Collection < Series > series , Criterion temporalFilterCriterion , Session session ) throws OwsExceptionReport { Criteria c = getSeriesValueCriteriaFor ( series , temporalFilterCriterion , null , session ) ; addPhenomenonTimeProjection ( c ) ; LOGGER . debug ( \"QUERY getTimeExtremaForSeries(series, temporalFilter): {}\" , HibernateHelper . getSqlString ( c ) ) ; return parseMinMaxPhenomenonTime ( ( Object [ ] ) c . uniqueResult ( ( Object [ ] ) c . uniqueResult ( ) . uniqueResult ( ) . uniqueResult ( ) ) ; } @ Override protected Class < ? > getSeriesValueTimeClass ( ) { return TemporalReferencedEReportingObservation . class ; } @ Override protected void addSpecificRestrictions ( Criteria c , GetObservationRequest request ) throws OwsExceptionReport { addValidityAndVerificationRestrictions ( c , request ) ; } @ Override public ObservationTimeExtremaForSeries ( Object [ ] ) c . uniqueResult ( ( Object [ ] ) c . uniqueResult ( ( Object [ ] ) c . uniqueResult ( ( Object [ ] ) c . uniqueResult ( ( Object [ ] ) c . uniqueResult", "", "} catch ( InputCoercionException e ) { verifyException ( e , \"out of range of `int`\" ) ; assertEquals ( JsonToken . VALUE_NUMBER_INT , e . getInputType ( ) ) ; assertEquals ( Integer . TYPE , e . getTargetType ( ) ) ;", "handleNetfilterPacketEvent ( eventData ) ;", "import com . apollocurrency . aplwallet . apl . core . account . model . Account ; import com . apollocurrency . aplwallet . apl . core . app . GenesisImporter ;", "if ( rCert != null ) { rCert . dispose ( ) ; } if ( siCert != null ) { siCert . dispose ( ) ; }", "import android . content . BroadcastReceiver ;", "bordersHandler = new CollapsedTableBorders ( rows , ( ( Table ) getModelElement ( ) ) . getNumberOfColumns ( ) , getBorders ( ) ) ; bordersHandler . initializeBorders ( ) ; bordersHandler . setTableBoundingBorders ( getBorders ( ) ) ; bordersHandler . setRowRange ( rowRange . getStartRow ( ) , rowRange . getFinishRow ( ) ) ; initializeHeaderAndFooter ( true ) ; bordersHandler . updateBordersOnNewPage ( isOriginalNonSplitRenderer , isFooterRenderer ( ) || isHeaderRenderer ( ) , this , headerRenderer , footerRenderer ) ;", "import org . csanchez . jenkins . plugins . kubernetes . model . KeyValueEnvVar ; import org . csanchez . jenkins . plugins . kubernetes . model . SecretEnvVar ;", "import java . util . function . Consumer ; import java . nio . file . Files ;", "PARAMETER . allowTvmIstanbul = 0 ; PARAMETER . allowTvmStake = 0 ; PARAMETER . allowTvmAssetIssue = 0 ;", "TestUtils . FULL_SERVICE_CALCULATE_PRIME , subjectIds ) ;", "private SdkEventLoopGroup resolveSdkEventLoopGroup ( DefaultBuilder builder ) { Validate . isTrue ( builder . eventLoopGroup == null || builder . eventLoopGroupBuilder == null , \"The sdkEventLoopGroup and the eventLoopGroupBuilder can't both be configured.\" ) ; return Either . fromNullable ( builder . eventLoopGroup , builder . eventLoopGroupBuilder ) . map ( either -> either . map ( this :: nonManagedEventLoopGroup , SdkEventLoopGroup . Builder :: build ) ) . orElseGet ( SharedSdkEventLoopGroup :: get ) ; }", "null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , \"Kfor\" , \"Klet\" , \"Kwhere\" , \"Kgroup\" , \"Kby\" , \"Korder\" , \"Kreturn\" , \"Kif\" , \"Kin\" , \"Kas\" , \"Kat\" , \"Kallowing\" , \"Kempty\" , \"Kcount\" , \"Kstable\" , \"Kascending\" , \"Kdescending\" , \"Ksome\" , \"Kevery\" , \"Ksatisfies\" , \"Kcollation\" , \"Kgreatest\" , \"Kleast\" , \"Kswitch\" , \"Kcase\" , \"Ktry\" , \"Kcatch\" , \"Kdefault\" , \"Kthen\" , \"Kelse\" , \"Ktypeswitch\" , \"Kor\" , \"Kand\" , \"Knot\" , \"Kto\" , \"Kinstance\" , \"Kof\" , \"Ktreat\" , \"Kcast\" , \"Kcastable\" , \"Kversion\" , \"Kjsoniq\" , \"Kjson\" , \"STRING\" , \"NullLiteral\" , \"Literal\" , \"NumericLiteral\" , \"IntegerLiteral\" , \"DecimalLiteral\" , \"DoubleLiteral\" , \"WS\" , \"NCName\" , \"Kand\" , \"Knot\" , \"Kto\" , \"Kinstance\" , \"Kof\" , \"Ktreat\" , \"Kcast\" , \"Kcastable\" , \"Kversion\" , \"Kjsoniq\" , \"Kjson\" , \"Kversion\" , \"Kof\" , \"Kor\" , \"Kor\" , \"Kor\" , \"Kand\" , \"Kdtype\" , \"KIntegerLiteral\" , \"DoubleLiteral\" ,", "final RawUsageRecord curRawUsage = rawUsageIterator . next ( ) ; if ( curRawUsage . getDate ( ) . compareTo ( transitionTimes . get ( 0 ) . getDate ( ) ) >= 0 ) { }", "public PayloadMapping getPayloadMapping ( ) { return payloadMapping ; } @ Override public Optional < ReplyTarget > getReplyTarget ( ) { return Optional . ofNullable ( replyTarget ) ; } @ Override", "assert false : \"deprecated class\" ;", "package io . swagger . model ; import java . util . Objects ; import com . fasterxml . jackson . annotation . JsonProperty ; import com . fasterxml . jackson . annotation . JsonCreator ; import com . fasterxml . jackson . annotation . JsonValue ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . model . Category ; import io . swagger . model . Tag ; import java . util . ArrayList ; import java . util . List ; import javax . validation . constraints . * ; public class Pet { @ JsonProperty ( \"id\" ) private Long id = null ; @ JsonProperty ( \"category\" ) private Category category = null ; @ JsonProperty ( \"name\" ) private String name = null ; @ JsonProperty ( \"photoUrls\" ) private List < String > photoUrls = new ArrayList < String > ( ) ; @ JsonProperty ( \"tags\" ) private List < Tag > tags = new ArrayList < Tag > ( ) ; public enum StatusEnum { AVAILABLE ( \"available\" ) , PENDING ( \"pending\" ) , SOLD ( \"sold\" ) ; private String value ; StatusEnum ( String value ) { this . value = value ; } @ Override @ JsonValue public String toString ( ) { return String . valueOf ( value ) ; } @ JsonCreator public static StatusEnum fromValue ( String text ) { for ( StatusEnum b : StatusEnum . values ( ) ) { if ( String . valueOf ( b . value ) . equals ( text ) ) { return b ; } } return null ; } } @ JsonProperty ( \"status\" ) private StatusEnum status = null ; public Pet id ( Long id ) { this . id = id ; } public void setId ( Long id ) { this . id = id ; } @ JsonCreator public static StatusEnum fromValue ( String text ) { for ( StatusEnum b", "private List < DownloadBatch > fetchBatches ( Collection < DownloadInfo > downloads ) { Cursor batchesCursor = resolver . query ( Downloads . Impl . BATCH_CONTENT_URI , null , null , null , null ) ; List < DownloadBatch > batches = new ArrayList < > ( batchesCursor . getCount ( ) ) ; List < Long > forDeletion = new ArrayList < > ( ) ; try { int idColumn = batchesCursor . getColumnIndexOrThrow ( Downloads . Impl . Batches . _ID ) ; int deleteIndex = batchesCursor . getColumnIndex ( Downloads . Impl . Batches . COLUMN_DELETED ) ; int titleIndex = batchesCursor . getColumnIndexOrThrow ( Downloads . Impl . Batches . COLUMN_TITLE ) ; int descriptionIndex = batchesCursor . getColumnIndexOrThrow ( Downloads . Impl . Batches . COLUMN_DESCRIPTION ) ; int bigPictureUrlIndex = batchesCursor . getColumnIndexOrThrow ( Downloads . Impl . Batches . COLUMN_BIG_PICTURE ) ; int statusIndex = batchesCursor . getColumnIndexOrThrow ( Downloads . Impl . Batches . COLUMN_STATUS ) ; int visibilityColumn = batchesCursor . getColumnIndexOrThrow ( Downloads . Impl . Batches . COLUMN_VISIBILITY ) ; while ( batchesCursor . moveToNext ( ) ) { long id = batchesCursor . getLong ( idColumn ) ; if ( batchesCursor . getInt ( deleteIndex ) == 1 ) { forDeletion . add ( id ) ; continue ; } String title = batchesCursor . getString ( titleIndex ) ; String description = batchesCursor . getString ( descriptionIndex ) ; int bigPictureUrl = batchesCursor . getString ( bigPictureUrlIndex ) ; int status = batchesCursor . getInt ( statusIndex ) ; @ NotificationVisibility . Value int visibility = batchesCursor . getInt ( visibilityColumn ) ; BatchInfo batchInfo = new BatchInfo ( title , description , bigPictureUrlIndex ) ; int status = batchesCursor . getInt ( status", "List < Assignment > myAssignments = assignments . doBatchAssignments ( userID , applicationName , context , createAssignment , FALSE , headers , experimentBatch ) ; return httpHeader . headers ( ) . entity ( ImmutableMap . < String , Object > builder ( ) . put ( \"assignments\" , toBatchAssignmentResponseMap ( myAssignments ) ) . build ( ) ) . build ( ) ;", "public boolean isUnloadedNozzleTipStandin ( ) { return getName ( ) . equals ( \"unloaded\" ) || getName ( ) . equals ( \"unmounted\" ) ; } public void setVacuumLevelPartOffLow ( double vacuumLevelPartOffLow ) { this . vacuumLevelPartOffLow = vacuumLevelPartOffLow ; } public double getVacuumLevelPartOffHigh ( ) { return vacuumLevelPartOffHigh ; } public void setVacuumLevelPartOffHigh ( double vacuumLevelPartOffHigh ) { this . vacuumLevelPartOffHigh = vacuumLevelPartOffHigh ; } public ReferenceNozzleTipCalibration getCalibration ( ) { }", "assertTrue ( documentMapper . timestampFieldMapper ( ) . fieldType ( ) . hasDocValues ( ) ) ; documentMapper = indexService . mapperService ( ) . parse ( \"type\" , new CompressedXContent ( documentMapper . mappingSource ( ) . string ( ) ) , true ) ;", "import info . nightscout . androidaps . plugins . general . careportal . Dialogs . NewNSTreatmentDialog ;", "@ Override public void loadXML ( Node stepnode , List < DatabaseMeta > databases , IMetaStore metaStore ) throws KettleXMLException { super . loadXML ( stepnode , databases , metaStore ) ; compressionType = XMLHandler . getTagValue ( stepnode , FieldNames . COMPRESSION ) ; } @ Override public String getXML ( ) { StringBuffer retval = new StringBuffer ( super . getXML ( ) ) ; final String INDENT = \" \" ; retval . append ( INDENT ) . append ( XMLHandler . addTagValue ( FieldNames . COMPRESSION , compressionType ) ) ; return retval . toString ( ) ; }", ". whenComplete ( ( $ , e ) -> server . close ( ) ) . whenComplete ( assertComplete ( $ -> { for ( int i = 0 ; i < files ; i ++ ) { assertArrayEquals ( CONTENT , Files . readAllBytes ( storage . resolve ( \"file\" + i ) ) ) ; } } ) ) ;", "default Table newTable ( ) { return tableConstructor ( ) . apply ( this , newDocument ( this , TABLES ) ) ; } BiFunction < Schema , Map < String , Object > , Table > tableConstructor ( ) ; @ Override default Class < Schema > mainInterface ( ) { return Schema . class ; }", "* Patch true Boolean value in request returns 302. This request should not be automatically redirected , but should return the received 302 to the caller for evaluation", "public static void parseInfo ( CommandParserArgs arguments ) throws CommandException", "private void addLanguageToAttributes ( String languageCode ) { AttributeMetaData attrLabel = attrMetaFactory . create ( ) . setName ( LABEL + '-' + languageCode ) . setNillable ( true ) . setLabel ( \"Label (\" + languageCode + ')' ) ; AttributeMetaData attrDescription = attrMetaFactory . create ( ) . setName ( DESCRIPTION + '-' + languageCode ) . setNillable ( true ) . setLabel ( \"Description (\" + languageCode + ')' ) ; dataService . add ( ATTRIBUTE_META_DATA , Stream . of ( attrLabel , attrDescription ) ) ; EntityType attrMeta = EntityType . newInstance ( dataService . getEntityType ( ATTRIBUTE_META_DATA ) , SHALLOW_COPY_ATTRS ) ; attrMeta . addAttribute ( attrLabel ) ; attrMeta . addAttribute ( attrDescription ) ; runAsSystem ( ( ) -> dataService . update ( ENTITY_META_DATA , attrMeta ) ) ; EntityType attrMetaUpdated = dataService . getEntityType ( ATTRIBUTE_META_DATA ) ; attrMetaUpdated . addAttribute ( attrLabel ) ; attrMetaUpdated . addAttribute ( attrDescription ) ; } private void addLanguageToEntities ( String languageCode ) { AttributeMetaData entityLabel = attrMetaFactory . create ( ) . setName ( EntityTypeMetadata . LABEL + '-' + languageCode ) . setNillable ( true ) . setLabel ( EntityTypeMetadata . LABEL + '-' + languageCode ) . setNillable ( true ) . setLabel ( EntityTypeMetadata . DESCRIPTION + '-' + languageCode ) . setNillable ( true ) . setDataType ( TEXT ) ; dataService . add ( ATTRIBUTE_META_DATA , Stream . of ( entityLabel ) ; entityType . addAttribute ( entityDescription ) ; } private void addLanguageToI18N ( String languageCode ) { AttributeMetaData languageCodeAttr = attrMetaFactory . create ( ) . setName ( languageCode ) . setNillable ( true ) . setName ( EntityTypeMetadata . setName ( languageCode ) . setNillable ( true )", "import uk . gov . gchq . gaffer . data . element . id . EdgeId ; import uk . gov . gchq . gaffer . data . element . id . EntityId ; import uk . gov . gchq . gaffer . data . elementdefinition . view . View ;", "", "import com . itextpdf . kernel . colors . ColorConstants ;", "public void testMaterializedViewUpdateR4 ( ) throws IOException , ProcCallException { System . out . println ( \"Test R4 update...\" ) ; Client client = this . getClient ( ) ; String tb = \"R4.insert\" ; client . callProcedure ( tb , 1 , 10 , - 1 ) ; client . callProcedure ( tb , 2 , 20 , 1 ) ; client . callProcedure ( tb , 3 , 30 , 1 ) ; client . callProcedure ( tb , 4 , 40 , 2 ) ; client . callProcedure ( tb , 5 , 50 , 2 ) ; String mvTable = \"V_R4\" ; String orderbyStmt = mvTable + \"_G1\" ; compareMVcontentsOfLongs ( client , mvTable , new long [ ] [ ] { { 1 , - 2 , 1 , 10 } , { 1 , 2 , 2 , 50 } , { 4 , 4 , 2 , 90 } } , orderbyStmt ) ; client . callProcedure ( \"R4.update\" , 2 , 19 , 1 , 2 ) ; compareMVcontentsOfLongs ( client , mvTable , new long [ ] [ ] { { 1 , - 2 , 1 , 10 } , { 1 , 2 , 2 , 49 } , { 4 , 4 , 2 , 90 } } , orderbyStmt ) ; client . callProcedure ( \"R4.update\" , 4 , 41 , - 1 , 4 ) ; compareMVcontentsOfLongs ( client , mvTable , new long [ ] [ ] { { 1 , - 2 , 2 , 51 } , { 1 , 2 , 2 , 51 } , { 4 , 4 , 1 , 50 } } , orderbyStmt ) ; client . callProcedure ( \"R4.update\" , 4 , 41 , - 1 , 4 ) ; compareMVcontentsOfLongs ( client , mvTable , new long [ ] [ ] { { 1 , - 2 , 2", "public PetApiController ( ObjectMapper objectMapper ) { this . objectMapper = objectMapper ; } public ResponseEntity < Void > addPet ( @ ApiParam ( value = \"Pet object that needs to be added to the store\" , required = true ) @ Valid @ RequestBody Pet body , @ RequestHeader ( value = \"Accept\" , required = false ) String accept ) throws Exception { }", "StoreDefinition storeDef = new StoreDefinitionBuilder ( ) . setName ( \"test\" ) . setType ( ReadOnlyStorageConfiguration . TYPE_NAME ) . setKeySerializer ( serDef ) . setValueSerializer ( serDef ) . setRoutingPolicy ( RoutingTier . CLIENT ) . setRoutingStrategyType ( RoutingStrategyType . CONSISTENT_STRATEGY ) . setReplicationFactor ( repFactor ) . setPreferredReads ( 1 ) . setRequiredReads ( 1 ) . setPreferredWrites ( 1 ) . setRequiredWrites ( 1 ) . build ( ) ; RoutingStrategy router = new RoutingStrategyFactory ( ) . updateRoutingStrategy ( storeDef , cluster ) ;", "( ( animation == inAnimation ) ? \"in\" : ( ( animation == outAnimation ) ? \"out\" : \"other\" ) ) ) ;", "ProcessOutputHandler processOutputHandler , boolean awb ) throws IOException , InterruptedException , ProcessException {", "GL11 . glPushAttrib ( GL11 . GL_LIGHTING ) ; GlStateManager . disableLighting ( ) ;", "assertEquals ( \"/master\" , UnreliableSocketFactory . getHostFromLastConnection ( ) ) ; assertFalse ( newConnectionId . equals ( originalConnectionId ) ) ;", "parse ( ) ; return this . getNamePart ( NamePartKey . Keyword ) ;", "", "import java . util . Collections ;", "} else { yZoom = spectrogramPlot . axisFreq . zoom ; yShift = spectrogramPlot . axisFreq . shift ; } } } public void setShowFreqAlongX ( boolean b ) { spectrogramPlot . setShowFreqAlongX ( b ) ; if ( showMode == PlotMode . SPECTRUM ) return ; if ( spectrogramPlot . showFreqAlongX ) { xZoom = spectrogramPlot . axisFreq . zoom ; xShift = spectrogramPlot . axisFreq . shift ; yZoom = spectrogramPlot . axisTime . zoom ; yShift = spectrogramPlot . axisTime . shift ; } else { xZoom = spectrogramPlot . axisTime . zoom ; xShift = spectrogramPlot . axisTime . shift ; yZoom = spectrogramPlot . axisFreq . zoom ; yShift = spectrogramPlot . axisFreq . shift ; } } public void switch2Spectrum ( ) { Log . v ( TAG , \"switch2Spectrum()\" ) ; if ( showMode == PlotMode . SPECTRUM ) { return ; } showMode = PlotMode . SPECTRUM ; xZoom = spectrogramPlot . axisFreq . zoom ; xShift = spectrogramPlot . axisTime . shift ; yZoom = spectrogramPlot . axisFreq . zoom ; yShift = spectrogramPlot . axisFreq . shift ; } } public void switch2Spectrum ( ) { Log . v ( TAG , \"switch2Spectrum()\" ) ; if ( showMode == 0 ) { return ; } showMode = 0 ; xZoom = spectrogramPlot . axisFreq . zoom ; xShift = spectrogramPlot . axisFreq . shift ;", "import org . androidannotations . helper . TimeStats ; import org . androidannotations . logger . Level ; import org . androidannotations . logger . Logger ; import org . androidannotations . logger . LoggerContext ; import org . androidannotations . logger . LoggerFactory ; import org . androidannotations . model . * ; import org . androidannotations . process . ModelProcessor ; import org . androidannotations . process . ModelValidator ; import org . androidannotations . process . TimeStats ;", "import reborncore . common . powerSystem . forge . ForgePowerItemManager ; import techreborn . TechReborn ;", "import java . util . function . Function ; import java . util . stream . Collectors ;", "", "import jadx . core . ProcessClass ;", "public static final String REPEAT_COPY_ID = \"RepeatCopy\" ; public static final String CIRCLE_COPY_ID = \"CircleCopy\" ;", "case MOD_VAULT_INFO : ModInfo modInfo = gson . fromJson ( jsonString , ModInfo . class ) ; onModInfo ( modInfo ) ; break ; case UPDATED_ACHIEVEMENTS : UpdatedAchievementsInfo updatedAchievementsInfo = gson . fromJson ( jsonString , UpdatedAchievementsInfo . class ) ; onUpdatedAchievementsListeners . forEach ( listener -> listener . accept ( updatedAchievementsInfo ) ) ; break ; case NOTICE : Notice notice = gson . fromJson ( jsonString , Notice . class ) ; dispatchNotice ( notice ) ; break ;", "private static final long serialVersionUID = 616956634821720644L ;", "import com . gallatinsystems . common . Constants ; import com . gallatinsystems . common . util . PropertyUtil ; import com . gallatinsystems . framework . exceptions . IllegalDeletionException ; import com . gallatinsystems . messaging . dao . MessageDao ; import com . gallatinsystems . messaging . domain . Message ;", "acc . originalSchedule , acc . createStandingInstructionAtDisbursement , acc . paidInAdvance ) ;", "import de . rub . nds . tlsattacker . core . protocol . message . extension . TruncatedHmacExtensionMessage ; import de . rub . nds . tlsattacker . core . protocol . message . extension . TrustedCaIndicationExtensionMessage ; import de . rub . nds . tlsattacker . core . state . TlsContext ;", "acc . loanPurposeId , acc . loanPurposeName , acc . loanOfficerId , acc . loanOfficerName , acc . currency , acc . proposedPrincipal , acc . principal , acc . approvedPrincipal , acc . totalOverpaid , acc . inArrearsTolerance , acc . termFrequency , acc . termPeriodFrequencyType , acc . numberOfRepayments , acc . repaymentEvery , acc . repaymentFrequencyType , acc . repaymentFrequencyNthDayType , acc . repaymentFrequencyDayOfWeekType , acc . transactionProcessingStrategyId , acc . transactionProcessingStrategyName , acc . amortizationType , acc . interestRatePerPeriod , acc . interestRateFrequencyType , acc . annualInterestRate , acc . interestType , acc . interestCalculationPeriodType , acc . expectedFirstRepaymentOnDate , acc . graceOnPrincipalPayment , acc . graceOnInterestPayment , acc . graceOnInterestCharged , acc . interestChargedFromDate , acc . timeline , acc . summary , acc . feeChargesAtDisbursementCharged , acc . repaymentSchedule , acc . transactions , acc . charges , acc . collateral , acc . guarantors , acc . meeting , acc . productOptions , acc . termFrequencyTypeOptions , acc . repaymentFrequencyTypeOptions , acc . repaymentFrequencyNthDayTypeOptions , acc . repaymentFrequencyDaysOfWeekTypeOptions , acc . transactionProcessingStrategyOptions , acc . interestRateFrequencyTypeOptions , acc . interestRateFrequencyTypeOptions , acc . repaymentSchedule , acc . transactions , acc . charges , acc . collateral , acc . guarantors , acc . meeting , acc . productOptions , acc . termFrequencyTypeOptions , acc . repaymentFrequencyTypeOptions , acc . repaymentSchedule , acc . transactions , acc . charges , acc . repaymentSchedule , acc . transactions , acc", "@ Override public OUT at ( int x , int y , Aggregates < ? extends IN > aggregates ) { }", "if ( null != retry ) { retry = null ; } this . createTime = System . currentTimeMillis ( ) ;", "String mimeType = getContentResolver ( ) . getType ( uri ) ; if ( mimeType . contains ( \"image\" ) ) { String [ ] CONTENT_PROJECTION = { Images . Media . DATA , Images . Media . DISPLAY_NAME , Images . Media . MIME_TYPE , Images . Media . SIZE } ; Cursor c = getContentResolver ( ) . query ( uri , CONTENT_PROJECTION , null , null , null ) ; c . moveToFirst ( ) ; int index = c . getColumnIndex ( Images . Media . DATA ) ; data = c . getString ( index ) ; local . add ( data ) ; remote . add ( mUploadPath + c . getString ( c . getColumnIndex ( Images . Media . DISPLAY_NAME ) ) ) ; } else if ( mimeType . contains ( \"video\" ) ) { String [ ] CONTENT_PROJECTION = { Video . Media . DATA , Video . Media . DISPLAY_NAME , Video . Media . MIME_TYPE , Video . Media . SIZE , Video . Media . DATE_MODIFIED } ; Cursor c = getContentResolver ( ) . query ( uri , CONTENT_PROJECTION , null , null , null ) ; c . moveToFirst ( ) ; int index = c . getColumnIndex ( Video . Media . DATA ) ; data = c . getString ( index ) ; local . add ( data ) ; remote . add ( mUploadPath + c . getString ( c . getColumnIndex ( Video . Media . DISPLAY_NAME , Video . Media . SIZE , Video . Media . DATE_MODIFIED } ; Cursor c = getContentResolver ( ) . query ( uri , CONTENT_PROJECTION , null , null , null , null ) ; c . moveToFirst ( ) ; int index = c . getColumnIndex ( Video . Media . SIZE ) ; local . add ( data ) ; remote . add ( mUploadPath + c . getString ( c . getColumnIndex ( Video . Media . getColumnIndex ( Video", "LayoutOptionData . Visibility . ADVANCED , \"de.cau.cs.kieler.position\"", "", "setState ( 841 ) ;", "DispatcherServletRegistrationBean bean = new DispatcherServletRegistrationBean ( new DispatcherServlet ( ) , \"/test\" ) ; assertThatExceptionOfType ( UnsupportedOperationException . class ) . isThrownBy ( ( ) -> bean . addUrlMappings ( \"/test\" ) ) ;", "( ( EntityPlayerMP ) entityPlayer ) . connection . setPlayerLocation ( entityPlayer . posX , entityPlayer . posY , entityPlayer . posZ , entityPlayer . rotationYaw , entityPlayer . rotationPitch ) ; GalacticraftCore . packetPipeline . sendTo ( new PacketSimpleMars ( EnumSimplePacketMars . C_BEGIN_CRYOGENIC_SLEEP , GCCoreUtil . getDimensionID ( entityPlayer . worldObj ) , new Object [ ] { this . getPos ( ) } ) , ( EntityPlayerMP ) entityPlayer ) ;", "void paramDuration ( String scenario , Period value ) throws ServiceException ; Call < ResponseBody > paramDurationAsync ( String scenario , Period value , final ServiceCallback < Void > serviceCallback ) ; void responseDuration ( String scenario ) throws ServiceException ; Call < ResponseBody > responseDurationAsync ( String scenario , final ServiceCallback < Void > serviceCallback ) ;", "private StubMethodInjector methodInjector ; public static class StubInjectorFactoryImpl extends InjectorFactoryImpl { private StubMethodInjector stub ; public StubInjectorFactoryImpl ( ResteasyProviderFactory factory ) { super ( factory ) ; stub = new StubMethodInjector ( ) ; } @ Override public MethodInjector createMethodInjector ( Class root , Method method ) { return stub ; } } public static class StubMethodInjector implements MethodInjector { private Object [ ] arguments ; @ Override public Object invoke ( HttpRequest request , HttpResponse response , Object target ) throws Failure , ApplicationException , WebApplicationException { return null ; } public Object [ ] getArguments ( ) { return arguments ; } public void setArguments ( Object [ ] arguments ) { this . arguments = arguments ; } @ Override public Object [ ] injectArguments ( HttpRequest request , HttpResponse response ) throws Failure { return arguments ; } @ Override public ValueInjector [ ] getParams ( ) { return null ; } } protected Module getGuiceOverrideModule ( ) { return new AuthInterceptorTestModule ( ) ; }", "private static final String LANG_KEY_PASTE_CONTAINERS = LANG_KEY_GADGETS + \".subCategoryPasteContainers\" ; private static final String LANG_KEY_GADGET_BUILDING = LANG_KEY_GADGETS + \".gadgetBuilding\" ;", "else if ( qName . equalsIgnoreCase ( \"Appearance\" ) ) { if ( ! UNIVERSAL_LIGHTS ) attributeValue = attributes . getValue ( \"USE\" ) ; if ( attributeValue != null ) { DefinedItem useItem = null ; for ( DefinedItem definedItem : mDefinedItems ) { if ( attributeValue . equals ( definedItem . getName ( ) ) ) { useItem = definedItem ; break ; } } if ( useItem != null ) { gvrMaterial = useItem . getGVRMaterial ( ) ; gvrRenderData . setMaterial ( gvrMaterial ) ; gvrMaterialUSEd = true ; } } else { attributeValue = attributes . getValue ( \"DEF\" ) ; if ( attributeValue != null ) { shaderSettings . setAppearanceName ( attributeValue ) ; } } }", "return 0 ;", "if ( index >= children . size ( ) ) { return null ; } return isValidIndex ( index ) ? children . get ( index ) : null ;", "Assert . assertEquals ( RefStatRange [ 0 ] , odGNSS . getRangeStat ( ) . getMin ( ) , 0.3 ) ; Assert . assertEquals ( RefStatRange [ 1 ] , odGNSS . getRangeStat ( ) . getMax ( ) , 0.1 ) ;", "public void postfixPathSegment ( String releaseUuid , ContainerType type , String languageTag ) { if ( getParentNode ( releaseUuid ) == null ) { return ; } NodeGraphFieldContainer container = getGraphFieldContainer ( languageTag , releaseUuid , type ) ; if ( container != null ) { container . postfixSegmentFieldValue ( ) ; } } @ Override public String getPath ( ActionContext ac , String branchUuid , ContainerType type , String ... languageTag ) { }", "", "import org . n52 . iceland . exception . CodedException ; import org . n52 . iceland . exception . ows . NoApplicableCodeException ; import org . n52 . iceland . exception . ows . OwsExceptionReport ; import org . n52 . sos . ds . hibernate . dao . observation . AbstractObservationDAO ; import org . n52 . sos . ds . hibernate . dao . observation . AbstractObservationTimeDAO ; import org . n52 . sos . ds . hibernate . dao . observation . ereporting . EReportingObservationDAO ; import org . n52 . sos . ds . hibernate . dao . observation . ereporting . EReportingObservationTimeDAO ; import org . n52 . sos . ds . hibernate . dao . observation . ereporting . EReportingSeriesDAO ; import org . n52 . sos . ds . hibernate . dao . observation . ereporting . EReportingValueDAO ; import org . n52 . sos . ds . hibernate . dao . observation . ereporting . EReportingValueTimeDAO ; import org . n52 . sos . ds . hibernate . dao . observation . legacy . LegacyObservationDAO ; import org . n52 . sos . ds . hibernate . dao . observation . series . AbstractSeriesDAO ; import org . n52 . sos . ds . hibernate . dao . observation . series . SeriesDAO ; import org . n52 . n52 . sos . ds . hibernate . dao . observation . series . SeriesObservationDAO ; import org . n52 . n52 . sos . ds . hibernate . dao . observation . series . SeriesObservationDAO ; import org . n52 . n52 . ds . hibernate . dao . observation . series . SeriesObservationTimeDAO ; import org . n52 . ds . hibernate . dao . observation . series", "", "", "public ClassAVM2Item ( List < Map . Entry < String , Map < String , String > > > metadata , List < DottedChain > importedClasses , DottedChain pkg , List < Integer > openedNamespaces , int protectedNs , boolean isDynamic , boolean isFinal , int namespace , String className , GraphTargetItem extendsOp , List < GraphTargetItem > implementsOp , List < GraphTargetItem > staticInit , boolean staticInitActivation , List < AssignableAVM2Item > sinitVariables , GraphTargetItem constructor , List < GraphTargetItem > traits ) { }", "vm = VmInstances . lookupDisabled ( runVm . getInstanceId ( ) ) ; if ( ! VmState . BURIED . equals ( vm . getRuntimeState ( ) ) && vm . getSplitTime ( ) > VmInstances . BURY_TIME ) { }", "import java . awt . event . MouseEvent ; import java . awt . event . ItemEvent ; import java . awt . event . ItemListener ;", "public IQTree replaceSubTree ( IQTree subTreeToReplace , IQTree newSubTree ) { if ( equals ( subTreeToReplace ) ) return newSubTree ; return iqFactory . createBinaryNonCommutativeIQTree ( getRootNode ( ) , leftChild . replaceSubTree ( subTreeToReplace , newSubTree ) , rightChild . replaceSubTree ( subTreeToReplace , newSubTree ) ) ; } @ Override public ImmutableSet < ImmutableSubstitution < NonVariableTerm > > getPossibleVariableDefinitions ( ) { if ( possibleVariableDefinitions == null ) possibleVariableDefinitions = getRootNode ( ) . getPossibleVariableDefinitions ( leftChild , rightChild ) ; return possibleVariableDefinitions ; } @ Override public IQTree removeDistincts ( ) { IQProperties properties = getProperties ( ) ; return properties . areDistinctAlreadyRemoved ( ) ? this : getRootNode ( ) . removeDistincts ( leftChild , rightChild , properties ) ; } @ Override", "message = getMessageForNotification ( context , senderId ) ;", "List < KBHandle > resultList ; resultList = read ( aKB , ( conn ) -> { String QUERY = SPARQLQueryStore . queryForAllConceptList ( aKB ) ;", "if ( log . isTraceEnabled ( ) ) { log . trace ( String . format ( \"ScanSess tid %s %s %,d entries in %.2f secs, nbTimes = [%s] \" , TServerUtils . clientAddress . get ( ) , ss . extent . getTableId ( ) , ss . entriesReturned , ( t2 - ss . startTime ) / 1000.0 , ss . nbTimes . toString ( ) ) ) ; }", "import blusunrize . immersiveengineering . api . utils . TagUtils ;", "child3b . setVisibility ( View . GONE ) ; TextView textView = new TextView ( application ) ; textView . setText ( \"Here's some text!\" ) ; textView . setVisibility ( View . INVISIBLE ) ; child3 . addView ( textView ) ;", "", "import android . graphics . Paint ; import android . graphics . PorterDuff ;", "return _hreq != null ? _hreq . getPathInfo ( ) : _attrs . get ( Attributes . INCLUDE_PATH_INFO ) ;", "throw new FixtureExecutionException ( \"Cannot inject resources after command handler has been created. \" + \"Configure all resource before calling \" + \"registerCommandHandler() or \" + \"registerAnnotatedCommandHandler()\" ) ;", "jj_la1 [ 243 ] = jj_gen ;", "formBean . setDisbursementDateDD ( possibleDisbursementDate . getDayOfMonth ( ) ) ; formBean . setDisbursementDateMM ( possibleDisbursementDate . getMonthOfYear ( ) ) ; formBean . setDisbursementDateYY ( possibleDisbursementDate . getYearOfEra ( ) ) ;", "void testIsTagPrototype ( ) { Webhook withDefaultsA = this . webhook . withDefaults ( CALLBACK_TIMEOUT_DEFAULT_IN_SEC ) ; }", "import androidx . appcompat . app . AppCompatDialogFragment ; import androidx . recyclerview . widget . RecyclerView ;", "public void onCommandDispatcherSet ( CommandDispatcher commandDispatcher ) { ExamEnvironment examEnvironment = getExam ( ) ; if ( examEnvironment != null ) { examEnvironment . setCommandDispatcher ( commandDispatcher ) ; updateExam ( examEnvironment ) ; } } protected void updateExam ( @ Nonnull ExamEnvironment examEnvironment ) { examEnvironment . setIncludingSettingsInLog ( ! isUnbundled ( ) ) ; examEnvironment . setCopyPaste ( getCopyPaste ( ) ) ; } @ Override public void setXML ( String xml , boolean clearAll ) { if ( xml == null ) { return ; } if ( clearAll ) { resetCurrentFile ( ) ; } try { setActiveView ( App . VIEW_EUCLIDIAN ) ; getXMLio ( ) . processXMLString ( xml , clearAll , false ) ; } catch ( MyError err ) { err . printStackTrace ( ) ; showError ( err ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; showError ( Errors . LoadFileFailed ) ; } }", "", "public ResponseEntity < Void > updatePet ( @ ApiParam ( value = \"Pet object that needs to be added to the store\" , required = true ) @ Valid @ RequestBody Pet body , @ RequestHeader ( value = \"Accept\" , required = false ) String accept ) throws Exception { }", "import com . codahale . metrics . Timer ; import com . google . common . base . Preconditions ; import com . google . inject . Inject ; import com . google . inject . assistedinject . Assisted ; import com . netflix . astyanax . Keyspace ; import com . netflix . astyanax . MutationBatch ; import com . netflix . astyanax . connectionpool . OperationResult ; import com . netflix . astyanax . connectionpool . exceptions . ConnectionException ; import com . netflix . astyanax . model . ColumnFamily ; import com . datastax . driver . core . BatchStatement ; import com . datastax . driver . core . Session ;", "view . setValue ( list . get ( i ) , isMasterKey , usages . get ( i ) , newKeys ) ; view . setCanEdit ( mCanEdit ) ;", "final long localCheckpoint = seqNoService . getLocalCheckpoint ( ) ; try ( Translog . Snapshot snapshot = getTranslog ( ) . newSnapshotFrom ( localCheckpoint + 1 ) ) { }", "ShadowParcel . class , ShadowPair . class ,", "private final MeasuredSize measuredSize = new MeasuredSize ( ) ;", "try { if ( infoStream != null ) { message ( \"create compound file \" + compoundFileName ) ; } merger . createCompoundFile ( compoundFileName , merge . info ) ; success = true ; } catch ( IOException ioe ) { synchronized ( this ) { if ( merge . isAborted ( ) ) { } else { handleMergeException ( ioe , merge ) ; } } } catch ( Throwable t ) { handleMergeException ( t , merge ) ; } finally { if ( ! success ) { if ( infoStream != null ) { message ( \"hit exception creating compound file during merge\" ) ; } synchronized ( this ) { deleter . deleteFile ( compoundFileName ) ; deleter . deleteNewFiles ( merger . getMergedFiles ( merge . info ) ) ; } } } success = false ; synchronized ( this ) { deleter . deleteNewFiles ( merger . getMergedFiles ( merge . info ) ) ; if ( merge . isAborted ( ) ) { if ( infoStream != null ) { message ( \"abort merge after building CFS\" ) ; } deleter . deleteFile ( compoundFileName ) ; return 0 ; } } merge . info . setUseCompoundFile ( true ) ;", "EntityTypeBinder . create ( binder ( ) ) . bind ( DashboardDoc . DOCUMENT_TYPE , DashboardStoreImpl . class ) ; final Multibinder < ScheduledJobs > jobs = Multibinder . newSetBinder ( binder ( ) , ScheduledJobs . class ) ; jobs . addBinding ( ) . to ( DashboardJobs . class ) ;", "", "Log . info ( Log . FAC_TEST , \"Starting testLocalCopyWrapperWithSaveAndLcwClose\" ) ; MyHandler listener = new MyHandler ( ) ;", "table = new Table ( UnitValue . createPercentArray ( 3 ) ) . useAllAvailableWidth ( ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . GREEN , 1 ) ) ) . addCell ( new Cell ( 1 , 2 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . YELLOW , 3 ) ) ) . addCell ( new Cell ( 2 , 1 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . RED , 5 ) ) ) . addCell ( new Cell ( 2 , 1 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . GRAY , 7 ) ) ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . BLUE , 12 ) ) ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . CYAN , 1 ) ) ) ; table . setBorder ( new SolidBorder ( ColorConstants . GREEN , 2 ) ) ;", "if ( buildResult != null && buildResult . isWorseOrEqualTo ( Result . FAILURE ) && reports . length == 0 ) { }", "@ Inject protected GuestOSCategoryDao _guestOSCategoryDao ; @ Inject UsageEventDao _usageEventDao ;", "private static AssetTransferService assetTransferService ; private static CurrencyExchangeOfferFacade currencyExchangeOfferFacade ;", "case 1 : if ( schemeField . type == org . apache . thrift . protocol . TType . STRUCT ) { struct . new_part = new Partition ( ) ; struct . new_part . read ( iprot ) ; struct . setNew_partIsSet ( true ) ;", "import android . content . Context ; import android . text . format . DateFormat ; import android . text . format . DateUtils ; import android . annotation . TargetApi ; import android . os . Build ; import com . owncloud . android . MainApp ;", "final Channel channel , final Criterion criterion , final Action action ) { checkNotNull ( action , \"action\" ) ; return new ImmutableTopicPath ( namespace , id , group , channel , criterion , action , null , null ) ; } public static ImmutableTopicPath of ( final String namespace , final String id , final Group group , final Channel channel , final Criterion criterion , final SearchAction searchAction ) { requireNonNull ( namespace , PROP_NAME_NAMESPACE ) ; requireNonNull ( id , PROP_NAME_ID ) ; requireNonNull ( group , PROP_NAME_GROUP ) ; requireNonNull ( channel , PROP_NAME_CHANNEL ) ; requireNonNull ( criterion , PROP_NAME_CRITERION ) ; requireNonNull ( searchAction , PROP_NAME_ACTION ) ; return new ImmutableTopicPath ( namespace , id , group , channel , criterion , null , searchAction , null ) ;", "private static final Logger logger = LoggerFactory . getLogger ( AggDataFromCluster . class ) ; private static final String reportingHosts = \"reportingHosts\" ; private ConcurrentHashMap < String , HostDataHolder > reportingHostsWithLastData = new ConcurrentHashMap < String , HostDataHolder > ( ) ; private ConcurrentHashMap < String , AtomicLong > numericAttributes = new ConcurrentHashMap < String , AtomicLong > ( ) ; private ConcurrentHashMap < String , StringDataValue > stringAttributes = new ConcurrentHashMap < String , StringDataValue > ( ) ; private ConcurrentHashMap < String , ConcurrentHashMap < String , AtomicLong > > nestedMapAttributes = new ConcurrentHashMap < String , ConcurrentHashMap < String , AtomicLong > > ( ) ; private final ObjectReader objectReader ; private final ObjectWriter objectWriter ; public AggDataFromCluster ( TurbineDataMonitor < AggDataFromCluster > monitor , String type , String name ) { super ( monitor , type , name ) ; ObjectMapper objectMapper = new ObjectMapper ( ) ; objectReader = objectMapper . reader ( Map . class ) ; objectWriter = objectMapper . writer ( new MinimalPrettyPrinter ( ) ) ; } @ Override public HashMap < String , Long > getNumericAttributes ( ) { HashMap < String , Long > values = new HashMap < String , Long > ( ) ; for ( String attributeName : numericAttributes . keySet ( ) ) { AtomicLong nValue = numericAttributes . get ( attributeName ) ; if ( nValue != null ) { values . put ( attributeName , nValue . get ( ) ) ; } } return values ; } @ Override public HashMap < String , String > getNumericAttributes ( ) { HashMap < String , Long > values = new HashMap < String , Long > ( ) ; for ( String attributeName : numericAttributes . keySet ( ) ) { AtomicLong nValue = numericAttributes . get ( attributeName ) ; if ( nValue != null ) { values . put ( attributeName , nValue . get ( ) ; } }", "private void runTestCase ( String shaclPath , String dataPath , ExpectedResult expectedResult ) throws Exception { }", "* @ param newData byte array containing value bytes * @ param offset the offset in newData to start with for valye bytes * @ param length the number of bytes in the value * @ throws IndexOutOfBoundsException if offset or length are invalid", "import org . kframework . backend . java . kil . JavaBackendRuleData ; import org . kframework . compile . utils . ConfigurationStructureVisitor ; import org . kframework . compile . utils . MetaK ;", "if ( ! this . stuck )", "mkdirs ( target . getParentFile ( ) ) ; Util . copyFile ( f , writing ( target ) ) ;", "assertThat ( dolphin . findAllPresentationModelsByType ( DolphinConstants . LIST_ADD ) , hasSize ( 1 ) ) ; assertThat ( dolphin . findAllPresentationModelsByType ( DolphinConstants . LIST_DEL ) , empty ( ) ) ; List < ClientPresentationModel > changes = dolphin . findAllPresentationModelsByType ( DolphinConstants . LIST_SET ) ;", "expression . internal = true ; expression . analyze ( variables ) ; arguments . set ( argument , expression . cast ( variables ) ) ;", "", "case \"oncokbAccess\" : URL = oncokbURL + \"access\" ; break ; case \"oncokbSummary\" : URL = oncokbURL + \"summary.json\" ; break ; default : URL = \"\" ; break ; } if ( method . equals ( HttpMethod . GET ) && request . getQueryString ( ) != null ) { URL += \"?\" + request . getQueryString ( ) ; } return respProxy ( URL , method , body , response ) ;", "TidepoolEntry . newData ( ) ; LockScreenWallPaper . setIfEnabled ( ) ;", "import jenkins . model . Jenkins ; import jenkins . model . ArtifactManager ;", "* @ param context container for attributes * @ param hansenObjects initialization of hansen objects", "import teammates . test . pageobjects . StudentCourseDetailsPage ; import teammates . test . pageobjects . StudentFeedbackResultsPage ; import teammates . test . pageobjects . StudentHomePage ; import teammates . test . util . Priority ;", "import java . util . UUID ; import com . ning . billing . util . entity . Entity ;", "import com . microsoft . windowsazure . common . Configuration ; import com . microsoft . windowsazure . common . ServiceFilter ; import com . microsoft . windowsazure . common . ServiceFilter . Request ; import com . microsoft . windowsazure . common . ServiceFilter . Response ; import com . microsoft . windowsazure . services . ServiceException ; import com . microsoft . windowsazure . services . serviceBus . models . ListQueuesResult ; import com . microsoft . windowsazure . services . serviceBus . models . ListRulesResult ; import com . microsoft . windowsazure . services . serviceBus . models . ListSubscriptionsResult ; import com . microsoft . windowsazure . services . serviceBus . models . ListTopicsResult ; import com . microsoft . windowsazure . services . serviceBus . models . Message ; import com . microsoft . windowsazure . services . serviceBus . models . Queue ; import com . microsoft . windowsazure . services . serviceBus . models . ReceiveMessageOptions ; import com . microsoft . windowsazure . services . serviceBus . models . Rule ; import com . microsoft . windowsazure . services . serviceBus . models . Subscription ; import com . microsoft . windowsazure . services . serviceBus . models . Topic ;", "AttributeMetaData attr = entityType . getAttribute ( o . getAttr ( ) ) ; if ( isJunctionTableAttribute ( attr ) )", "ExecOutput execOutput = serviceClient . checkError ( callOutput ) ; receiver . accept ( execOutput . decompactEntries ( ) ) ;", "import org . apache . syncope . common . to . ResourceNameTO ;", "import cm . aptoide . pt . store . StoreTheme ; import cm . aptoide . pt . util . AppBarStateChangeListener ; import cm . aptoide . pt . app . DownloadModel ; import cm . aptoide . pt . networking . image . ImageLoader ; import cm . aptoide . pt . utils . AptoideUtils ;", "import org . molgenis . auth . SecurityPackage ; import org . mockito . Captor ; import org . mockito . Mock ; import org . mockito . MockitoAnnotations ;", "import io . sarl . lang . sarl . SarlAgent ;", "if ( ( referenceBinding = this . environment . askForType ( this , name , mod ) ) != null ) { }", "public Optional < CompoundNBT > getOutput ( Triple < Optional < CompoundNBT > , String , OperatorBase . SafeVariablesGetter > input ) throws EvaluationException { ValueTypeList . ValueList < ? , ? > value = input . getRight ( ) . getValue ( 0 , ValueTypes . LIST ) ; input . getLeft ( ) . ifPresent ( tag -> tag . put ( input . getMiddle ( ) , NbtHelpers . getListNbtInt ( value , NBT_COMPOUND_WITH_LIST_INT . getLocalizedNameFull ( ) ) ) ) ; return input . getLeft ( ) ; }", "multicastEvent ( new ApplicationStartingEvent ( this . springApplication , new String [ 0 ] ) ) ;", "onStatusMsg ( \"File Path: \" + dfuFile . filePath + \"\\n\" ) ; onStatusMsg ( \"File Size: \" + dfuFile . file . length + \" Bytes \\n\" ) ; onStatusMsg ( \"ElementAddress: 0x\" + Integer . toHexString ( dfuFile . elementStartAddress ) ) ; onStatusMsg ( \"\\tElementSize: \" + dfuFile . elementLength + \" Bytes\\n\" ) ; onStatusMsg ( \"Start writing file in blocks of \" + dfuFile . maxBlockSize + \" Bytes \\n\" ) ;", "public QueryFilterBuilder getBuilderPrototype ( ) { return QueryFilterBuilder . PROTOTYPE ; }", "", "public String getZoneId ( ) { return zoneId ; } public void setDynamicallyScalable ( boolean isDynamicallyScalable ) { this . isDynamicallyScalable = isDynamicallyScalable ; }", "SnapshotFilter snapshotFilter ( ) ; AggregateFactory < A > aggregateFactory ( ) ;", "* Put the dictionary value { \"0\" : hex ( FF FF FF FA ) , \"1\" : hex ( 01 02 03 ) , \"2\" : hex ( 25 , 29 , 43 ) } with each elementencoded in base 64", "@ NotNull ITask < Boolean > containsGroupAsync ( @ NotNull String group ) ;", "package org . projectforge . framework . persistence . history ; import de . micromata . genome . db . jpa . history . api . * ; import de . micromata . genome . db . jpa . history . entities . EntityOpType ; import de . micromata . genome . db . jpa . history . impl . HistoryEmgrAfterInsertedEventHandler ; import de . micromata . genome . db . jpa . history . impl . HistoryUpdateCopyFilterEventListener ; import de . micromata . genome . jpa . DbRecord ; import de . micromata . genome . jpa . events . EmgrAfterInsertedEvent ; import de . micromata . genome . jpa . events . EmgrUpdateCopyFilterEvent ; import de . micromata . genome . jpa . DbRecord ; import de . micromata . genome . jpa . events . EmgrUpdateCopyFilterEvent ; import de . micromata . genome . jpa . io . Serializable ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . Field ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Queue ; import java . util . function . Supplier ; import java . util . stream . Collectors ; import org . apache . commons . lang3 . ObjectUtils ; import org . projectforge . business . user . UserGroupCache ; import org . projectforge . framework . configuration . ApplicationContextProvider ; import org . projectforge . framework . persistence . api . BaseDO ; import org . projectforge . framework . util . Map ; import java . util . Queue ; import java . util . function", "districtFilter . setCaption ( I18nProperties . getCaption ( Captions . Campaign_district ) ) ; districtFilter . setWidth ( 200 , Unit . PIXELS ) ; districtFilter . setInputPrompt ( I18nProperties . getString ( Strings . promptAllDistricts ) ) ; if ( userRegion != null ) { districtFilter . addItems ( FacadeProvider . getDistrictFacade ( ) . getAllActiveByRegion ( userRegion . getUuid ( ) ) ) ; } districtFilter . addValueChangeListener ( e -> { final Object value = districtFilter . getValue ( ) ; updateFiltersBasedOnDistrict ( value ) ; dashboardDataProvider . setDistrict ( ( DistrictReferenceDto ) value ) ; dashboardView . refreshDashboard ( ) ; } ) ; addComponent ( districtFilter ) ; }", "Properties . create ( Material . IRON ) . sound ( SoundType . METAL ) . hardnessAndResistance ( 3 , 15 ) . notSolid ( ) ,", "login ( \"admin\" , mainTenant_1 , new String [ ] { tenantAdminAuthorityName , tenantAuthenticatedAuthorityName } ) ;", "import de . schildbach . wallet . digitalcoin . R ;", "import androidx . fragment . app . Fragment ; import androidx . appcompat . widget . SearchView ;", "import com . google . common . base . Optional ;", "while ( ! tlines . isEmpty ( ) ) { Vector < Vector < Segment > > nlines = new Vector < > ( ) ; }", "import cesiumlanguagewriter . Motion1 ; import cesiumlanguagewriter . Reference ;", "public static final String PV_CONNECTION_LAYER = \"pv_connection_layer\" ; public static final String HIDDEN_WIDGETS = \"hidden_widgets\" ;", "feedAutoSkipEnding , new HashSet < > ( Arrays . asList ( tagsString . split ( TAG_SEPARATOR ) ) ) ;", "{ processChildTB ( tb , hashTable1 , hashTable2 , hashTable1Indices , hashTable2Indices , compareIndx1 , compareIndx2 , true ) ; } else { if ( child1 . eoi ( ) ) { child1 . setEOI ( false ) ; childrenEOI [ 0 ] = true ; } }", "SCHEMA_REGISTRY_MOST_SPECIFIC_DEFAULT , ConfigDef . Importance . HIGH , RESPONSE_MEDIATYPE_DEFAULT_CONFIG_DOC ) . define ( KAFKASTORE_CONNECTION_URL_CONFIG , ConfigDef . Type . STRING , \"\" , ConfigDef . Importance . HIGH , KAFKASTORE_CONNECTION_URL_DOC )", "import org . molgenis . data . meta . model . Attribute ; import org . molgenis . data . meta . model . EntityType ;", "public void subscriptionCancelled ( final SubscriptionEvent cancelled ) throws AccountApiException , EntitlementUserApiException", "public void getStateJacobian ( final SpacecraftState state , final double [ ] [ ] dYdY0 ) { }", "private PermissionManager permissionManager ;", "seam . autowire ( ProjectDAO . class ) ,", "private static final int REQUEST_CODE_ADD_FILE = 1 ; private static final int REQUEST_CODE_ADD_FILE_PERMISSION = 2 ; private static final int REQUEST_CODE_CAPTURE_IMAGE = 3 ; private static final int REQUEST_CODE_PICK_CONTACT = 4 ; private static final int REQUEST_CODE_PICK_CONTACT_PERMISSION = 5 ;", "\"keys.keyData.azureKeyVaultId\" , \"keys.azureKeyVaultConfig.url\" ,", "private boolean validateAndHandleModifiedTrip ( Graph graph , TripUpdate tripUpdate , String feedId , ServiceDate serviceDate ) { Preconditions . checkNotNull ( graph ) ; Preconditions . checkNotNull ( tripUpdate ) ; Preconditions . checkNotNull ( serviceDate ) ; TripDescriptor tripDescriptor = tripUpdate . getTrip ( ) ; if ( ! tripDescriptor . hasTripId ( ) ) { LOG . warn ( \"No trip id found for MODIFIED trip, skipping.\" ) ; return false ; } String tripId = tripDescriptor . getTripId ( ) ; Trip trip = getTripForTripId ( tripId ) ; if ( trip == null ) { LOG . warn ( \"Graph does not contain trip id of MODIFIED trip, skipping.\" ) ; return false ; } if ( ! tripDescriptor . hasStartDate ( ) ) { LOG . warn ( \"MODIFIED trip doesn't have a start date in TripDescriptor, skipping.\" ) ; return false ; } else { Set < AgencyAndId > serviceIds = graph . getCalendarService ( ) . getServiceIdsOnDate ( serviceDate ) ; if ( ! serviceIds . contains ( trip . getServiceId ( ) ) ) { LOG . warn ( \"MODIFIED trip has a service date that is not served by trip, skipping.\" ) ; return false ; } } if ( tripUpdate . getStopTimeUpdateCount ( ) < 2 ) { LOG . warn ( \"MODIFIED trip has less then two stops, skipping.\" ) ; return false ; } List < Stop > stops = checkNewStopTimeUpdatesAndFindStops ( tripUpdate ) ; if ( stops . size ( ) == stops . size ( ) , \"number of stop should match the number of stop time updates\" ) ; String tripId = tripUpdate . getStopTimeUpdateCount ( ) ; if ( tripUpdate . getStopTimeUpdateCount ( ) == stops . size ( ) ) { LOG . warn ( \"MODIFIED trip has less then two stops,", "import static org . junit . Assert . * ; import static org . mockito . Matchers . isA ; import static org . mockito . Mockito . mock ; import static org . mockito . Mockito . spy ; import static org . mockito . Mockito . times ; import static org . mockito . Mockito . verify ; import static org . mockito . Mockito . when ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ;", "", "", "import com . quickblox . q_municate_db . models . Dialog ; import com . quickblox . q_municate_db . models . DialogNotification ;", "import java . io . IOException ; import java . io . InputStream ; import java . io . Serializable ;", "private FloorRenderer floorRenderer ; private static float storeX = 0 ; private static float storeY = 0 ;", "", "AbstractNormalSchema schema = null ; boolean readOnlyVirSchema = false ;", "", "private static final Logger LOG = LoggerFactory . getLogger ( Constants . LOGGER_TYPE ) ;", "private static co . cask . common . cli . CommandSet < Command > getPluginCommandSet ( Injector injector ) { List < Command > commands = ImmutableList . of ( injector . getInstance ( DeleteAutomatorTypeResourcesCommand . class ) , injector . getInstance ( DeleteProviderTypeResourcesCommand . class ) , injector . getInstance ( GetAutomatorTypeCommand . class ) , injector . getInstance ( GetProviderTypeCommand . class ) , injector . getInstance ( ListAllAutomatorTypesCommand . class ) , injector . getInstance ( ListAllProviderTypesCommand . class ) , injector . getInstance ( ListAutomatorTypeResourcesCommand . class ) , injector . getInstance ( ListProviderTypeResourcesCommand . class ) , injector . getInstance ( RecallAutomatorTypeResourcesCommand . class ) , injector . getInstance ( RecallProviderTypeResourcesCommand . class ) , injector . getInstance ( StageAutomatorTypeResourcesCommand . class ) , injector . getInstance ( SyncPluginCommand . class ) ) ; return new co . cask . common . cli . CommandSet < Command > ( commands ) ; } private static co . cask . common . cli . CommandSet < Command > getTenantCommandSet ( Injector injector ) { List < Command > commands = ImmutableList . of ( injector . getInstance ( DeleteTenantCommand . class ) , injector . getInstance ( GetTenantCommand . class ) , injector . getInstance ( ListTenantsCommand . class ) , injector . getInstance ( ListProvisionersCommand . class ) ) ; return new co . cask . common . cli . CommandSet < Command > ( commands ) ; }", "private final JPanel lineTypePanel = new JPanel ( ) ; private JRadioButton lineInputAngleSnapButton ;", "prop . setComment ( \"Disable Ilmenite Ore Gen on Asteroids.\" ) ; prop . setLanguageKey ( \"gc.configgui.disable_ilmenite_gen_asteroids\" ) ;", "import android . view . View ; import android . view . ViewGroup ; import com . xtremelabs . robolectric . R ; import com . xtremelabs . robolectric . Robolectric ; import com . xtremelabs . robolectric . TestRunners ;", "ObjectProvider < Callback > callbacks , ObjectProvider < FlywayCallback > flywayCallbacks ) { FluentConfiguration configuration = new FluentConfiguration ( resourceLoader . getClassLoader ( ) ) ; DataSource dataSourceToMigrate = configureDataSource ( configuration , properties , dataSourceProperties , flywayDataSource . getIfAvailable ( ) , dataSource . getIfAvailable ( ) ) ; checkLocationExists ( dataSourceToMigrate , properties , resourceLoader ) ; configureProperties ( configuration , properties ) ; List < Callback > orderedCallbacks = callbacks . orderedStream ( ) . collect ( Collectors . toList ( ) ) ; configureCallbacks ( configuration , orderedCallbacks ) ; fluentConfigurationCustomizers . orderedStream ( ) . forEach ( ( customizer ) -> customizer . customize ( configuration ) ) ;", "", "Logger . v ( TAG , \"Id token is returned, parsing id token.\" ) ; IdToken tokenParsed = new IdToken ( rawIdToken ) ; tenantId = tokenParsed . getTenantId ( ) ; userinfo = new UserInfo ( tokenParsed ) ;", "import org . hibernate . Session ; import org . jboss . seam . Component ; import org . jboss . seam . ScopeType ; import org . jboss . seam . annotations . Destroy ; import org . jboss . seam . annotations . Name ; import org . jboss . seam . annotations . Observer ; import org . jboss . seam . annotations . Scope ; import org . jboss . seam . annotations . Synchronized ; import org . jboss . seam . core . Events ; import org . jboss . seam . log . Log ; import org . jboss . seam . log . Logging ; import org . zanata . ZanataInit ; import org . zanata . action . ProjectHome ; import org . zanata . action . ProjectIterationHome ; import org . zanata . common . EntityStatus ; import org . zanata . common . LocaleId ; import org . zanata . model . HIterationProject ; import org . zanata . model . HProjectIteration ; import org . zanata . security . ZanataIdentity ;", "", "import org . apache . syncope . common . types . ClientExceptionType ; import org . apache . syncope . common . types . ConnConfProperty ; import org . apache . syncope . common . types . Preference ; import org . apache . syncope . common . types . RESTHeaders ; import org . apache . syncope . common . types . ResourceAssociationActionType ; import org . apache . syncope . common . types . SchemaType ; import org . apache . syncope . common . util . CollectionWrapper ;", "final var encMethod = findAlgorithmFamily ( sets , encryptionSecretMethod , EncryptionMethod . class ) ; final var encSecretBytes = getSecretBytes ( encryptionSecret , secretsAreBase64Encoded ) ; jwtAuthenticator . setEncryptionConfiguration ( new SecretEncryptionConfiguration ( encSecretBytes , encAlg , encMethod ) ) ;", "import java . io . OutputStream ; import java . util . Arrays ;", "jj_la1 [ 100 ] = jj_gen ; break label_18 ;", "jj_la1 [ 221 ] = jj_gen ;", "class IngestModulesConfigWizardPanel extends ShortcutWizardDescriptorPanel { @ NbBundle . Messages ( \"IngestModulesConfigWizardPanel.name.text=Configure Ingest Modules\" )", "if ( null != modelPackage ) { config . additionalProperties ( ) . put ( MODEL_PACKAGE_PARAM , modelPackage ) ; } if ( null != apiPackage ) { config . additionalProperties ( ) . put ( API_PACKAGE_PARAM , apiPackage ) ; } if ( null != invokerPackage ) { config . additionalProperties ( ) . put ( INVOKER_PACKAGE_PARAM , invokerPackage ) ; } ClientOpts clientOpts = new ClientOpts ( ) ; if ( configOptions != null ) { for ( CliOption langCliOption : config . cliOptions ( ) ) { if ( configOptions . containsKey ( langCliOption . getOpt ( ) ) ) { config . additionalProperties ( ) . put ( langCliOption . getOpt ( ) , configOptions . get ( langCliOption . getOpt ( ) ) ) ; } } } else { throw new RuntimeException ( \"Unable to read configuration file\" ) ; } } ClientOptInput input = new ClientOptInput ( ) . opts ( clientOpts ) . swagger ( swagger ) ;", "private EventManager eventManager ; Engine ( final RecordReader recordReader , final List < RecordFilter > filterChain , final RecordMapper recordMapper ,", "import io . druid . server . coordinator . helper . DruidCoordinatorBalancer ; import io . druid . server . coordinator . helper . DruidCoordinatorCleanup ; import io . druid . server . coordinator . helper . DruidCoordinatorHelper ; import io . druid . server . coordinator . helper . DruidCoordinatorLogger ; import io . druid . server . coordinator . helper . DruidCoordinatorRuleRunner ; import io . druid . server . coordinator . helper . DruidCoordinatorSegmentInfoLoader ; import io . druid . server . coordinator . helper . DruidCoordinatorSegmentMerger ; import io . druid . server . coordinator . rules . LoadRule ; import io . druid . server . coordinator . rules . Rule ;", "", "( ( JdbcConnection ) testConn ) . changeUser ( \"bug18869381user1\" , \"LongLongLongLongLongLongLongLongLongLongLongLongPwd1\" ) ; ( ( JdbcConnection ) testConn ) . changeUser ( \"bug18869381user1\" , \"LongLongLongLongLongLongLongLongLongLongLongLongPwd1\" ) ;", "import java . lang . management . ManagementFactory ; import java . util . Objects ; import java . util . concurrent . CompletableFuture ; import java . util . concurrent . ExecutionException ;", "", "if ( this . appView != null && this . appView . pluginManager != null ) { this . appView . pluginManager . addService ( serviceType , className ) ; }", "annotationsGet = cellBaseClient37 . getVariantClient ( ) . getAnnotationByVariantIds ( idString , new QueryOptions ( \"numThreads\" , 4 ) ) ;", "@ Override public void write ( OutputStream out ) throws XMLStreamException , OwsExceptionReport { init ( out ) ; }", "private int returnPort = 6666 ; private int forwarderPort = 5556 ; private int vsdmSenderPort = 6666 ;", "this . sessionFile = sessionfile ; this . accountClient = new AccountClient ( okHttpClient ) ;", "", "protected AbstractContentNode < ? extends Content > defaultVisit ( SleuthkitVisitableItem di ) { throw new UnsupportedOperationException ( NbBundle . getMessage ( this . getClass ( ) , \"AbstractContentChildren.CreateTSKNodeVisitor.exception.noNodeMsg\" ) ) ; }", "private CalibrationManager calibrationManager ;", "import io . github . robwin . markup . builder . MarkupDocBuilder ; import io . github . robwin . markup . builder . MarkupTableColumn ;", "public static < K , N , V > SliceQuery < K , N , V > createSliceQuery ( KeyspaceOperator ko , Serializer < K > keySerializer , Serializer < N > nameSerializer , Serializer < V > valueSerializer ) { return new ThriftSliceQuery < K , N , V > ( ko , keySerializer , nameSerializer , valueSerializer ) ; }", "context = RuntimeEnvironment . application ; testPackageName = context . getPackageName ( ) ;", "", "", "import com . dotcms . concurrent . DotSubmitter ;", "import org . heigit . bigspatialdata . oshdb . util . geometry . helpers . TimestampParser ;", "@ Override", "* Get dictionary of complex type with { \"0\" : { \"integer\" : 1 , \"string\" : \"2\" } , \"1\" : { \"integer\" : 3 , \"string\" : \"4\" } , \"2\" : { \"integer\" : 5 , \"string\" : \"6\" } }", "", "@ Nonnull public EndpointRequest select ( @ Nonnull final String value ) { addSelectOption ( value ) ; return this ; }", "StringCondition sCond = ( StringCondition ) cond ; futures . add ( session . executeAsync ( insertConditionString . bind ( sCond . getTenantId ( ) , sCond . getTriggerId ( ) , sCond . getTriggerMode ( ) . name ( ) , sCond . getConditionSetSize ( ) ,", "import net . floodlightcontroller . topology . ITopologyService ;", "RecipeUtil . addRecipe ( new ItemStack ( GCItems . battery , 2 , 100 ) , new Object [ ] { \" T \" , \"TRT\" , \"TCT\" , 'T' , \"compressedTin\" , 'R' , Items . REDSTONE , 'C' , Items . COAL } ) ;", "import io . fundrequest . common . infrastructure . exception . ResourceNotFoundException ; import io . fundrequest . common . infrastructure . mapping . Mappers ;", "private static final FocusImpl focusImpl = FocusImpl . getFocusImplForPanel ( ) ; final Element tabs ;", "import org . eevolution . api . BOMComponentType ; import org . eevolution . api . CostCollectorType ; import org . eevolution . api . IPPOrderDAO ;", "setState ( 614 ) ;", "final SQLiteQueryScan scan1 = new SQLiteQueryScan ( \"select * from \" + testtableKeys . get ( 0 ) . toString ( \"sqlite\" ) , tableSchema ) ; final SQLiteQueryScan scan2 = new SQLiteQueryScan ( \"select * from \" + testtableKeys . get ( 0 ) . toString ( \"sqlite\" ) , tableSchema ) ;", "private final Collection < String > exc = new LinkedList < > ( ) ;", "import com . github . fge . jsonschema . cfg . ValidationConfiguration ; import com . github . fge . jsonschema . cfg . ValidationConfigurationBuilder ; import com . github . fge . jsonschema . core . report . ListReportProvider ; import com . github . fge . jsonschema . core . report . LogLevel ; import com . github . fge . jsonschema . library . DraftV4Library ; import com . github . fge . jsonschema . library . LibraryBuilder ; import com . github . fge . jsonschema . main . JsonSchemaFactory ;", "import com . itextpdf . kernel . colors . ColorConstants ;", "final WhoisResources whoisResources = createResource ( AUDIENCE , \"whois/test/aut-num/AS102/versions/1\" ) . request ( MediaType . APPLICATION_JSON )", "import stroom . index . shared . IndexVolumeGroup ; import stroom . index . shared . IndexVolume . VolumeUseState ;", "* Send a post request with header values \"scenario\" : \"valid\" , \"value\" : \"2010-01-01T12:34:56Z\" or \"scenario\" : \"min\" , \"value\" : \"0001-01-01T00:00:00Z\"", "new TransactionHandler ( this , service , transaction , idGenMode , allowFeatureReferencesToDatastore ) . doTransaction ( response , queryCRS ) ;", "import org . hive2hive . processes . implementations . context . DeleteFileProcessContext ; import org . hive2hive . processes . implementations . context . DownloadFileContext ;", "getDescriptor ( ) . getMessageTypes ( ) . get ( 43 ) ;", "abort ( e , e , mdTxnCtx ) ; throw e ;", "private final DateTimeFormatter dateTimeFormatter = AbstractDataReaderSun . DATE_TIME_FORMATTER ;", "public LinkingCostMatrixCreator ( ArrayList < TrackNode < K > > t0 , ArrayList < TrackNode < K > > t1 , Settings settings ) { }", "import com . flightstats . hub . clients . callback . CallbackClientFactory ; import com . flightstats . hub . clients . callback . CallbackResourceClient ;", "@ Override public ContractDefinition getUserTaskContract ( final long userTaskId ) throws UserTaskNotFoundException { final TenantServiceAccessor tenantAccessor = getTenantAccessor ( ) ; final ActivityInstanceService activityInstanceService = tenantAccessor . getActivityInstanceService ( ) ; try { final SHumanTaskInstance taskInstance = activityInstanceService . getHumanTaskInstance ( userTaskId ) ; if ( ! ( taskInstance instanceof SUserTaskInstance ) ) { throw new UserTaskNotFoundException ( \"Impossible to find a user task with id: \" + userTaskId ) ; } final SProcessDefinition processDefinition = getTenantAccessor ( ) . getProcessDefinitionService ( ) . getProcessDefinition ( taskInstance . getProcessDefinitionId ( ) ) ; final SUserTaskDefinition userTask = ( SUserTaskDefinition ) processDefinition . getProcessContainer ( ) . getFlowNode ( taskInstance . getFlowNodeDefinitionId ( ) ) ; return ModelConvertor . toContract ( userTask . getContract ( ) ) ; } catch ( final SActivityReadException sare ) { throw new UserTaskNotFoundException ( sare . getMessage ( ) ) ; } catch ( final SActivityInstanceNotFoundException sainfe ) { throw new UserTaskNotFoundException ( sainfe . getMessage ( ) ) ; } catch ( final SProcessDefinitionReadException spdnfe ) { throw new UserTaskNotFoundException ( spdnfe . getMessage ( ) ) ; } catch ( final SProcessDefinitionReadException spdre ) { throw new UserTaskNotFoundException ( spdre . getMessage ( ) ) ; } } @ Override public void executeUserTask ( final long flownodeInstanceId , final Map < String , Object > inputs ) throws FlowNodeExecutionException , ContractViolationException , UserTaskNotFoundException { throw new UserTaskNotFoundException ( sainfe . getMessage ( ) ) ; } catch ( final SProcessDefinitionNotFoundException spdnfe ) { throw new UserTaskNotFoundException ( spdnfe . getMessage ( ) ) ; } catch ( final SProcessDefinitionReadException spdre )", "static String getSqlAddColumn ( EntityMetaData entityMeta , Attribute attr )", "setState ( 600 ) ;", "", "private volatile CookieResolver theResolver = null ; private ConcurrentMap < App , CookieResolver > resolvers = new ConcurrentHashMap < > ( ) ;", "* Test explicitly required string . Please put a valid string - wrapper with 'value' = null and the client library should throw before the request is sent .", "import com . netflix . conductor . core . utils . QueueUtils ;", "import org . voltdb . PartitionDRGateway ;", "case EVENT_QUICK_MENU_SHOWN : case EVENT_QUICK_MENU_CLOSED : case EVENT_QUICK_MENU_ITEM_PRESSED : case EVENT_SELFTEST_DONE :", "import java . util . HashSet ;", "private boolean jj_3R_884 ( ) { if ( jj_scan_token ( RECORD ) ) return true ; return false ; } private boolean jj_3R_98 ( ) { }", "private void startScreenshotService ( ) { }", "public Crouton setCroutonManager ( final Manager manager ) { this . manager = manager ; return this ; } Manager getCroutonManager ( ) { if ( null == manager ) { manager = Manager . getInstance ( ) ; } return manager ; } public Crouton setConfiguration ( final Configuration configuration ) { if ( configuration != null ) { this . configuration = configuration ; } return this ; }", "if ( timeoutInMilliSecond > MAX_POLL_TIMEOUT_MS ) { throw new ApplicationException ( ApplicationException . Code . INVALID_INPUT , \"Long Poll Timeout value cannot be more than 5 seconds\" ) ; }", "BottomBuilder builder = new BottomBuilder ( getParentActivity ( ) ) ; builder . addTitle ( urlFinal ) ; builder . addItems ( new String [ ] { LocaleController . getString ( \"Open\" , R . string . Open ) , LocaleController . getString ( \"Copy\" , R . string . Copy ) , LocaleController . getString ( \"ShareQRCode\" , R . string . ShareQRCode ) } , new int [ ] { R . drawable . baseline_open_in_browser_24 , R . drawable . baseline_content_copy_24 , R . drawable . wallet_qr } , ( which , text , __ ) -> { if ( which == 0 || which == 2 ) { if ( which == 0 ) { if ( AndroidUtilities . shouldShowUrlInAlert ( urlFinal ) ) { AlertsCreator . showOpenUrlAlert ( ChatActivity . this , urlFinal , true , true , false ) ; } else { Browser . openUrl ( getParentActivity ( ) , urlFinal , inlineReturn == 0 , false ) ; } } else { ProxyUtil . showQrDialog ( getParentActivity ( ) , urlFinal ) ; } } else if ( which == 1 ) { String url1 = urlFinal ; boolean tel = false ; if ( url1 . startsWith ( \"mailto:\" ) ) { url1 = url1 . substring ( 7 ) ; } else if ( url1 . startsWith ( \"tel:\" ) ) { url1 = url1 . substring ( 4 ) ; tel = true ; } AndroidUtilities . addToClipboard ( url1 ) ; AlertUtil . showToast ( LocaleController . getString ( \"LinkCopied\" , R . string . LinkCopied ) ) ; } } else { undoView . showWithAction ( 0 , UndoView . ACTION_PHONE_COPIED , null ) ; } else { undoView . showWithAction ( 0 , UndoView . ACTION_", "Set < Integer > edanrs_EN = new HashSet < Integer > ( ) ; edanrs_EN . add ( 1 ) ; edanrs_EN . add ( 5 ) ; edanrs_DE . add ( 6 ) ;", "KoreUtils utils = new KoreUtils ( filename , \"C\" , \"C\" , false , kem ) ;", "setState ( 580 ) ; _errHandler . sync ( this ) ;", "refreshTypeDecoration ( ) ;", "super ( LOCATION_TYPE , aList , new Factory ( ) ) ;", "import org . elasticsearch . client . RequestOptions ;", "private static final String GET_GLOBAL_METHOD_DESCRIPTOR = Type . getMethodDescriptor ( OBJECT_TYPE ) ; private static final String GET_CLASS_METHOD_DESCRIPTOR = Type . getMethodDescriptor ( CLASS_TYPE ) ; private static final String EXPORT_RETURN_VALUE_METHOD_DESCRIPTOR = Type . getMethodDescriptor ( OBJECT_TYPE , OBJECT_TYPE ) ; private static final String GET_CONVERTER_METHOD_DESCRIPTOR = Type . getMethodDescriptor ( METHOD_HANDLE_TYPE , CLASS_TYPE ) ; private static final String TO_CHAR_PRIMITIVE_METHOD_DESCRIPTOR = Type . getMethodDescriptor ( Type . CHAR_TYPE , OBJECT_TYPE ) ; private static final String TO_STRING_METHOD_DESCRIPTOR = Type . getMethodDescriptor ( STRING_TYPE , OBJECT_TYPE ) ;", "", "else if ( this . runtimeState . isMarked ( ) && VmState . SHUTTING_DOWN . equals ( this . getRuntimeState ( ) ) ) { LOG . debug ( \"Ignoring events for state transition because the instance is marked as pending: \" + oldState + \" to \" + this . getRuntimeState ( ) ) ; } else if ( ! this . runtimeState . isMarked ( ) ) { if ( ( oldState . ordinal ( ) <= VmState . RUNNING . ordinal ( ) ) && ( newState . ordinal ( ) > VmState . RUNNING . ordinal ( ) ) ) { this . runtimeState . set ( newState , false ) ; } }", "beforeEvent . getForwardTargetRouteParameters ( ) ) ) { return Optional . of ( forward ( event , beforeEvent ) ) ;", "import org . voltdb . importer . formatter . FormatterBuilder ;", "if ( args . length ( ) == 1 ) { this . createBranchUniversalObject ( args . getJSONObject ( 0 ) , callbackContext ) ; return true ; } else { callbackContext . error ( String . format ( \"Parameter mismatched. 1 is required but %d is given\" , args . length ( ) ) ) ; return false ; }", "sysWorkStatus = new ModbusReadLongChannel ( \"SysWorkStatus\" , this ) . label ( 1 , \"Initial\" ) . label ( 2 , \"Fault\" ) . label ( 4 , \"Stop\" ) . label ( 8 , \"Hot Standby\" ) . label ( 16 , \"Monitoring\" ) . label ( 32 , \"Standby\" ) . label ( 64 , \"Operation\" ) . label ( 128 , \"Debug\" ) ) ,", "domainMap . put ( Constants . GOOGLE_PLUS , \"googleapis.com\" ) ; domainMap . put ( Constants . INSTAGRAM , \"api.instagram.com\" ) ;", "setState ( 841 ) ;", "} catch ( TskCoreException | EamDbException | NoCurrentCaseException | CorrelationAttributeNormalizationException ex ) { logger . log ( Level . SEVERE , \"Error making correlation attribute.\" , ex ) ;", "import org . springframework . security . authentication . TestingAuthenticationToken ;", "", "setAngularMomentumTrajectoryForFootsteps ( footstepIndex , WalkingTrajectoryType . TRANSFER ) ;", "", "protected MeshContainer addSlave ( String clusterName , String nodeName , String dataPathPostfix , boolean clearFolders , int writeQuorum ) { MeshContainer server = prepareSlave ( clusterName , nodeName , dataPathPostfix , clearFolders , writeQuorum ) ; server . start ( ) ; return server ; } protected MeshDockerServer prepareSlave ( String clusterName , String nodeName , String dataPathPostfix , boolean clearFolders , int writeQuorum ) { MeshDockerServer server = new MeshContainer ( MeshContainer . LOCAL_PROVIDER )", "tb . navigateTab ( focusedTabIndex , newTabIndex ) ; focusedTabIndex = newTabIndex ; if ( focusedTab != null ) { focusedTab = tb . getTab ( focusedTabIndex ) ; focusedTab . focus ( ) ; }", "protected void setStatusOfStagesAndRequests ( ) { executeInTransaction ( new Runnable ( ) { @ Override public void run ( ) { try { RequestDAO requestDAO = injector . getInstance ( RequestDAO . class ) ; StageFactory stageFactory = injector . getInstance ( StageFactory . class ) ; EntityManager em = getEntityManagerProvider ( ) . get ( ) ; List < RequestEntity > requestEntities = requestDAO . findAll ( ) ; for ( RequestEntity requestEntity : requestEntities ) { Collection < StageEntity > stageEntities = requestEntity . getStages ( ) ; List < HostRoleStatus > stageDisplayStatuses = new ArrayList < > ( ) ; List < HostRoleStatus > stageStatuses = new ArrayList < > ( ) ; for ( StageEntity stageEntity : stageEntities ) { Stage stage = stageFactory . createExisting ( stageEntity ) ; List < HostRoleCommand > hostRoleCommands = stage . getOrderedHostRoleCommands ( ) ; Map < HostRoleStatus , Integer > statusCount = CalculatedStatus . calculateStatusCountsForTasks ( hostRoleCommands ) ; HostRoleStatus stageDisplayStatus = CalculatedStatus . calculateSummaryDisplayStatus ( statusCount , hostRoleCommands . size ( ) , stage . isSkippable ( ) ) ; HostRoleStatus stageDisplayStatus = CalculatedStatus . calculateSummaryDisplayStatus ( statusCount , hostRoleCommands . size ( ) , stage . isSkippable ( ) ) ; HostRoleStatus stageStatus = CalculatedStatus . calculateStageStatus ( hostRoleCommands , statusCount , stage . getSuccessFactors ( ) , stage . isSkippable ( ) ) ; stage . setStatus ( stageStatus ) ; stageDisplayStatus . setDisplayStatus ( stageDisplayStatus ) ; stageDisplayStatus . add ( stageDisplayStatus ) ; stageDisplayStatus . setDisplayStatus ( stageDisplayStatus ) ; stageDisplayStatuses . add ( stageDisplayStatus ) ; stageDisplayStatuses . add ( stageDisplayStatus ) ; stageDisplayStatus . setDisplayStatus ( stageDisplay", "import java . math . BigInteger ; import java . sql . Connection ; import java . sql . Date ; import java . sql . PreparedStatement ; import java . sql . ResultSet ; import java . sql . SQLException ; import java . sql . Statement ; import java . sql . Timestamp ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . HashMap ; import java . util . List ; import java . util . Map ;", "update . commit ( ) ; indexer . index ( db , change ) ;", "@ Override public void createHistoricActivityInstance ( ActivityInstance activityInstance ) { if ( isHistoryLevelAtLeast ( HistoryLevel . ACTIVITY , activityInstance . getProcessDefinitionId ( ) ) ) { if ( activityInstance . getExecutionId ( ) != null ) { Map < String , String > data = new HashMap < > ( ) ; putIfNotNull ( data , HistoryJsonConstants . RUNTIME_ACTIVITY_INSTANCE_ID , activityInstance . getId ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . PROCESS_DEFINITION_ID , activityInstance . getProcessDefinitionId ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . PROCESS_INSTANCE_ID , activityInstance . getProcessInstanceId ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . EXECUTION_ID , activityInstance . getExecutionId ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . ACTIVITY_ID , activityInstance . getActivityId ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . ACTIVITY_NAME , activityInstance . getActivityName ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . ACTIVITY_TYPE , activityInstance . getActivityType ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . START_TIME , activityInstance . getStartTime ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . END_TIME , activityInstance . getEndTime ( ) ) ; putIfNotNull ( data , HistoryJsonConstants . TENANT_ID , activityInstance . getTenantId ( ) ) ; getAsyncHistorySession ( ) . addHistoricData ( getJobServiceConfiguration ( ) , HistoryJsonConstants . TYPE_ACTIVITY_FULL , data ) ; } } } public void createHistoricUserTaskLogEntry ( HistoricTaskLogEntryBuilder taskLogEntryBuilder ) { if ( processEngineConfiguration . isEnableHistoricTaskLogging ( ) ) { Map < String , String > data = new HashMap < > ( ) ;", "installAnalytics , limit , socialRepository , \"anyString\" , appCoinsManager , ironSourceInterstitialAdExperiment , ironSourceAdRepository ) ;", "session . setMaxInactiveInterval ( configurationController . getMaxInactiveSessionInterval ( ) ) ;", "public void updateDocument ( Term t , final Document doc ) throws IOException { if ( doDocValues ) { randomPerDocFieldValues ( r , doc ) ; } if ( r . nextInt ( 5 ) == 3 ) { w . updateDocuments ( t , new Iterable < Document > ( ) { public Iterator < Document > iterator ( ) { return new Iterator < Document > ( ) { boolean done ; public boolean hasNext ( ) { return ! done ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } public Document next ( ) { if ( done ) { throw new IllegalStateException ( ) ; } done = true ; return doc ; } } ; } } ) ; } else { w . updateDocument ( t , doc ) ; } }", "setState ( 622 ) ;", "import com . alibaba . sdk . android . oss . model . ListBucketsRequest ; import com . alibaba . sdk . android . oss . model . ListBucketsResult ; import com . alibaba . sdk . android . oss . model . ListMultipartUploadsRequest ; import com . alibaba . sdk . android . oss . model . ListMultipartUploadsResult ;", "", "import org . adempiere . uom . api . UOMConversionContext ;", "public BatchListener < WriteEvent > [ ] getBatchSuccessListeners ( ) { return successListeners . toArray ( new BatchListener [ successListeners . size ( ) ] ) ; } @ Override public BatchFailureListener < WriteEvent > [ ] getBatchFailureListeners ( ) { return failureListeners . toArray ( new BatchFailureListener [ failureListeners . size ( ) ] ) ; } @ Override public void setBatchSuccessListeners ( BatchListener < WriteEvent > ... listeners ) { requireNotInitialized ( ) ; successListeners . clear ( ) ; if ( listeners != null ) { for ( BatchListener < WriteEvent > listener : listeners ) { successListeners . add ( listener ) ; } } } @ Override public void setBatchFailureListeners ( BatchFailureListener < WriteEvent > ... listeners ) { requireNotInitialized ( ) ; failureListeners . clear ( ) ; if ( listeners != null ) { for ( BatchFailureListener < WriteEvent > listener : listeners ) { failureListeners . add ( listener ) ; } } } @ Override public void flushAsync ( ) { flush ( false ) ; } @ Override public void flushAndWait ( ) { flush ( true ) ; } private void flush ( boolean waitForCompletion ) { }", "public static final String INDEX_REFRESH_INTERVAL = \"index.refresh_interval\" ;", "final Provider < NewPropertyPresenter > newPropertyPresenter , final ClientDispatchAsync dispatcher ) { super ( eventBus , new DataGridViewImpl < > ( true ) ) ;", "\"@Store(type=\\\"testStoreContainingInMemoryTable\\\", @Cache(size=\\\"10\\\"))\\n\" +", "private static void createInitialDataIfNeeded ( ) { final Realm realm = Realm . getDefaultInstance ( ) ; try { if ( realm . where ( TaskListList . class ) . count ( ) != 0 ) { return ; } realm . executeTransaction ( new Realm . Transaction ( ) { @ Override public void execute ( Realm realm ) { if ( realm . where ( TaskListList . class ) . count ( ) == 0 ) { final TaskListList taskListList = realm . createObject ( TaskListList . class , 0 ) ; final TaskList taskList = new TaskList ( ) ; taskList . setId ( RealmTasksApplication . DEFAULT_LIST_ID ) ; taskList . setText ( RealmTasksApplication . DEFAULT_LIST_NAME ) ; taskListList . getItems ( ) . add ( taskList ) ; } } } ) ; } finally { realm . close ( ) ; } } @ Override public void onSuccess ( User user ) { showProgress ( false ) ; loginComplete ( user ) ; } @ Override public void onError ( ObjectServerError error ) { showProgress ( false ) ; String errorMsg ; switch ( error . getErrorCode ( ) ) { case UNKNOWN_ACCOUNT : errorMsg = \"Account does not exists.\" ; break ; case INVALID_CREDENTIALS : errorMsg = \"The provided credentials are invalid!\" ; break ; default : errorMsg = error . toString ( ) ; } Toast . makeText ( SignInActivity . this , errorMsg , Toast . LENGTH_LONG ) . show ( ) ; }", "fullMetadataValueList . addAll ( handleItemRelationship ( context , item , entityType , relationship , enableVirtualMetadata ) ) ;", "private static DefaultTelephone telephone ( final String number , final String type ) { final DefaultTelephone tel = new DefaultTelephone ( ) ; tel . setNumber ( number ) ; tel . setNumberType ( UnsupportedCodeList . valueOf ( type ) ) ; return tel ; }", "", "MainCommand . getInstance ( ) . help . execute ( player , args , null , null ) ; return CompletableFuture . completedFuture ( false ) ;", "import com . cloud . utils . db . DB ; import com . cloud . utils . db . Filter ; import com . cloud . utils . db . GlobalLock ; import com . cloud . utils . db . SearchBuilder ; import com . cloud . utils . db . SearchCriteria ; import com . cloud . utils . db . Transaction ; import com . cloud . utils . db . SearchCriteria . Func ; import com . cloud . utils . db . * ;", "baseDir , generatedDir , null , false , true ) ;", "if ( region == null ) { return 0 ; }", "public final static int EMPTY = Fluid . BUCKET_VOLUME + 1 ; private static boolean isTELoaded = CompatibilityManager . isTELoaded ( ) ; private final ItemStack containerStack = new ItemStack ( this , 1 , 1 ) ; private final ItemStack emptyContainerStack = this . getContainerItem ( this . containerStack ) ;", "private void testConnection ( final TestConnection command ) { final ActorRef origin = getSender ( ) ; connection = command . getConnection ( ) ; mappingContexts = command . getMappingContexts ( ) ; askClientActor ( \"test\" , command , origin , response -> { origin . tell ( TestConnectionResponse . of ( command . getConnectionId ( ) , response . toString ( ) , command . getDittoHeaders ( ) ) , getSelf ( ) ) ; } ) ; final ActorRef parent = getContext ( ) . getParent ( ) ; getContext ( ) . getSystem ( ) . scheduler ( ) . scheduleOnce ( FiniteDuration . apply ( 5 , TimeUnit . SECONDS ) , parent , PoisonPill . getInstance ( ) , getContext ( ) . dispatcher ( ) , getSelf ( ) ) ; } private boolean isAuthorized ( final Signal < ? > signal , final AuthorizationContext authorizationContext ) { final Set < String > authorizedReadSubjects = signal . getDittoHeaders ( ) . getReadSubjects ( ) ; final List < String > connectionSubjects = authorizationContext . getAuthorizationSubjectIds ( ) ; return ! Collections . disjoint ( authorizedReadSubjects , connectionSubjects ) ; }", "if ( getGeometryHandler ( ) . isSpatialDatasource ( ) ) { queryObject . getSpatialFitler ( ) . setGeometry ( getGeometryHandler ( ) . switchCoordinateAxisFromToDatasourceIfNeeded ( queryObject . getSpatialFitler ( ) . getGeometry ( ) ) ) ; return getFeatureDAO ( ) . getFeatureIdentifiers ( queryObject . getSpatialFitler ( ) , session ) ; }", "import com . google . android . gnd . persistence . remote . RemoteDataStore ; import com . google . android . gnd . persistence . remote . firestore . FirestoreDataStore ; import com . google . android . gnd . persistence . uuid . OfflineUuidGenerator ;", "import org . junit . Ignore ; import org . junit . BeforeClass ;", "@ TargetApi ( Build . VERSION_CODES . HONEYCOMB )", "", "@ UML ( identifier = \"alternativeMetadataReference\" , obligation = OPTIONAL , specification = ISO_19115 )", "import org . n52 . sos . ds . hibernate . entities . observation . RelatedObservation ; import org . n52 . sos . ds . hibernate . entities . parameter . Parameter ; import org . n52 . sos . ds . hibernate . entities . HibernateRelations . HasOffering ; import org . n52 . sos . ds . hibernate . entities . HibernateRelations . HasSeriesType ;", "private void ensureMemberActive ( final SnomedReferenceSetMember existingMember , final SnomedRefSetMemberIndexEntry . Builder updatedMember ) { }", "{ return set ( node , pos ( node , treeMaker . Skip ( ) ) ) ; } return set ( node , posNone ( node , treeMaker . Block ( 0 , List . < JCStatement > nil ( ) ) ) ;", "public Drawable getCustomIcon ( String componentName , long customIcon ) { if ( customIcon == 0 ) return null ; try { FileInputStream fis = new FileInputStream ( customIconFileName ( componentName , customIcon ) ) ; BitmapDrawable drawable = new BitmapDrawable ( this . ctx . getResources ( ) , BitmapFactory . decodeStream ( fis ) ) ; fis . close ( ) ; return drawable ; } catch ( Exception e ) { Log . e ( TAG , \"Unable to get custom icon \" + e ) ; } return null ; } private void removeStoredDrawable ( @ NonNull File drawableFile ) { try { drawableFile . delete ( ) ; } catch ( Exception e ) { Log . e ( TAG , \"stored drawable \" + drawableFile + \" can't be deleted!\" , e ) ; } } public void changeAppIcon ( AppResult appResult , Drawable drawable ) { long customIconId = KissApplication . getApplication ( ctx ) . getDataHandler ( ) . setCustomAppIcon ( appResult . getComponentName ( ) ) ; storeDrawable ( customIconFileName ( appResult . getComponentName ( ) , customIconId ) , drawable ) ; appResult . setCustomIcon ( customIconId , drawable ) ; } public void restoreAppIcon ( AppResult appResult ) { long customIconId = KissApplication . getApplication ( ctx ) . getDataHandler ( ) . removeCustomAppIcon ( appResult . getComponentName ( ) ) ; removeStoredDrawable ( customIconFileName ( appResult . getComponentName ( ) , customIconId ) ) ; appResult . clearCustomIcon ( ) ; }", "import com . gentics . mesh . core . data . user . HibUser ;", "import com . coinomi . core . coins . BurstMain ; import com . coinomi . core . coins . CanadaeCoinMain ;", "import java . io . FileReader ; import java . io . IOException ; import java . io . Reader ; import java . io . Serializable ; import java . io . StringReader ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import cascading . flow . FlowProcess ; import cascading . scheme . hadoop . TextLine ; import cascading . tap . hadoop . Hfs ;", "Edge edge = getCursor ( forwardEdgeIndex ) ; edge . calculateAngles ( ) ; return edge ;", "ValueTypeNbt . ValueNbt valueNbt0 = variables . getValue ( 0 , ValueTypes . NBT ) ; ValueTypeNbt . ValueNbt valueNbt1 = variables . getValue ( 1 , ValueTypes . NBT ) ; if ( valueNbt0 . getRawValue ( ) . isPresent ( ) && valueNbt1 . getRawValue ( ) . isPresent ( ) && valueNbt0 . getRawValue ( ) . get ( ) instanceof CompoundNBT && valueNbt1 . getRawValue ( ) . get ( ) instanceof CompoundNBT ) { return ValueTypeNbt . ValueNbt . of ( NbtHelpers . intersection ( ( CompoundNBT ) valueNbt0 . getRawValue ( ) . get ( ) , ( CompoundNBT ) valueNbt1 . getRawValue ( ) . get ( ) ) ) ; } return ValueTypeNbt . ValueNbt . of ( ) ;", "public static Item LogisticsRemoteOrdererPipe ; public static Item LogisticsProviderPipeMK2 ;", "writeToNBT ( player . getHeldItem ( ) . getTagCompound ( ) ) ; Transmutation . setEmc ( player , emc ) ;", "", "import java . util . concurrent . atomic . AtomicBoolean ; import java . util . stream . Collectors ; import javax . servlet . http . HttpServletResponse ; import org . apache . http . HttpResponse ; import org . apache . http . client . ClientProtocolException ; import org . apache . http . client . methods . HttpGet ; import org . apache . http . impl . client . BasicCookieStore ; import org . apache . http . impl . client . CloseableHttpClient ; import org . apache . http . impl . client . HttpClientBuilder ;", "private final Disease disease ; private final Basketball basketball ;", "if ( Objects . nonNull ( envOverrides ) ) { this . envOverrides = envOverrides ; } else { this . envOverrides = Collections . emptyMap ( ) ; } if ( Objects . nonNull ( extraArtifacts ) ) { this . extraArtifacts = extraArtifacts ; } else { this . extraArtifacts = Collections . emptyList ( ) ; }", "public static void addCapability ( String name , Object value ) { if ( staticCapabilities == null ) { staticCapabilities = new DesiredCapabilities ( ) ; } staticCapabilities . setCapability ( name , value ) ; }", "import com . alphawallet . app . entity . tokens . Token ;", "ClientHttpRequestFactory requestFactory = this . builder . requestFactory ( OkHttp3ClientHttpRequestFactory . class ) . setConnectTimeout ( Duration . ofMillis ( 1234 ) ) . build ( ) . getRequestFactory ( ) ; assertThat ( ReflectionTestUtils . getField ( ReflectionTestUtils . getField ( requestFactory , \"client\" ) , \"connectTimeout\" ) )", "BufferBuilder buffer = tessellator . getBuffer ( ) ; boolean doSound = renderFaces ( tessellator , buffer , stack , scan , shape . isGrayscale ( ) , shape . getScanId ( ) ) ;", "import java . math . BigDecimal ; import java . math . MathContext ; import java . math . RoundingMode ; import java . util . ArrayList ; import java . util . Calendar ; import java . util . Date ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . text . SimpleDateFormat ; import java . util . * ; import org . hl7 . fhir . r4 . model . * ;", "setState ( 526 ) ;", "assertQueryEquals ( CYPHER + \"START n=node(3,1) WHERE n.belt? =\\\"white\\\" RETURN n\" ,", "setState ( 682 ) ;", "crawlStatus . setStatus ( Status . rejected ) . setComment ( \"url is blacklisted\" ) ; crawlStatus . store ( Data . gridIndex ) ;", "parseDateTimeMethod . invoke ( parser , dateTimes [ index ] , 0 , dateTimes [ index ] . length , dos ) ; AMutableDateTime aDateTime = ( AMutableDateTime ) aDateTimeField . get ( parser ) ;", "if ( ( matcherConreteFeature != null ) && ! matcherConreteFeature . matches ( ) ) { featureProject . createBuilderMarker ( res , name + MESSAGE_NOT_DEFINED , lineNumber , IMarker . SEVERITY_WARNING ) ; }", "public < T extends SchedTaskTO > T createSchedTask ( final T taskTO ) { TaskUtil taskUtil = TaskUtil . getInstance ( taskTO ) ; }", "new MessageAndMetadata < > ( topicName , partitionId , messageAndOffset . message ( ) , messageAndOffset . offset ( ) , avroDecoder , avroDecoder , 0 , TimestampType . CREATE_TIME ) ; return new AvroConsumerRecord ( topicName , AvroConverter . toJson ( messageAndMetadata . key ( ) ) . json , AvroConverter . toJson ( messageAndMetadata . message ( ) ) . json , partitionId , messageAndOffset . offset ( ) ) ;", "invalidatingCause = e ; throw new IOException ( MessageFormat . format (", "{ this . storeDataPersist = storeDataPersist ; weakRefAccount = new WeakReference < > ( null ) ; loginStatusRelay = PublishRelay . create ( ) ; } public Observable < Boolean > loginStatus ( ) { return loginStatusRelay . startWith ( isLoggedIn ( ) ) . distinctUntilChanged ( ) ; }", "public void updateAccount ( String key , AccountData accountData , CallContext context ) throws AccountApiException ; public void updateAccount ( UUID accountId , AccountData accountData ) throws AccountApiException ;", "} catch ( Exception ex ) { CodedException cex = translateWithPrefix ( SERVER_SERVERPROXY_X , ex ) ; log . error ( \"Request processing error (\" + cex . getFaultDetail ( ) + \")\" , ex ) ;", "return new Node ( id , \"localhost\" , 8080 , 6666 , 6667 , list ) ;", "protected void sendPlanetList ( EntityPlayerMP player , IStatsCapability stats )", "InvokeOnJavaFXApplicationThread . invoke ( ( ) -> root . getChildren ( ) . setAll ( existingGroups ) ) ; toBeRemoved . values ( ) . forEach ( m -> m . meshSettingsProperty ( ) . unbind ( ) ) ; bindAndUnbindService . submit ( ( ) -> root . getChildren ( ) . setAll ( existingGroups ) . set ( null ) ) ;", "import org . axonframework . messaging . Message ; import org . axonframework . messaging . annotation . AnnotatedMessageHandlingMemberDefinition ; import org . axonframework . messaging . annotation . HandlerDefinition ; import org . axonframework . messaging . annotation . HandlerEnhancerDefinition ; import org . axonframework . messaging . annotation . MessageHandlingMember ; import org . axonframework . messaging . annotation . MultiHandlerDefinition ; import org . axonframework . messaging . annotation . MultiHandlerEnhancerDefinition ; import org . axonframework . messaging . annotation . ParameterResolverFactory ; import org . axonframework . queryhandling . GenericSubscriptionQueryMessage ; import org . axonframework . queryhandling . QueryBus ; import org . axonframework . queryhandling . QueryHandler ; import org . axonframework . queryhandling . QueryResponseMessage ; import org . axonframework . queryhandling . QueryUpdateEmitter ; import org . axonframework . queryhandling . SubscriptionQueryMessage ; import org . axonframework . queryhandling . SubscriptionQueryResult ; import org . axonframework . queryhandling . SubscriptionQueryUpdateMessage ;", ". type ( TRANSPORT_MODE ) . dataFetcher ( environment -> GtfsLibrary . getTransitMode (", "private final IndexServicesProvider indexServicesProvider ; private final IndexStore indexStore ; private volatile Map < Integer , IndexShard > shards = emptyMap ( ) ;", "public @ ResponseBody RestResponse rightReport ( HttpServletRequest request ) { long start = System . currentTimeMillis ( ) ; log . info ( \"Processing right report\" ) ; }", "private static final int LED_NOTIFICATION_ID = 0 ; final Context context = this ; Thread streamThread ; boolean isThreadOn = false ; DataOutputStream dos ; String hostname = \"giss.tv\" ; PrintWriter output = null ; BufferedReader reader = null ; Libshout icecast = null ; DatabaseHandler db ; CoolMic coolmic ; Button start_button ; Button stop_button ; Animation animation = new AlphaAnimation ( 1 , 0 ) ; ColorDrawable gray_color = new ColorDrawable ( Color . parseColor ( \"#66999999\" ) ) ; ColorDrawable [ ] color = { gray_color , new ColorDrawable ( Color . RED ) } ; TransitionDrawable trans = new TransitionDrawable ( color ) ; Drawable buttonColor ; ImageView imageView1 ; Menu myMenu ; boolean backyes = false ;", "import us . ihmc . euclid . matrix . Matrix3D ; import us . ihmc . robotics . controllers . pidGains . YoPID3DGains ; import us . ihmc . robotics . geometry . FramePoint3D ; import us . ihmc . robotics . geometry . FrameVector3D ;", "private TextView sunAzimuth , sunAzimuthRising , sunAzimuthSetting , sunAzimuthAtNoon , sunAzimuthLabel ; private TextView sunElevation , sunElevationAtNoon , sunElevationLabel ; private ImageView riseIcon , setIcon ; private TextView sunShadowObj , sunShadowLength , sunShadowLengthAtNoon ;", "expectedResult . put ( \"accountList\" , accountDetailsList ) ; when ( accountService . getAccountDetailsList ( withBalance , psuInvolved ) . getData ( ) . get ( \"accountList\" ) ) . thenReturn ( Collections . singletonList ( accountDetails ) ) ;", "final TenantServiceAccessor tenantServiceAccessor = platformAccessor . getTenantServiceAccessor ( tenantId ) ; platformAccessor . getTransactionService ( ) . executeInTransaction ( new SetServiceState ( tenantId , new StopServiceStrategy ( ) ) ) ;", "public static final long VirtualMachineMigrationException = Base | 0x23 ; public static final long HttpCallException = Base | 0x23 ;", "pipeline . addLast ( eventExecutorGroup , \"router\" , new RequestRouter ( microservicesRegistry . getHttpResourceHandler ( ) , 0 ) ) ; pipeline . addLast ( eventExecutorGroup , \"dispatcher\" , new HttpDispatcher ( ) ) ;", "package com . trilead . ssh2 . auth ; import com . trilead . ssh2 . InteractiveCallback ; import com . trilead . ssh2 . crypto . PEMDecoder ; import com . trilead . ssh2 . packets . * ; import com . trilead . ssh2 . signature . * ; import com . trilead . ssh2 . transport . MessageHandler ; import com . trilead . ssh2 . transport . TransportManager ; import java . io . IOException ; import java . security . SecureRandom ; import java . util . Iterator ; import java . util . Vector ; public class AuthenticationManager implements MessageHandler { TransportManager tm ; Vector packets = new Vector ( ) ; boolean connectionClosed = false ; String banner ; String [ ] remainingMethods = new String [ 0 ] ; boolean isPartialSuccess = false ; boolean authenticated = false ; boolean initDone = false ; public AuthenticationManager ( TransportManager tm ) { this . tm = tm ; } boolean methodPossible ( String methName ) { if ( remainingMethods == null ) return false ; for ( int i = 0 ; i < remainingMethods . length ; i ++ ) { if ( remainingMethods [ i ] . compareTo ( methName ) == 0 ) return true ; } return false ; } byte [ ] deQueue ( ) throws IOException { synchronized ( packets ) { while ( packets . size ( ) == 0 ) { if ( connectionClosed ) throw ( IOException ) new IOException ( \"The connection is closed.\" ) . initCause ( tm . getReasonClosedCause ( ) ) ; try { packets . wait ( ) ; } catch ( InterruptedException ign ) { throw new InterruptedIOException ( ) ; } } byte [ ] res = ( byte [ ] ) packets . firstElement ( ) ; packets . removeElementAt ( 0 ) ; return res ; } } byte [ ] getNextMessage ( ) throws IOException { while ( true ) { byte [ ] msg = deQueue ( ) ;", "import java . util . LinkedHashSet ;", "attributeKey ( HttpClientTracingHandler . class . getName ( ) + \".span\" ) ; public static final AttributeKey < Span > CLIENT_PARENT_ATTRIBUTE_KEY = new AttributeKey < > ( HttpClientTracingHandler . class . getName ( ) + \".parent\" ) ; private static < T > AttributeKey < T > attributeKey ( String key ) { Map < String , AttributeKey < ? > > classLoaderMap = map . getOrCreate ( AttributeKey . class . getClassLoader ( ) , mapSupplier ) ; if ( classLoaderMap . containsKey ( key ) ) { return ( AttributeKey < T > ) classLoaderMap . get ( key ) ; } final AttributeKey < T > value = new AttributeKey < > ( key ) ; classLoaderMap . put ( key , value ) ; return value ; }", "import org . opencb . biodata . formats . io . FileFormatException ;", "import java . util . concurrent . CopyOnWriteArraySet ; import static io . axoniq . axonserver . grpc . ClientIdRegistry . ConnectionType . * ;", "case 110 : {", "protected Cursor getFilterCursor ( ) { return Contact . getStringForSection ( context , cursor ) ; }", "private static final int ANY_NON_HEADER_POSITION = 1 ; private static final int FOOTER_POSITION = 5 ;", "", "plannerMap . put ( Planners . PLANAR_REGION_BIPEDAL , createPlanarRegionBipedalPlanner ( contactPointsInSoleFrame ) ) ; plannerMap . put ( Planners . PLAN_THEN_SNAP , new PlanThenSnapPlanner ( new TurnWalkTurnPlanner ( ) , contactPointsInSoleFrame ) ) ; plannerMap . put ( Planners . A_STAR , AStarFootstepPlanner . createRoughTerrainPlanner ( null , planningPolygonsInSoleFrame ) ) ; activePlanner . set ( Planners . A_STAR ) ;", "", "return getBeanManager ( ) . invoke ( PlatformConstants . REGISTER_CONTROLLER_COMMAND_NAME ) . handle ( ( v , e ) -> { if ( e != null ) {", "final SuperType object = name . getValue ( ) ; final ObjectDecl objectDecl = ( ObjectDecl ) object . eContainer ( ) ;", "* Get an dictionaries of dictionaries of type & lt ; string , string & gt ; with value { \"0\" : { \"1\" : \"one\" , \"2\" : \"two\" , \"3\" : \"three\" } , \"1\" : { \"4\" : \"four\" , \"5\" : \"five\" , \"6\" : \"six\" } , \"2\" : { \"7\" : \"seven\" , \"8\" : \"eight\" , \"9\" : \"nine\" } }", "Capabilities . app . addAll ( Capability . TRADE_STATISTICS , Capability . TRADE_STATISTICS_2 , Capability . ACCOUNT_AGE_WITNESS , Capability . ACK_MSG , Capability . BUNDLE_OF_ENVELOPES ) ;", "public void init ( IngestModuleInit initContext ) { services = IngestServices . getDefault ( ) ; this . skCase = Case . getCurrentCase ( ) . getSleuthkitCase ( ) ; try { HashDbXML hdbxml = HashDbXML . getCurrent ( ) ; knownBadSets . clear ( ) ; skCase . clearLookupDatabases ( ) ; nsrlIsSet = false ; knownBadIsSet = false ; calcHashesIsSet = hdbxml . getCalculate ( ) ; HashDb nsrl = hdbxml . getNSRLSet ( ) ; if ( nsrl != null && nsrl . getUseForIngest ( ) && IndexStatus . isIngestible ( nsrl . status ( ) ) ) { nsrlIsSet = true ; skCase . setNSRLDatabase ( nsrl . getDatabasePaths ( ) . get ( 0 ) ) ; } for ( HashDb db : hdbxml . getKnownBadSets ( ) ) { IndexStatus status = db . status ( ) ; if ( db . getUseForIngest ( ) && IndexStatus . isIngestible ( status ) ) { knownBadIsSet = true ; int ret = skCase . addKnownBadDatabase ( db . getDatabasePaths ( ) . get ( 0 ) ) ; knownBadSets . put ( ret , db ) ; } } if ( ! nsrlIsSet ) { this . services . postMessage ( IngestMessage . createWarningMessage ( ++ messageId , this , \"No NSRL database set\" , \"Known file search will not be executed.\" ) ) ; } if ( ! knownBadIsSet ) { this . services . postMessage ( IngestMessage . createErrorMessage ( ++ messageId , this , \"No known bad database set\" , \"Known bad file search will not be executed.\" ) ) ; } } if ( ! knownBadIsSet ) { this . services . postMessage ( IngestMessage . createWarningMessage ( ++", "augeas . load ( ) ; } catch ( NoClassDefFoundError e ) { throw new AugeasException ( \"Failed to initialize Augeas. It is probably not installed.\" , e ) ; } catch ( Exception e ) { throw new AugeasException ( e ) ;", "for ( int i = 0 ; i < def . getConstructors ( ) . size ( ) ; i ++ ) { TypeChecking . typeCheckConstructor ( myModuleLoader , myNamespace , typedDef , def . getConstructors ( ) . get ( i ) , localContext , i ) ; }", "CharSequence payloadText = PacketParserUtils . parseElement ( parser , true ) ;", "import org . junit . jupiter . api . Test ; import zipkin2 . Span ; import zipkin2 . reporter . Reporter ; import org . springframework . boot . autoconfigure . AutoConfigurations ; import org . springframework . boot . test . context . runner . ApplicationContextRunner ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ;", "if ( result != null ) { UserVmResponse response = _responseGenerator . createUserVmResponse ( ResponseView . Restricted , \"virtualmachine\" , details , result ) . get ( 0 ) ; }", "LOGGER . info ( \"{} {} {} {} response header:{} body:{}\" , soaHeader . getServiceName ( ) , soaHeader . getVersionName ( ) , soaHeader . getMethodName ( ) , context . getSeqid ( ) , soaHeader . toString ( ) , formatToString ( soaProcessFunction . getResSerializer ( ) . toString ( result ) ) ) ;", "setState ( 638 ) ;", "", "import thebetweenlands . common . block . structure . BlockWormDungeonDoorWood ; import thebetweenlands . common . block . structure . BlockWormDungeonPillar ; import thebetweenlands . common . block . structure . BlockWaystone ;", "import com . oracle . truffle . espresso . impl . Field ; import com . oracle . truffle . espresso . impl . ClassRedefinition ; import com . oracle . truffle . espresso . impl . Klass ;", "import android . content . SharedPreferences ;", "", "import org . junit . jupiter . api . Assertions ; import org . junit . jupiter . api . Disabled ; import org . junit . jupiter . api . Test ; import org . junit . jupiter . api . extension . ExtendWith ;", "EspressoException wrappedError = ( e instanceof EspressoException ) ? ( EspressoException ) e : ( e instanceof StackOverflowError ) ? getContext ( ) . getStackOverflow ( ) : getContext ( factory ) . getOutOfMemory ( ) ; getThreadLocalPendingException ( ) . set ( wrappedError . getExceptionObject ( ) ) ; return defaultValue ( m . returnType ( ) ) ;", "if ( struct . part_name != null ) { oprot . writeFieldBegin ( PART_NAME_FIELD_DESC ) ; oprot . writeString ( struct . part_name ) ; oprot . writeFieldEnd ( ) ; } oprot . writeFieldBegin ( DELETE_DATA_FIELD_DESC ) ; oprot . writeBool ( struct . deleteData ) ; oprot . writeFieldEnd ( ) ; if ( struct . environment_context != null ) { oprot . writeFieldBegin ( ENVIRONMENT_CONTEXT_FIELD_DESC ) ; struct . environment_context . write ( oprot ) ; }", "jj_la1 [ 198 ] = jj_gen ; break label_136 ;", "Term c1 = TERM_FACTORY . getConstantIRI ( RDF_FACTORY . createIRI ( \"urn:URI1\" ) ) ; Term c2 = TERM_FACTORY . getRDFLiteralConstant ( \"m\" , XSD . STRING ) ;", "import io . improbable . keanu . util . status . StatusBar ;", "candidate . expandPatterns ( candidate , true ) ; candidate . simplify ( ) ; if ( Tool . instance ( ) != Tool . KOMPILE ) { }", "import org . junit . jupiter . api . Assertions ; import org . junit . jupiter . api . Test ; import org . junit . jupiter . api . Disabled ;", "protected abstract void onRecording ( Recording recording , ActorRef self , ActorRef sender ) ; protected abstract void onUssdStreamEvent ( UssdStreamEvent message , ActorRef self , ActorRef sender ) ;", "import java . util . Date ; import java . util . UUID ;", "initialize ( ntpHost ) ;", "import org . sonar . plugins . stash . issue . StashPullRequest ; import org . sonar . plugins . stash . issue . StashUser ;", "notificationAnalytics , installAnalytics , limit , Schedulers . immediate ( ) , socialRepository , \"anyString\" , appCoinsManager , promotionsManager , \"\" , installedRepository , migrationManager ) ;", "import org . apache . xmlgraphics . java2d . color . RenderingIntent ; import org . apache . xmlgraphics . util . UnitConv ;", "public void showMessage ( String message ) { UiUtil . showMessage ( findViewById ( android . R . id . content ) , message ) ; } protected void hideSoftKeypad ( ) { getWindow ( ) . setSoftInputMode ( WindowManager . LayoutParams . SOFT_INPUT_STATE_HIDDEN ) ; } protected void sendBroadcastFlyingMessage ( String message ) { Intent intent = new Intent ( ) ; intent . putExtra ( \"message\" , message ) ; intent . setAction ( ACTION_SHOW_MESSAGE ) ; sendStickyBroadcast ( intent ) ; } private BroadcastReceiver showFlyingMessageReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { try { if ( intent . getAction ( ) . equals ( ACTION_SHOW_MESSAGE ) ) { String message = intent . getStringExtra ( \"message\" ) ; if ( showMessage ( message ) ) { removeStickyBroadcast ( intent ) ; } else { } } } catch ( Exception ex ) { logger . error ( ex ) ; } } } ;", "log . debug ( \"Reporting tablet {} assignment failure: unable to verify Tablet Information\" , extent ) ;", "import us . ihmc . robotics . controllers . YoPDGains ; import us . ihmc . robotics . controllers . PIDGains ; import us . ihmc . robotics . controllers . YoPIDGainsInterface ; import us . ihmc . robotics . controllers . pidGains . YoPID3DGains ; import us . ihmc . robotics . controllers . pidGains . YoPIDSE3Gains ;", "import static com . gentics . mesh . util . MeshAssert . latchFor ; import static io . netty . handler . codec . http . HttpResponseStatus . BAD_REQUEST ; import static org . assertj . core . api . Assertions . assertThat ;", "private static final ThreadLocal < Injector > injector = new ThreadLocal < > ( ) ; private static final ThreadLocal < IResourceService > resourceService = new ThreadLocal < > ( ) ; private static final ThreadLocal < ILanguageService > languageService = new ThreadLocal < > ( ) ; private static final ThreadLocal < ILanguageIdentifierService > languageIdentifierService = new ThreadLocal < > ( ) ; private static final ThreadLocal < ILanguagePathService > languagePathService = new ThreadLocal < > ( ) ; private static final ThreadLocal < IProjectService > projectService = new ThreadLocal < > ( ) ; private static final ThreadLocal < ISpoofaxLanguageSpecService > languageSpecService = new ThreadLocal < > ( ) ; private static final ThreadLocal < ISourceTextService > sourceTextService = new ThreadLocal < > ( ) ; private static final ThreadLocal < ISpoofaxUnitService > unitService = new ThreadLocal < > ( ) ; private static final ThreadLocal < ISpoofaxSyntaxService > syntaxService = new ThreadLocal < > ( ) ; private static final ThreadLocal < IStrategoCommon > strategoCommon = new ThreadLocal < > ( ) ; private static final ThreadLocal < ISpoofaxTransformService > transformService = new ThreadLocal < > ( ) ; private static final ThreadLocal < IContextService > contextService = new ThreadLocal < > ( ) ; private static final ThreadLocal < IDialectService > dialectService ; private static GuiceTaskDefs taskDefs ; private static StrIncr strIncr ; private static GuiceTaskDefs taskDefs ; private static StrIncr strIncr ; private static GuiceTaskDefs taskDefs ; private static StrIncr strIncr ; private static GuiceTaskDefs taskDefs ; private static StrIncr strIncr ; private static GuiceTaskDefs taskDefs ; private static StrIncr strIn", "throw new BadItemException ( \"request.OutPointsCount must be speccified with range in [1, 10]\" ) ;", "ByteBuffer buf = ByteBuffer . wrap ( ( byte [ ] ) value , 0 , ( ( byte [ ] ) value ) . length ) ; StringBuilder hexstr = new StringBuilder ( \"0x\" ) ; builder . append ( hexstr . append ( ByteBufferUtil . bytesToHex ( buf ) ) ) ; } else { }", "setState ( 819 ) ; match ( T__61 ) ;", "public static ARecordType FEED_RECORDTYPE ; public static ARecordType FEED_ADAPTOR_CONFIGURATION_RECORDTYPE ; public static ARecordType FEED_ACTIVITY_RECORDTYPE ; public static ARecordType FEED_POLICY_RECORDTYPE ; public static ARecordType POLICY_PARAMS_RECORDTYPE ; public static ARecordType FEED_ACTIVITY_DETAILS_RECORDTYPE ; public static ARecordType LIBRARY_RECORDTYPE ; public static ARecordType COMPACTION_POLICY_RECORDTYPE ;", "", "", "if ( campaign . isGM ( ) ) { }", "Configuration . logger_ . info ( name ) ; Configuration . logger_ . info ( fileName_ + name ) ; FileOutputStream fos = new FileOutputStream ( fileName_ + name ) ; OutputStreamWriter osw = new OutputStreamWriter ( fos ) ; BufferedWriter bw = new BufferedWriter ( osw ) ;", "if ( launched instanceof ForBlockState ) { double scale = .3f ; GlStateManager . scaled ( scale , scale , scale ) ; Minecraft . getInstance ( ) . getBlockRendererDispatcher ( ) . renderBlock ( ( ( ForBlockState ) launched ) . state , ms , buffer , light , overlay , EmptyModelData . INSTANCE ) ; } if ( launched instanceof ForEntity ) { double scale = 1.2f ; GlStateManager . scaled ( scale , scale , scale ) ; Minecraft . getInstance ( ) . getItemRenderer ( ) . renderItem ( launched . stack , TransformType . GROUND ) ; } GlStateManager . pop ( ) ;", "import cm . aptoide . pt . crashreports . CrashReports ; import cm . aptoide . pt . database . realm . Store ; import cm . aptoide . pt . database . realm . Update ;", "case KPlayerCallback . SHOULD_PLAY : isIMAActive = false ;", "State [ ] states = transferStates . toArray ( new State [ 0 ] ) ; GraphPath graphPath = new GraphPath ( states [ states . length - 1 ] , false ) ; Itinerary subItinerary = GraphPathToItineraryMapper . generateItinerary ( graphPath , request . locale ) ; if ( subItinerary . legs . size ( ) != 1 ) { throw new IllegalArgumentException ( \"Sub itineraries should only contain one leg.\" ) ; } subItinerary . legs . get ( 0 ) . startTime = createCalendar ( pathLeg . fromTime ( ) ) ; subItinerary . legs . get ( 0 ) . endTime = createCalendar ( pathLeg . toTime ( ) ) ; if ( ! onlyIfNonZeroDistance || subItinerary . nonTransitDistanceMeters > 0 ) { legs . addAll ( subItinerary . legs ) ; }", "", "if ( null != mCryptoEventsListener ) { mCryptoEventsListener . onFailedSendingEvent ( event ) ; } if ( ignoreEvent ( event . roomId ) ) { return ; }", "", "mHeaderView . getView ( ) . setTranslationY ( mIndicator . getCurrentPos ( ) ) ; else mHeaderView . getView ( ) . setTranslationY ( mIndicator . getHeaderHeight ( ) ) ;", "import org . eclipse . che . api . core . jsonrpc . commons . JsonRpcPromise ; import org . eclipse . che . api . core . model . workspace . config . Command ;", "", "parameterMananger = new ParametersManager ( MAVClient , this ) ; followMe = new FollowMe ( MAVClient , this , drone ) ; mavLinkMsgHandler = new com . droidplanner . MAVLink . MavLinkMsgHandler ( drone ) ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event not arrived\" , callback . isEventArrived ( ) ) ;", "", "import org . voltdb . messaging . Iv2LogFaultMessage ; import org . voltdb . SnapshotCompletionInterest ; import org . voltdb . SnapshotCompletionMonitor ; import org . voltdb . CommandLog . DurabilityListener ;", "import java . io . Serializable ; import java . lang . reflect . Field ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . ParameterizedType ; import java . math . BigDecimal ; import java . sql . Timestamp ; import java . text . DecimalFormat ; import java . text . NumberFormat ; import java . text . SimpleDateFormat ; import java . util . ArrayList ; import java . util . Calendar ; import java . util . Collection ; import java . util . Collections ; import java . util . Comparator ; import java . util . Date ; import java . util . HashMap ; import java . util . List ; import java . util . Locale ; import java . util . Map ; import java . util . Map . Entry ; import java . util . StringTokenizer ; import javax . annotation . Resource ; import javax . persistence . criteria . CriteriaBuilder ; import javax . persistence . criteria . From ; import javax . persistence . criteria . Path ; import javax . persistence . criteria . Predicate ;", "super ( cachedFolderService ) ; LOGGER . debug ( \"Initialising: {}\" , this . getClass ( ) . getCanonicalName ( ) ) ;", "import com . gentics . mesh . graphdb . Trx ; import com . gentics . mesh . core . rest . schema . Schema ; import com . gentics . mesh . core . rest . schema . impl . ListFieldSchemaImpl ;", "sdkCollection . getSdk ( 17 ) , mock ( ConfigCollection . class ) ,", "setState ( 799 ) ;", "", "private ExcerptCommon excerpt ; public ChronicleSink ( final ChronicleQueueBuilder . ReplicaChronicleQueueBuilder builder , final SinkTcp connection ) { super ( builder . chronicle ( ) ) ; this . connection = connection ; this . builder = builder ; this . closed = false ; this . isLocal = builder . sharedChronicle ( ) && connection . isLocalhost ( ) ; this . excerpt = null ; }", "import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ;", "org . apache . usergrid . rest . test . resource . model . ApiResponse result = clientSetup . getRestClient ( ) . system ( ) . getSubResource ( \"applications/\" + this . clientSetup . getAppUuid ( ) ) . delete ( false , true , queryParameters ) ;", "import java . util . ArrayList ; import java . util . List ; import io . rsocket . core . RSocketServer ; import io . rsocket . exceptions . RejectedSetupException ;", "", "import org . rhq . enterprise . gui . coregui . client . inventory . resource . detail . operation . OperationHistoryView ;", "", "", "", "m_dataType = dataType ; m_dataPointCount = dataPointCount ;", "public static ImmutableList < AclEntry > loadAclEntries ( AclFeatureProto proto , final String [ ] stringTable ) { ImmutableList . Builder < AclEntry > b = ImmutableList . builder ( ) ; for ( int v : proto . getEntriesList ( ) ) { int p = v & ACL_ENTRY_PERM_MASK ; int t = ( v > > ACL_ENTRY_TYPE_OFFSET ) & ACL_ENTRY_TYPE_MASK ; int s = ( v > > ACL_ENTRY_SCOPE_OFFSET ) & ACL_ENTRY_SCOPE_MASK ; int nid = ( v > > ACL_ENTRY_NAME_OFFSET ) & ACL_ENTRY_NAME_MASK ; String name = stringTable [ nid ] ; b . add ( new AclEntry . Builder ( ) . setName ( name ) . setPermission ( FSACTION_VALUES [ p ] ) . setScope ( ACL_ENTRY_SCOPE_VALUES [ s ] ) . setType ( ACL_ENTRY_TYPE_VALUES [ t ] ) . build ( ) ) ; } return b . build ( ) ; }", "import java . util . List ; import java . util . HashMap ;", "protected void doXContent ( XContentBuilder builder , Params builderParams ) throws IOException { builder . startObject ( NAME ) ; if ( script != null ) { builder . field ( ScriptField . SCRIPT . getPreferredName ( ) , script ) ; } else { if ( this . scriptString != null ) { builder . field ( \"script\" , scriptString ) ; } if ( this . params != null ) { builder . field ( \"params\" , this . params ) ; } if ( this . lang != null ) { builder . field ( \"lang\" , lang ) ; } } }", "@ Override public List < Setting < ? > > getSettings ( ) { return Arrays . asList ( EXCEPTION_TOP_LEVEL_RATIO_SETTING , EXCEPTION_LOW_LEVEL_RATIO_SETTING ) ; }", "log . info ( \"Tablet split: {} size0 {} size1 {} time {}ms\" , tablet . getExtent ( ) , newTablets [ 0 ] . estimateTabletSize ( ) , newTablets [ 1 ] . estimateTabletSize ( ) , ( t2 - t1 ) ) ;", "import com . fasterxml . jackson . databind . ObjectMapper ; import com . fasterxml . jackson . databind . ObjectMapper ;", "import com . wikia . webdriver . common . core . drivers . Browser ; import com . wikia . webdriver . common . core . helpers . Emulator ; import com . wikia . webdriver . common . core . url . Page ;", "boolean osrCompilation = entryBCI != StructuredGraph . INVOCATION_ENTRY_BCI ; if ( osrCompilation && bootstrapRunning ) { return true ; }", "private SubRange _normalVlanRange ; private String _loggingSourceInterface ;", "_accountMgr . checkAccess ( caller , null , true , ipToAssoc ) ;", "EntityWrapper < ObjectInfo > dbObject = db . recast ( ObjectInfo . class ) ; ObjectInfo searchObjectInfo = new ObjectInfo ( bucketName , manifestKey ) ; List < ObjectInfo > objectInfos = dbObject . query ( searchObjectInfo ) ; if ( objectInfos . size ( ) > 0 ) { ObjectInfo objectInfo = objectInfos . get ( 0 ) ; if ( objectInfo . canRead ( userId ) ) { EntityWrapper < ImageCacheInfo > db2 = new EntityWrapper < ImageCacheInfo > ( ) ; ImageCacheInfo searchImageCacheInfo = new ImageCacheInfo ( bucketName , manifestKey ) ; List < ImageCacheInfo > foundImageCacheInfos = db2 . query ( searchImageCacheInfo ) ; db2 . commit ( ) ; if ( ( foundImageCacheInfos . size ( ) == 0 ) || ( ! imageCachers . containsKey ( bucketName + manifestKey ) ) ) { cacheImage ( bucketName , manifestKey , userId , request . isAdministrator ( ) ) ; reply . setSuccess ( true ) ; } } }", "Preferences . setBoolean ( WelcomeLogin . KEY_SHOWED_WELCOME_LOGIN , true ) ; Intent showWelcomeLogin = new Intent ( getActivity ( ) , WelcomeWalkthrough . class ) ;", "SQLError . SQL_STATE_ILLEGAL_ARGUMENT , getExceptionInterceptor ( ) ) ; }", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "private static TransactionSerializer transactionSerializer ;", "assertEquals ( \"/slave\" , UnreliableSocketFactory . getHostFromLastConnection ( ) ) ;", "public boolean uploadKeyRingToServer ( HkpKeyserver server , WrappedPublicKeyRing keyring ) { }", "public static final String DEFAULT_WINRM_PASSWORD_OPTION = \"winrmPassword\" ; public static final int DEFAULT_HTTPS_PORT = 5986 ; public static final int DEFAULT_WINRM_UNENCRYPTED_PORT = 5985 ; public static final String WINRM_CONNTYPE_PROPERTY = \"winrm-encrypted\" ; public static final int DEFAULT_HTTP_PORT = 5985 ; public static final String WINRM_CONNECTION_TIMEOUT_PROPERTY = \"winrm-connection-timeout\" ;", "@ Autowired private TeamEventDao teamEventDao ; private static final String vacationEditPagePath = \"/wa/wicket/bookmarkable/org.projectforge.web.vacation.VacationEditPage\" ; private static final BigDecimal HALF_DAY = new BigDecimal ( 0.5 ) ; private static final DateTimeFormatter dateFormatter = DateTimeFormatter . instance ( ) ;", "", "", "", "public void verifyNotificationMessage ( ) { waitForElementVisibleByElement ( flashMessage ) ; flashMessageClose . click ( ) ; waitForElementNotVisibleByElement ( flashMessage ) ; }", "ITenant systemTenant = tenantManager . createTenant ( null , ServerRepositoryPaths . getPentahoRootFolderName ( ) , tenantAdminAuthorityName , tenantAuthenticatedAuthorityName , \"Anonymous\" ) ; userRoleDao . createUser ( systemTenant , sysAdminUserName , \"password\" , \"\" , new String [ ] { tenantAdminAuthorityName } ) ; login ( sysAdminUserName , systemTenant , new String [ ] { tenantAdminAuthorityName , tenantAuthenticatedAuthorityName } ) ; ITenant mainTenant_1 = tenantManager . createTenant ( systemTenant , MAIN_TENANT_1 , tenantAdminAuthorityName , tenantAuthenticatedAuthorityName , \"Anonymous\" ) ; userRoleDao . createUser ( mainTenant_1 , \"admin\" , \"password\" , \"\" , new String [ ] { tenantAdminAuthorityName } ) ; login ( \"admin\" , mainTenant_1 , new String [ ] { tenantAdminAuthorityName , tenantAuthenticatedAuthorityName } ) ;", "", "if ( jj_3R_747 ( ) ) { jj_scanpos = xsp ; break ; }", "import com . fasterxml . jackson . databind . util . StdDateFormat ; import com . google . common . base . Function ;", "int numberOfSegments = 3 ; long retentionPeriod = maintainDurationPerEventInMs ; StoreBuilder < WindowStore < String , Long > > dedupStoreBuilder = Stores . windowStoreBuilder ( Stores . persistentWindowStore ( storeName , retentionPeriod , numberOfSegments , maintainDurationPerEventInMs , false ) , Serdes . String ( ) , Serdes . Long ( ) ) ;", "import com . fasterxml . jackson . core . json . JsonFactory ; import com . fasterxml . jackson . core . json . JsonFactoryBuilder ; import com . fasterxml . jackson . core . json . JsonReadFeature ;", "* Test explicitly optional integer . Please put a valid string - wrapper with 'value' = null .", "import android . support . v4 . content . ContextCompat ; import android . preference . PreferenceManager ;", "private static final int MSG_UPDATE_ATTACHMENT_ICON = 18 ;", "", "@ Parameter ( names = \"--encoding\" , description = \"characterset to use when processing files\" , required = false )", "@ Test public void testRemoteApplicationName ( ) { URL url = URL . valueOf ( \"rest://127.0.0.1:5342/rest/say?version=1.0.0&interface=org.apache.dubbo.rpc.protocol.rest.DemoService\" ) . addParameter ( \"application\" , \"consumer\" ) ; DemoServiceImpl server = new DemoServiceImpl ( ) ; ProviderModel providerModel = new ProviderModel ( url . getPathKey ( ) , server , DemoService . class ) ; ApplicationModel . initProviderModel ( url . getPathKey ( ) , providerModel ) ; Exporter < DemoService > exporter = protocol . export ( proxy . getInvoker ( server , DemoService . class , url ) ) ; Invoker < DemoService > invoker = protocol . refer ( DemoService . class , url ) ; DemoService client = proxy . getProxy ( invoker ) ; String result = client . getRemoteApplicationName ( ) ; Assertions . assertEquals ( \"consumer\" , result ) ; invoker . destroy ( ) ; exporter . unexport ( ) ; } private void registerProvider ( URL url , Object impl , Class < ? > interfaceClass ) { ServiceDescriptor serviceDescriptor = repository . registerService ( interfaceClass ) ; repository . registerProvider ( url . getPathKey ( ) , impl , serviceDescriptor , null , null ) ; }", "", "private static Map < String , CmdDesc > compileTailTips ( ) { Map < String , CmdDesc > tailTips = new HashMap < > ( ) ; Map < String , List < AttributedString > > optDesc = new HashMap < > ( ) ; optDesc . put ( \"--optionA\" , Arrays . asList ( new AttributedString ( \"optionA description...\" ) ) ) ; optDesc . put ( \"--noitpoB\" , Arrays . asList ( new AttributedString ( \"noitpoB description...\" ) ) ) ; optDesc . put ( \"--optionC\" , Arrays . asList ( new AttributedString ( \"optionC description...\" ) , new AttributedString ( \"line2\" ) ) ) ; Map < String , List < AttributedString > > widgetOpts = new HashMap < > ( ) ; List < AttributedString > mainDesc = Arrays . asList ( new AttributedString ( \"widget -N new-widget [function-name]\" ) , new AttributedString ( \"widget -D widget ...\" ) , new AttributedString ( \"widget -A old-widget new-widget\" ) , new AttributedString ( \"widget -U string ...\" ) , new AttributedString ( \"widget -l [options]\" ) ) ; widgetOpts . put ( \"-N\" , Arrays . asList ( new AttributedString ( \"Create new widget\" ) ) ) ; widgetOpts . put ( \"-D\" , Arrays . asList ( new AttributedString ( \"widget -A old-widget new-widget\" ) , new AttributedString ( \"widget -U string ...\" ) , new AttributedString ( \"widget -U string ...\" ) , new AttributedString ( \"widget -l [options]\" ) ) ; widgetOpts . put ( \"-N\" , Arrays . asList ( new AttributedString ( \"Create new widget\" ) ) ) ; widgetOpts . put ( \"-D\"", "", "this . fontRenderer . drawString ( str , RHS - 85 , TOP + 18 , WHITE ) ;", "public static boolean isDefaultNamenodeAddress ( Configuration conf , InetSocketAddress address , String ... keys ) { for ( String key : keys ) { String candidateAddress = conf . get ( key ) ; if ( candidateAddress != null && address . equals ( NetUtils . createSocketAddr ( candidateAddress ) ) ) return true ; } return false ; }", "if ( struct . metrics != null ) { oprot . writeFieldBegin ( METRICS_FIELD_DESC ) ; { oprot . writeListBegin ( new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . I64 , struct . metrics . size ( ) ) ) ; for ( long _iter215 : struct . metrics ) { oprot . writeI64 ( _iter215 ) ; } oprot . writeListEnd ( ) ; } oprot . writeFieldEnd ( ) ; }", "struct . success = iprot . readBool ( ) ;", "{ serviceRegistryJpaImpl . setEntityManagerFactory ( emf ) ; serviceRegistryJpaImpl . setPersistenceProperties ( props ) ; Organization organization = new DefaultOrganization ( ) ; OrganizationDirectoryService organizationDirectoryService = EasyMock . createMock ( OrganizationDirectoryService . class ) ; EasyMock . expect ( organizationDirectoryService . getOrganization ( ( String ) EasyMock . anyObject ( ) ) ) . andReturn ( organization ) . anyTimes ( ) ; EasyMock . replay ( organizationDirectoryService ) ; serviceRegistryJpaImpl . setOrganizationDirectoryService ( organizationDirectoryService ) ; JaxbOrganization jaxbOrganization = JaxbOrganization . fromOrganization ( organization ) ; User anonymous = new JaxbUser ( \"anonymous\" , \"test\" , jaxbOrganization , new JaxbRole ( jaxbOrganization . getAnonymousRole ( ) , jaxbOrganization ) ) ; SecurityService securityService = EasyMock . createNiceMock ( SecurityService . class ) ; EasyMock . expect ( securityService . getUser ( ) ) . andReturn ( anonymous ) . anyTimes ( ) ; EasyMock . expect ( securityService . getOrganization ( ) ) . andReturn ( organization ) . anyTimes ( ) ; EasyMock . replay ( securityService ) ; serviceRegistryJpaImpl . setSecurityService ( securityService ) ; } private void registerTestHostAndService ( ) throws ServiceRegistryException { serviceRegistryJpaImpl . registerHost ( TEST_HOST , \"127.0.0.0.1\" , 1024 , 1 , 1 ) ; serviceRegistryJpaImpl . registerHost ( TEST_HOST_OTHER , \"127.0.0.1\" , 1024 , 1 , 1 ) ; serviceRegistryJpaImpl . registerHost ( TEST_HOST_OTHER , \"127.0.0.1\" , TEST_PATH ) ; serviceRegistryJpaImpl . registerService ( TEST_HOST_OTHER , TEST_PATH ) ; serviceRegistryJpaImpl .", "View _newFolderView ; boolean _dismissOnButtonClick = true ; boolean _enableMultiple ; private PermissionsUtil . OnPermissionListener _permissionListener ;", "assert false : \"dead code\" ; if ( constant . getSort ( definitionHelper ) . equals ( \"#Id\" ) ) { }", "import org . n52 . sos . ds . hibernate . entities . ResultTemplate ; import org . n52 . sos . ds . hibernate . entities . feature . FeatureOfInterest ;", "", "public Integer getNumCandidateMappings ( ) { if ( numCandidateMappings == null )", "return new ResourceResponse ( savedResourceWithRelations , jsonPath , queryParams , metaInformation , linksInformation , HttpStatus . CREATED_201 ) ;", "import com . google . common . io . CharStreams ; import com . google . common . io . ByteStreams ;", "NetworkModuleService . validateURI ( serverURI ) ;", "@ PermitAll public Response getOffers ( @ Parameter ( description = \"Type of the offer. (BUY = 0 /SELL = 1)\" ) @ QueryParam ( \"orderType\" ) Byte orderType , @ Parameter ( description = \"Criteria by Paired currency. (APL=0, ETH=1, PAX=2)\" ) @ QueryParam ( \"pairCurrency\" ) Byte pairCurrency , @ Parameter ( description = \"Offer status. (Open = 0, Close = 2)\" ) @ QueryParam ( \"status\" ) Byte status , @ Parameter ( description = \"User account id.\" ) @ QueryParam ( \"accountId\" ) String accountIdStr , @ Parameter ( description = \"Return offers available for now. By default = false\" ) @ DefaultValue ( value = \"false\" ) @ QueryParam ( \"isAvailableForNow\" ) boolean isAvailableForNow , @ Parameter ( description = \"Criteria by min prise.\" ) @ QueryParam ( \"minAskPrice\" ) BigDecimal minAskPrice , @ Parameter ( description = \"Criteria by max prise.\" ) @ QueryParam ( \"maxBidPrice\" ) BigDecimal maxBidPrice , @ Parameter ( description = \"Required order freezing status\" ) @ QueryParam ( \"hasFrozenMoney\" ) Boolean hasFrozenMoney , @ Parameter ( description = \"Sorted by (PAIR_RATE , DB_ID)\" ) @ DefaultValue ( value = \"PAIR_RATE\" ) @ QueryParam ( \"sortBy\" ) DexOrderSortBy sortBy , @ Parameter ( description = \"Sorted order (ASC, DESC)\" ) @ DefaultValue ( value = \"ASC\" ) @ QueryParam ( \"sortOrder\" ) DBSortOrder sortOrder , @ Context HttpServletRequest req ) throws NotFoundException { }", "public static Object trueCondition ( String bool , String value ) { if ( bool == null || ! bool . equals ( \"true\" ) ) { return null ; } else { return value ; } } public static String decide ( String input , String expected , String result ) { if ( input != null && input . equals ( expected ) ) { return result ; } else { return null ; } }", "protected RowStream assembleUsingBloomFilter ( UsingBloomFilter usingBloomFilter ) { BloomFilter bloomFilter = usingBloomFilter . getBloomFilter ( ) ; int pos = pushHashTable ( bloomFilter ) ; RowStream lstream = assembleStream ( usingBloomFilter . getLoader ( ) ) ; RowStream stream = assembleStream ( usingBloomFilter . getInput ( ) ) ; stream . operator = API . using_BloomFilter ( lstream . operator , lstream . rowType , bloomFilter . getEstimatedSize ( ) , pos , stream . operator ) ; popHashTable ( bloomFilter ) ; return stream ; } protected RowStream assembleBloomFilterFilter ( BloomFilterFilter bloomFilterFilter ) { BloomFilter bloomFilter = bloomFilterFilter . getBloomFilter ( ) ; int pos = getHashTablePosition ( bloomFilter ) ; RowStream stream = assembleStream ( bloomFilterFilter . getInput ( ) ) ; boundRows . set ( pos , stream . fieldOffsets ) ; RowStream cstream = assembleStream ( bloomFilterFilter . getCheck ( ) ) ; boundRows . set ( pos , null ) ; List < Expression > fields = assembleExpressions ( bloomFilterFilter . getLookupExpressions ( ) , stream . fieldOffsets ) ; stream . operator = API . select_BloomFilter ( stream . operator , cstream . operator , fields , pos ) ; return stream ; } protected RowStream assembleOnlyIfEmpty ( OnlyIfEmpty onlyIfEmpty ) { RowStream stream = assembleStream ( onlyIfEmpty . getInput ( ) ) ; stream . operator = API . limit_Default ( stream . operator , 0 , false , 1 , false ) ; Expression [ ] nulls = new Expression [ stream . rowType . nFields ( ) ] ; Arrays . fill ( nulls , LiteralExpression . forNull ( ) ) ; stream . operator = API . ifEmpty_Default ( stream", "protected Sku findMatchingSku ( Product product , Map < String , String > attributeValues , ActivityMessages messages ) throws RequiredAttributeNotProvidedException { Map < String , String > attributesRelevantToFindMatchingSku = new HashMap < > ( ) ; }", "public long getDefault ( ) { return defaultValue ; }", "final String fileDesc = extraParams . getProperty ( AfirmaExtraParams . LOAD_FILE_DESCRIPTION , ProtocolMessages . getString ( \"ProtocolLauncher.32\" ) ) + ( fileExts == null ? \" (*.*)\" : String . format ( \" (*.%1s)\" , fileExts . replace ( \",\" , \",*.\" ) ) ) ;", "", "public static final String CONFIGURATION = \"/configuration\" ; public static final String STATUS = \"/status\" ; public static final String UMA = \"/uma\" ; public static final String RESOURCES = \"/resources\" ;", "private String influxHostName ; private int influxPort ; private Long pushIntervalInSecs ; private String influxDbName ; private String sslServerTlsKeyPath ; private String sslServerTlsCertificatePath ; private String sslClientTlsKeyPath ; private String sslClientTlsCertificatePath ;", "ref . getRenamedAttribute ( ) . getLocationInfo ( ) ) , RefactoringLine . MarkingOption . NONE , true ) . setElementBefore ( ref . getOriginalAttribute ( ) . getVariableDeclaration ( ) . toQualifiedString ( ) ) . setElementAfter ( ref . getRenamedAttribute ( ) . getVariableDeclaration ( ) . toQualifiedString ( ) ) . setNameBefore ( classNameBefore ) . setNameAfter ( classNameAfter ) ;", "private final StoreDataPersist storeDataPersist ; private PublishRelay < Boolean > loginStatusRelay ; private WeakReference < Account > weakRefAccount ;", "public static List < SlaveSystemInfo > getSystemInfoExtensions ( ) { return SlaveSystemInfo . all ( ) ; } private static class SlaveLogFetcher extends MasterToSlaveCallable < List < LogRecord > , RuntimeException > { }", "if ( Logger . isDebuggable ( ) ) { Logger . v ( String . format ( \"Item: %s\\n Type: %s\\n SKU: %s\\n Price: %s\\n Description: %s\\n\" , i . getTitle ( ) , i . getItemType ( ) , i . getSku ( ) , i . getPrice ( ) , i . getDescription ( ) ) ) ; }", "", "final HttpPushContext context = newContext ( signal , autoAckTarget , request , message , ackSizeQuota , resultFuture ) ; sourceQueue . offer ( Pair . create ( request , context ) ) . handle ( handleQueueOfferResult ( message , resultFuture ) ) ; return resultFuture ;", "private final ConcurrentHashMap < RadixAddress , Observable < AtomObservation > > cache = new ConcurrentHashMap < > ( ) ;", "public RowMap ( String type , String database , String table , Long timestamp , List < String > pkColumns , BinlogPosition nextPosition , List < Pattern > excludeColumns ) { this ( type , database , table , timestamp , pkColumns , nextPosition ) ; this . excludeColumns = excludeColumns ; } public String pkToJson ( KeyFormat keyFormat ) throws IOException { if ( keyFormat == KeyFormat . HASH ) return pkToJsonHash ( ) ; else return pkToJsonArray ( ) ; } private String pkToJsonHash ( ) throws IOException { }", "import org . eclipse . ditto . services . connectivity . util . ConnectivityMdcEntryKey ; import org . eclipse . ditto . services . models . connectivity . BaseClientState ; import org . eclipse . ditto . services . utils . akka . logging . ThreadSafeDittoLoggingAdapter ;", "pushFactory . create ( db , ident , testRepo , PushOneCommit . SUBJECT , FILE_NAME2 , new String ( CONTENT_NEW2 , StandardCharsets . UTF_8 ) , changeId ) ; return push . to ( \"refs/for/master\" ) . getChangeId ( ) ;", "if ( ! isTrajectoryStopped . getBooleanValue ( ) )", "@ Inject private ResourceManager _resourceMgr ; private SwiftDao _swiftDao ;", "", "public class OCFileListFragment extends ExtendedListFragment { }", "if ( jj_3R_407 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_408 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_409 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_410 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_411 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_412 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_413 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_414 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_415 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_416 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_417 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_418 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_19 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_420 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_scanpos = xsp ; if ( jj_3R_scanpos = xsp ; if ( jj_3R_scanpos = xsp ; if ( jj_3R_scanpos = xsp ; if ( jj_scanpos = xsp ; if ( jj_scanpos = xsp ; if ( jj_scanpos = xsp ; if ( jj_3R_scanpos = xsp ; if ( jj_scanpos = xsp ; if (", "@ Override", "assertEquals ( Double . valueOf ( 79.04 ) , patientData . getAgeAtDiagnosis ( ) ) ; assertEquals ( \"1:DECEASED\" , patientData . getOverallSurvivalStatus ( ) ) ; assertEquals ( \"1:Recurred/Progressed\" , patientData . getDiseaseFreeSurvivalStatus ( ) ) ; assertEquals ( Double . valueOf ( 43.8 ) , patientData . getOverallSurvivalMonths ( ) ) ; assertEquals ( Double . valueOf ( 15.05 ) , patientData . getDiseaseFreeSurvivalMonths ( ) ) ; assertEquals ( Integer . valueOf ( 1 ) , patientData . getSampleCount ( ) ) ;", "else if ( type == FAT_ARROW_EXPRESSION ) { return new HaxeFatArrowExpressionImpl ( node ) ; } else if ( type == FINAL_META ) { return new HaxeFinalMetaImpl ( node ) ; }", "log . warn ( \"Tablet server {} exceeded maximum hold time: attempting to kill it\" , instance ) ;", "@ TargetApi ( Build . VERSION_CODES . KITKAT ) protected String getPath ( final Uri uri ) { if ( isKitKat && DocumentsContract . isDocumentUri ( this , uri ) ) { if ( GalleryUtils . isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \":\" ) ; final String type = split [ 0 ] ; if ( \"primary\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"/\" + split [ 1 ] ; } } else if ( GalleryUtils . isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"content://downloads/public_downloads\" ) , Long . valueOf ( id ) ) ; return GalleryUtils . getDataColumn ( this , contentUri , null , null ) ; } else if ( GalleryUtils . isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \":\" ) ; final String type = split [ 0 ] ; Uri contentUri = null ; if ( \"image\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"video\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"audio\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else if ( selection = \"_id=?\" ; final String [ ] selectionArgs = new String [ ] { split [ 1 ] } ; return GalleryUtils . getDataColumn ( this , contentUri , selection , selectionArgs", "import hudson . slaves . ComputerConnector ; import hudson . tasks . Builder ; import hudson . tasks . BuildWrapper ; import hudson . tasks . BuildWrapperDescriptor ; import hudson . tasks . Publisher ; import hudson . tools . ToolProperty ; import hudson . remoting . Which ; import hudson . Launcher . LocalLauncher ; import hudson . matrix . MatrixProject ; import hudson . matrix . MatrixBuild ; import hudson . matrix . MatrixRun ; import hudson . maven . MavenModuleSet ; import hudson . maven . MavenEmbedder ; import hudson . model . Node . Mode ;", "import org . slf4j . Logger ; import org . slf4j . Iterator ; import org . slf4j . LoggerFactory ;", "final String response = createResource ( \"whois/geolocation?ipkey=10.0.0.0\" ) . request ( MediaType . APPLICATION_XML )", "if ( USE_USER_MANAGEMENT_FRAGMENT == 1 ) userManagementFragment = Fragment . instantiate ( this , UserManagementFragment . class . getName ( ) ) ; galleryFragment = ( GalleryFragment ) Fragment . instantiate ( this , GalleryFragment . class . getName ( ) ) ;", "import org . hl7 . fhir . r4 . model . IntegerType ; import org . hl7 . fhir . r4 . model . Location . LocationPositionComponent ; import org . hl7 . fhir . r4 . model . Location . LocationStatus ; import org . hl7 . fhir . r4 . model . Medication . MedicationStatus ; import org . hl7 . fhir . r4 . model . MedicationAdministration ; import org . hl7 . fhir . r4 . model . MedicationAdministration . MedicationAdministrationDosageComponent ; import org . hl7 . fhir . r4 . model . MedicationRequest ;", "import com . b2international . snowowl . snomed . datastore . index . StatementMap ;", "baseDir , generatedDir , null , false , isPnpm ) ;", "for ( PathEdge < N , AbstractionWithSourceStmt > pausedEdge : pausedEdges ) { logger . debug ( \"-- UNPAUSE {}: {}\" , debugName , pausedEdge ) ; }", "@ Nonnull public EntityType3ReferenceRequest expand ( @ Nonnull final String value ) { addExpandOption ( value ) ; return this ; }", "import co . cask . coopr . shell . command . RecallAutomatorTypeResourcesCommand ; import co . cask . coopr . shell . command . RecallProviderTypeResourcesCommand ; import co . cask . coopr . shell . command . ListTenantsCommand ;", "\"'idiv'\" , \"'mod'\" , \"'!'\" , \"'['\" , \"']'\" , \"'.'\" , \"'$$'\" , \"'?'\" , \"'#'\" , \"'{|'\" , \"'|}'\" , \"'item'\" , \"'object'\" , \"'array'\" , \"'boolean'\" , \"'duration'\" , \"'yearMonthDuration'\" , \"'dayTimeDuration'\" , \"'hexBinary'\" , \"'base64Binary'\" , \"'atomic'\" , \"'string'\" , \"'integer'\" , \"'decimal'\" , \"'double'\" , \"'for'\" , \"'let'\" , \"'where'\" , \"'group'\" , \"'by'\" , \"'order'\" , \"'return'\" , \"'if'\" , \"'in'\" , \"'as'\" , \"'at'\" , \"'allowing'\" , \"'empty'\" , \"'count'\" , \"'stable'\" , \"'ascending'\" , \"'descending'\" , \"'some'\" , \"'every'\" , \"'satisfies'\" , \"'collation'\" , \"'greatest'\" , \"'least'\" , \"'switch'\" , \"'case'\" , \"'try'\" , \"'catch'\" , \"'default'\" , \"'then'\" , \"'else'\" , \"'typeswitch'\" , \"'or'\" , \"'and'\" , \"'not'\" , \"'to'\" , \"'instance'\" , \"'of'\" , \"'treat'\" , \"'cast'\" , \"'castable'\" , \"'version'\" , \"'jsoniq'\" , \"'json-item'\" , null , \"'null'\"", "for ( int j = 0 ; j < _sysinits . length ; ++ j ) { final Initiator init = _sysinits [ j ] ; if ( init instanceof InitiatorExt ) { if ( comps == null ) comps = new Component [ 0 ] ; ( ( InitiatorExt ) init ) . doAfterCompose ( page , comps ) ; } else { init . doAfterCompose ( page ) ; } } for ( Initiator init : _inits ) { }", "\"@from(table = 'rdbms' , datasource.name = '\" + RDBMSTestConstants . DATA_SOURCE_NAME + \"'\" + \" , table.name = '\" + RDBMSTestConstants . TABLE_NAME + \"') \" +", "import java . util . Optional ;", "private float getRiverStrength ( OpenSimplexNoise simplex , CellNoise cell , int x , int y ) { SimplexOctave . Disk jitter = new SimplexOctave . Disk ( ) ; simplex . riverJitter ( ) . evaluateNoise ( x / 240.0 , y / 240.0 , jitter ) ; double pX = x + jitter . deltax ( ) * 220f ; double pY = y + jitter . deltay ( ) * 220f ; double [ ] results = cell . river ( ) . eval ( pX / 1875.0 , pY / 1875.0 ) ; return ( float ) cellBorder ( results , 30.0 / 450.0 , 1.0 ) ; } private static double cellBorder ( double [ ] results , double width , double depth ) { double c = ( results [ 1 ] - results [ 0 ] ) ; if ( references > 40000 ) { String result = \"\" ; for ( int i = 0 ; i < 100 ; i ++ ) { result += \" \" + incidences [ i ] ; } throw new RuntimeException ( result ) ; } if ( c < width ) { return ( ( c / width ) - 1f ) * depth ; } else { return 0 ; } } private static int [ ] incidences = new int [ 200 ] ; private static int references = 0 ;", "DataResourceImpl ( final Store streamStore , final FeedProperties feedProperties , final Provider < FeedHolder > feedHolderProvider , final Provider < MetaDataHolder > metaDataHolderProvider , final Provider < PipelineHolder > pipelineHolderProvider , final Provider < MetaHolder > metaHolderProvider , final PipelineStore pipelineStore , final Provider < PipelineFactory > pipelineFactoryProvider , final Provider < ErrorReceiverProxy > errorReceiverProxyProvider , final PipelineDataCache pipelineDataCache , final PipelineScopeRunnable pipelineScopeRunnable , final ResourceStore resourceStore , final DataUploadTaskHandler dataUploadTaskHandler , final DataDownloadTaskHandler dataDownloadTaskHandler , final StreamEventLog streamEventLog , final SecurityContext securityContext ) { dataFetcher = new DataFetcher ( streamStore , feedProperties , feedHolderProvider , metaDataHolderProvider , pipelineHolderProvider , metaHolderProvider , pipelineStore , pipelineFactoryProvider , errorReceiverProxyProvider , pipelineDataCache , streamEventLog , securityContext , pipelineScopeRunnable ) ; }", "import static lombok . AccessLevel . PACKAGE ;", "import build . buildfarm . instance . Instance . MatchListener ; import build . buildfarm . instance . stub . ByteStreamUploader ;", "final CommonODataProperty property = ( CommonODataProperty ) result ; return property == null || property . hasNullValue ( ) ? null : CoreUtils . getObjectFromODataValue ( getClient ( ) , property . getValue ( ) , method . getGenericReturnType ( ) , null ) ;", "", "private static final String EXPLORE_BASE_URL_PROD = CoinDefinition . BLOCKEXPLORER_BASE_URL_PROD ; private static final String EXPLORE_BASE_URL_TEST = CoinDefinition . BLOCKEXPLORER_BASE_URL_TEST ;", "return factory . createStatusList ( get ( conf . getRestBaseURL ( ) + \"favorites/list.json\" , mergeParameters ( new HttpParameter [ ] { new HttpParameter ( \"screen_name\" , screenName ) } , paging . asPostParameterArray ( ) ) ) ) ;", "if ( includeExtraInfo ( extraInfo , RouteExtraInfoFlag . RoadAccessRestrictions ) ) { _extRoadAccessRestrictions = GraphStorageUtils . getGraphExtension ( graphHopper . getGraphHopperStorage ( ) , RoadAccessRestrictionsGraphStorage . class ) ; if ( _extRoadAccessRestrictions == null ) throw new Exception ( \"RoadAccessRestrictions storage is not found\" ) ; _roadAccessRestrictionsInfo = new RouteExtraInfo ( \"roadaccessrestrictions\" , _extRoadAccessRestrictions ) ; _roadAccessRestrictionsBuilder = new SimpleRouteExtraInfoBuilder ( _roadAccessRestrictionsInfo ) ; }", "import org . fedoraproject . candlepin . resource . AtomFeedResource ;", "private AppletDesc getApplet ( final Node node ) throws ParseException { final String name = getRequiredAttribute ( node , \"name\" , R ( \"PUnknownApplet\" ) , strict ) ; final String main = getMainClass ( node , true ) ; final URL docbase = getURL ( node , \"documentbase\" , base , strict ) ; final Map < String , String > paramMap = new HashMap < > ( ) ; }", "@ Override", "TransactionProcessingPipeline pipeline = new TransactionProcessingPipelineImpl ( neighborRouter , nodeConfig , transactionValidator , tangle , snapshotProvider , tipsViewModel , latestMilestoneTracker , transactionRequester ) ;", "", "", "import com . scottlogic . deg . generator . fieldspecs . RowSpec ; import com . scottlogic . deg . generator . walker . reductive . * ;", "", "@ Order ( 71 ) @ ExportEntity ( LocationDto . class ) @ ExportProperty ( { EventDto . EVENT_LOCATION , LocationDto . REGION } )", "private final RDFTermTypeConstant iriConstant , bnodeConstant ; private final RDF rdfFactory ;", "try ( Scanner master = connMaster . createScanner ( masterTable , Authorizations . EMPTY ) ; Scanner peer = connPeer . createScanner ( peerTable , Authorizations . EMPTY ) ) { Iterator < Entry < Key , Value > > masterIter = master . iterator ( ) , peerIter = peer . iterator ( ) ; Entry < Key , Value > masterEntry = null , peerEntry = null ; while ( masterIter . hasNext ( ) && peerIter . hasNext ( ) ) { masterEntry = masterIter . next ( ) ; peerEntry = peerIter . next ( ) ; assertEquals ( masterEntry . getKey ( ) + \" was not equal to \" + peerEntry . getKey ( ) , 0 , masterEntry . getKey ( ) . compareTo ( peerEntry . getKey ( ) , PartialKey . ROW_COLFAM_COLQUAL_COLVIS ) ) ; assertEquals ( masterEntry . getValue ( ) , peerEntry . getValue ( ) ) ; } }", "public boolean hasNoCriticalErrors ( ) { return getDriver ( ) . findElements ( By . id ( \"errorMessage\" ) ) . size ( ) <= 0 ; } public void defocus ( ) { getDriver ( ) . findElement ( By . tagName ( \"body\" ) ) . click ( ) ; }", "Collection < Constraint > customConstraints = profileDTO . fields . stream ( ) . filter ( fieldDTO -> fieldDTO . generator != null ) . map ( fieldDTO -> customConstraintFactory . create ( profileFields . getByName ( fieldDTO . name ) , fieldDTO . generator ) ) . collect ( Collectors . toList ( ) ) ; if ( ! nonNullableConstraints . isEmpty ( ) ) { rules . add ( new Rule ( new RuleInformation ( \"nullable-rules\" ) , nonNullableConstraints ) ) ; }", "hideMainPlayer ( ) ; if ( result . getAgeLimit ( ) != NO_AGE_LIMIT && ! prefs . getBoolean ( getString ( R . string . show_age_restricted_content ) , false ) ) { hideAgeRestrictedContent ( ) ; } else { currentInfo = result ; handleResult ( result ) ; showContent ( ) ; if ( addToBackStack ) { if ( playQueue == null ) playQueue = new SinglePlayQueue ( result ) ; stack . push ( new StackItem ( serviceId , url , name , playQueue ) ) ; } if ( isAutoplayEnabled ( ) ) openVideoPlayer ( ) ; } } , ( @ NonNull final Throwable throwable ) -> {", "@ Override public Boolean visit ( final YieldStmt n , final Visitable arg ) { return n == arg ; } @ Override public Boolean visit ( final TextBlockLiteralExpr n , final Visitable arg ) { return n == arg ; }", "* Get byte array value [ hex ( AB , AC , AD ) , null ] with the first item base64 encoded", "public RefactoringInfo specify ( Refactoring refactoring , RefactoringInfo info ) { }", "builder . setDefaultCredentialsProvider ( credentialsProvider ) ; if ( routePlanner != null ) { client . setRoutePlanner ( routePlanner ) ; }", "String . format ( \"UPDATE %s SET used=0 WHERE id = :segmentID\" , getSegmentsTable ( ) )", "import org . hibernate . persister . collection . CollectionPersister ; import org . hibernate . persister . entity . EntityPersister ; import org . hibernate . proxy . EntityNotFoundDelegate ; import org . hibernate . service . jdbc . connections . spi . ConnectionProvider ; import org . hibernate . service . spi . ServiceRegistry ;", "private java . util . Vector sessionPool = new java . util . Vector ( ) ; private IdentityRepository identityRepository = new LocalIdentityRepository ( this ) ; public synchronized void setIdentityRepository ( IdentityRepository identityRepository ) { this . identityRepository = identityRepository ; } synchronized IdentityRepository getIdentityRepository ( ) { return this . identityRepository ; }", "import com . thinkaurelius . titan . diskstorage . keycolumnvalue . * ; import com . google . common . collect . ImmutableList ;", "* Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'", "return userNamespaceRoleRepository . save ( roles ) != null ;", "", "assertEquals ( testDate . withField ( DateTimeFieldType . millisOfSecond ( ) , 537 ) . getMillis ( ) , field . getValue ( ) . longValue ( ) ) ;", "import pneumaticCraft . common . thirdparty . ModInteractionUtils ; import pneumaticCraft . common . network . DescSynced ; import pneumaticCraft . common . network . GuiSynced ;", "import ic2 . core . item . tool . ItemTreetap ; import me . modmuss50 . jsonDestroyer . api . ITexturedItem ; import net . minecraft . block . Block ; import net . minecraft . block . state . IBlockState ; import net . minecraft . client . renderer . block . model . ModelResourceLocation ; import net . minecraft . entity . player . EntityPlayer ; import net . minecraft . item . Item ;", "import static org . modeshape . jcr . api . observation . Event . Sequencing . NODE_SEQUENCED ; import static org . modeshape . jcr . api . observation . Event . Sequencing . NODE_SEQUENCING_FAILURE ; import static org . modeshape . jcr . api . observation . Event . Sequencing . OUTPUT_PATH ; import static org . modeshape . jcr . api . observation . Event . Sequencing . SELECTED_PATH ; import static org . modeshape . jcr . api . observation . Event . Sequencing . SEQUENCED_NODE_ID ; import static org . modeshape . jcr . api . observation . Event . Sequencing . SEQUENCED_NODE_PATH ; import static org . modeshape . jcr . api . observation . Event . Sequencing . SEQUENCER_NAME ; import static org . modeshape . jcr . api . observation . Event . Sequencing . SEQUENCING_FAILURE_CAUSE ; import static org . modeshape . jcr . api . observation . Event . Sequencing . USER_ID ;", "optionHistoricalDailyLog = new JCheckBox ( resources . getString ( \"optionHistoricalDailyLog.text\" ) ) ; optionHistoricalDailyLog . setToolTipText ( resources . getString ( \"optionHistoricalDailyLog.toolTipText\" ) ) ; JLabel labelCommandCenterDisplay = new JLabel ( resources . getString ( \"labelCommandCenterDisplay.text\" ) ) ; optionCommandCenterUseUnitMarket = new JCheckBox ( resources . getString ( \"optionCommandCenterUseUnitMarket.text\" ) ) ; optionCommandCenterUseUnitMarket . setToolTipText ( resources . getString ( \"optionCommandCenterUseUnitMarket.toolTipText\" ) ) ;", "import org . apache . accumulo . core . client . impl . DurabilityImpl ;", "", "import static io . zeebe . logstreams . impl . LogBlockIndexWriter . LOG ; import static org . mockito . ArgumentMatchers . any ; import static org . mockito . ArgumentMatchers . anyLong ; import static org . mockito . Mockito . doAnswer ; import static org . mockito . Mockito . mock ; import io . zeebe . distributedlog . DistributedLogstreamService ; import io . zeebe . distributedlog . impl . DefaultDistributedLogstreamService ; import io . zeebe . distributedlog . impl . DistributedLogstreamPartition ; import io . zeebe . distributedlog . impl . DistributedLogstreamServiceConfig ;", "MajorCompactionRequest request = new MajorCompactionRequest ( extent , reason , tableConfiguration , context ) ;", "import org . netbeans . api . progress . ProgressHandle ; import org . netbeans . api . progress . ProgressHandleFactory ; import org . sleuthkit . autopsy . coreutils . ImageUtils ; import org . sleuthkit . autopsy . coreutils . Logger ; import org . sleuthkit . autopsy . coreutils . VideoUtils ;", "setState ( 729 ) ;", "if ( prepareGraph . getLevel ( w_toNode ) != maxLevel || u_fromNode == w_toNode )", "import com . aptana . editor . js . parsing . ast . JSParseRootNode ; import com . aptana . editor . js . sdoc . model . DocumentationBlock ; import com . aptana . index . core . IFileStoreIndexingParticipant ;", "prop . setComment ( \"Disable Iron Ore Gen on Asteroids.\" ) ; prop . setLanguageKey ( \"gc.configgui.disable_iron_gen_asteroids\" ) ;", "", "case 3 : owner . setCrandor ( false ) ; owner . sendMessage ( \"You board the ship\" ) ; if ( owner . ladyFixed ( ) ) owner . teleport ( 258 , 3494 ) ; else owner . teleport ( 280 , 3473 ) ; owner . teleport ( 258 , owner . ladyFixed ( ) ? 3494 : 3473 , false ) ; break ; default : owner . sendMessage ( \"You must talk to the owner about this.\" ) ; } } else { owner . sendMessage ( \"You must talk to the owner about this.\" ) ; } break ; case 233 : case 234 : owner . setCrandor ( true ) ; owner . sendMessage ( \"You board the ship\" ) ; if ( owner . ladyFixed ( ) ) owner . teleport ( 258 , 3494 ) ; else owner . teleport ( 280 , 3473 ) ; break ; case 464 : owner . sendMessage ( \"You board the raft...\" ) ; owner . teleport ( 662 , 463 , false ) ; break ; default : owner . sendMessage ( \"You must talk to the owner about this.\" ) ; } } private void handlePick ( ) { switch ( object . getID ( ) ) { case 72 : pickLoop ( 29 , \"You get some grain\" ) ; break ; case 191 : pickLoop ( 348 , \"You pick a potato\" ) ; break ; case 313 : pickLoop ( 675 , \"You uproot a flax plant\" ) ; break ; case 430 : pickLoop ( 748 , \"You pull a pineapple off the tree\" ) ; owner . sendSound ( \"recharge\" , false ) ; int maxPray = object . getID ( ) ; pickLoop ( 249 , \"You pull a pineapple off the tree\" ) ; owner . sendSound ( \"re", "public class Metadata extends AbstractMetadata implements Serializable { private static final long serialVersionUID = - 5557599895424227101L ; }", "if ( jj_3R_957 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_958 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_959 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_960 ( ) ) return true ; } } }", "", "import org . kframework . kil . Production ; import org . kframework . utils . options . SMTSolver ;", "private int logsTabIndex = 0 ; private int adminTabIndex = 0 ; private int directTabIndex = 0 ; private int propIndex = 0 ; private int certTabIndex = 0 ; private int loadTestDataTabIndex = 0 ; private static final String GATEWAYPROPTAB = \"gatewayTab\" ; private static final String ADAPTERPROPTAB = \"adapterTab\" ; private static final String DIRECTDOMAINTAB = \"directDomainTab\" ; private static final String DIRECTAGENTTAB = \"directAgentTab\" ; private static final String DIRECTCERTTAB = \"directCertTab\" ; private static final String DIRECTTBTAB = \"directTbTab\" ; private static final String ACCTUSERSTAB = \"acctUsersTab\" ; private static final String ACCTROLESTAB = \"acctRolesTab\" ; private static final String AUDITPROPTAB = \"auditTab\" ; private static final String KEYSTORETAB = \"keyStoreTab\" ; private static final String TRUSTSTORETAB = \"trustStoreTab\" ; private static final String LTDPATIENTTAB = \"ltdPatientTab\" ; public int getDirectTabIndex ( ) { return directTabIndex ; } public void setDirectTabIndex ( int directTabIndex ) { this . directTabIndex = directTabIndex ; } public int getLogsTabIndex ( ) { return logsTabIndex ; } public void setLogsTabIndex ( int logsTabIndex ) { this . logsTabIndex = logsTabIndex ; return NavigationConstant . ACCT_MGMT_PAGE ; } public String setDirectTabIndexNavigate ( int logsTabIndex ) { this . logsTabIndex = logsTabIndex ; return NavigationConstant . DIRECT_PAGE ; } public String setLogsTabIndexNavigate ( int logsTabIndex ) { this . logsTabIndex ( int logsTabIndex ) { this . logsTabIndex =", "import org . junit . Ignore ;", "import org . flowable . eventregistry . impl . tenantdetector . JsonPointerBasedInboundEventTenantDetector ;", "boolean controlHeartbeats = isClient ( ) == clientControlsHeartbeats ( ) ; if ( ! isOffline ( ) && controlHeartbeats ) { scheduleHeartbeats ( heartBeatInterval ) ; }", "public Collection < ResourceType > getPSSTypes ( ) ; public Collection < Resource > getOrphanedResources ( ) ; public Collection < Resource > getRemovableChildren ( AuthzSubject subject , Resource parent ) ;", "private long loadMetadataAndJournal ( LockedInodePath inodePath , LoadMetadataOptions options ) throws InvalidPathException , FileDoesNotExistException , BlockInfoException , FileAlreadyCompletedException , InvalidFileSizeException ,", "", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . apache . cxf . jaxrs . client . WebClient ; import com . google . common . base . Preconditions ; import com . google . common . base . Strings ; import com . google . common . collect . Maps ; import com . google . common . collect . Sets ;", "private boolean rowCacheInvalidated ; private RowGenerator rowGenerator = null ; private final Map < Field , Property > associatedProperties = new HashMap < Field , Property > ( ) ;", "import buildcraft . api . core . BCLog ;", "IssueBuilder builder = new IssueBuilder ( ) ; Map < String , String > pathMapping = resolveAbsoluteNames ( filesToProcess , sourceDirectories , log ) ;", "import com . google . gwt . event . logical . shared . ResizeEvent ;", "inputSets . add ( new TInputSet ( targetType , BitSets . of ( covering ) , false , false , nextNormalizer ) ) ; nextNormalizer = null ; setExacts ( covering ) ;", "import stroom . query . api . v2 . DocRef ; import stroom . security . SecurityContext ;", "public void accept ( long value ) { readAmount . addAndGet ( value ) ; if ( completed || elementsRead . get ( ) == 0 ) { nextValues ( emitter ) ; completed = false ; } } ; protected void nextValues ( FluxSink < M > emitter ) { map . scanIteratorAsync ( map . getName ( ) , client , nextIterPos , pattern , count ) . addListener ( new FutureListener < MapScanResult < Object , Object > > ( ) {", "if ( voldemortConfig . isJmxEnabled ( ) ) JmxUtils . registerMbean ( store . getName ( ) , store ) ;", "activityEnd , totalPageViews , pageViewsInLast60 , filesDownloaded , countOfKnownAccountTypes , dataSource ) ) ;", "public Builder includeHostTag ( boolean includeHostTag ) { this . includeHostTag = includeHostTag ; return this ; } public Builder requestTagKeys ( String ... requestTagKeys ) { return requestTagKeys ( Arrays . asList ( requestTagKeys ) ) ; } public Builder requestTagKeys ( Iterable < String > requestTagKeys ) { this . requestTagKeys = requestTagKeys ; return this ; }", "private boolean jj_3R_307 ( ) { }", "assertThat ( e . getCause ( ) , instanceOf ( QueryShardException . class ) ) ;", "import static org . hamcrest . MatcherAssert . assertThat ; import static org . hamcrest . Matchers . * ; import static org . sonatype . nexus . test . utils . ResponseMatchers . * ; import static org . sonatype . nexus . test . utils . StatusMatchers . * ; import static org . hamcrest . Matchers . notNullValue ;", "if ( Settings . STATIC_FOV ) { if ( Minecraft . getMinecraft ( ) . thePlayer . isSprinting ( ) && GeneralSetting . staticFovSprintModifier ) ci . setReturnValue ( ( float ) ( 1.0 * ( ( Minecraft . getMinecraft ( ) . thePlayer . getEntityAttribute ( SharedMonsterAttributes . movementSpeed ) . getAttributeValue ( ) / ( double ) Minecraft . getMinecraft ( ) . thePlayer . capabilities . getWalkSpeed ( ) + 1.0D ) / 2.0D ) ) ) ; else ci . setReturnValue ( 1.0F ) ; }", "public RoleTO update ( final RoleMod roleMod ) { }", "import net . minecraft . util . text . TextComponentTranslation ; import net . minecraft . world . IBlockReader ;", "import org . apache . hadoop . hbase . zookeeper . RecoverableZooKeeper ; import org . apache . zookeeper . CreateMode ; import org . apache . zookeeper . KeeperException ; import org . apache . zookeeper . ZooDefs ;", "import org . junit . jupiter . api . Test ;", "import static com . microsoft . identity . client . internal . MsalUtils . throwOnMainThread ; import static com . microsoft . identity . client . internal . MsalUtils . validateNonNullArgument ; import static com . microsoft . identity . client . internal . controllers . OperationParametersAdapter . isAccountHomeTenant ;", "Button tester = ( Button ) findViewById ( R . id . launch_tester ) ; tester . setOnClickListener ( new OnClickListener ( ) { @ Override public void onClick ( View arg0 ) { startActivity ( new Intent ( HomePage . this , FragmentTester . class ) ) ; } } ) ; Button osgViewer = ( Button ) findViewById ( R . id . launch_osgViewer ) ; osgViewer . setOnClickListener ( new OnClickListener ( ) { @ Override public void onClick ( View arg0 ) { startActivity ( new Intent ( HomePage . this , OsgViewer . class ) ) ; } } ) ; Button tuning = ( Button ) findViewById ( R . id . launch_tuning ) ; tuning . setOnClickListener ( new OnClickListener ( ) { @ Override public void onClick ( View arg0 ) { startActivity ( new Intent ( HomePage . this , TuningActivity . class ) ) ; } } ) ;", "", "import org . elasticsearch . index . query . QueryShardException ; import org . elasticsearch . index . query . functionscore . weight . WeightBuilder ; import org . elasticsearch . index . query . support . QueryInnerHits ;", "public int getOutputFormatPort ( ) { return LlapFixedRegistryImpl . this . outputFormatPort ; } @ Override public String getServicesAddress ( ) { return serviceAddress ; } @ Override", "import stroom . query . api . v1 . DocRef ; import stroom . query . api . v1 . ExpressionTerm . Condition ;", "public static boolean createField ( LoggingFramework framework , JavacNode typeNode , JCFieldAccess loggingType , JCTree source , String logFieldName , boolean useStatic , String loggerTopic ) { }", "private byte [ ] getQualifier ( ColumnQualifier qualifier , Category category , Date date , String extra ) { }", "public class DynamoDBRepositoryFactoryBean < T extends Repository < S , ID > , S , ID extends Serializable > extends RepositoryFactoryBeanSupport < T , S , ID > implements ApplicationContextAware { }", "Neo4jRunner . DEFAULT_AUTH_TOKEN , Config . build ( ) . withEncryption ( )", "analyzer = parser . text ( ) ;", "@ Deprecated public MoreLikeThisQueryBuilder likeText ( String likeText ) { return like ( likeText ) ; } @ Deprecated public MoreLikeThisQueryBuilder ids ( String ... ids ) { Item [ ] items = new Item [ ids . length ] ; for ( int i = 0 ; i < items . length ; i ++ ) { items [ i ] = new Item ( null , null , ids [ i ] ) ; } return like ( items ) ; } @ Deprecated public MoreLikeThisQueryBuilder docs ( Item ... docs ) { return like ( docs ) ; } @ Deprecated public MoreLikeThisQueryBuilder ignoreLike ( Item ... docs ) { return unlike ( docs ) ; } @ Deprecated public MoreLikeThisQueryBuilder ignoreLike ( String ... likeText ) { return unlike ( likeText ) ; } @ Deprecated public MoreLikeThisQueryBuilder addItem ( Item ... likeItems ) { return addLikeItem ( likeItems ) ; }", "final String existingTargetId = ( ( SnomedComponent ) existingMember . getProperties ( ) . get ( SnomedRf2Headers . FIELD_TARGET_COMPONENT ) ) . getId ( ) ;", "", "final var spnego = createActionState ( flow , SPNEGO , createEvaluateAction ( SPNEGO ) ) ; final var transitions = spnego . getTransitionSet ( ) ; transitions . add ( createTransition ( CasWebflowConstants . TRANSITION_ID_SUCCESS , CasWebflowConstants . STATE_ID_CREATE_TICKET_GRANTING_TICKET ) ) ;", "final List < String > fileList = new ArrayList < > ( ) ; final List < String > dirList = new ArrayList < > ( ) ; buildZipFileLists ( dir , fileList , dirList ) ;", "log . error ( \"Error applying WAL file: {}, {}\" , logFile , e ) ; close ( ) ; throw new DataException ( e ) ;", "* Send a post request with header values \"scenario\" : \"valid\" , \"value\" : \"The quick brown fox jumps over the lazy dog\" or \"scenario\" : \"null\" , \"value\" : null or \"scenario\" : \"empty\" , \"value\" : \"\"", "import org . eclipse . ceylon . compiler . js . util . JsIdentifierNames ; import org . eclipse . ceylon . compiler . js . util . TypeUtils ;", "init ( new AccumuloServerContext ( instance , factory ) ) ; Map < String , SortedMap < TServerInstance , TabletServerStatus > > groups = this . splitCurrentByRegex ( createCurrent ( 15 ) ) ;", "import com . microsoft . azure . management . network . NetworkSecurityGroups ; import com . microsoft . azure . management . network . NetworkInterfaces ;", "", "", "private static class JaggeryConfListener implements LifecycleListener { private JSONObject jaggeryConfig ; private SecurityConstraint securityConstraint ; private JaggeryConfListener ( JSONObject jaggeryConfig , SecurityConstraint securityConstraint ) { this . jaggeryConfig = jaggeryConfig ; this . securityConstraint = securityConstraint ; } public void lifecycleEvent ( LifecycleEvent event ) { if ( Lifecycle . BEFORE_START_EVENT . equals ( event . getType ( ) ) ) { initJaggeryappDefaults ( ( Context ) event . getLifecycle ( ) , this . jaggeryConfig , this . securityConstraint ) ; return ; } if ( Lifecycle . START_EVENT . equals ( event . getType ( ) ) ) { Context context = ( Context ) event . getLifecycle ( ) ; try { WebAppManager . getEngine ( ) . enterContext ( ) ; WebAppManager . deploy ( context ) ; setDisplayName ( context , jaggeryConfig ) ; if ( jaggeryConfig != null ) { addSessionCreatedListners ( context , ( JSONArray ) jaggeryConfig . get ( JaggeryCoreConstants . JaggeryConfigParams . SESSION_CREATED_LISTENER_SCRIPTS ) ) ; addSessionDestroyedListners ( context , ( JSONArray ) jaggeryConfig . get ( JaggeryCoreConstants . JaggeryConfigParams . SESSION_DESTROYED_LISTENER_SCRIPTS ) ) ; executeScripts ( context , ( JSONArray ) jaggeryConfig . get ( JaggeryCoreConstants . JaggeryConfigParams . INIT_SCRIPTS ) ) ; executeScripts ( context , ( JSONArray ) jaggeryConfig . get ( JaggeryCoreConstants . JaggeryConfigParams . SESSION_CREATED_LISTENER_SCRIPTS ) ) ; executeScripts ( context , ( JSONArray ) jaggeryConfig . get ( JaggeryCoreConstants . JaggeryConfigParams . SESSION_DESTROYED_LISTENER_SCRIPTS ) ) ;", "", "import org . freeplane . core . ui . menubuilders . generic . BuildProcessFactory ; import org . freeplane . core . ui . menubuilders . generic . BuildPhaseListener ; import org . freeplane . core . ui . menubuilders . generic . ChildEntryFilter ; import org . freeplane . core . ui . menubuilders . generic . Entry ;", "modified . set ( true ) ;", "import java . util . Objects ; import java . util . function . Function ;", "else if ( line2 . toLowerCase ( ) . startsWith ( \"<cast\" ) ) { tr = new CASTAIPReader ( ) . parse ( fileToParse ) ; } else if ( line2 . startsWith ( \"<castaip\" ) ) { tr = new CASTAIPReader ( ) . parse ( fileToParse ) ; }", "import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import com . google . common . collect . Lists ; import com . google . common . collect . Maps ;", "Entry < K , V > entry = new Entry < > ( oldEntry . getKey ( ) , oldEntry . getValue ( ) , null ) ;", "public Termination createTermination ( Game game , TerminationContent content ) throws Exception", "scheduleCheckForThingActivity ( thingConfig . getActivityCheckConfig ( ) . getInactiveInterval ( ) ) ;", "{ IndexKeyRange restart = new IndexKeyRange ( this ) ; restart . boundColumns = boundColumns ( indexRowType , newLo ) ; restart . lo = newLo ; restart . loInclusive = true ; return restart ; } public IndexKeyRange resetHi ( IndexBound newHi ) { IndexKeyRange restart = new IndexKeyRange ( this ) ; restart . boundColumns = boundColumns ( indexRowType , newHi ) ; restart . hi = newHi ; restart . hiInclusive = true ; return restart ; } this . lexicographic = false ;", "void implementNetworkElementsAndResources ( DeployDestination dest , ReservationContext context ,", "private static void dispatchServiceWatch ( Watch . Response < V1Service > item ) { V1Service s = item . object ; if ( s != null ) { V1ObjectMeta metadata = s . getMetadata ( ) ; String domainUID = metadata . getLabels ( ) . get ( LabelConstants . DOMAINUID_LABEL ) ; String serverName = metadata . getLabels ( ) . get ( LabelConstants . SERVERNAME_LABEL ) ; String channelName = metadata . getLabels ( ) . get ( LabelConstants . CHANNELNAME_LABEL ) ; String clusterName = metadata . getLabels ( ) . get ( LabelConstants . CLUSTERNAME_LABEL ) ; if ( domainUID != null ) { DomainPresenceInfo info = DomainPresenceInfoManager . lookup ( domainUID ) ; ServerKubernetesObjects sko = null ; if ( info != null ) { if ( serverName != null ) { sko = ServerKubernetesObjectsManager . getOrCreate ( info , domainUID , serverName ) ; } switch ( item . type ) { case \"ADDED\" : if ( sko != null ) { if ( channelName != null ) { sko . getChannels ( ) . put ( channelName , s ) ; } else { sko . getService ( ) . set ( s ) ; } } else if ( clusterName != null ) { info . getClusters ( ) . put ( clusterName , s ) ; } } else if ( clusterName != null ) { info . getClusters ( ) . replace ( clusterName , s ) ; } } else if ( sko != null ) { info . getClusters ( ) . put ( clusterName , s ) ; } break ; case \"MODIFIED\" : if ( sko != null ) { if ( sko != null ) { V1Service skoService = sko . getChannels ( ) . get ( channelName ) ; if ( skoService != null ) { info . getClusters ( ) . replace ( channelName , skoService , s )", "public void publish ( String message , MessageColor color ) ; public void publish ( String message , String color ) ;", "public void testSpellbender ( ) { runGym ( ( context , player , opponent ) -> { playCard ( context , player , \"secret_spellbender\" ) ; context . endTurn ( ) ; playCardWithTarget ( context , opponent , \"spell_fireball\" , player . getHero ( ) ) ; Assert . assertEquals ( player . getSecrets ( ) . size ( ) , 1 ) ; } ) ; runGym ( ( context , player , opponent ) -> { playCard ( context , player , \"secret_spellbender\" ) ; Minion bloodfen = playMinionCard ( context , player , \"minion_bloodfen_raptor\" ) ; context . endTurn ( ) ; playCardWithTarget ( context , opponent , \"spell_fireball\" , bloodfen ) ; Assert . assertEquals ( player . getSecrets ( ) . size ( ) , 0 ) ; Assert . assertEquals ( player . getMinions ( ) . size ( ) , 1 ) ; Assert . assertFalse ( bloodfen . isDestroyed ( ) ) ; Assert . assertTrue ( player . getGraveyard ( ) . stream ( ) . anyMatch ( e -> e . getSourceCard ( ) . getCardId ( ) . equals ( \"token_spellbender\" ) ) ) ; } ) ; } @ Test public void testYsera ( ) { runGym ( ( context , player , opponent ) -> { playCard ( context , player , \"minion_ysera\" ) ; overrideRandomCard ( context , \"spell_dream\" ) ; context . endTurn ( ) ; Assert . assertEquals ( ( String [ ] ) ( ( MinionCardDesc ) CardCatalogue . getRecords ( ) . get ( \"minion_ysera\" ) . getDesc", "final Workspace . State fromWorkspaceState , final Workspace . State toWorkspaceState , final boolean animated , final Runnable onCompleteRunnable ) {", "", "mCurrentAnimation = startAnimationToWorkspaceFromOverlay ( fromWorkspaceState , toWorkspaceState , mLauncher . getWidgetsButton ( ) , widgetsView , animated , onCompleteRunnable , cb ) ;", "RealInits ( Initiator [ ] sysinits , List < Initiator > inits ) { _sysinits = sysinits ; }", "", "setState ( 494 ) ;", "@ Autowired private MutationRepository mutationRepository ; @ Autowired private MutationModelConverter mutationModelConverter ; @ Override public void init ( ServletConfig config ) throws ServletException { super . init ( config ) ; SpringBeanAutowiringSupport . processInjectionBasedOnServletContext ( this , config . getServletContext ( ) ) ; } private AccessControl accessControl ; @ Override public void init ( ServletConfig config ) throws ServletException { super . init ( config ) ; accessControl = SpringUtil . getAccessControl ( ) ; }", "public void setSelectedAuthProfile ( String authProfile ) { String old = getSelectedAuthProfile ( ) ; CredentialsConfig credentialsConfig = getCredentialsConfig ( ) ; credentialsConfig . setSelectedAuthProfile ( authProfile ) ; notifyPropertyChanged ( SELECTED_AUTH_PROFILE_PROPERTY_NAME , old , authProfile ) ; } public void setSelectedAuthProfileAndAuthType ( String authProfile , String authType ) { setSelectedAuthProfile ( authProfile ) ; setAuthType ( authType ) ; } private void setSelectedAuthProfile ( String authProfile ) { String old = getSelectedAuthProfile ( ) ; CredentialsConfig credentialsConfig = getCredentialsConfig ( ) ; credentialsConfig . setSelectedAuthProfile ( authProfile ) ; notifyPropertyChanged ( \"selectedAuthProfile\" , old , authProfile ) ; } private void setAuthType ( String authType )", "import org . apache . dubbo . common . config . configcenter . DynamicConfiguration ;", "this . indexDbConfig = new IndexDbConfig ( ) ; this . jobSystemConfig = new JobSystemConfig ( ) ;", "public String getOldDbHistoryTopicName ( ) { return oldDbHistoryTopicName ; } public void setOldDbHistoryTopicName ( String oldDbHistoryTopicName ) { this . oldDbHistoryTopicName = oldDbHistoryTopicName ; } public String getMySqlBinLogClientName ( ) { return mySqlBinLogClientName ; } public void setMySqlBinLogClientName ( String mySqlBinLogClientName ) { this . mySqlBinLogClientName = mySqlBinLogClientName ; }", "client . getChannel ( Channel . META_SUBSCRIBE ) . addListener ( ( ClientSessionChannel . MessageListener ) ( channel , message ) -> { logger . info ( \"<< {} @ {}\" , message , channel ) ; if ( message . isSuccessful ( ) ) { unsubscribeLatch . countDown ( ) ;", "import org . voltdb . NodeDRGateway ; import org . voltdb . CommandLog ;", "Call < ResponseBody > call = service . dateTimeNull ( this . client . getMapperAdapter ( ) . serializeRaw ( dateTimePath ) ) ; final ServiceCall serviceCall = new ServiceCall ( call ) ;", "* Get an dictionary of array of strings { \"0\" : [ \"1\" , \"2\" , \"3\" ] , \"1\" : null , \"2\" : [ \"7\" , \"8\" , \"9\" ] }", "import java . util . List ;", "", "assertEquals ( \"www.bing.com\" , rdd . getTarget ( ) ) ; assertParentChild ( rd , rdEnvelope , rddEnvelope ) ;", "import java . nio . file . Path ; import static java . util . TimeZone . getTimeZone ; import org . openide . util . Lookup ; import org . sleuthkit . autopsy . ingest . DataSourceIngestModuleProgress ; import org . sleuthkit . autopsy . ingest . IngestModule . IngestModuleException ; import org . sleuthkit . autopsy . ingest . IngestServices ; import org . sleuthkit . autopsy . ingest . ModuleDataEvent ; import org . sleuthkit . autopsy . keywordsearchservice . KeywordSearchService ; import org . sleuthkit . datamodel . ReadContentInputStream . ReadContentInputStreamException ;", "public void subscribe ( ) throws Exception { try ( WSSClient wssClient = new WSSClient ( ENDPOINT_URL ) ) { wssClient . addSubscription ( PoloniexWSSSubscription . USDT_ETH , new LoggerMessageHandler ( ) ) ; } }", "", "import androidx . annotation . NonNull ; import androidx . core . graphics . ColorUtils ; import androidx . recyclerview . widget . ItemTouchHelper ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . LinearSmoothScrollerCustom ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ;", "false , true , false , null , null , null , null , null , null , null , null , PluginImpl . DEFAULT_SERVER_NAME , null , false , false , null ) ) ;", "private void maybeInitializeTimestampDelta ( long sourceTimestamp ) { if ( timestampDeltaInitialized ) { return ; } if ( RTPUtils . isNewerTimestampThan ( maxDestinationSequenceNumber , sourceTimestamp ) ) { long destinationTimestamp = ( maxDestinationTimestamp + 3000 ) & RawPacket . TIMESTAMP_MASK ; timestampDelta = RTPUtils . rtpTimestampDiff ( destinationTimestamp , sourceTimestamp ) ; } timestampDeltaInitialized = true ; }", "import java . util . Map . Entry ;", "+ \" final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(\\n\" + \" FUNC_FUNCTIONNAME, \\n\"", "", "cursorConverter . convert ( stat . getFirst ( ) ) . getOffset ( ) , cursorConverter . convert ( stat . getLast ( ) ) . getOffset ( ) ) )", "private static final String [ ] URL_PARAMETER_METHOD = new String [ ] { \"ApexPages\" , \"currentPage\" , \"getParameters\" , \"get\" , } ; private static final String [ ] HTML_ESCAPING = new String [ ] { \"ESAPI\" , \"encoder\" , \"SFDC_HTMLENCODE\" } ; private static final String [ ] JS_ESCAPING = new String [ ] { \"ESAPI\" , \"encoder\" , \"SFDC_JSENCODE\" } ; private static final String [ ] JSINHTML_ESCAPING = new String [ ] { \"ESAPI\" , \"encoder\" , \"SFDC_JSINHTMLENCODE\" } ; private static final String [ ] URL_ESCAPING = new String [ ] { \"ESAPI\" , \"encoder\" , \"SFDC_URLENCODE\" } ; private static final String [ ] INTEGER_VALUEOF = new String [ ] { \"Integer\" , \"valueOf\" } ; private static final String [ ] ID_VALUEOF = new String [ ] { \"ID\" , \"valueOf\" } ; private static final String [ ] DOUBLE_VALUEOF = new String [ ] { \"Double\" , \"valueOf\" } ; private static final String [ ] STRING_ISEMPTY = new String [ ] { \"String\" , \"isEmpty\" } ; private static final Set < String > urlParameterString = new HashSet < > ( ) ; public ApexXSSFromURLParamRule ( ) { setProperty ( CODECLIMATE_CATEGORIES , new String [ ] { \"Security\" } ) ; setProperty ( CODECLIMATE_REMEDIATION_MULTIPLIER , 50 ) ; setProperty ( CODECLIMATE_BLOCK_HIGHLIGHTING , false ) ; } ; private static final Set < String > urlParameterString = new", "final AppletParameters parameters ) { return ( ) -> { drawEmbed . getGeoEmbed ( ) . setAppName ( parameters . getDataParamAppName ( ) ) ; return true ;", "private final static int UPDATE_AFTER = 200 ; private long lastUpdate = - 1 ; private void postUpdate ( ) { if ( lastUpdate < 0 || ( System . currentTimeMillis ( ) - lastUpdate ) > UPDATE_AFTER ) { lastUpdate = System . currentTimeMillis ( ) ; mHandler . post ( new Runnable ( ) { public void run ( ) { doUpdate ( ) ; } } ) ; } }", "Namespace . ID namespaceId = ClientServiceHandler . checkNamespaceId ( master . getInstance ( ) , namespace , tableOp ) ;", "import org . syncany . operations . daemon . messages . api . EventResponse ; import org . syncany . operations . daemon . messages . api . JsonMessageFactory ;", "import mchorse . blockbuster . utils . TextureLocation ;", "import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertTrue ; import java . io . File ; import java . util . Properties ; import it . unibz . inf . ontop . owlrefplatform . owlapi3 . * ; import org . junit . Before ; import org . junit . Test ; import it . unibz . inf . ontop . injection . MappingParser ; import it . unibz . inf . ontop . owlrefplatform . core . QuestPreferences ; import org . junit . Before ; import org . junit . Test ; import it . unibz . inf . ontop . io . ModelIOManager ; import it . unibz . inf . ontop . model . OBDADataFactory ; import it . unibz . inf . ontop . model . impl . OBDADataFactoryImpl ;", "", "public void defaultPropertyCanBeOverriddenFromCommandLine ( ) throws Exception { this . context = getContext ( ( ) -> initializeAndRun ( Config . class , \"--spring.thymeleaf.cache=true\" ) ) ; SpringResourceTemplateResolver resolver = this . context . getBean ( SpringResourceTemplateResolver . class ) ; }", "", "", "syncHub ( ) ;", "", "@ SuppressWarnings ( \"unchecked\" ) public Class < T > getClassType ( ) throws ClassNotFoundException { return Utils . getClassType ( getType ( ) ) ; }", "} catch ( InputCoercionException e ) { verifyException ( e , \"out of range of `int`\" ) ; assertEquals ( JsonToken . VALUE_NUMBER_INT , e . getInputType ( ) ) ; assertEquals ( Integer . TYPE , e . getTargetType ( ) ) ;", "", "import java . util . ArrayList ; import java . util . List ;", "import java . io . * ; import java . util . Arrays ; import java . nio . file . Path ; import java . nio . file . Paths ;", "uploadFile , step . getMultipartName ( ) , step . getAuthentication ( ) , step . getUseSystemProperties ( ) ,", "List < Subscription > subscriptions = entitlementDao . getSubscriptions ( subscriptionFactory , bundle . getId ( ) ) ;", "", "try ( final BitbucketApi baseApi = api ( server . getUrl ( \"/\" ) ) ) { final List < String > groupPermission = Lists . newArrayList ( \"Test12354\" ) ; final List < Long > listAccessKey = Lists . newArrayList ( 123L ) ; final List < BranchRestriction > listBranchPermission = new ArrayList < > ( ) ; listBranchPermission . add ( BranchRestriction . createWithId ( 839L , BranchRestrictionEnumType . FAST_FORWARD_ONLY ,", "package com . yangdb . fuse . model . results ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . annotation . JsonInclude ; import com . fasterxml . jackson . annotation . JsonSubTypes ; import com . yangdb . fuse . model . asgQuery . AsgCompositeQuery ; import javaslang . collection . Stream ; import java . util . * ; @ JsonSubTypes ( { @ JsonSubTypes . Type ( name = \"Assignment\" , value = AssignmentCount . class ) } ) @ JsonInclude ( JsonInclude . Include . NON_EMPTY ) @ JsonIgnoreProperties ( ignoreUnknown = true ) public class Assignment < E , R > { public Assignment ( ) { this . entities = Collections . emptyList ( ) ; this . relationships = Collections . emptyList ( ) ; } public List < R > getRelationships ( ) { return relationships ; } public void setRelationships ( List < R > relationships ) { this . relationships = relationships ; } public List < E > getEntities ( ) { return entities ; } public void setEntities ( List < E > entities ) { this . entities = entities ; } @ Override public String toString ( ) { return \"Assignment [relationships = \" + relationships + \", entities = \" + entities + \"]\" ; } private List < E > entities ; private List < R > relationships ; public static final class Builder { private Builder ( ) { entities = new HashMap < > ( ) ; relationships = new ArrayList < > ( ) ; } public static Builder instance ( ) { return new Builder ( ) ; } public static Builder instance ( ) { return new Builder ( ) ; } @ Override public String toString ( ) { return \"Assignment [relationships = \" + relationships + \", entities = \" + entities + \"]\" ; } private List < E > entities ; private List < R > relationships ; public static Builder instance ( ) { return new Builder ( ) ; } public", "", "private static final int TAB_ID_ACCOUNTS = 1 ; private static final int TAB_ID_BALANCE = 2 ; private static final int TAB_ID_HISTORY = 3 ; private static final int REQUEST_SETTING_CHANGED = 5 ; public static final int MIN_AUTOSYNC_INTERVAL = ( int ) Constants . MS_PR_MINUTE ; public static final int MIN_FULLSYNC_INTERVAL = ( int ) ( 5 * Constants . MS_PR_HOUR ) ; public static final String LAST_SYNC = \"LAST_SYNC\" ; private static final String APP_START = \"APP_START\" ; private MbwManager _mbwManager ; private int addressBookTabIndex ; ViewPager mViewPager ; TabsAdapter mTabsAdapter ; TabLayout . Tab mBalanceTab ; TabLayout . Tab mNewsTab ; TabLayout . Tab mAccountsTab ; TabLayout . Tab mRecommendationsTab ; private MenuItem refreshItem ; private Toaster _toaster ; private volatile long _lastSync = 0 ; private boolean _isAppStart = true ; private int counter = 0 ; private Timer balanceRefreshTimer ; @ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; _mbwManager = MbwManager . getInstance ( this ) ; WalletApplication . applyLanguageChange ( getBaseContext ( ) , _mbwManager . getLanguage ( ) ) ; setContentView ( R . layout . modern_main ) ; TabLayout tabLayout = findViewById ( R . id . pager_tabs ) ; mViewPager = findViewById ( R . id . pager ) ; tabLayout . setupWithViewPager ( mViewPager ) ; ActionBar bar = getSupportActionBar ( ) ; bar . setDisplayShowTitleEnabled ( false ) ; bar . setDisplayShowHomeEnabled ( true ) ; getWindow ( ) . setBackgroundDrawableResource ( R . drawable . background_main ) ; m", "if ( superClass . isAnonymous ( ) && ! excludeAnonymous || ! superClass . isAnonymous ( ) ) { axioms . add ( df . getOWLSubClassOfAxiom ( subClass , superClass ) ) ; }", "", "import android . view . View ; import android . view . ViewGroup ;", "PubSub request = PubSub . createPubsubPacket ( to , Type . set , new NodeExtension ( PubSubElementType . CREATE , name ) , null ) ;", "copyOf ( transform ( datastreamService . getDatastreamsForPath ( path ) , ds2dsElement ) ) ;", "@ XmlElement ( name = \"parentMetadata\" ) @ XmlJavaTypeAdapter ( CI_Citation . Since2014 . class ) @ UML ( identifier = \"parentMetadata\" , obligation = CONDITIONAL , specification = ISO_19115 )", "* Put max datetime value with positive numoffset 9999 - 12 - 31 t23 : 59 : 59.9999999 - 14 : 00", "import alluxio . client . netty . NettyClient ; import alluxio . exception . status . AlluxioStatusException ;", "public SubSliceQuery ( KeyspaceOperator ko , Serializer < K > keySerializer , Serializer < SN > sNameSerializer ,", "consumedTagsToAddresses . clear ( ) ; consumerByAddressWithIndex . forEach ( ( addressWithIndex , child ) -> stopChildActor ( child ) ) ; consumerByAddressWithIndex . clear ( ) ;", "public String isGithub ( ) throws Exception { String result = advancedOptions . getAttribute ( \"href\" ) ; return result ; } public void clickAdvanced ( ) throws Exception { advancedOptions . click ( ) ; } public String chooseProject ( ) throws Exception { String [ ] listProjects = new String [ 3 ] ; listProjects [ 0 ] = \"user-agent\" ; listProjects [ 1 ] = \"dispatcher\" ; listProjects [ 2 ] = \"platform\" ; int index = RandomUtils . nextInt ( 0 , 2 ) ; return ( listProjects [ index ] ) ; } public boolean checkTitleFrame ( String title ) { return driver . findElement ( By . linkText ( title ) ) . isDisplayed ( ) ; } public boolean isGithub ( String validateGit ) { return driver . findElement ( By . name ( validateGit ) ) . isDisplayed ( ) ; } public void createIssueTitle ( String titleTxt ) throws Exception { openModalIssueBtn . click ( ) ; title . sendKeys ( titleTxt ) ; createBtn . click ( ) ; } public void waitingLoading ( ) throws InterruptedException { int timeout = 0 ; while ( driver . findElement ( By . id ( \"loading\" ) ) . getAttribute ( \"class\" ) . contains ( \"loading\" ) || timeout == 10 ) { Thread . sleep ( 100 ) ; timeout ++ ; } } public void waitingObject ( WebElement object ) { boolean regex = object . isEnabled ( ) ; while ( ! regex ) { WebDriverWait wait = new WebDriverWait ( this . driver , 30 ) ; WebElement element = wait . until ( ExpectedConditions . elementToBeClickable ( object ) ) ; regex = element . isEnabled ( ) ; } } public void waitingObject ( WebElement object ) { boolean regex = object . isEnabled ( ) ; while ( ! regex ) { WebDriverWait wait = new WebDriverWait ( this . driver , 30 ) ; WebElement element = wait . until ( ExpectedConditions", "if ( deployState . isHosted ( ) ) { Optional < HostResource > singleContentHost = getHostResourceFromContentClusters ( cluster , containerElement , context ) ; if ( singleContentHost . isPresent ( ) ) { return singleContentHost . get ( ) ; } else { ClusterSpec clusterSpec = ClusterSpec . request ( ClusterSpec . Type . container , ClusterSpec . Id . from ( cluster . getName ( ) ) ) . vespaVersion ( deployState . getWantedNodeVespaVersion ( ) ) . dockerImageRepo ( deployState . getWantedDockerImageRepo ( ) ) . build ( ) ; Capacity capacity = Capacity . fromCount ( 1 , Optional . empty ( ) , false , ! deployState . getProperties ( ) . isBootstrap ( ) ) ; return hostSystem . allocateHosts ( clusterSpec , capacity , 1 , logger ) . keySet ( ) . iterator ( ) . next ( ) ; } }", "Assert . assertEquals ( \"0 12 24 36 48 60 72 84 96 108\" , result2 . toString ( ) . trim ( ) ) ; ucar . unidata . test . util . CompareNetcdf . compareData ( timeDataAll , result2 ) ;", "TextView textView = new TextView ( getContext ( ) ) ; textView . setTextColor ( Theme . getColor ( Theme . key_actionBarDefaultSubmenuItem ) ) ; textView . setTextSize ( TypedValue . COMPLEX_UNIT_DIP , 16 ) ; textView . setText ( text ) ; textView . setMinWidth ( AndroidUtilities . dp ( 70 ) ) ; button . addView ( textView , LayoutHelper . createLinear ( LayoutHelper . WRAP_CONTENT , LayoutHelper . WRAP_CONTENT , Gravity . LEFT | Gravity . CENTER_VERTICAL , 0 , 0 , 16 , 0 ) ) ; ImageView check = new ImageView ( getContext ( ) ) ; check . setImageResource ( R . drawable . msg_text_check ) ; check . setScaleType ( ImageView . ScaleType . CENTER ) ; check . setColorFilter ( new PorterDuffColorFilter ( Theme . getColor ( Theme . key_radioBackgroundChecked ) , PorterDuff . Mode . SRC_IN ) ) ; check . setVisibility ( selected ? VISIBLE : INVISIBLE ) ; button . addView ( check , LayoutHelper . createLinear ( 50 , LayoutHelper . MATCH_PARENT ) ) ;", "@ DatabaseChangeProperty ( description = \"Remarks of the column\" ) public String getRemarks ( ) { return remarks ; } public void setRemarks ( String remarks ) { this . remarks = remarks ; } @ Override", "import net . sf . jabref . gui . help . HelpFiles ; import net . sf . jabref . gui . help . HelpAction ; import net . sf . jabref . gui . help . HelpDialog ; import net . sf . jabref . gui . journals . ManageJournalsAction ;", "dataSource . setValue ( parse ( newValue . toString ( ) ) ) ; if ( ! newValue . equals ( getStringValue ( ) ) ) { }", "oprot . writeBitSet ( optionals , 2 ) ; if ( struct . isSetName ( ) ) { oprot . writeString ( struct . name ) ; }", "{ AccessToken token = checkAndCreateToken ( accessToken ) ; ValidationResult validationResult = tokenValidator . validate ( token ) ; if ( validationResult . isErroneous ( ) ) { throw new InvalidTokenException ( validationResult . getErrorDescription ( ) ) ; } return getOAuth2Authentication ( token , serviceConfiguration . getClientId ( ) , getScopes ( token ) ) ; } static OAuth2Authentication getOAuth2Authentication ( Token token , String clientId , Set < String > scopes ) { AuthorizationRequest authorizationRequest = new AuthorizationRequest ( new HashMap < > ( ) , null , clientId , scopes . stream ( ) . collect ( Collectors . toSet ( ) ) , new HashSet < > ( ) , null , true , \"\" , \"\" , null ) ; SecurityContext . setToken ( token ) ; return new OAuth2Authentication ( authorizationRequest . createOAuth2Request ( ) , null ) ; } private Set < String > getScopes ( Token token ) { Set < String > scopes = token . getScopes ( ) ; }", "import static org . molgenis . data . Sort . Direction . ASC ; import static org . molgenis . data . meta . model . EntityType . AttributeRole . ROLE_ID ; import static org . molgenis . data . meta . model . EntityType . AttributeRole . ROLE_LABEL ;", "ITenant systemTenant = tenantManager . createTenant ( null , ServerRepositoryPaths . getPentahoRootFolderName ( ) , adminAuthorityName , authenticatedAuthorityName , \"Anonymous\" ) ; userRoleDao . createUser ( systemTenant , sysAdminUserName , \"password\" , \"\" , new String [ ] { adminAuthorityName } ) ; ITenant mainTenant_1 = tenantManager . createTenant ( systemTenant , MAIN_TENANT_1 , adminAuthorityName , authenticatedAuthorityName , \"Anonymous\" ) ; userRoleDao . createUser ( mainTenant_1 , \"admin\" , \"password\" , \"\" , new String [ ] { adminAuthorityName } ) ; login ( \"admin\" , mainTenant_1 , new String [ ] { authenticatedAuthorityName } ) ;", "private Attributes versionClientLibs ( final String elementName , final Attributes attrs , final String contextPath ) { if ( SAXElementUtils . isCSS ( elementName , attrs ) ) { } }", "for ( PacketBuffer buffer : toServer ) { send ( buffer , buffer . getBufLength ( ) ) ; }", "public void onError ( Throwable t , Session session ) { Optional < String > endpointIdOptional = registry . get ( session ) ; String combinedEndpointId ; if ( endpointIdOptional . isPresent ( ) ) { combinedEndpointId = endpointIdOptional . get ( ) ; LOG . debug ( \"Web socket session error\" ) ; LOG . debug ( \"Error: {}\" , t ) ; } else { LOG . warn ( \"Web socket session error\" ) ; LOG . debug ( \"Unidentified session\" ) ; LOG . debug ( \"Error: {}\" , t ) ; } } protected abstract String getEndpointId ( ) ; private String getOrGenerateCombinedEndpointId ( Session session ) { Map < String , String > queryParamsMap = getQueryParamsMap ( session . getQueryString ( ) ) ; String clientId = queryParamsMap . getOrDefault ( \"clientId\" , randomClientId ( ) ) ; return registry . get ( session ) . orElse ( identificationService . getCombinedId ( getEndpointId ( ) , clientId ) ) ; } private Map < String , String > getQueryParamsMap ( String queryParamsString ) { Map < String , String > queryParamsMap = new HashMap < > ( ) ; for ( String queryParamsPair : Optional . ofNullable ( queryParamsString ) . orElse ( \"\" ) . split ( \"&\" ) ) { String [ ] pair = queryParamsPair . split ( \"&\" ) ; if ( pair . length == 2 ) { queryParamsMap . put ( pair [ 0 ] , pair [ 1 ] ) ; } } return queryParamsMap . isEmpty ( ) ? emptyMap ( ) : unmodifiableMap ( queryParamsMap ) ; }", "moPubAdsManager , preferencesManager , downloadStateParser , appViewAnalytics , notificationAnalytics , installAnalytics , limit , socialRepository , \"anyString\" , appCoinsManager , promotionsManager , \"\" , installedRepository ) ;", "boolean sortAscending1 , String fieldName2 , boolean sortAscending2 ) { return allObjectsSorted ( clazz , new String [ ] { fieldName1 , fieldName2 } , new boolean [ ] { sortAscending1 ,", "if ( player . getBedLocation ( GCCoreUtil . getDimensionID ( player . worldObj ) ) == null || stats . isNewAdventureSpawn ( ) )", "protected void rollup ( final MProduct product , final I_PP_Product_BOM bom )", "private final UserColorService translatorColorService ; private boolean isModalNavEnabled ;", "public interface DRProducerResponseHandler { public void notifyOfResponse ( boolean success , boolean shouldRetry , String failureCause ) ; } public void startAndWaitForGlobalAgreement ( ) throws IOException ;", "+ qres . cause ( ) + \" sql: \" + sql ) ;", "import static java . util . logging . Level . * ; import jenkins . model . RunAction2 ; import javax . annotation . Nonnull ;", "private final MutableMetaStore metaStore = MetaStoreFixture . getNewMetaStore ( new InternalFunctionRegistry ( ) ) ;", "bestBlock = blockchain . getBestBlock ( ) ; ethereumListener . addListener ( listener ) ; }", "case Property . LIST_SYMBOL_PRE_TEXT : return ( T1 ) \"\" ; case Property . LIST_SYMBOL_POST_TEXT : return ( T1 ) \". \" ;", "{ GameData . register_impl ( rec ) ; }", ". flatMapSingle ( __ -> appViewManager . loadAppViewViewModel ( ) ) . doOnNext ( model -> appViewAnalytics . sendFlagAppEvent ( type . name ( ) ) ) . flatMapSingle ( model -> appViewManager . flagApp ( model . getStore ( )", "this . analysisContext = analysisContext ;", "import androidx . annotation . Nullable ; import androidx . appcompat . app . AppCompatActivity ;", "public List < User > findAll ( ) { String sql = \"select * from userinfo\" ; ResultSet rs = b . doQuery ( sql ) ; ArrayList list = new ArrayList ( ) ; User ui = null ; try { while ( rs . next ( ) ) { ui = new User ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getInt ( 3 ) ) ; list . add ( ui ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } return list ; }", "public int getQuestionMarkParameterCount ( ) { return m_questionMarkParameterCount ; } public boolean wasPlannedAgainstHash ( byte [ ] catalogHash ) { return Arrays . equals ( catalogHash , this . catalogHash ) ; }", "return ( ( resumeParameter == null ) ? other . resumeParameter == null : ( resumeParameter . equals ( other . resumeParameter ) ) ) && ( ( rows == null ? other . rows == null : ( rows . size ( ) == other . rows . size ( ) && rows . containsAll ( other . rows ) ) ) && ( webSafeRefetchCursor == null ? other . webSafeRefetchCursor == null : ( webSafeRefetchCursor . equals ( other . webSafeRefetchCursor ) ) ) && ( webSafeBackwardCursor == null ? other . webSafeBackwardCursor == null : ( webSafeBackwardCursor . equals ( other . webSafeBackwardCursor ) ) ) && ( webSafeResumeCursor == null ? other . webSafeResumeCursor == null : ( webSafeResumeCursor . equals ( other . webSafeResumeCursor ) ) ) && ( hasMoreResults == other . hasMoreResults ) && ( hasPriorResults == other . hasPriorResults ) ) ;", "DataCenterVO dcVO = _dcDao . findById ( vm . getDataCenterIdToDeployIn ( ) ) ; HostPodVO pod = _podDao . findById ( rootVolumeOfVm . getPodIdToDeployIn ( ) ) ;", "final World world = event . getTransactions ( ) . get ( 0 ) . getFinal ( ) . getLocation ( ) . get ( ) . getExtent ( ) ; if ( ! GriefPreventionPlugin . instance . claimsEnabledForWorld ( world . getProperties ( ) ) ) { }", "import org . springframework . boot . autoconfigure . condition . ConditionalOnMissingBean ; import org . springframework . boot . context . properties . EnableConfigurationProperties ;", "public AssertingLocalTransport ( Settings settings , ThreadPool threadPool , Version version , NamedWriteableRegistry namedWriteableRegistry ) { super ( settings , threadPool , version , namedWriteableRegistry ) ; final long seed = settings . getAsLong ( ESIntegTestCase . SETTING_INDEX_SEED , 0l ) ; }", "mUsername = \"\" ; mGroupname = \"\" ; mPermission = FsPermission . getNoneFsPermission ( ) . toShort ( ) ; mIsPersisted = false ;", "synchronized ( mChanges ) { mChanges . clear ( ) ; }", "throw SQLError . createSQLException ( Messages . getString ( \"EscapeProcessor.5\" , new Object [ ] { functionToken } ) , SQLError . SQL_STATE_SYNTAX_ERROR , exceptionInterceptor ) ;", "import com . sk89q . worldedit . session . SessionOwner ; import com . sk89q . worldedit . util . command . * ; import com . sk89q . worldedit . util . command . binding . Range ;", "final Invoice invoice = getAndSanitizeInvoice ( invoiceId , internalContext ) ; if ( ! InvoiceStatus . COMMITTED . equals ( invoice . getStatus ( ) ) ) { return new DefaultPriorPaymentControlResult ( true ) ; } final ImmutableAccountData accountData = accountApi . getImmutableAccountDataById ( invoice . getAccountId ( ) , internalContext ) ; if ( ( accountData != null ) && ( accountData . getParentAccountId ( ) != null ) && accountData . isPaymentDelegatedToParent ( ) ) { return new DefaultPriorPaymentControlResult ( true ) ; }", "public TestRemoteCatalogRequest ( String name ) { super ( name ) ; } @ Override public void setUp ( ) { ThreddsServer . LIVE . assumeIsAvailable ( ) ; } public void testCommandDefaultValues ( )", "{ operations . add ( buildOperation ( TYPE_1 , \"data2\" , SOperatorType . XPATH_UPDATE_QUERY ) ) ; operations . add ( buildOperation ( TYPE_2 , \"data3\" , SOperatorType . JAVA_METHOD ) ) ; operations . add ( buildOperation ( TYPE_2 , \"data4\" , SOperatorType . XPATH_UPDATE_QUERY ) ) ; operations . add ( buildOperation ( TYPE_2 , \"data5\" , SOperatorType . DELETION ) ) ; final HashMap < String , Object > inputValues = new HashMap < > ( ) ; final SExpressionContext expressionContext = new SExpressionContext ( 123l , \"containerType\" , 987L , inputValues ) ; operationServiceImpl . retrieveLeftOperandsAndPutItInExpressionContextIfNotIn ( operations , 123l , \"containerType\" , expressionContext ) ; verify ( leftOperandHandler1 , times ( 1 ) ) . loadLeftOperandInContext ( leftOperandCaptor1 . capture ( ) , anyLong ( ) , anyString ( ) , eq ( expressionContext ) ) ; final List < SLeftOperand > value1 = leftOperandCaptor1 . getValue ( ) ; assertThat ( value1 ) . extracting ( \"name\" ) . containsOnly ( \"data1\" , \"data2\" ) ; verify ( leftOperandHandler2 , times ( 1 ) ) . loadLeftOperandInContext ( leftOperandCaptor2 . capture ( ) , anyLong ( ) , anyString ( ) , eq ( expressionContext ) ) ; final List < SLeftOperand > value1 = leftOperandCaptor1 . getValue ( ) ; assertThat ( value1 ) . extracting ( \"name\" ) . containsOnly ( \"data1\" , \"data2\" ) ; verify ( leftOperandHandler2 , times ( 1 ) ) . loadLeftOperandInContext ( leftOperandCaptor2 . capture ( ) ,", "BlockchainConfig blockchainConfig = CDI . current ( ) . select ( BlockchainConfig . class ) . get ( ) ; aplCoreRuntime . init ( runtimeMode , blockchainConfig , app . propertiesHolder , app . taskDispatchManager ) ; Convert2 . init ( blockchainConfig ) ;", "result . add ( Currencies . BURST ) ; result . add ( Currencies . DOGE ) ;", "public long zValue ( Row row ) { bind ( row ) ; return Spatial . shuffle ( space , coords [ 0 ] , coords [ 1 ] ) ; }", "\"@Store(type=\\\"testStoreContainingInMemoryTable\\\", @Cache(size=\\\"10\\\"))\\n\" +", "import static org . thingsboard . server . dao . DaoUtil . toUUIDs ;", "if ( isClosed ) { throw new IllegalStateException ( \"Cannot search on BitmapTriples if it's already closed\" ) ; } if ( getNumberOfElements ( ) == 0 || pattern . isNoMatch ( ) ) { return new EmptyTriplesIterator ( order ) ; }", "_assertNotNull ( \"src\" , src ) ; DefaultDeserializationContext ctxt = createDeserializationContext ( src ) ; return _bindAndCloseAsTree ( ctxt , _considerFilter ( _parserFactory . createParser ( ctxt , src ) , false ) ) ;", "cur . allSuccessorsDo ( false , new BlockClosure ( ) { public void apply ( BlockBegin block ) { if ( readyForProcessing ( block ) ) { sortIntoWorkList ( block ) ; }", "npc ( \"Hello. Welcome to the \" + GameWorld . getSettings ( ) . getName ( ) + \" Housing Agency! What\" , \"can I do for you?\" ) ;", "return graph . getNodeCount ( ) ;", "Set < String > qualifierNames = message . get ( Set . class , CDIProtocol . QUALIFIERS ) ; List < Annotation > qualifiers = null ; if ( qualifierNames != null ) { for ( String qualifierName : qualifierNames ) { if ( qualifiers == null ) { qualifiers = new ArrayList < Annotation > ( ) ; } Annotation qualifier = allQualifiers . get ( qualifierName ) ; if ( qualifier != null ) { qualifiers . add ( qualifier ) ; } } } if ( qualifiers != null ) { beanManager . fireEvent ( o , qualifiers . toArray ( new Annotation [ qualifiers . size ( ) ] ) ) ; } else { beanManager . fireEvent ( o ) ; } if ( conversationalEvents . containsKey ( clazz ) ) { final Class outType = conversationalEvents . get ( clazz ) ; final String outTypeStr = outType . getName ( ) ; final String sessionId = Util . getSessionId ( message ) ; ( ( BeanManagerImpl ) beanManager ) . fireEvent ( new ParameterizedType ( ) { public Type [ ] getActualTypeArguments ( ) { return new Type [ ] { clazz , outType } ; } public Type getRawType ( ) { return ConversationalEvent . class ; } public Type getOwnerType ( ) { return ConversationalEvent . class ; } } , new ConversationalEvent < Object , Object > ( ) { public Object getEvent ( ) { return o ; } public void fire ( Object o ) { MessageBuilder . createMessage ( ) . toSubject ( \"cdi.event:\" + outTypeStr ) . command ( CDICommands . CDIEvent ) . with ( MessageParts . SessionID , sessionId ) . with ( CDIProtocol . TYPE , outTypeStr ) . with ( CDIProtocol . OBJECT_REF , o ) . noErrorHandling ( ) . sendNowWith ( bus ) ; } } ) ; } public Object > ( ) { public Object getEvent ( ) { return o ; } public void fire (", "String idColName = getColumnName ( entityType . getIdAttribute ( ) ) ; String refIdColName = getColumnName ( attr ) ;", "private final PrecompiledContractContext context ; private DelegateState delegateState ;", "TransactionTemplate tt = new TransactionTemplate ( tm ) ; boolean condition3 = ! TransactionSynchronizationManager . hasResource ( dsToUse ) ; assertThat ( condition3 ) . as ( \"Hasn't thread connection\" ) . isTrue ( ) ; boolean condition2 = ! TransactionSynchronizationManager . isSynchronizationActive ( ) ; assertThat ( condition2 ) . as ( \"Synchronization not active\" ) . isTrue ( ) ;", "", "import common . SolrConnector ;", "", "import com . redhat . ceylon . compiler . typechecker . tree . Tree . SequencedArgument ;", "", "public void createConfigInstanceWithInterfaceReturnsNull ( ) { final OverrideUtil interfaceObject = OverrideUtil . createInstance ( OverrideUtil . class ) ; assertThat ( interfaceObject ) . isNull ( ) ; } @ Test public void createConfigInstanceWithInterfaceReturnsNull ( ) { final ConfigKeyPair keyPair = OverrideUtil . createInstance ( ConfigKeyPair . class ) ; assertThat ( keyPair ) . isNull ( ) ; }", "import com . senseidb . servlet . AbstractSenseiClientServlet ;", "", "", "this . keyGenerator = keyGenerator ;", "public static List < BaseText > printEntitiesByType ( SpawnGroup cat , World worldIn , boolean all )", "import java . util . Set ;", "isDefault , ExternalPaymentProviderPlugin . PLUGIN_NAME , info , EMPTY_AUDIT_LOGS ) ; final PaymentMethod paymentMethod = accountApi . createPaymentMethod ( input . getAccountId ( ) , paymentMethodJson , NULL_PLUGIN_NAMES , NULL_PLUGIN_PROPERTIES , requestOptions ) ; callbackServlet . assertListenerStatus ( ) ; return paymentMethod ;", "", "", "CONFIG ( \"config\" , \"config\" , \"Config\" , \"Config\" , true ) , ABTEST ( \"abtest\" , \"abtest\" , \"Abtest\" , \"Abtest\" , true ) ;", "@ Nonnull public CallRecordRequestBuilder callRecords ( @ Nonnull final String id ) { }", "private final static String base64Secret = \"MDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjY=\" ; private final static int expiresSecond = 1000 * 60 * 2 * 60 ; private static Logger log = LoggerFactory . getLogger ( JwtUtil . class ) ; public static Claims parseJWT ( String jsonWebToken ) { }", "ConfigGetCommand . ConfigGetDisklessSync command = new ConfigGetCommand . ConfigGetDisklessSync ( requestResponseCommandPool , scheduled ) ; silentCommand ( command ) ; command . execute ( ) . addListener ( new CommandFutureListener < Boolean > ( ) {", "private static final Logger LOG = LoggerFactory . getLogger ( NettyPacketReader . class ) ; private static final boolean CANCEL_ENABLED = Configuration . getBoolean ( PropertyKey . USER_NETWORK_NETTY_READER_CANCEL_ENABLED ) ;", "", "nodeConfig ( secondNodeBaseUrl , secondNodePort , secondNodePrivacyUrl , secondNodePrivacyPort , \"node2\" , firstNodeBaseUrl , \"src/test-acceptance/resources/key2.pub\" , \"src/test-acceptance/resources/key2.key\" ) ;", "String contactId = \"\" ; String rawId = \"\" ; String oldContactId = \"\" ; boolean newContact = true ; String mimetype = \"\" ; JSONArray contacts = new JSONArray ( ) ; JSONObject contact = new JSONObject ( ) ; JSONArray organizations = new JSONArray ( ) ; JSONArray addresses = new JSONArray ( ) ; JSONArray phones = new JSONArray ( ) ; JSONArray emails = new JSONArray ( ) ; JSONArray ims = new JSONArray ( ) ; JSONArray websites = new JSONArray ( ) ; JSONArray photos = new JSONArray ( ) ; if ( c . getCount ( ) > 0 ) { while ( c . moveToNext ( ) && ( contacts . length ( ) <= ( limit - 1 ) ) ) { try { contactId = c . getString ( c . getColumnIndex ( ContactsContract . Data . CONTACT_ID ) ) ; rawId = c . getString ( c . getColumnIndex ( ContactsContract . Data . RAW_CONTACT_ID ) ) ; if ( c . getPosition ( ) == 0 ) { oldContactId = contactId ; } if ( ! oldContactId . equals ( contactId ) ) { contacts . put ( populateContact ( contact , organizations , addresses , phones , emails , ims , websites , photos ) ) ; contact = new JSONObject ( ) ; organizations = new JSONArray ( ) ; addresses = new JSONArray ( ) ; phones = new JSONArray ( ) ; emails = new JSONArray ( ) ; ims = new JSONArray ( ) ; websites = new JSONArray ( ) ; photos = new JSONArray ( ) ; newContact = true ; } if ( newContact ) { contacts . put ( populateContact ( contact , organizations , addresses , phones , emails , ims , websites , photos ) ) ; contact = new JSONObject ( ) ; websites = new JSONArray ( ) ; photos = new JSONArray ( ) ; new JSONArray ( ) ; photos = new JSONArray ( ) ; new JSONArray ( ) ; websites = new JSONArray ( )", "protected OkHttpMetricsEventListener ( MeterRegistry registry , String requestsMetricName , Function < Request , String > urlMapper , Iterable < Tag > extraTags , Iterable < BiFunction < Request , Response , Tag > > contextSpecificTags , boolean includeHostTag , Iterable < String > requestTagKeys ) { }", "String authUserId = CurrentUser . get ( resource . session ( ) ) ; if ( authUserId == null ) { }", "dispatcherServlet . setDispatchOptionsRequest ( webMvcProperties . isDispatchOptionsRequest ( ) ) ; dispatcherServlet . setDispatchTraceRequest ( webMvcProperties . isDispatchTraceRequest ( ) ) ; dispatcherServlet . setThrowExceptionIfNoHandlerFound ( webMvcProperties . isThrowExceptionIfNoHandlerFound ( ) ) ; dispatcherServlet . setEnableLoggingRequestDetails ( httpProperties . isLogRequestDetails ( ) ) ;", "import de . rub . nds . tlsattacker . core . workflow . chooser . Chooser ; import de . rub . nds . tlsattacker . core . state . TlsContext ;", "final Collection < AbstractIdentifiedType > properties = complex . getPropertyTypes ( false ) ; final Iterator < AbstractIdentifiedType > it = properties . iterator ( ) ;", "boolean doOpennet = ! ( fromOfferedKey || isSSK ) ; if ( doOpennet ) origTag . waitingForOpennet ( next ) ; try { fireRequestSenderFinished ( code ) ; if ( doOpennet ) { finishOpennet ( next ) ; } } finally { if ( doOpennet ) origTag . finishedWaitingForOpennet ( next ) ; }", "assertEquals ( c . getSchemas ( ) . size ( ) , 0 , \"The map is expected to be empty.\" ) ; final String schemaKey2 = \"mySchemaKey2\" ; final Schema schemaValue2 = createConstructibleInstance ( Schema . class ) ; c . setSchemas ( Collections . singletonMap ( schemaKey2 , schemaValue2 ) ) ; checkMapEntry ( c . getSchemas ( ) , schemaKey2 , schemaValue2 ) ; assertEquals ( c . getSchemas ( ) . size ( ) , 1 , \"The map is expected to contain one entry.\" ) ; checkSameObject ( c , c . addSchema ( schemaKey , schemaValue ) ) ; checkMapEntry ( c . getSchemas ( ) , schemaKey , schemaValue ) ; assertEquals ( c . getSchemas ( ) . size ( ) , 2 , \"The map is expected to contain two entries.\" ) ; Schema otherSchemaValue = createConstructibleInstance ( Schema . class ) ; checkMapImmutable ( c , Components :: getSchemas , \"otherSchema\" , otherSchemaValue ) ;", "import net . minecraft . entity . ai . brain . Brain ; import net . minecraft . entity . ai . brain . Memory ; import net . minecraft . entity . EntityCategory ; import net . minecraft . entity . EntityGroup ;", "if ( ! n . containsFlag ( PipeRoutingConnectionType . canRequestFrom ) ) continue ; if ( used . get ( n . node . getSimpleID ( ) ) ) continue ;", "import java . util . concurrent . CyclicBarrier ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . Future ; import java . util . concurrent . FutureTask ; import java . util . concurrent . RunnableFuture ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicReference ;", "@ Override public void internalError ( Throwable t , RequestScheduler sched , ObjectContainer container , ClientContext context , boolean persistent ) { }", "assertNull ( records . get ( 0 ) . get ( \"advertiser.name\" ) ) ;", "private final ElideSettings elideSettings ; private final int updateStatusCode ;", "", "import cz . startnet . utils . pgdiff . Pair ;", "if ( initialized ) updateComponent ( ) ; return e ;", "public AtomicLong getRequests ( ) { }", "logger . log ( Level . FINER , \" Additional JARs have been added : ''{0}''\" , name ) ; return true ;", "ViewGroup oldOwner = owner ; Object o = Jenkins . XSTREAM2 . unmarshal ( XStream2 . getDefaultDriver ( ) . createReader ( in ) , this , null , true ) ;", "mobCacheConfig = new MobCacheConfig ( conf ) ;", "private Procedure typeOf ; private boolean isType ; private boolean isAggregation ;", "import com . google . common . collect . Maps ; import lombok . Data ;", "Future < Integer > future2 = actAsync ( new FileCallable < Integer > ( ) { private static final long serialVersionUID = 1L ; @ Override public Integer invoke ( File f , VirtualChannel channel ) throws IOException , InterruptedException { return writeToTar ( new File ( remote ) , scanner , TarCompression . GZIP . compress ( pipe . getOut ( ) ) ) ; } } ) ;", "import com . sk89q . worldedit . world . block . BlockState ; import com . sk89q . worldedit . world . block . BlockStateHolder ;", "addFactory ( IX_WIDGET . MAW_PROGRESS_BAR , new ProgressBarFactory ( ) ) ; addFactory ( IX_WIDGET . MAW_ACTIVITY_INDICATOR , new ActivityIndicatorFactory ( ) ) ; addFactory ( IX_WIDGET . MAW_SLIDER , new SliderFactory ( ) ) ; addFactory ( IX_WIDGET . MAW_DATE_PICKER , new DatePickerFactory ( ) ) ; addFactory ( IX_WIDGET . MAW_TIME_PICKER , new TimePickerFactory ( ) ) ; addFactory ( IX_WIDGET . MAW_VIDEO_VIEW , new VideoViewFactory ( ) ) ; addFactory ( IX_WIDGET . MAW_TOGGLE_BUTTON , new ToggleButtonFactory ( ) ) ; addFactory ( IX_WIDGET . MAW_CAMERA_PREVIEW , new CameraPreviewFactory ( ) ) ;", "{ return new Location ( extent , this . withX ( x ) , yaw , pitch ) ; }", "protected Database createTempDb ( Object customFile , FileFormat format , boolean inMemory , Path tempDir , boolean readOnly )", "@ JDIAction", "if ( ! rule . getAttribute ( JavaBackendRuleData . class ) . isCompiledForFastRewriting ( ) ) { return setCellsToCopyForUncompiledRule ( rule ) ; }", "Integer [ ] [ ] columnHeights = new Integer [ blueprintBuilder . blueprint . sizeX - 2 ] [ blueprintBuilder . blueprint . sizeZ - 2 ] ; boolean [ ] [ ] blockedColumns = new boolean [ blueprintBuilder . blueprint . sizeX - 2 ] [ blueprintBuilder . blueprint . sizeZ - 2 ] ; for ( int searchY = yCoord + 3 ; searchY >= 0 ; -- searchY ) { }", "ToolbarDockStation . this . indexBeneathMouse = indexOf ( getDockableBeneathMouse ( ) ) ; ToolbarDockStation . this . sideBeneathMouse = this . getSideDockableBeneathMouse ( ) ;", "assetDefinitionService , tokensService , openseaService ) ;", "import build . buildfarm . common . DigestUtil ; import build . buildfarm . common . Write ; import com . google . common . cache . Cache ; import com . google . common . cache . CacheBuilder ;", "if ( bundleFiles != null ) { for ( String fileName : bundleFiles . keySet ( ) ) { File file = bundleFiles . get ( fileName ) ; InputStream is = null ; try { is = new FileInputStream ( file ) ; BundleFile bundleFile = bundleManager . addBundleFile ( subject , bundleVersion . getId ( ) , fileName , bundleVersion . getVersion ( ) , null , is ) ; log . debug ( \"Added bundle file [\" + bundleFile + \"] to BundleVersion [\" + bundleVersion + \"]\" ) ; } finally { safeClose ( is ) ; if ( null != file ) { file . delete ( ) ; } } } }", "if ( path == null || ! BaseFileProviderUtils . isDirectory ( getActivity ( ) , path ) ) { Log . d ( CLASSNAME , \"load default path\" ) ; path = BaseFileProviderUtils . getDefaultPath (", "setState ( 769 ) ;", "import cgeo . geocaching . geopoint . Geopoint ;", "", "", "registry . setDomainObjectTypes ( within ( packagesWithDotSuffix , domainObjectTypes ) ) ; registry . setViewModelTypes ( within ( packagesWithDotSuffix , viewModelTypes ) ) ; registry . setXmlElementTypes ( within ( packagesWithDotSuffix , xmlElementTypes ) ) ;", "if ( isPamEnabled ( ) ) { String pamConfig = configuration . getPamConfigurationFile ( ) ; PAM pam = pamAuthenticationFactory . createInstance ( pamConfig ) ; }", "public static final ConfiguredFeature < ? , ? > TRILLIUM_CF = Feature . FLOWER . withConfiguration ( TRILLIUM_FEATURE_CONFIG ) . withPlacement ( Features . Placements . VEGETATION_PLACEMENT ) . withPlacement ( Features . Placements . HEIGHTMAP_PLACEMENT ) ;", "private DownloadFactory downloadFactory ; private TimelineAnalytics timelineAnalytics ; private AppViewAnalytics appViewAnalytics ;", "import it . unibz . inf . ontop . model . term . Constant ;", "import javax . servlet . http . HttpSession ; import java . util . ArrayList ; import java . util . List ; import static org . mockito . Mockito . * ; import static org . springframework . test . web . ModelAndViewAssert . * ; import static org . testng . Assert . assertEquals ;", "Criterion filterHql = SosTemporalRestrictions . filterHql ( tf , 1 ) ; assertThat ( filterHql . toString ( ) , equalTo ( \"resultTime>:resultTime1\" ) ) ;", "private static final String WAIT_DIALOG_KEY = \"fragment_dialog_wait\" ; private static final int ABBREV_TEXT_LEN = 150 ; private static final String CUSTOM_SITES_ID = \"IdCustomSites\" ; private static final int MAX_THUMBNAIL_WIDTH = 85 ; private static final String STATE_NAV_ARRAY_KEY = \"nav_array\" ; private String baseURL = \"\" ; private String user = \"\" ; private String password = \"\" ;", "@ Override", "tester . testContentDispositionHeaderSetToAttachmentWithFilename ( uri , expected ) ;", "int x = this . getX ( ) ; int y = this . getY ( ) ; int z = this . getZ ( ) ;", "import com . samourai . wallet . tor . TorManager ; import com . samourai . wallet . tor . TorService ;", "OpenCGAResult < Individual > individualDataResult = individualDBAdaptor . get ( studyUid , queryCopy , queryOptions , user ) ; if ( individualDataResult . getNumResults ( ) == 0 ) { individualDataResult = individualDBAdaptor . get ( queryCopy , queryOptions ) ; if ( individualDataResult . getNumResults ( ) == 0 ) { } }", "", "* Copyright ( c ) 1998 - 2017 University Corporation for Atmospheric Research / Unidata", "@ Override public QueryTreeComponent createSnapshot ( ) { return new DefaultQueryTreeComponent ( tree . createSnapshot ( ) , new VariableGenerator ( variableGenerator . getKnownVariables ( ) ) ) ; } @ Override public void replaceNodeByChild ( QueryNode parentNode , Optional < ArgumentPosition > optionalReplacingChildPosition ) { tree . replaceNodeByChild ( parentNode , optionalReplacingChildPosition ) ; }", "GameRegistry . registerWorldGenerator ( GenerationHandler . INSTANCE , 2 ) ; GameRegistry . addRecipe ( new ShapelessOreRecipe ( itemChiselHitech , itemChiselDiamond , \"dustRedstone\" , \"ingotGold\" ) ) ;", "* @ version < em > $Date : 2014 - 02 - 12 $ < / em >", "import net . minecraft . block . state . IBlockState ;", "if ( configuration == null ) { LOG . info ( \"Configuration null, not inserting schema\" ) ; } else { configuration . set ( HAIVVREO_SCHEMA , schema . toString ( false ) ) ; configuration . set ( \"hive.output.file.extension\" , \".avro\" ) ; }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "public void testRecoverFromCleanStore ( ) throws IOException { createIndex ( \"test\" ) ; ensureGreen ( ) ; IndicesService indicesService = getInstanceFromNode ( IndicesService . class ) ; IndexService test = indicesService . indexService ( \"test\" ) ; final IndexShard shard = test . getShardOrNull ( 0 ) ; client ( ) . prepareIndex ( \"test\" , \"test\" , \"0\" ) . setSource ( \"{}\" ) . setRefresh ( randomBoolean ( ) ) . get ( ) ; if ( randomBoolean ( ) ) { client ( ) . admin ( ) . indices ( ) . prepareFlush ( ) . get ( ) ; } ShardRouting routing = new ShardRouting ( shard . routingEntry ( ) ) ; test . removeShard ( 0 , \"b/c simon says so\" ) ; ShardRoutingHelper . reinit ( routing , UnassignedInfo . Reason . INDEX_CREATED ) ; IndexShard newShard = test . createShard ( routing ) ; newShard . updateRoutingEntry ( routing , false ) ; DiscoveryNode localNode = new DiscoveryNode ( \"foo\" , DummyTransportAddress . INSTANCE , Version . CURRENT ) ; newShard . markAsRecovering ( \"store\" , new RecoveryState ( newShard . shardId ( ) , routing . primary ( ) , RecoveryState . Type . STORE , localNode , localNode ) ) ; assertTrue ( newShard . recoverFromStore ( localNode ) ) ; assertEquals ( 0 , newShard . recoveryState ( ) . getTranslog ( ) . recoveredOperations ( ) ) ; assertEquals ( 0 , newShard . recoveryState ( ) . getTranslog ( ) . markAsRecovering ( \"store\" , new RecoveryState ( newShard . shardId ( ) , routing . primary ( ) , RecoveryState . Type . STORE , localNode , localNode ) ) ; assertTrue ( newShard . recoverFromStore ( localNode ) ) ; assert", "_tokenWriteContext . writeBinary ( data , offset , len ) ;", "import net . rrm . ehour . activity . service . ActivityService ; import net . rrm . ehour . domain . Activity ; import net . rrm . ehour . domain . ActivityMother ; import com . google . common . collect . Lists ;", "protected ExecutionServiceAsync executionService ; protected Timer timer ; protected String executionIdentifier ; protected HorizontalPanel resultsPanel ; protected TabWrapper errorReceiver ; protected ResultTable uccTable ; protected ResultTable cuccTable ; protected ResultTable indTable ; protected ResultTable fdTable ; protected ResultTable basicsTable ; protected Image runningIndicator ; protected ProgressBar progressBar = null ; public ResultsTablePage ( ExecutionServiceAsync executionService , String executionIdentifier ) { this . executionService = executionService ; this . executionIdentifier = executionIdentifier ; this . setHeight ( \"500px\" ) ; this . resultsPanel = new HorizontalPanel ( ) ; this . add ( resultsPanel ) ; indTable = new ResultTable ( \"Inclusion Dependencies\" ) ; uccTable = new ResultTable ( \"Unique Column Combinations\" ) ; cuccTable = new ResultTable ( \"Conditional Unique Column Combinations\" ) ; fdTable = new ResultTable ( \"Functional Dependencies\" ) ; basicsTable = new ResultTable ( \"Basic Statistics\" ) ; runningIndicator = new Image ( \"ajax-loader.gif\" ) ; this . add ( runningIndicator ) ; } public void startPolling ( ) { this . timer = new Timer ( ) { public void run ( ) { fetchNewResults ( ) ; updateStatus ( ) ; } } ; this . timer . scheduleRepeating ( 10000 ) ; } public AsyncCallback < Long > getCancelCallback ( ) { AsyncCallback < Long > callback = new AsyncCallback < Long > ( ) { public void run ( ) { fetchNewResults ( ) ; updateStatus ( ) ; } } ; this . add ( runningIndicator ) ; } public void run ( ) { fetchNewResults ( ) ; updateStatus ( ) ; updateStatus ( ) ; updateStatus ( ) ; } } ; this . timer . scheduleRepeating ( 10000 ) ; } public AsyncCallback < Long > getCancelCallback ( ) { AsyncCallback <", "GridNioFilter codecFilter = new GridNioCodecFilter ( new NioParser ( msgReader ) , gridLog , true ) ; if ( sslCtx != null ) { GridNioSslFilter sslFilter = new GridNioSslFilter ( sslCtx , gridLog ) ; sslFilter . directMode ( true ) ; sslFilter . clientMode ( true ) ; filters = new GridNioFilter [ ] { codecFilter , sslFilter } ; } else filters = new GridNioFilter [ ] { codecFilter } ; srv = GridNioServer . builder ( ) . address ( U . getLocalHost ( ) ) . port ( - 1 ) . listener ( new NioListener ( ) ) . filters ( filters ) . logger ( gridLog ) . selectorCount ( Runtime . getRuntime ( ) . availableProcessors ( ) ) . sendQueueLimit ( 1024 ) . byteOrder ( ByteOrder . nativeOrder ( ) ) . tcpNoDelay ( cfg . isTcpNoDelay ( ) ) . directBuffer ( true ) . directMode ( true ) . socketReceiveBufferSize ( 0 ) . socketSendBufferSize ( 0 ) . idleTimeout ( TCP_IDLE_CONN_TIMEOUT ) . gridName ( \"gridClient\" ) . messageWriter ( msgWriter ) . build ( ) ; srv . start ( ) ; } catch ( IOException | GridException e ) { throw new GridClientException ( \"Failed to start connection server.\" , e ) ; } }", "setState ( 593 ) ;", "import com . netflix . imfutility . conversion . templateParameter . context . parameters . SequenceContextParameters ; import com . netflix . imfutility . cpl . essencedescriptor . EssenceDescriptorProcessor ;", "private String basePath = \"http://petstore.swagger.io:80/v2\" ;", "import com . todoroo . astrid . producteev . api . ApiUtilities ;", "", "protected void doExecute ( ) { OpenstackVtap . Type type = getVtapTypeFromString ( vtapType ) ; Set < OpenstackVtap > openstackVtaps = vtapService . getVtaps ( type ) ; for ( OpenstackVtap vtap : openstackVtaps ) { } }", "this . contextRunner . withUserConfiguration ( ConnectionNameStrategyConfiguration . class ) . run ( ( context ) -> { CachingConnectionFactory connectionFactory = context . getBean ( CachingConnectionFactory . class ) ; Address [ ] addresses = ( Address [ ] ) ReflectionTestUtils . getField ( connectionFactory , \"addresses\" ) ; assertThat ( addresses ) . hasSize ( 1 ) ; com . rabbitmq . client . ConnectionFactory rcf = mock ( com . rabbitmq . client . ConnectionFactory . class ) ; given ( rcf . newConnection ( isNull ( ) , eq ( addresses ) , anyString ( ) ) ) . willReturn ( mock ( Connection . class ) ) ; ReflectionTestUtils . setField ( connectionFactory , \"rabbitConnectionFactory\" , rcf ) ; connectionFactory . createConnection ( ) ; verify ( rcf ) . newConnection ( isNull ( ) , eq ( addresses ) , eq ( \"test#0\" ) ) ; connectionFactory . resetConnection ( ) ; connectionFactory . createConnection ( ) ; verify ( rcf ) . newConnection ( isNull ( ) , eq ( addresses ) , eq ( \"test#1\" ) ) ; } ) ;", "private int applyRulesInternal ( Iterable < ? extends Resource > resources ) throws RDF4JException", "} catch ( IOException | OwsExceptionReport | ConnectionProviderException ex ) {", "private static InlineInfo getExactInlineInfo ( Invoke invoke , OptimisticOptimizations optimisticOpts , ResolvedJavaMethod targetMethod ) { }", "public static class remove < I extends Iface > extends org . apache . thrift . ProcessFunction < I , remove_args > { public remove ( ) { super ( \"remove\" ) ; } public remove_args getEmptyArgsInstance ( ) { return new remove_args ( ) ; } protected boolean isOneway ( ) { return false ; } public remove_result getResult ( I iface , remove_args args ) throws org . apache . thrift . TException { remove_result result = new remove_result ( ) ; try { result . success = iface . remove ( args . id , args . recursive ) ; result . setSuccessIsSet ( true ) ; } catch ( tachyon . thrift . TachyonTException e ) { result . e = e ; } return result ; } } public static class remove < I extends Iface > extends org . apache . thrift . ProcessFunction < I , remove_args > { public remove ( ) { super ( \"remove\" ) ; } public remove_args getEmptyArgsInstance ( ) { return new remove_args ( ) ; } protected boolean isOneway ( ) { return false ; } public remove_result getResult ( I iface , remove_args args ) throws org . apache . thrift . TException { remove_result result = new remove_result ( ) ; try { result . success = iface . remove ( args . id , args . recursive ) ; result . setSuccessIsSet ( true ) ; } catch ( tachyon . thrift . TachyonTException e ) { return new remove_result ( ) ; } public remove_args getEmptyArgsInstance ( ) { return new remove_args ( ) ; } protected boolean isOneway ( ) { return false ; } public remove_result getResult ( I iface , remove_args args ) throws org . apache . thrift . TException { remove_result result = new remove_result ( ) ; try { result . success =", "@ Nonnull public DirectoryObjectCollectionReferenceRequest orderBy ( @ Nonnull final String value ) { addOrderByOption ( value ) ; return this ; }", "log . debug ( \"Discord join request: {}\" , user ) ; eventBus . post ( DiscordJoinRequest . class , new DiscordJoinRequest (", "DataverseName itemTypeDataverseName , itemTypeTypeName ; boolean itemTypeAnonymous ;", "", "InfoCommand command = new InfoCommand ( requestResponseCommandPool , infoSection , scheduled ) ; silentCommand ( command ) ; command . execute ( )", "", "void failForMissingPricingConditions ( de . metas . adempiere . model . I_C_Order order ) ; int getC_PaymentTerm_ID ( org . compiere . model . I_C_OrderLine orderLine ) ; PriceLimitRuleResult computePriceLimit ( org . compiere . model . I_C_OrderLine orderLine ) ;", "public ByteBuffer getUncompressedBytes ( ) throws IOException { }", "", "import org . droidplanner . android . dialogs . openfile . OpenFileDialog ; import org . droidplanner . android . dialogs . openfile . OpenMissionDialog ; import org . droidplanner . android . activities . interfaces . OnEditorInteraction ; import org . droidplanner . android . dialogs . mission . item . MissionItemProxy ; import org . droidplanner . android . proxy . mission . MissionProxy ; import org . droidplanner . android . utils . prefs . AutoPanMode ; import org . droidplanner . android . utils . file . IO . MissionReader ; import org . droidplanner . android . utils . file . IO . MissionWriter ; import org . droidplanner . core . drone . Drone ; import org . droidplanner . core . drone . DroneInterfaces . DroneEventsType ; import org . droidplanner . core . drone . YesNoDialog ;", "import org . bukkit . event . EventHandler ; import org . bukkit . event . EventPriority ; import org . bukkit . event . Listener ; import org . bukkit . event . world . WorldInitEvent ; import org . bukkit . metadata . FixedMetadataValue ; import org . bukkit . metadata . MetadataValue ; import org . bukkit . plugin . Plugin ; import org . bukkit . plugin . PluginDescriptionFile ; import org . bukkit . plugin . PluginManager ;", "setState ( 640 ) ;", "import com . synopsys . integration . detectable . detectable . PassedResultBuilder ; import com . synopsys . integration . detectable . ExecutableTarget ;", "final PartyInfo forUpdate = new PartyInfo ( \"http://known.com:8080\" , Set . of ( known , alsoKnown , unknown ) , emptySet ( ) ) ;", "public static String joinStrings ( List < String > strings ) { return joinStrings ( strings , \", \" ) ; } public static String joinStrings ( List < String > strings , String seperator ) { if ( strings . size ( ) == 0 ) return \"\" ; if ( strings . size ( ) == 1 ) return strings . get ( 0 ) ; StringBuffer strBuff = new StringBuffer ( ) ; strBuff . append ( strings . get ( 0 ) ) ; for ( int i = 1 ; i < strings . size ( ) ; i ++ ) { strBuff . append ( seperator + strings . get ( i ) ) ; } return strBuff . toString ( ) ; } public static < KeyType , ValType > void addToMultimap ( Map < KeyType , Set < ValType > > multimap , KeyType key , ValType val ) { if ( ! multimap . containsKey ( key ) ) multimap . put ( key , new HashSet < ValType > ( ) ) ; multimap . get ( key ) . add ( val ) ; } public static String safePath ( String path ) { if ( path == null ) return null ; if ( new File ( path ) . getName ( ) . startsWith ( \".\" ) ) { System . out . println ( \"WARNING: safePath(\" + path + \") detected hidden dot file; failing\" ) ; return null ; } if ( path . indexOf ( \"..\" ) > - 1 ) { System . out . println ( \"WARNING: safePath(\" + path + \") detected '..' in path; failing\" ) ; return null ; } if ( path . indexOf ( \"/\" ) == 0 ) return path . substring ( \"/\" ) == 0 ) return path . substring ( 1 ) ; return path ; } public static String joinStrings ( List < String > strings ) { return joinStrings ( strings , \", \" ) ; } if ( path . indexOf ( \"..\" ) > - 1 ) { System . out . println", "", "Context context = new Activity ( ) ;", "ParallelTaskRunner . Task < Variant , Variant > progressTask ; ExecutorService executor ; if ( VariantQueryCommandUtils . isStandardOutput ( cliOptions ) ) { progressTask = batch -> batch ; executor = null ; } else { AtomicLong total = new AtomicLong ( 0 ) ; executor = asyncCount ( query , queryOptions , variantFetcher , total ) ; progressTask = getProgressTask ( total ) ; } ParallelTaskRunner . Config config = ParallelTaskRunner . Config . builder ( ) . setNumTasks ( 1 ) . setBatchSize ( 10 ) . setAbortOnFail ( true ) . build ( ) ;", "import org . broadleafcommerce . profile . core . dto . CustomerRuleHolder ; import org . broadleafcommerce . profile . core . event . ForgotPasswordEvent ; import org . broadleafcommerce . profile . core . event . ForgotUsernameEvent ; import org . broadleafcommerce . profile . core . event . RegisterCustomerEvent ;", "setState ( 373 ) ; _errHandler . sync ( this ) ;", "", "blockedRequestsCount = tempBlockedRequestsCount ; mobCompactedIntoMobCellsCount = tempMobCompactedIntoMobCellsCount ; mobCompactedFromMobCellsCount = tempMobCompactedFromMobCellsCount ; mobCompactedIntoMobCellsSize = tempMobCompactedIntoMobCellsSize ; mobCompactedFromMobCellsSize = tempMobCompactedFromMobCellsSize ; mobFlushCount = tempMobFlushCount ; mobFlushedCellsCount = tempMobFlushedCellsCount ; mobFlushedCellsSize = tempMobFlushedCellsSize ; mobScanCellsCount = tempMobScanCellsCount ; mobScanCellsSize = tempMobScanCellsSize ; mobFileCacheAccessCount = mobFileCache . getAccessCount ( ) ; mobFileCacheMissCount = mobFileCache . getMissCount ( ) ; mobFileCacheHitRatio = mobFileCache . getHitRatio ( ) ; mobFileCacheEvictedCount = mobFileCache . getEvictedFileCount ( ) ; mobFileCacheCount = mobFileCache . getCacheSize ( ) ;", "AbstractTemplateViewResolver viewResolver = this . context . getBean ( FreeMarkerViewResolver . class ) ; assertThat ( viewResolver ) . hasFieldOrPropertyWithValue ( \"allowSessionOverride\" , true ) ;", "public interface LinkRestRepository < L extends RestModel > { public abstract HALResource wrapResource ( L model , String ... rels ) ; }", "import java . io . Serializable ; import java . lang . reflect . TypeVariable ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import static org . hamcrest . CoreMatchers . isA ; import static org . hamcrest . core . Is . is ; import static org . junit . Assert . assertThat ; import static org . mongodb . morphia . testutil . ExactClassMatcher . exactClass ;", "", "* Look up a { @ link Device } based on the provided { @ link Entity } . Also learns * based on the new entity , and will update existing devices as required . * * @ param entity the { @ link Entity } * @ return The { @ link Device } object if found", "ind . refreshNamesCache ( ) ; log ( itask , \"created new \" + ind ) ;", "Integer limit = LimitCompiler . compile ( context , select ) ;", "public static void clearContext ( ) { synchronized ( PROVISIONING_DRIVER_CONTEXT_PER_DRIVER_CLASSNAME ) { PROVISIONING_DRIVER_CONTEXT_PER_DRIVER_CLASSNAME . clear ( ) ; } } @ Override public void cleanupMachineResources ( final long duration , final TimeUnit timeUnit ) throws ElasticMachineProvisioningException , InterruptedException , TimeoutException { try { cloudifyProvisioning . onServiceUninstalled ( duration , timeUnit ) ; } catch ( final Exception e ) { throw new ElasticMachineProvisioningException ( \"Failed to cleanup cloud\" , e ) ; } } @ Override public Object getExternalApi ( final String apiName ) throws InterruptedException , ElasticMachineProvisioningException { Object externalApi = null ; if ( apiName . equals ( CloudifyConstants . STORAGE_REMOTE_API_KEY ) ) { externalApi = new RemoteStorageProvisioningDriverAdapter ( storageProvisioning , cloud . getCloudStorage ( ) . getTemplates ( ) . get ( storageTemplateName ) ) ; } else if ( apiName . equals ( CloudifyConstants . NETWORK_REMOTE_API_KEY ) ) { externalApi = new RemoteNetworkProvisioningDriverAdapter ( this . networkProvisioning ) ; } return externalApi ; } @ Override public void blockingAfterPropertiesSet ( ) throws ElasticMachineProvisioningException , InterruptedException { try { configureDrivers ( ) ; } catch ( final CloudProvisioningException e ) { throw new ElasticMachineProvisioningException ( \"Failed to configure cloud driver for first use: \" + e . getMessage ( ) , e ) ; } catch ( final StorageProvisioningException e ) { throw new ElasticMachineProvisioningException ( \"Failed to configure storage driver for first use: \" + e . getMessage ( ) , e ) ; } } public static void blockingAfterPropertiesSet ( ) throws ElasticMachineProvisioningException , InterruptedException { try { configureDrivers ( ) ; } catch ( final CloudProvisioningException e ) { throw new ElasticMachineProvisioningException ( ) ; } catch ( final CloudProvisioningException e ) { throw", "public void deleteLanguageContainer ( InternalActionContext ac , Branch branch , Language language , BulkActionContext context ,", "public void workerCommitBlock ( long workerId , long usedBytesOnTier , int tier , long blockId , long length ) throws org . apache . thrift . TException", "this . consistency = ConsistencyLevel . valueOf ( consistencyLevel ) ;", "config . m_enableIV2 = true ; config . m_startAction = StartAction . REJOIN ;", "if ( isDivertToCard ( masterSecretKey ) ) { masterPrivateKey = null ; log . add ( LogType . MSG_MF_DIVERT , indent ) ; } else { progress ( R . string . progress_modify_unlock , 10 ) ; log . add ( LogType . MSG_MF_UNLOCK , indent ) ; { try { PBESecretKeyDecryptor keyDecryptor = new JcePBESecretKeyDecryptorBuilder ( ) . setProvider ( Constants . BOUNCY_CASTLE_PROVIDER_NAME ) . build ( mCryptoInput . getPassphrase ( ) ) ; masterPrivateKey = masterSecretKey . extractPrivateKey ( keyDecryptor ) ; } catch ( PGPException e ) { log . add ( LogType . MSG_MF_UNLOCK_ERROR , indent + 1 ) ; return new PgpEditKeyResult ( PgpEditKeyResult . RESULT_ERROR , log , null ) ; } } }", "ShadowIntent shadowIntent = ( ShadowIntent ) DogfoodRobolectricTestRunner . shadowFor ( intent ) ; assertEquals ( serializable , shadowIntent . extras . get ( \"foo\" ) ) ; assertNotSame ( serializable , shadowIntent . extras . get ( \"foo\" ) ) ; assertEquals ( serializable , shadowIntent . getSerializableExtra ( \"foo\" ) ) ; assertNotSame ( serializable , shadowIntent . getSerializableExtra ( \"foo\" ) ) ;", "import akka . http . javadsl . model . MediaTypes ; import akka . http . javadsl . model . headers . TimeoutAccess ;", "private static class RootResultHandler extends Handler { private final WeakReference < PrefActivity > mActivity ; public RootResultHandler ( PrefActivity activity ) { mActivity = new WeakReference < PrefActivity > ( activity ) ; } @ Override public void handleMessage ( Message msg ) { PrefActivity activity = mActivity . get ( ) ; if ( activity != null ) { if ( msg . arg1 == 1 ) { activity . toggleRootViews ( true ) ; Toast . makeText ( activity , \"You may need to re-add the widget for this change to take effect\" , Toast . LENGTH_SHORT ) . show ( ) ; } else { activity . rootPref . setChecked ( false ) ; noRootAccessError ( activity ) ; } } } } private final RootResultHandler handler = new RootResultHandler ( this ) ; private void toggleRootAccess ( final boolean enabled ) { if ( enabled ) { RootFeatures . checkAccess ( new RootFeatures . Listener ( ) { @ Override public void onFinished ( boolean result ) { Message msg = new Message ( ) ; msg . arg1 = result ? 1 : 0 ; handler . sendMessage ( msg ) ; } } ) ; } else { toggleRootViews ( false ) ; Toast . makeText ( PrefActivity . this , \"You may need to re-add the widget for this change to take effect\" , Toast . LENGTH_SHORT ) . show ( ) ; } } private static void noRootAccessError ( Context context ) { AlertDialog . Builder builder = new AlertDialog . Builder ( context ) ; builder . setMessage ( \"No root access available!\" ) . setIcon ( android . R . drawable . ic_dialog_alert ) . setTitle ( \"Error\" ) . setNegativeButton ( \"OK\" , null ) ; AlertDialog alert = builder . create ( ) ; alert . show ( ) ; } } @ Override public void onBackPressed ( ) { startActivity ( new Intent", "private final NoNullValueEnforcer noNullValueEnforcer ; private final DatalogRule2QueryConverter datalogRule2QueryConverter ;", "import com . gentics . mesh . core . data . NodeGraphFieldContainer ; import com . gentics . mesh . core . data . Release ;", "0 , 0 , 0 , 0 , 0 , 0 , 0 , true , true , true , false , false , false , \"\" , \"\" , \"\" , \"\" , \"\" , \"\" , null , null ) ;", "if ( slot == EntityEquipmentSlot . MAINHAND ) { multimap . put ( SharedMonsterAttributes . ATTACK_DAMAGE . getName ( ) , new AttributeModifier ( ATTACK_DAMAGE_MODIFIER , \"Chisel Damage\" , type . attackDamage , 0 ) ) ; }", "import net . openl10n . flies . model . HasSimpleComment ;", "switchWakeLock ( getZLibrary ( ) . BatteryLevelToTurnScreenOffOption . getValue ( ) < FBReaderApp . Instance ( ) . getBatteryLevel ( ) ) ; myStartTimer = true ; final int brightnessLevel = getZLibrary ( ) . ScreenBrightnessLevelOption . getValue ( ) ; if ( brightnessLevel != 0 ) { setScreenBrightness ( brightnessLevel ) ; } else { setScreenBrightnessAuto ( ) ; } if ( getZLibrary ( ) . DisableButtonLightsOption . getValue ( ) ) { setButtonLight ( false ) ; } registerReceiver ( myBatteryInfoReceiver , new IntentFilter ( Intent . ACTION_BATTERY_CHANGED ) ) ;", "login ( \"admin\" , mainTenant_1 , new String [ ] { tenantAdminAuthorityName , tenantAuthenticatedAuthorityName } ) ;", "Case openedCase = new Case ( caseName , caseNumber , examiner , configFilePath , xmlcm , db , caseType ) ; openedCase . init ( ) ;", "import com . google . common . base . Strings ;", "List < Project > projects = Arrays . asList ( new Project ( \"spring-cloud-foo-foo\" , \"1.0.0\" ) , new Project ( \"spring-cloud-foo-bar\" , \"2.0.0\" ) , new Project ( \"spring-boot\" , \"3.0.0\" ) ,", "if ( uploadWasFine ) { OCFile ocFile = getFile ( ) ; if ( PreviewImageFragment . canBePreviewed ( ocFile ) ) startImagePreview ( getFile ( ) ) ; else if ( PreviewTextFragment . canBePreviewed ( ocFile ) ) startTextPreview ( ocFile ) ; }", "if ( minecraft . currentScreen == null && player . getRidingEntity ( ) != null && player . getRidingEntity ( ) instanceof EntitySpaceshipBase && minecraft . gameSettings . thirdPersonView != 0 && ! minecraft . gameSettings . hideGUI )", "modules . addAll ( testSshModules ) ; if ( ! replica ) { }", "import com . github . kagkarlsson . scheduler . logging . ConfigurableLogger ; import com . github . kagkarlsson . scheduler . logging . LogLevel ;", "import org . sleuthkit . autopsy . healthmonitor . HealthMonitorDashboard ; import org . sleuthkit . autopsy . experimental . autoingest . AutoIngestMonitor . JobsSnapshot ;", "IngestServices . getDefault ( ) . fireModuleDataEvent ( new ModuleDataEvent ( NbBundle . getMessage ( this . getClass ( ) , \"Chrome.parentModuleName\" ) , BlackboardArtifact . ARTIFACT_TYPE . TSK_WEB_BOOKMARK ) ) ;", "import android . content . Context ; import net . squanchy . proximity . ProximityProvider ; import android . app . Application ; import net . squanchy . analytics . Analytics ; import net . squanchy . analytics . AnalyticsModule ; import net . squanchy . remoteconfig . RemoteConfig ; import net . squanchy . remoteconfig . RemoteConfigModule ; import net . squanchy . service . firebase . FirebaseAuthService ;", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . beans . factory . annotation . Autowired ;", "static void test_optimize_ArrayLength01 ( ) { JavaTesterRunScheme . begin ( \"test.optimize.ArrayLength01\" ) ; String runString = null ; try { runString = \"test(0)\" ; if ( 5 != test . optimize . ArrayLength01 . test ( 0 ) ) { JavaTesterRunScheme . end ( runString , false ) ; return ; } runString = \"test(1)\" ; if ( 6 != test . optimize . ArrayLength01 . test ( 1 ) ) { JavaTesterRunScheme . end ( runString , false ) ; return ; } runString = \"test(2)\" ; if ( 7 != test . optimize . ArrayLength01 . test ( 2 ) ) { JavaTesterRunScheme . end ( runString , false ) ; return ; } runString = \"test(3)\" ; if ( 8 != test . optimize . ArrayLength01 . test ( 3 ) ) { JavaTesterRunScheme . end ( runString , false ) ; return ; } runString = \"test(4)\" ; if ( 4 != test . optimize . ArrayLength01 . test ( 4 ) ) { JavaTesterRunScheme . end ( runString , false ) ; return ; } } catch ( Throwable t ) { JavaTesterRunScheme . end ( runString , t ) ; return ; } JavaTesterRunScheme . end ( null , true ) ; }", "private SpdzResourcePool createResourcePool ( int myId , int size , Random rand , SecureRandom secRand ) throws NoSuchAlgorithmException { DataSupplier supplier ; store = new DummyDataSupplierImpl ( myId , size ) ; return new SpdzResourcePoolImpl ( myId , size , rand , secRand , store ) ; }", "* Find the maximum value of a field . * * @ param fieldName the field name . * @ return if no objects exist or they all have { @ code null } as the value for the given * date field , { @ code null } will be returned . Otherwise the maximum date is returned . * When determining the maximum date , objects with { @ code null } values are ignored . * @ throws java . lang . UnsupportedOperationException the query is not valid ( \"syntax error\" ) .", "import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import java . util . stream . Stream ; import com . vaadin . server . Sizeable ;", "private static final int OPEN_BOOK = 1 ; private static final int EDIT_INFO = 2 ; private static final int SHARE_BOOK = 3 ; private static final int RELOAD_INFO = 4 ; private static final int ADD_TO_FAVORITES = 5 ; private static final int REMOVE_FROM_FAVORITES = 6 ; private static final int MARK_AS_READ = 7 ; private static final int MARK_AS_UNREAD = 8 ; @ Override public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; addMenuItem ( menu , OPEN_BOOK , \"openBook\" , true ) ; addMenuItem ( menu , EDIT_INFO , \"editInfo\" , true ) ; addMenuItem ( menu , SHARE_BOOK , \"shareBook\" , false ) ; addMenuItem ( menu , RELOAD_INFO , \"reloadInfo\" , false ) ; if ( myBook . labels ( ) . contains ( Book . FAVORITE_LABEL ) ) { addMenuItem ( menu , REMOVE_FROM_FAVORITES , \"removeFromFavorites\" , false ) ; } else { addMenuItem ( menu , ADD_TO_FAVORITES , \"addToFavorites\" , false ) ; } if ( myBook . labels ( ) . contains ( Book . READ_LABEL ) ) { addMenuItem ( menu , MARK_AS_UNREAD , \"markAsUnread\" , false ) ; } else { addMenuItem ( menu , MARK_AS_READ , \"markAsRead\" , false ) ; } else { addMenuItem ( menu , MARK_AS_READ , \"markAsRead\" , false ) ; } if ( myBook . labels ( ) . contains ( Book . READ_LABEL ) ) { addMenuItem ( menu , MARK_AS_UNREAD , \"markAsRead\" , false ) ; } else { add", "} catch ( RuntimeException ex ) { LogUtil . error ( getClass ( ) . getName ( ) , \"Analytics init failed: \" + ex . getMessage ( ) ) ; } catch ( Exception ex ) { LogUtil . error ( getClass ( ) . getName ( ) , \"Analytics init failed: \" + ex . getMessage ( ) ) ;", "public static final BCRegistry INSTANCE = new BCRegistry ( ) ; private Configuration regCfg ; private BCRegistry ( ) { } public boolean isEnabled ( String category , String name ) { return regCfg . get ( category , name , true ) . getBoolean ( ) ; } public void setRegistryConfig ( File f ) { regCfg = new Configuration ( f ) ; } public boolean registerBlock ( Block block , boolean forced ) { return registerBlock ( block , ItemBlockBuildCraft . class , forced ) ; } public boolean registerBlock ( Block block , Class < ? extends ItemBlock > item , boolean forced ) { String name = block . getUnlocalizedName ( ) . replace ( \"tile.\" , \"\" ) ; if ( forced || regCfg . get ( \"blocks\" , name , true ) . getBoolean ( ) ) { GameRegistry . registerBlock ( block , item , name ) ; return true ; } return false ; } public boolean registerItem ( Item item , boolean forced ) { String name = item . getUnlocalizedName ( ) . replace ( \"item.\" , \"\" ) ; if ( forced || regCfg . get ( \"items\" , name , true ) . getBoolean ( ) ) { GameRegistry . registerItem ( item , name ) ; return true ; } return false ; } private boolean isInvalidRecipeElement ( Object o ) { if ( o == null ) { return true ; } if ( o instanceof Block && ! Utils . isRegistered ( ( Block ) o ) ) { return true ; } if ( o instanceof Item && ! Utils . isRegistered ( ( Item ) o ) ) { return true ; } if ( o instanceof ItemStack && ! Utils . isRegistered ( ( ItemStack ) o ) ) { return true ; } return false ; } @ SuppressWarnings ( { \"rawtypes\" , \"unchecked\" ) ) { GameRegistry . register ( item , name ) ; return true ; } @ SuppressWarnings ( { \"rawtypes\" , \"", "private static final String PIPELINE_IDLE_STATE_HANDLER = \"idleStateHandler\" ; private static final String PIPELINE_GRACEFUL_SHUTDOWN_TIMEOUT_HANDLER = \"gracefulShutdownTimeoutHandler\" ;", "import de . adorsys . aspsp . xs2a . consent . api . pis . PisPaymentService ; import de . adorsys . aspsp . xs2a . consent . api . ConsentStatus ; import de . adorsys . aspsp . xs2a . consent . api . pis . PisPaymentService ;", "Network n = networkService . getById ( id ) ; if ( nr . getKey ( ) != null ) { n . setKey ( nr . getKey ( ) . getValue ( ) ) ; } if ( nr . getName ( ) != null ) { n . setName ( nr . getName ( ) . getValue ( ) ) ; } if ( nr . getDescription ( ) != null ) { n . setDescription ( nr . getDescription ( ) . getValue ( ) ) ; } networkService . update ( n ) ; return Response . status ( Response . Status . CREATED ) . entity ( result ) . build ( ) ;", "if ( Channel . META_SUBSCRIBE . equals ( channelName ) ) { }", "", "public Void visitLam ( final Concrete . LamExpression expr , Precedence prec ) { if ( prec . priority > Concrete . LamExpression . PREC ) myBuilder . append ( \"(\" ) ; }", "currentBatch . setTransferStartTime ( new Date ( ) ) ;", "private static final int ID_FRIEND_LIST_FRAGMENT = 0 ; private static final int ID_CHATS_LIST_FRAGMENT = 1 ; private static final int ID_SETTINGS_FRAGMENT = 2 ; private static final int ID_INVITE_FRIENDS_FRAGMENT = 3 ; private Fragment currentFragment ; private FacebookHelper facebookHelper ; private ImportFriends importFriends ; private boolean isImportInitialized ;", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "", "if ( chooser . getConfig ( ) . getConnectionEndType ( ) == ConnectionEndType . SERVER ) { }", "import org . molgenis . data . meta . model . Attribute ; import org . molgenis . data . meta . model . EntityType ;", "if ( argsParser . getArgumentCount ( ) > 3 ) { }", "public HeartbeatResponse sendHeartbeat ( DatanodeRegistration nodeReg , StorageReport [ ] report , int xmitsInProgress , int xceiverCount , int failedVolumes ) throws IOException { }", "final long state = wipIncrement ( this ) ; if ( ! outputFused || terminated ) { this . clear ( ) ; }", "{ return KLabelInjection . injectionOf ( UserSubstitutionTransformer . userSubstitution ( Collections . singletonMap ( variable , substitute ) , term , context ) , context . global ( ) ) ; } public static Term userSubstitutionKore ( Term term , Term substitute , Term variable , TermContext context ) { return UserSubstitutionTransformer . userSubstitution ( Collections . singletonMap ( variable , substitute ) , term , context ) ; }", "public BeanSearchSpec ( ConditionContext context , AnnotatedTypeMetadata metadata , Class < ? > annotationType ) { this ( context , metadata , annotationType , null ) ; } public BeanSearchSpec ( ConditionContext context , AnnotatedTypeMetadata metadata , Class < ? > annotationType , Class < ? > genericContainer ) { }", "import org . eclipse . che . api . core . model . factory . FactoryDto ; import org . eclipse . che . api . promises . client . Promise ;", "fail ( \"This test is incorrectly written and should not use direct serialization to test duplicate names\" ) ; String collectionName = \"things\" ; Entity entity = new Entity ( ) ; entity . put ( \"name\" , \"enzo\" ) ; entity = this . app ( ) . collection ( collectionName ) . post ( entity ) ; refreshIndex ( ) ; try { this . app ( ) . collection ( collectionName ) . post ( entity ) ; fail ( \"This test is incorrectly written and should not use direct serialization to test duplicate names\" ) ; } catch ( UniformInterfaceException uie ) { assertEquals ( 400 , uie . getResponse ( ) . getStatus ( ) ) ; }", "setState ( 416 ) ;", "* The name of the command * @ throws org . bonitasoft . engine . session . InvalidSessionException * Generic exception thrown if API Session is invalid , e . g session has expired .", "this . segmentCoMTrajectory = new FrameTrajectory3D ( maxNumberOfTrajectoryCoefficients , worldFrame ) ; this . segmentCoMVelocity = new FrameTrajectory3D ( maxNumberOfTrajectoryCoefficients , worldFrame ) ; this . phaseSwingFootTrajectory = new YoFrameTrajectory3D ( namePrefix + \"EstPhaseSwingTrajectory\" , 2 * maxNumberOfTrajectoryCoefficients , worldFrame , registry ) ; this . segmentSwingFootTrajectory = new FrameTrajectory3D ( 2 * maxNumberOfTrajectoryCoefficients , worldFrame ) ; this . swingFootVelocity = new FrameTrajectory3D ( maxNumberOfTrajectoryCoefficients , worldFrame ) ; this . swingLiftTrajectory = new Trajectory ( maxNumberOfTrajectoryCoefficients ) ; this . phaseSupportFootTrajectory = new FrameTrajectory3D ( maxNumberOfTrajectoryCoefficients ) ; this . supportFootVelocity = new FrameTrajectory3D ( 2 * maxNumberOfTrajectoryCoefficients , worldFrame ) ; this . estimatedAngularMomentumTrajectory = new FrameTrajectory3D ( 2 * maxNumberOfTrajectoryCoefficients , worldFrame ) ;", "settings = GoIVSettings . getSettings ( MainActivity . this ) ;", "private Map < Item , Set < Integer > > oreItemIdMap ;", "@ SpringBean ( name = \"org.sakaiproject.gradebookng.business.GradebookNgBusinessService\" ) protected GradebookNgBusinessService businessService ; private final String panelId ; private final IModel < ImportWizardModel > model ; public GradeImportConfirmationStep ( final String id , final IModel < ImportWizardModel > importWizardModel ) { super ( id ) ; this . panelId = id ; this . model = importWizardModel ; } @ Override public void onInitialize ( ) { super . onInitialize ( ) ; final ImportWizardModel importWizardModel = this . model . getObject ( ) ; final List < ProcessedGradeItem > itemsToCreate = importWizardModel . getItemsToCreate ( ) ; final List < ProcessedGradeItem > itemsToUpdate = importWizardModel . getItemsToUpdate ( ) ; final List < Assignment > assignmentsToCreate = importWizardModel . getAssignmentsToCreate ( ) ; final Form < ? > form = new Form ( \"form\" ) { @ Override protected void onSubmit ( ) { boolean errors = false ; final Map < String , Long > assignmentMap = new HashMap < > ( ) ; for ( final Assignment assignment : assignmentsToCreate ) { final Long assignmentId = GradeImportConfirmationStep . this . businessService . addAssignment ( assignment ) ; assignmentMap . put ( assignment . getName ( ) , assignmentId ) ; } final List < ProcessedGradeItem > itemsToSave = new ArrayList < ProcessedGradeItem > ( ) ; for ( final ProcessedGradeItem processedGradeItem : itemsToSave ) { log . debug ( \"Looping through items to save\" ) ; for ( final Assignment assignment : assignmentsToCreate ) { final Long assignmentId = GradeImportConfirmationStep . this . businessService . addAssignment ( assignment ) ; assignmentMap . put ( assignment . getName ( ) , assignmentId ) ; }", "private ConcurrentHashMap < String , Map < Interest , AppInstanceNotifier > > notifiers = new ConcurrentHashMap < String , Map < Interest , AppInstanceNotifier > > ( ) ;", "Injector injector = createInjector ( ) ; DbBackendService dbBackend = injector . getInstance ( DbBackendService . class ) ; dbBackend . startAsync ( ) ; dbBackend . awaitRunning ( ) ; cleanDatabase ( injector ) ; sqlInterface = injector . getInstance ( SqlInterface . class ) ;", "* Send a post request with header values \"scenario\" : \"positive\" , \"value\" : 1 or \"scenario\" : \"negative\" , \"value\" : - 2", "private final IteratorToStreamConverter < UnconfirmedTransaction > streamConverter ; private final TransactionBuilder transactionBuilder ; private final TransactionSerializer transactionSerializer ;", "@ Override protected OAuth2Authentication getOAuth2Authentication ( ClientDetails client , TokenRequest tokenRequest ) throws AuthenticationException , InvalidTokenException { String incomingTokenValue = tokenRequest . getRequestParameters ( ) . get ( \"token\" ) ; OAuth2AccessTokenEntity incomingToken = tokenServices . readAccessToken ( incomingTokenValue ) ; Set < String > approvedScopes = incomingToken . getScope ( ) ; Set < String > requestedScopes = tokenRequest . getScope ( ) ; if ( requestedScopes == null ) { requestedScopes = new HashSet < String > ( ) ; } if ( client . getScope ( ) . equals ( requestedScopes ) ) { requestedScopes = new HashSet < String > ( ) ; } if ( approvedScopes . containsAll ( requestedScopes ) ) { if ( requestedScopes . isEmpty ( ) ) { tokenRequest . setScope ( approvedScopes ) ; } else { tokenRequest . setScope ( Sets . intersection ( requestedScopes , approvedScopes ) ) ; } OAuth2Authentication authentication = new OAuth2Authentication ( getRequestFactory ( ) . createOAuth2Request ( client , tokenRequest ) , incomingToken . getAuthenticationHolder ( ) . getAuthentication ( ) . getUserAuthentication ( ) ) ; return authentication ; } else { throw new InvalidScopeException ( \"Invalid scope requested in chained request\" , approvedScopes ) ; } }", "public void registerFileListener ( FileStructureListener listener ) { if ( ! fileListeners . contains ( listener ) ) { fileListeners . add ( listener ) ; } }", "public Vector3 getDirection ( ) { if ( Float . isNaN ( getYaw ( ) ) && Float . isNaN ( getPitch ( ) ) ) { return Vector3 . ZERO ; } }", "ITopologyService mockTopology = createMock ( ITopologyService . class ) ; expect ( mockTopology . isInternal ( anyLong ( ) , anyShort ( ) ) ) . andReturn ( false ) . anyTimes ( ) ; expect ( mockTopology . getSwitchClusterId ( 1L ) ) . andReturn ( 1L ) . anyTimes ( ) ; expect ( mockTopology . getSwitchClusterId ( 5L ) ) . andReturn ( 5L ) . anyTimes ( ) ; replay ( mockTopology ) ; deviceManager . topology = mockTopology ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "kb_wine . setMaxResults ( maxResults ) ; rootConcepts = new HashSet < String > ( ) ; rootConcepts . add ( \"http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#Grape\" ) ; kbList . add ( new TestConfiguration ( \"data/wine-ontology.rdf\" , kb_wine , \"http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#ChateauMargaux\" , rootConcepts ) ) ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "private void waitFor ( long errorWaitTime ) { try { Thread . sleep ( errorWaitTime * 1000 ) ; } catch ( InterruptedException e1 ) { Thread . currentThread ( ) . interrupt ( ) ; logger . warn ( \"Thread interrupted. Preparing to shut down event processor\" ) ; shutDown ( ) ; } } private void releaseToken ( Segment segment ) { }", "if ( jj_3R_724 ( ) ) { jj_scanpos = xsp ; break ; }", "import javax . annotation . Nonnull ; import org . acegisecurity . AccessDeniedException ; import org . acegisecurity . Authentication ;", "", "import org . n52 . sos . exception . CodedException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "import com . style . event . EventCode ; import com . style . base . BaseActivity ;", "private final boolean onlyThisLayer ; private final NetworkElement initialElement ; private final Pair < Demand , Link > initialFR ; private final NetworkLayer auxLayerInNodes ; public TBFToFromCarriedTraffic ( Demand demand , boolean onlyThisLayer ) { super ( demand . getNetPlan ( ) ) ; this . initialElement = demand ; this . onlyThisLayer = onlyThisLayer ; this . initialFR = null ; this . auxLayerInNodes = null ; final Set < Link > linksAllLayers = new HashSet < > ( ) ; final Set < Demand > demandsAllLayers = new HashSet < > ( ) ; final Set < MulticastDemand > mDemandsAllLayers = new HashSet < > ( ) ; demandsAllLayers . add ( demand ) ; final Pair < Set < Link > , Set < Link > > thisLayerPropagation = demand . getLinksThisLayerPotentiallyCarryingTraffic ( ) ; linksAllLayers . addAll ( thisLayerPropagation . getFirst ( ) ) ; linksAllLayers . addAll ( thisLayerPropagation . getSecond ( ) ) ; if ( ! onlyThisLayer ) updatePropagationDownWards ( linksAllLayers , linksAllLayers , demandsAllLayers , mDemandsAllLayers ) ; if ( ! onlyThisLayer ) updatePropagationUpWards ( Arrays . asList ( demand ) , null , linksAllLayers , demandsAllLayers , mDemandsAllLayers ) ; if ( ! onlyThisLayer ) updatePropagationUpWards ( Arrays . asList ( demand ) , null , linksAllLayers , demandsAllLayers , mDemandsAllLayers ) ; final Set < NetworkLayer > layersToKeepAllElements = onlyThisLayer ? Sets . difference ( new HashSet < > ( netPlan . getNetworkLayers ( ) , Sets . newHashSet ( demand . getLayer ( ) ) , linksAllLayers , demandsAllLayers , demandsAllLayers , demandsAllLayers , mDemandsAll", "import org . molgenis . data . meta . model . Attribute ; import org . molgenis . data . meta . model . EntityType ;", "Table table , AcidUtils . Operation acidOp ) throws SemanticException {", "{ throw new AssertionError ( \"No publisher for inline stream \" + sourceOutput ) ; } if ( streamMeta . getLocality ( ) == Locality . THREAD_LOCAL && oper . inputs . size ( ) == 1 ) { inputInfo . locality = Locality . THREAD_LOCAL ; ndi . type = OperatorType . OIO ; } else { inputInfo . locality = Locality . CONTAINER_LOCAL ; }", "valueLine + this . lineOffset , valueCol + this . colOffset ) ;", "public static final ImageIcon ON_SWITCHER ; public static final ImageIcon OFF_SWITCHER ;", "private ActionFireable actionFireable ; public MainPanel ( ActionFireable actionFireable ) { this . actionFireable = actionFireable ; btnSystem = new TabButton ( quitPrompt , new OriginalImageLink ( EImageLinkType . GUI , BUTTONS_FILE , 93 , 0 ) , new OriginalImageLink ( EImageLinkType . GUI , BUTTONS_FILE , 96 , 0 ) , \"game-quit-description\" ) ; }", "private static final String PREPROCESSED_ALLELE_FILENAME = \"allele.sorted.txt\" ; private static final String PREPROCESSED_POPULATION_GENOTYPE_FILENAME = \"population_genotype.sorted.txt\" ;", "final int types = 24 ;", "server . setServerEventHandler ( serverEventHandler ) ; String msg = \"Starting \" + ThriftBinaryCLIService . class . getSimpleName ( ) + \" on port \"", "public boolean loadData ( ) { log . config ( \"\" ) ; }", "", "synchronized ( mLock ) { if ( mOriginalValues != null ) { mOriginalValues . add ( item ) ; } mItems . add ( item ) ; position = mItems . size ( ) ; }", "void assertMessageContextActive ( ) ; public class MultiOutResult implements MultiReturnValuesContainer { public Object [ ] getValues ( ) { return new Object [ ] { \"one\" , \"two\" } ; } } MultiOutResult testMultiOutMethod ( ) ;", "@ Autowired Tracing tracer ;", "\"//str[@name='parsedquery_toString'][contains(.,'(f1:\\\"a b\\\" f1:\\\"b c\\\" f1:\\\"c d\\\")^2.0')]\" , \"//str[@name='parsedquery_toString'][not(contains(.,'(f40:\\\"a b\\\" f1:\\\"b c\\\" f1:\\\"c d\\\")^2.0')]\" , \"//str[@name='parsedquery_toString'][not(contains(.,'(f40:\\\"a b\\\" f1:\\\"b c\\\" f1:\\\"c d\\\")^2.0')]\" ) ;", "playerMP . openContainer = handlers . get ( handler ) . getServerGui ( id , playerMP , world , obj ) ;", "@ CanRunDuringConflict public class CheckoutOp extends AbstractGeoGitOp < CheckoutResult > { }", ". resolveFieldType ( new FieldDescriptor ( \"a\" ) . type ( JsonFieldType . STRING ) . optional ( ) ) ;", "long source_epoch_1 = attestation_data_1 . getSource_epoch ( ) ; long source_epoch_2 = attestation_data_2 . getSource_epoch ( ) ; long target_epoch_1 = slot_to_epoch ( attestation_data_1 . getSlot ( ) ) ; long target_epoch_2 = slot_to_epoch ( attestation_data_2 . getSlot ( ) ) ; return source_epoch_1 < source_epoch_2 && target_epoch_2 < target_epoch_1 ;", "public int getSdpId ( ) { return sdpId ; } public void setSdpId ( int sdpId ) { this . sdpId = sdpId ; }", "GL11 . glScaled ( scale , - scale , scale ) ; GL11 . glDisable ( GL11 . GL_CULL_FACE ) ; trackball . update ( mouseX - 50 , - ( mouseY - 50 ) ) ;", "", "public Map < String , String > getHeaders ( )", "import org . esa . snap . core . util . StringUtils ;", "import net . minecraft . block . state . IBlockState ;", "String result = ( ( TestDataWrapper ) tmp ) . getTestString ( ) ;", "@ Nonnull public OptionRequest expand ( @ Nonnull final String value ) { addExpandOption ( value ) ; return this ; }", "public AstLexicalRead ( int iindex , int lhs , String definer , String globalName , TypeReference type ) { this ( iindex , new Access ( globalName , definer , type , lhs ) ) ; }", "public Map < String , String > getEnvOverrides ( ) { return envOverrides ; } public List < SingularityMesosArtifact > getExtraArtifacts ( ) { return extraArtifacts ; }", "public void testSimpleDocWithDefault ( ) throws Exception { StringWriter sw = new StringWriter ( ) ; JsonGenerator gen = JSON_F . createGenerator ( sw ) ; gen . useDefaultPrettyPrinter ( ) ; _verifyPrettyPrinter ( gen , sw ) ; gen . close ( ) ; }", "return new RacialEffectUtil ( Util . capitaliseSentence ( race . getName ( false ) ) + \" hair transformation.\" ) { @ Override public String applyEffect ( ) { return target . setHairType ( RacialBody . valueOfRace ( race ) . getHairType ( ) ) ; } } ;", "Type docValuesType = null ; if ( format <= FORMAT_INDEX_VALUES ) { final byte b = input . readByte ( ) ; switch ( b ) { case 0 : docValuesType = null ; break ; case 1 : docValuesType = Type . INTS ; break ; case 2 : docValuesType = Type . FLOAT_32 ; break ; case 3 : docValuesType = Type . FLOAT_64 ; break ; case 4 : docValuesType = Type . BYTES_FIXED_STRAIGHT ; break ; case 5 : docValuesType = Type . BYTES_FIXED_DEREF ; break ; case 6 : docValuesType = Type . BYTES_FIXED_SORTED ; break ; case 7 : docValuesType = Type . BYTES_VAR_STRAIGHT ; break ; case 8 : docValuesType = Type . BYTES_VAR_DEREF ; break ; case 9 : docValuesType = Type . BYTES_VAR_SORTED ; break ; default : throw new IllegalStateException ( \"unhandled indexValues type \" + b ) ; } } final FieldInfo fi = addInternal ( name , fieldNumber , isIndexed , storeTermVector , storePositionsWithTermVector , storeOffsetWithTermVector , omitNorms , storePayloads , omitTermFreqAndPositions , docValuesType ) ; fi . setCodecId ( codecId ) ;", "Assert . assertNull ( \"case 4\" , response . getEntity ( ) ) ;", "import org . n52 . sos . ds . hibernate . util . ProcedureTimeExtrema ;", "jj_la1 [ 146 ] = jj_gen ; break label_105 ;", "private PDAbstractPattern pattern = null ; private RenderingMode renderingMode = RenderingMode . FILL ; private PDFont font ;", "private final QueryShardContext queryShardContext ; private FetchPhase fetchPhase ;", "", "boolean flatMessage = this . canalClientConfig . getFlatMessage ( ) ;", "service . branchList ( project . getLocation ( ) , remoteMode ) . then ( branches -> { asyncResult . onSuccess ( branches ) ; } ) . catchError ( error -> { asyncResult . onFailure ( error . getCause ( ) ) ; } ) ;", "", "public synchronized void transitionTableState ( final Table . ID tableId , final TableState newState ) { String statePath = ZooUtil . getRoot ( HdfsZooInstance . getInstance ( ) ) + Constants . ZTABLES + \"/\" + tableId + Constants . ZTABLE_STATE ; }", "import org . jvnet . hudson . test . recipes . LocalData ; import org . jvnet . hudson . test . TestExtension ;", "while ( ! successQueue . isEmpty ( ) ) { EmailSender email = successQueue . poll ( ) ; if ( \"true\" . equals ( PortofinoProperties . getProperties ( ) . getProperty ( PortofinoProperties . KEEP_SENT ) ) ) { continue ; } }", "@ JsfComponent ( family = AbstractDropDownMenu . COMPONENT_FAMILY , type = AbstractMenuGroup . COMPONENT_TYPE , facets = { @ Facet ( name = \"icon\" , generate = false ) , @ Facet ( name = \"iconDisabled\" , generate = false ) } , renderer = @ JsfRenderer ( type = MenuGroupRendererBase . RENDERER_TYPE ) , tag = @ Tag ( name = \"menuGroup\" ) ) public abstract class AbstractMenuGroup extends UIOutput implements CoreProps , EventsKeyProps , EventsMouseProps , I18nProps , PositionProps { public static final String COMPONENT_TYPE = \"org.richfaces.ui.MenuGroup\" ; }", "return wizard . thenIsShorter ( \u00c2\u00a2 ) ? null : trick . invert ( \u00c2\u00a2 ) ;", "import com . fluxtream . connectors . updaters . UpdateInfo ; import com . fluxtream . connectors . location . LocationFacet ;", "if ( ( apiKey == null && secretKey != null ) || ( apiKey != null && secretKey == null ) ) { throw new ServerApiException ( BaseCmd . PARAM_ERROR , \"Please provide an api key/secret key pair\" ) ; } Account account = ( Account ) UserContext . current ( ) . getAccountObject ( ) ; if ( account != null && ( account . getId ( ) == Account . ACCOUNT_ID_SYSTEM ) ) { throw new ServerApiException ( BaseCmd . ACCOUNT_ERROR , \"user id : \" + id + \" is system account, update is not allowed\" ) ; } if ( firstName == null ) { firstName = user . getFirstname ( ) ; } if ( lastName == null ) { lastName = user . getLastname ( ) ; } if ( userName == null ) { userName = user . getUsername ( ) ; } if ( password == null ) { password = user . getPassword ( ) ; } if ( email == null ) { email = user . getEmail ( ) ; } if ( timeZone == null ) { timeZone = user . getTimezone ( ) ; } if ( apiKey == null ) { apiKey = user . getApiKey ( ) ; } if ( secretKey == null ) { secretKey = user . getSecretKey ( ) ; }", "else if ( Task . USER_ID_UNASSIGNED . equals ( task . getValue ( Task . USER_ID ) ) ) pictureView . setDefaultImageDrawable ( ResourceDrawableCache . getImageDrawableFromId ( resources , R . drawable . icn_anyone_transparent ) ) ; else if ( Task . USER_ID_UNASSIGNED . equals ( task . getValue ( Task . USER_ID ) ) ) pictureView . setDefaultImageDrawable ( ResourceDrawableCache . getImageDrawableFromId ( resources , R . drawable . icn_anyone_transparent ) ) ;", "@ Override public String toJSON ( ) { return \"{\\\"0\\\":\" + Utils . JsonStringify ( _1 ) + \",\\\"1\\\":\" + Utils . JsonStringify ( _2 ) + \",\\\"length\\\":2}\" ; } public boolean checkInstance ( Object other ) { return other instanceof Tuple2 ; }", "if ( dataType . array_type ( ) . isEmpty ( ) && dataType . SETOF ( ) == null && customType != null && ( typeSchema == null || ApgdiffConsts . PG_CATALOG . equals ( typeSchema . getText ( ) ) ) ) { }", "import org . nuxeo . ecm . platform . ec . notification . NotificationConstants ; import org . nuxeo . ecm . core . api . model . PropertyNotFoundException ;", "slaveAndRackManager . checkStateAfterFinishedTask ( taskIdObj , status . getAgentId ( ) . getValue ( ) , stateCache ) ; scheduler . handleCompletedTask ( task , taskIdObj , isActiveTask , timestamp , taskState , taskHistoryUpdateCreateResult , status ) ;", "import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . HashSet ; import java . util . LinkedHashMap ; import java . util . LinkedHashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . Stack ;", "private static ItemStack tryFillCanister ( ItemStack canister , IFluidHandler tank , boolean isCreativeMode )", "import org . molgenis . data . meta . model . Attribute ; import org . molgenis . data . meta . model . EntityType ;", "", "SinkListener sinkListener ) {", "", "PaymentMethod method , String extra_edittext_1 , String extra_edittext_2 , String extra_edittext_3 ) { return updateReceiptHelper ( oldReceipt , trip , name , category , date , comment , price , tax , expensable , currency , fullpage , method , extra_edittext_1 , extra_edittext_2 , extra_edittext_3 ) ;", "private final Context context ; private final DownloadInfo downloadInfo ; private final SystemFacade systemFacade ; private final StorageManager storageManager ; private final DownloadNotifier downloadNotifier ; private final BatchCompletionBroadcaster batchCompletionBroadcaster ;", "private void createActions ( ) { final IFeatureModel featureModel = getFeatureModel ( ) ; calculateDependencyAction = new CalculateDependencyAction ( this , featureModel ) ; createLayerAction = new CreateLayerAction ( this , featureModel ) ; createCompoundAction = new CreateCompoundAction ( this , featureModel ) ; deleteAction = new DeleteAction ( this , featureModel ) ; colorSelectedFeatureAction = new SetFeatureColorAction ( this , getFeatureModel ( ) ) ; colorSelectedFeatureAction . setEnableUndoRedo ( true ) ; deleteAllAction = new DeleteAllAction ( this , featureModel ) ; mandatoryAction = new MandatoryAction ( this , featureModel ) ; hiddenAction = new HiddenAction ( this , featureModel ) ; collapseAction = new CollapseAction ( this , graphicalFeatureModel ) ; collapseFeaturesAction = new CollapseSiblingsAction ( this , graphicalFeatureModel ) ; collapseAllAction = new CollapseAllAction ( this , graphicalFeatureModel , true , COLLAPSE_ALL ) ; collapseAllAction . setImageDescriptor ( FmOutlinePageContextMenu . IMG_COLLAPSE ) ; collapseAllButExplanationAction = new CollapseAllButExplanationAction ( getGraphicalFeatureModel ( ) ) ; adjustModelToEditorSizeAction = new AdjustModelToEditorSizeAction ( this , graphicalFeatureModel , ADJUST_MODEL_TO_EDITOR ) ; expandAllAction = new CollapseAllAction ( this , graphicalFeatureModel , false , EXPAND_ALL ) ; expandAllAction . setImageDescriptor ( FmOutlinePageContextMenu . IMG_EXPAND ) ; expandAllAction . setImageDescriptor ( FmOutlinePageContextMenu . IMG_EXPAND ) ; expandAllAction . setImageDescriptor ( FmOutlinePageContextMenu . IMG_EXPAND ) ; expandAllAction = new AdjustModelToEditorSizeAction ( this , graphicalFeatureModel , ADJUST_MODEL_TO_EDITOR", "if ( username . equals ( \"\" ) || password . equals ( \"\" ) || ! vld ) { }", "@ Override public final void modifyText ( ModifyEvent e ) { }", "package us . ihmc . commonWalkingControlModules . trajectories ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; import java . util . ArrayList ; import java . util . List ; import javax . vecmath . Point3d ; import org . junit . Test ; import us . ihmc . robotics . dataStructures . registry . YoVariableRegistry ; import us . ihmc . robotics . geometry . FramePoint ; import us . ihmc . robotics . geometry . FrameVector ; import us . ihmc . robotics . math . frames . YoFramePoint ; import us . ihmc . robotics . math . trajectories . providers . YoPositionProvider ; import us . ihmc . robotics . math . trajectories . providers . YoVariableDoubleProvider ; import us . ihmc . robotics . referenceFrames . ReferenceFrame ; import us . ihmc . robotics . trajectories . providers . ConstantPositionProvider ; import us . ihmc . robotics . trajectories . providers . ConstantVectorProvider ; import us . ihmc . robotics . trajectories . providers . PositionProvider ; import us . ihmc . robotics . trajectories . providers . TrajectoryParameters ; import us . ihmc . robotics . trajectories . providers . TrajectoryParametersProvider ; import us . ihmc . robotics . trajectories . providers . VectorProvider ; import us . ihmc . tools . testing . TestPlanAnnotations . DeployableTestMethod ; public class TwoWaypointPositionTrajectoryGeneratorTest { private static ReferenceFrame worldFrame = ReferenceFrame . getWorldFrame ( ) ; @ DeployableTestMethod ( estimatedDuration = 0.0 ) @ Test ( timeout = 30000 ) public class TwoWaypointPositionTrajectoryGenerator .", "{ this . map . put ( n . getLocalName ( ) , new String [ ] { n . getNodeValue ( ) } ) ; } else if ( n . getLocalName ( ) . equalsIgnoreCase ( \"version\" ) ) { this . map . put ( n . getLocalName ( ) , new String [ ] { n . getNodeValue ( ) } ) ; }", "AliasedConnection inboundConnection = config . getDefaultServerConnection ( ) ; AliasedConnection outboundConnection = config . getDefaultClientConnection ( ) ; if ( outboundConnection == null || inboundConnection == null ) { }", "", "import android . provider . Settings ; import android . support . annotation . NonNull ; import android . support . v4 . app . ActivityCompat ; import android . support . v7 . app . AlertDialog ;", "public CacheKeyFactory getCacheKeyFactory ( ) { return cacheKeyFactory ; } public void setCacheKeyFactory ( final CacheKeyFactory cacheKeyFactory ) { this . cacheKeyFactory = cacheKeyFactory ; } public MetaDataFactory getMetaDataFactory ( ) { return metaDataFactory ; } public void setMetaDataFactory ( final MetaDataFactory metaDataFactory ) { this . metaDataFactory = metaDataFactory ; }", "defaults . put ( SEARCH_MODE_FLOAT , Boolean . TRUE ) ; defaults . put ( SEARCH_MODE_RESULTS_IN_DIALOG , Boolean . FALSE ) ; defaults . put ( SEARCH_MODE_GLOBAL , Boolean . FALSE ) ; defaults . put ( DEFAULT_LABEL_PATTERN , \"[authors3][year]\" ) ;", "{ if ( encoding == Encoding . XML ) { return ( T ) xmlMapper . readValue ( value , constructJavaType ( type ) ) ; } else { final JacksonTypeFactory typeFactory = getTypeFactory ( ) ; final JavaType javaType = typeFactory . create ( type ) ; return ( T ) serializer ( ) . readValue ( value , javaType ) ; } } @ Override @ SuppressWarnings ( \"unchecked\" ) public < T > T deserialize ( String value , final Type type ) throws IOException { return deserialize ( value , type , Encoding . JSON ) ; }", "", "import java . util . ArrayList ; import java . util . Collections ;", "import org . signal . core . util . logging . Log ;", "@ Inject private Injector injector ; @ Inject public RuntimeManager ( IStoredSettings settings , XssFilter xssFilter ) { this ( settings , xssFilter , null ) ; }", "", "public WorldRenderer ( WorldInfo worldInfo , ChunkProvider chunkProvider , LocalPlayerSystem localPlayerSystem ) { this . chunkProvider = chunkProvider ; EntityAwareWorldProvider entityWorldProvider = new EntityAwareWorldProvider ( new WorldProviderCoreImpl ( worldInfo , this . chunkProvider ) ) ; }", "", "public int firstModifiableEdge = 0 ; public TIntSet temporarilyDeletedEdges = null ; public TIntList temporarilyAddedEdges = new TIntArrayList ( ) ; public boolean isProtectiveCopy ( ) { return firstModifiableEdge > 0 ; } public TIntIntMultimap turnRestrictions ; public StreetLayer layer ;", "import org . eclipse . che . ide . api . app . AppContext ;", "public class CurrencyTextView extends TextView { private Monetary amount = null ; private MonetaryFormat format = null ; private boolean alwaysSigned = false ; private RelativeSizeSpan prefixRelativeSizeSpan = null ; private ScaleXSpan prefixScaleXSpan = null ; private ForegroundColorSpan prefixColorSpan = null ; private RelativeSizeSpan insignificantRelativeSizeSpan = null ; public CurrencyTextView ( final Context context ) { super ( context ) ; } public CurrencyTextView ( final Context context , final AttributeSet attrs ) { super ( context , attrs ) ; } public void setAmount ( final Monetary amount ) { this . amount = amount ; updateView ( ) ; } public void setFormat ( final MonetaryFormat format ) { this . format = format . codeSeparator ( Constants . CHAR_HAIR_SPACE ) ; updateView ( ) ; } public void setAlwaysSigned ( final boolean alwaysSigned ) { this . alwaysSigned = alwaysSigned ; updateView ( ) ; } public void setStrikeThru ( final boolean strikeThru ) { if ( strikeThru ) setPaintFlags ( getPaintFlags ( ) | Paint . STRIKE_THRU_TEXT_FLAG ) ; else setPaintFlags ( getPaintFlags ( ) & ~ Paint . STRIKE_THRU_TEXT_FLAG ) ; } public void setInsignificantRelativeSize ( final float insignificantRelativeSize ) { if ( insignificantRelativeSize != 1 ) { this . prefixRelativeSizeSpan = new RelativeSizeSpan ( insignificantRelativeSize ) ; this . insignificantRelativeSizeSpan = new RelativeSizeSpan ( insignificantRelativeSize ) ; this . insignificantRelativeSizeSpan = new RelativeSizeSpan ( insignificantRelativeSize ) ; } else { this . prefixRelativeSizeSpan = null ; this . insignificantRelativeSizeSpan = null ; this . insignificantRelativeSizeSpan = null ; this . insignificantRelative", "@ Override public IntervalWindow getSideInputWindow ( BoundedWindow window ) { throw new UnsupportedOperationException ( \"Sessions is not allowed in side inputs\" ) ; } public Duration getGapDuration ( ) { return gapDuration ; }", "if ( labelState instanceof ConnectomicsLabelState < ? , ? > ) return new IntersectingSourceState ( ( ThresholdingSourceState ) thresholdedState , ( ConnectomicsLabelState ) labelState , composite , name , queue , priority , meshesGroup , manager , workers ) ; else if ( labelState instanceof LabelSourceState < ? , ? > ) return new IntersectingSourceState ( ( ThresholdingSourceState ) thresholdedState , ( LabelSourceState ) labelState , composite , name , queue , priority , meshesGroup , viewFrustumProperty , eyeToWorldTransformProperty , manager , workers ) ; else throw new JsonParseException ( \"Expected \" + ConnectomicsLabelState . class . getName ( ) + \" or \" + LabelSourceState . class . getName ( ) + \" as second dependency but got \" + labelState . getClass ( ) . getName ( ) + \" instead.\" ) ;", "", "@ RunWith ( Parallel . class ) @ Ignore ( \"Eventing is broken across failover\" )", "public SymmetricPowerImpl getPower ( ) { return power ; } @ Override public ThingStateChannels getStateChannel ( ) { }", "if ( ! vcomment . getVid ( ) . isSynthetic ( ) && ( ( fs = selectAnnotationByAddr ( aCas , vcomment . getVid ( ) . getId ( ) ) ) != null && fs . getType ( ) . getName ( ) . equals ( Sentence . class . getName ( ) ) ) ) { if ( sentenceIndexes == null ) { sentenceIndexes = new HashMap < > ( ) ; int i = 1 ; for ( AnnotationFS s : select ( aCas , getType ( aCas , Sentence . class ) ) ) { sentenceIndexes . put ( s , i ) ; i ++ ; } } int index = sentenceIndexes . get ( fs ) ; }", "if ( tileDrawers . isSealed ( ) ) return false ; int slot = getDrawerSlot ( getDrawerCount ( state ) , side . ordinal ( ) , hitX , hitY , hitZ ) ;", "import static com . jetbrains . jetpad . vclang . term . expr . visitor . NormalizeVisitor . Mode . NF ; import static com . jetbrains . jetpad . vclang . typechecking . TypeCheckingTestCase . * ; import static com . jetbrains . jetpad . vclang . typechecking . nameresolver . NameResolverTestCase . resolveNamesClass ;", "@ Override public Type getType ( ) { return Type . FIELD ; } public Type_ getType_ ( ) { return type_ ; } public void setType_ ( Type_ type_ ) { this . type_ = type_ ; }", "import com . google . gerrit . extensions . registration . DynamicMap ; import com . google . gerrit . extensions . registration . DynamicItem ;", "private static List < Element > getElements ( final List < ElementId > seeds ) { }", "private static final String SNAPSHOTS = \"jv_snapshots\" ; private static final String COMMIT_ID = \"commitMetadata.id\" ; private static final String COMMIT_DATE = \"commitMetadata.commitDate\" ; private static final String COMMIT_PROPERTIES = \"commitMetadata.properties\" ; private static final String COMMIT_AUTHOR = \"commitMetadata.author\" ; public static final String GLOBAL_ID_KEY = \"globalId_key\" ; private static final String GLOBAL_ID_ENTITY = \"globalId.entity\" ; private static final String GLOBAL_ID_OWNER_ID_ENTITY = \"globalId.ownerId.entity\" ; private static final String GLOBAL_ID_FRAGMENT = \"globalId.fragment\" ; private static final String GLOBAL_ID_VALUE_OBJECT = \"globalId.valueObject\" ; private static final String SNAPSHOT_VERSION = \"version\" ; private static final String CHANGED_PROPERTIES = \"changedProperties\" ; private static final String OBJECT_ID = \"_id\" ;", "RulesTimer timer = ruleEngine . getRulesTimer ( ) ; timer . timeObjectSomeValuesFromBackwardLinkRule -= CachedTimeThread . currentTimeMillis ( ) ; try { for ( Conclusion carry : propagationsByObjectProperty_ . get ( link . getRelation ( ) ) ) ruleEngine . produce ( link . getSource ( ) , carry ) ; } finally { timer . timeObjectSomeValuesFromBackwardLinkRule += CachedTimeThread . currentTimeMillis ( ) ; }", "Minecraft . getMinecraft ( ) . mcProfiler . startSection ( behaviour . getClass ( ) ) ; renderer . render ( behaviour , x , y , z , partialTicks , bb ) ; Minecraft . getMinecraft ( ) . mcProfiler . endSection ( ) ;", "package com . androidquery . callback ; import java . io . BufferedOutputStream ; import java . io . ByteArrayInputStream ; import java . io . DataOutputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . lang . ref . Reference ; import java . lang . ref . WeakReference ; import java . net . HttpURLConnection ; import java . net . URL ; import java . util . ArrayList ; import java . util . Date ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ExecutorService ; import java . util . concurrent . Executors ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import java . util . zip . GZIPInputStream ; import org . apache . http . Header ; import org . apache . http . HttpEntity ; import org . apache . http . HttpHost ; import org . apache . http . HttpResponse ; import org . apache . http . NameValuePair ; import org . apache . http . client . ClientProtocolException ; import org . apache . http . client . CookieStore ; import org . apache . http . client . entity . UrlEncodedFormEntity ; import org . apache . http . client . methods . HttpDelete ; import org . apache . http . client . methods . HttpEntityEnclosingRequestBase ; import org . apache . http . client . methods . HttpGet ; import org . apache . http . client . methods . HttpEntity ; import org . apache . http . ClientProtocolException ; import org . apache . http . client . CookieStore ; import org . apache . http . client . entity . UrlEncodedFormEntity ; import org . apache . http . client . methods . HttpUriRequest ; import org . apache .", "entitlementList . add ( createEntitlementByProduct ( consumer , p , quantity ) ) ;", "import de . unisb . cs . st . evosuite . Properties ;", "preRenderer . render ( vdoc , aWindowBeginOffset , aWindowEndOffset , aCas , getLayersToRender ( ) ) ;", "match ( T__27 ) ; setState ( 778 ) ; _errHandler . sync ( this ) ;", "private AuthenticationInfo authenticateWithCertificate ( final CertificateAuthenticationToken token ) throws AuthenticationException { try { if ( ! allowCertificateAuthentication ( ) ) { throw new EntityServiceException ( \"Certificate authentication is not allowed\" ) ; } final Pattern pattern = getPattern ( ) ; if ( pattern == null ) { throw new EntityServiceException ( \"No valid certificateDNPattern found\" ) ; } final String dn = ( String ) token . getCredentials ( ) ; final String username = CertificateUtil . extractUserIdFromDN ( dn , pattern ) ; if ( LOGGER . isDebugEnabled ( ) ) { final String cn = CertificateUtil . extractCNFromDN ( dn ) ; LOGGER . debug ( \"authenticate() - dn=\" + dn + \", cn=\" + cn + \", userId=\" + username ) ; } final User user = loadUserByUsername ( username ) ; if ( StringUtils . hasText ( username ) && user == null ) { throw new EntityServiceException ( username + \" does not exist\" ) ; } if ( user != null ) { check ( user ) ; return new SimpleAuthenticationInfo ( user , user . getPasswordHash ( ) , getName ( ) ) ; } } catch ( final AuthenticationException e ) { throw e ; } catch ( final Exception e ) { LOGGER . error ( e . getMessage ( ) , e ) ; throw new BadCredentialsException ( e . getMessage ( ) ) ; } return null ; } private AuthenticationInfo authenticateWithUsernamePassword ( final UsernamePasswordToken token ) throws AuthenticationException { try { final String username = token . getUsername ( ) ; if ( username == null ) { throw new AccountException ( \"Null user names are not allowed by this realm.\" ) ; } final User user = loadUserByUsername ( username ) ; if ( StringUtils . hasText ( username ) && user == null ) { throw new BadCredentialsException ( \"Bad Credentials\" ) ; } if ( user != null ) { throw new BadCredentialsException ( e . getMessage ( ) , getName ( ) ; } if ( user != null", "LogManager . d ( TAG , \"Not stopping bluetooth le scan. Device capable of multiple indistinct detections per scan.\" ) ;", "import org . apache . isis . core . metamodel . facets . param . typicallen . fromtype . TypicalLengthFacetOnParameterDerivedFromTypeFacetFactory ;", "import org . opencb . opencga . core . models . common . Enums ; import org . opencb . opencga . core . analysis . result . Status ; import org . opencb . opencga . core . models . Study ; import org . opencb . opencga . core . models . acls . AclParams ; import org . opencb . opencga . core . models . acls . permissions . FileAclEntry ;", "", "public Integer getCause ( ) { return cause ; } public void setCause ( Integer cause ) { this . cause = cause ; }", "import yuku . alkitab . base . storage . Db ; import yuku . alkitab . base . storage . Prefkey ; import yuku . alkitab . base . util . BackupManager ; import yuku . alkitab . base . util . Sqlitil ; import yuku . alkitab . debug . R ; import yuku . alkitab . model . Label ;", "} catch ( SecurityException | NoSuchMethodException e ) { log . trace ( \"Could not find {} method on {}\" , HADOOP_CRED_PROVIDER_FLUSH_METHOD_NAME , HADOOP_CRED_PROVIDER_CLASS_NAME , e ) ;", "ShadowProgressDialog . class , ShadowRatingBar . class ,", "public CellScannerImpl ( Context appCtx ) { mAppContext = appCtx ; }", "", "{ if ( DEBUG_PREFS ) logger . warn ( \"onSharedPreferenceChanged()\" ) ; super . onSharedPreferenceChanged ( sharedPreferences , key ) ; if ( key . equals ( PREFS_SORT_BUFFERS ) ) { BufferList . SORT_BUFFERS = prefs . getBoolean ( key , false ) ; } else if ( key . equals ( PREFS_SHOW_BUFFER_TITLES ) ) { BufferList . SHOW_TITLE = prefs . getBoolean ( key , false ) ; } else if ( key . equals ( PREFS_FILTER_NONHUMAN_BUFFERS ) ) { BufferList . FILTER_NONHUMAN_BUFFERS = prefs . getBoolean ( key , false ) ; } else if ( key . equals ( PREFS_OPTIMIZE_TRAFFIC ) ) { BufferList . OPTIMIZE_TRAFFIC = prefs . getBoolean ( key , false ) ; } else if ( key . equals ( PREFS_FILTER_LINES ) ) { Buffer . FILTER_LINES = prefs . getBoolean ( key , true ) ; } else if ( key . equals ( PREFS_MAX_WIDTH ) ) { Buffer . Line . MAX_WIDTH = Integer . parseInt ( prefs . getString ( key , \"7\" ) ) ; BufferList . notifyOpenBuffersMustBeProcessed ( false ) ; } else if ( key . equals ( key , false ) ) { BufferList . LINE_MAX_WIDTH = Integer . parseInt ( prefs . getString ( key , \"7\" ) ) ; BufferList . notifyOpenBuffersMustBeProcessed ( true ) ; } else if ( key . equals ( PREFS_TEXT_SIZE ) ) { setTextSizeAndLetterWidth ( ) ; BufferList . notifyOpenBuffersMustBeProcessed ( true ) ; } else if ( key . equals ( PREFS_PREFIX_ALIGN ) ) { setAlignment ( ) ; BufferList . notifyOpenBuffersMustBeProcessed", "new PreferencesModule ( ) , new NavigationDrawerTestModule ( ) ) . toolBarControls ( Dropdown . of ( new FontAwesomeIconView ( FontAwesomeIcon . ADDRESS_BOOK ) , new CustomMenuItem ( new Label ( \"Content 1\" ) ) , new CustomMenuItem ( new Label ( \"Content 2\" ) ) ) , Dropdown . of ( new ImageView ( \"com/dlsc/workbenchfx/user_light.png\" ) , new Menu ( \"Submenus\" , new FontAwesomeIconView ( FontAwesomeIcon . PLUS ) , new MenuItem ( \"Submenu 1\" ) , new CustomMenuItem ( new Label ( \"CustomMenuItem\" ) , false ) ) ) , Dropdown . of ( \"Text\" , new ImageView ( \"com/dlsc/workbenchfx/user_light.png\" ) , new CustomMenuItem ( new Label ( \"Content 1\" ) ) , new CustomMenuItem ( new Label ( \"Content 2\" ) ) ) ) . modulesPerPage ( 2 )", "@ Command ( name = \"recursive\" , aliases = { \"recurse\" , \"r\" } , desc = \"Set all connected blocks\" , descFooter = \"Set all connected blocks\\n\" + \"Note: Set a mask to recurse along specific blocks\" ) @ CommandPermissions ( \"worldedit.brush.recursive\" ) public void recursiveBrush ( InjectedValueAccess context , EditSession editSession , @ Arg ( desc = \"Pattern\" ) Pattern fill , @ Arg ( desc = \"The radius to sample for blending\" , def = \"5\" ) Expression radius , @ Switch ( name = 'd' , desc = \"Apply in depth first order\" ) boolean depthFirst ) throws WorldEditException { worldEdit . checkMaxBrushRadius ( radius ) ; set ( context , new RecurseBrush ( depthFirst ) ) . setSize ( radius ) . setFill ( fill ) . setMask ( new IdMask ( editSession ) ) ; } @ Command ( name = \"line\" , aliases = { \"l\" } , desc = \"Create lines\" ) @ CommandPermissions ( \"worldedit.brush.line\" ) public void lineBrush ( InjectedValueAccess context , @ Arg ( desc = \"Pattern\" ) Pattern fill , @ Arg ( desc = \"The radius to sample for blending\" , def = \"0\" ) Expression radius , @ Switch ( name = 'h' , desc = \"Create only a shell\" ) boolean shell , @ Switch ( name = 's' , desc = \"Selects the clicked point after drawing\" ) boolean select , @ Switch ( name = 'f' , desc = \"Create a flat line\" ) boolean flat ) throws WorldEditException { worldEdit . checkMaxBrushRadius ( radius ) ; set ( context , new LineBrush ( shell , select , flat ) ) . setSize ( radius ) . setFill ( fill )", "CCSDSPacket packet = readPacket ( serverConnection . getTcInputStream ( ) ) ; if ( packet != null ) { }", "private void autoGenerateAlgorithms ( EntityMapping mapping , EntityType sourceEntityType , EntityType targetEntityType , Iterable < Attribute > attributes , MappingProject project )", "private final HdfsFileStatusWithId fileWithId ;", "log . debug ( \"Creating ZooKeeper entries for new table {} (ID: {}) in namespace (ID: {})\" , tableName , tableId , namespaceId ) ;", "public static String doPutForText ( final String serviceURIpart , final Representation representation ) throws IOException { return doPutForText ( serviceURIpart , representation , isSuccessful ( ) ) ; } public static String doPutForText ( final String serviceURIpart , final Representation representation , Matcher < Response > responseMatcher ) throws IOException { }", "if ( ! vlanId . equals ( Vlan . UNTAGGED ) ) { VlanVO vlanHandle = _vlanDao . findByZoneAndVlanId ( zoneId , vlanId ) ; if ( vlanHandle != null && ! vlanHandle . getVlanType ( ) . equals ( vlanType ) ) throw new InvalidParameterValueException ( \"This vlan id is already associated with the vlan type \" + vlanHandle . getVlanType ( ) . toString ( ) + \",whilst you are trying to associate it with vlan type \" + vlanType . toString ( ) ) ; }", "@ Order ( 72 ) @ ExportEntity ( LocationDto . class ) @ ExportProperty ( { EventDto . EVENT_LOCATION , LocationDto . DISTRICT } )", "import org . openpnp . gui . support . NamedConverter ; import org . openpnp . machine . reference . AbstractBroadcastingCamera ; import org . openpnp . model . Configuration ; import org . openpnp . model . LengthUnit ; import org . openpnp . model . Location ;", "import org . geotools . util . logging . Logging ; import org . joda . time . format . DateTimeFormat ;", "package org . myrobotlab . service ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Date ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import org . alicebot . ab . AIMLMap ; import org . alicebot . ab . AIMLSet ; import org . alicebot . ab . Bot ; import org . alicebot . ab . Category ; import org . alicebot . ab . Chat ; import org . alicebot . ab . Predicates ; import org . myrobotlab . framework . Service ; import org . myrobotlab . framework . ServiceType ; import org . myrobotlab . framework . interfaces . Attachable ; import org . myrobotlab . framework . interfaces . ServiceInterface ; import org . myrobotlab . io . FileIO ; import org . myrobotlab . logging . LoggerFactory ; import org . myrobotlab . logging . LoggingFactory ; import org . myrobotlab . programab . ChatData ; import org . myrobotlab . programab . MrlSraixHandler ; import org . myrobotlab . programab . OOBPayload ; import org . myrobotlab . service . interfaces . SpeechSynthesis ; import org . myrobotlab . service . interfaces . TextListener ; import org . myrobotlab . programab . payloads . List < OOBPayload > payloads , Date timestamp ) { this . botName = botName ; this . userName = userName ; this . msg = msg ; this . payloads = payloads ; this . timestamp = timestamp ; } public class ProgramAB extends Service implements TextListener , TextPublisher { transient public final static Logger log", "", "_outputContext = _outputContext . createChildObjectContext ( null ) ;", "public void forSystemResources_unknownResourceIdsShouldReportPackagesSearched ( ) throws IOException { if ( ! isLegacyAssetManager ( assetManager ) ) return ; }", "import com . orientechnologies . orient . core . conflict . OAutoMergeRecordConflictStrategy ;", "import net . minecraft . entity . ai . attributes . GlobalEntityTypeAttributes ; import net . minecraft . nbt . CompoundNBT ;", "this . classView = entity . classView ; this . pageSize = entity . getDefaultPageSize ( ) ;", "{ SemanticIndexView view = views . getView ( o1 . getType ( ) , o2 . getType ( ) ) ; PreparedStatement stm = stmMap . get ( view . getId ( ) ) ; if ( stm == null ) { stm = conn . prepareStatement ( view . getINSERT ( ) ) ; stmMap . put ( view . getId ( ) , stm ) ; } int uri_id = getObjectConstantUriId ( o1 , uriidStm ) ; int uri2_id = getObjectConstantUriId ( o2 , uriidStm ) ; stm . setInt ( 1 , uri_id ) ; stm . setInt ( 2 , uri2_id ) ; stm . setInt ( 3 , idx ) ; stm . addBatch ( ) ; view . addIndex ( idx ) ; }", "public List < String > getVerticesByLabel ( List < DbDataContainer > attributes ) { String query = \"MATCH (f {\" ; int count = 0 ; for ( DbDataContainer container : attributes ) { query += container . getField ( ) + \" : \" ; switch ( container . getGroundType ( ) ) { case STRING : query += \"'\" + container . getValue ( ) . toString ( ) + \"'\" ; break ; case INTEGER : query += ( int ) container . getValue ( ) ; break ; case BOOLEAN : query += container . getValue ( ) ; break ; } if ( ++ count < attributes . size ( ) ) { query += \", \" ; } } query += \"}) return f\" ; StatementResult queryResult = this . session . run ( query ) ; List < String > result = new ArrayList < > ( ) ; while ( queryResult . hasNext ( ) ) { result . add ( queryResult . next ( ) . get ( \"f\" ) . asNode ( ) . get ( \"id\" ) . toString ( ) ) ; } return result ; } public Record getVertex ( String label , List < DbDataContainer > attributes ) throws EmptyResultException { }", "", "Harvester h = new Harvester ( log , context , params ) ; result = h . harvest ( log ) ;", "import org . openqa . selenium . WebElement ; import java . util . List ; import static org . hamcrest . CoreMatchers . not ; import static org . hamcrest . MatcherAssert . assertThat ; import static org . jenkinsci . test . acceptance . Matchers . hasContent ;", "import us . ihmc . robotics . controllers . pidGains . GainCoupling ; import us . ihmc . robotics . controllers . pidGains . YoPID3DGains ; import us . ihmc . robotics . controllers . pidGains . implementations . DefaultYoPID3DGains ; import us . ihmc . robotics . geometry . FramePoint3D ; import us . ihmc . robotics . geometry . FrameVector3D ;", "textData . setStringForIdentifier ( \"MIID_ELITE\" , \"Paragon\" ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( \"Doubles the experience\" ) ; sb . append ( ( char ) 0xA ) ; sb . append ( \"points this unit gains.\" ) ; sb . append ( ( char ) 0xA ) ; sb . append ( ( char ) 0x20 ) ; sb . append ( ( char ) 0x20 ) ; sb . append ( \"#C04All units\" ) ; textData . setStringForIdentifier ( \"Mess_Help2_skill_Elite\" , sb . toString ( ) ) ; FE9Skill paragon = skillData . getSkillWithSID ( FE9Data . Skill . PARAGON . getSID ( ) ) ; paragon . setRestrictionCount ( 0 ) ; paragon . setRestrictionPointer ( 0 ) ; paragon . commitChanges ( ) ; textData . setStringForIdentifier ( \"MIID_FRAC90\" , \"Blossom\" ) ; sb = new StringBuilder ( ) ; sb . append ( \"An item that allows you to acquire the skill\" ) ; sb . append ( ( char ) 0xA ) ; sb . append ( \"Blossom when you're at a base.\" ) ; textData . setStringForIdentifier ( \"MH_I_FRAC90\" , sb . toString ( ) ) ; textData . setStringForIdentifier ( \"MH_I_SWIFT\" , \"Celerity\" ) ; sb = new StringBuilder ( ) ; sb . append ( \"An item that allows you to acquire the skill\" ) ; sb . append ( ( char ) 0xA ) ; sb . append ( \"Celerity when you're at a base.\" ) ; textData . setStringForIdentifier ( \"MH_I_SWIFT\" , sb . toString (", "for ( AtlasLayer l : atlas . getLayers ( ) ) { if ( l . get ( centerX , centerY ) > atlas . getLayers ( ) . get ( autoLayer ) . get ( centerX , centerY ) ) { autoLayer = atlas . getLayers ( ) . indexOf ( l ) ; } }", "public ChronoDate < CopticChronology > dateFromYearDay ( Era < CopticChronology > era , int yearOfEra , int dayOfYear ) { throw new UnsupportedOperationException ( \"Not supported yet.\" ) ; } @ Override public ChronoDate < CopticChronology > date ( DateTimeAccessor dateTime ) { if ( dateTime instanceof LocalDate ) { return dateFromEpochDay ( ( ( LocalDate ) dateTime ) . getLong ( LocalDateTimeField . EPOCH_DAY ) ) ; } }", "import static org . refactoringminer . api . RefactoringType . CHANGE_ATTRIBUTE_TYPE ; import static org . refactoringminer . api . RefactoringType . CHANGE_PARAMETER_TYPE ;", "private void computeCoPPointLocation ( FramePoint2D copPointToPlan , CoPPointName copPointName , RobotSide supportSide )", "NotificationBundleProcessor_ProcessFromFCMIntentService ( blankActivity , bundle , null ) ; readableDb = OneSignalPackagePrivateHelper . OneSignal_getSQLiteDatabase ( RuntimeEnvironment . application ) ;", "final String source = currentDep . getFileName ( ) ; currentDep . addEvidence ( EvidenceType . PRODUCT , source , \"Product\" , product , Confidence . MEDIUM ) ; currentDep . addEvidence ( EvidenceType . VENDOR , source , \"Vendor\" , product , Confidence . MEDIUM ) ; currentDep . addEvidence ( EvidenceType . VERSION , source , \"Version\" , version , Confidence . MEDIUM ) ; currentDep . setName ( product ) ; currentDep . setVersion ( version ) ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "* Get an array of Dictionaries of type & lt ; string , string & gt ; with value [ { '1' : 'one' , '2' : 'two' , '3' : 'three' } , { } , { '7' : 'seven' , '8' : 'eight' , '9' : 'nine' } ]", "try { mLocalFolder = getStorageManager ( ) . getFileByPath ( mRemotePath ) ; result = checkForChanges ( client ) ; if ( result . isSuccess ( ) ) { if ( mRemoteFolderChanged ) { result = fetchAndSyncRemoteFolder ( client ) ; } else { prepareOpsFromLocalKnowledge ( client ) ; } if ( result . isSuccess ( ) ) { syncContents ( client ) ; }", "", "* Put an dictionary of complex type with values { \"0\" : { \"integer\" : 1 , \"string\" : \"2\" } , \"1\" : { \"integer\" : 3 , \"string\" : \"4\" } , \"2\" : { \"integer\" : 5 , \"string\" : \"6\" } }", "package org . bonitasoft . engine . execution ; import java . io . File ; import java . io . IOException ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import org . apache . commons . io . FileUtils ; import org . bonitasoft . engine . SArchivingException ; import org . bonitasoft . engine . api . impl . transaction . event . CreateEventInstance ; import org . bonitasoft . engine . bpm . bar . DocumentsResourcesContribution ; import org . bonitasoft . engine . bpm . connector . ConnectorDefinition ; import org . bonitasoft . engine . bpm . connector . ConnectorDefinitionWithInputValues ; import org . bonitasoft . engine . bpm . connector . ConnectorEvent ; import org . bonitasoft . engine . bpm . connector . InvalidEvaluationConnectorConditionException ; import org . bonitasoft . engine . bpm . model . impl . BPMInstancesCreator ; import org . bonitasoft . engine . bpm . process . ProcessInstanceState ; import org . bonitasoft . engine . builder . BuilderFactory ; import org . bonitasoft . engine . classloader . ClassLoaderService ; import org . bonitasoft . engine . commons . exceptions . SBonitaException ; import org . bonitasoft . engine . commons . exceptions . SBonitasoft . engine . commons . exceptions . SObjectCreationException ; import org . bonitasoft . engine . classloader . ClassLoaderService ; import org . bonitasoft . engine . builder . BuilderFactory ; import org . bonitasoft", "", "AfterInject . class , EService . class , EReceiver . class , EProvider . class ,", "if ( minecraft . currentScreen == null && player . getRidingEntity ( ) != null && player . getRidingEntity ( ) instanceof EntityAutoRocket && minecraft . gameSettings . thirdPersonView != 0 && ! minecraft . gameSettings . hideGUI )", "", "public InlineTextController createInlineTextController ( GeoInlineText geo ) { return null ; } public void resetInlineTexts ( ) { for ( Drawable dr : allDrawableList ) { if ( dr instanceof DrawInlineText ) { ( ( DrawInlineText ) dr ) . remove ( ) ; } } } public boolean resetPartialHits ( int x , int y , int threshold ) { if ( boundingBox != null && boundingBox . hit ( x , y , threshold ) ) { return false ; } boolean deselected = false ; for ( Drawable draw : this . allDrawableList ) { deselected = draw . resetPartialHitClip ( x , y ) || deselected ; } return deselected ; } public void restoreDynamicStylebar ( ) { if ( euclidianController . isMultiSelection ( ) ) { euclidianController . showDynamicStylebar ( ) ; } }", "if ( entryCase_ == 24 ) { size += com . google . protobuf . CodedOutputStream . computeMessageSize ( 24 , ( tachyon . proto . journal . File . SetAclEntry ) entry_ ) ; } if ( entryCase_ == 25 ) { size += com . google . protobuf . CodedOutputStream . computeMessageSize ( 25 , ( tachyon . proto . journal . KeyValue . DeleteStoreEntry ) entry_ ) ; } if ( entryCase_ == 26 ) { size += com . google . protobuf . CodedOutputStream . computeMessageSize ( 26 , ( tachyon . proto . journal . KeyValue . MergeStoreEntry ) entry_ ) ; }", "@ Override public Clipboard read ( UUID uuid , Function < BlockVector3 , Clipboard > createOutput ) throws IOException { StreamDelegate root = createDelegate ( ) ; inputStream . readNamedTagLazy ( root ) ; if ( blocks != null ) blocks . close ( ) ; if ( biomes != null ) biomes . close ( ) ; blocks = null ; biomes = null ; }", "private void save ( SessionHolder holder ) { SessionKey key = holder . key ; holder . session . setClipboard ( null ) ; if ( key . isPersistent ( ) ) { try { if ( holder . session . compareAndResetDirty ( ) ) { if ( holder . session . save ( ) ) { store . save ( getKey ( key ) , holder . session ) ; } else if ( path != null ) { File file = new File ( getKey ( key ) + \".json\" ) ; if ( file . exists ( ) ) { if ( ! file . delete ( ) ) { file . deleteOnExit ( ) ; } } } } }", "@ Override public void loadingLoginPage ( String loginUrl ) { setTitle ( loginUrl ) ; return identityTask . execute ( tr ) . get ( ) ; id = idExec . first ; exception = idExec . second ; } catch ( Exception e ) { exception = e ; } if ( exception != null ) { Log . w ( \"LoginActiviy.onAuthFlowComplete\" , exception ) ; onAuthFlowError ( getString ( salesforceR . stringGenericAuthenticationErrorTitle ( ) ) , getString ( salesforceR . stringGenericAuthenticationErrorBody ( ) ) ) ; finish ( ) ; } else { accountOptions = new AccountOptions ( id . username , tr . refreshToken , tr . authToken , tr . instanceUrl , tr . orgId , tr . userId ) ; if ( id . screenLockTimeout > 0 ) { PasscodeManager passcodeManager = ForceApp . APP . getPasscodeManager ( ) ; passcodeManager . setTimeoutMs ( id . screenLockTimeout * 1000 * 60 ) ; passcodeManager . setMinPasscodeLength ( id . pinLength ) ; completedAuthFlow = true ; ForceApp . APP . getPasscodeManager ( ) . setEnabled ( true ) ; ForceApp . APP . getPasscodeManager ( ) . lockIfNeeded ( this , true ) ; } else { addAccount ( ) ; finish ( ) ; } } }", "if ( importMode == ImportMode . IGNORE_CONFIRMATION || ( importMode == ImportMode . ACTION_CONFIRMATION && importState . isAction ( ) ) ) { if ( pathIndex > 0 ) { pathIndex = pathIndex - 1 ; } for ( ; pathIndex < relativePath . getNameCount ( ) - 1 ; pathIndex ++ ) { final String folderName = relativePath . getName ( pathIndex ) . toString ( ) ; Folder folder = folderService . create ( nearestFolder , folderName ) ; nearestFolder = DocRef . create ( folder ) ; folderRef = nearestFolder ; } }", "", "long targetMaxTypeShardSize , HollowMetricsCollector < HollowProducerMetrics > metricsCollector , BlobStorageCleaner blobStorageCleaner ) {", "", "public static final Setting < LogLevel > LOG_DEFAULT_LEVEL_SETTING = new Setting < > ( \"logger.level\" , LogLevel . INFO . name ( ) , LogLevel :: parse , SettingsProperty . ClusterScope ) ; public static final Setting < LogLevel > LOG_LEVEL_SETTING = Setting . dynamicKeySetting ( \"logger.\" , LogLevel . INFO . name ( ) , LogLevel :: parse , SettingsProperty . Dynamic , SettingsProperty . ClusterScope ) ;", "import org . eclipse . ditto . services . gateway . security . config . AuthenticationConfig ; import org . eclipse . ditto . services . gateway . security . config . CachesConfig ; import org . eclipse . ditto . services . gateway . security . config . DefaultAuthenticationConfig ; import org . eclipse . ditto . services . gateway . security . config . DefaultCachesConfig ; import org . eclipse . ditto . services . gateway . streaming . DefaultStreamingConfig ;", "import static org . opencb . opencga . storage . core . variant . VariantStorageEngine . Options . SEARCH_INDEX_LAST_TIMESTAMP ;", "marker . setIcon ( ContextCompat . getDrawable ( GeoShapeOsmMapActivity . this , R . drawable . ic_place_black ) ) ;", "@ Reference ( cardinality = ReferenceCardinality . MANDATORY )", "", "if ( config . hasAttribute ( \"user-agent-prefix\" ) ) { clientConfig . setUserAgentPrefix ( config . getAttribute ( \"user-agent-prefix\" ) ) ; }", "String subject = \"MATCH (:switch)-[f:flow]->(:switch)\" + \"\\nRETURN f.flowid as flow_id, \" + \"f.cookie as cookie, \" + \"f.meter_id as meter_id, \" + \"f.transit_vlan as transit_vlan, \" + \"f.src_switch as src_switch\" ; try ( Session session = driver . session ( AccessMode . READ ) ) { StatementResult result = session . run ( subject ) ; for ( Record record : result . list ( ) ) { flows . add ( new FlowInfo ( ) . setFlowId ( record . get ( \"flow_id\" ) . asString ( ) ) . setSrcSwitchId ( record . get ( \"src_switch\" ) . asString ( ) ) . setCookie ( record . get ( \"cookie\" ) . asLong ( ) ) . setMeterId ( safeAsInt ( record . get ( \"meter_id\" ) ) ) . setTransitVlanId ( safeAsInt ( record . get ( \"transit_vlan\" ) ) ) ) ; } }", "UfsUtils . loadUfs ( mTachyonFileSystem , new TachyonURI ( TachyonURI . SEPARATOR ) , new TachyonURI ( mUfsRoot + TachyonURI . SEPARATOR ) , new PrefixList ( \"tachyon;exclusions\" , \";\" ) , mLocalTachyonClusterResource . get ( ) . getMasterTachyonConf ( ) ) ;", "if ( pool . isLocal ( ) && pool . getPoolType ( ) == StoragePoolType . Filesystem && secHosts . isEmpty ( ) ) { List < StoragePoolHostVO > sphs = _storagePoolHostDao . listByPoolId ( pool . getId ( ) ) ; if ( ! sphs . isEmpty ( ) ) { StoragePoolHostVO localStoragePoolHost = sphs . get ( 0 ) ; return _templateHostDao . findLocalSecondaryStorageByHostTemplate ( localStoragePoolHost . getHostId ( ) , templateId ) ; } else { return null ; } }", "final InetSocketAddress proxyAddress = ( InetSocketAddress ) proxy . address ( ) ; LOGGER . log ( Level . FINE , \"Jenkins proxy: {0}\" , proxy . address ( ) ) ;", "import org . apache . hadoop . hdds . scm . node . NodeManager ; import org . apache . hadoop . hdds . scm . node . NodeStatus ; import org . apache . hadoop . hdds . scm . node . states . NodeNotFoundException ; import org . apache . hadoop . hdds . scm . safemode . SCMSafeModeManager . SafeModeStatus ; import org . apache . hadoop . hdds . server . events . EventHandler ;", "protected void saveGraphKey ( RawPosNegExample rawX , GraphWriter writer ) { try { this . graphKeyWriter . write ( serializeGraphKey ( rawX , writer ) ) ; } catch ( IOException e ) { throw new IllegalStateException ( \"Couldn't write to graph key file \" + this . graphKeyFile . getName ( ) , e ) ; } }", "import com . fasterxml . jackson . dataformat . cbor . * ; import com . fasterxml . jackson . dataformat . cbor . testutil . ThrottledInputStream ;", "private static File replayImportDir ; private static File skinRootDir ;", "private int maxWebSocketFrameSize = 65536 ; private boolean textFrameAsBinary = false ; public String subProtocols = \"\" ; private boolean noInternalAlloc = false ; private boolean binaryWrite = false ; public boolean epoll = false ;", "@ Override protected void onDraw ( Canvas c ) { fpsCounter . inc ( ) ; isBusy = true ; if ( showMode == PlotMode . SPECTRUM ) { spectrumPlot . drawSpectrumPlot ( c , savedDBSpectrum ) ; } else { spectrogramPlot . drawSpectrogramPlot ( c ) ; } isBusy = false ; }", "else if ( settingsPanel != null ) { statisticsUI . setup ( currentStatistics ) ; final DialogDescriptor dd = new DialogDescriptor ( settingsPanel , NbBundle . getMessage ( StatisticsTopComponent . class , \"StatisticsFrontEnd.settingsPanel.title\" , builder . getName ( ) ) ) ; if ( settingsPanel instanceof ValidationPanel ) { ValidationPanel vp = ( ValidationPanel ) settingsPanel ; vp . addChangeListener ( new ChangeListener ( ) { @ Override public void stateChanged ( ChangeEvent e ) { dd . setValid ( ! ( ( ValidationPanel ) e . getSource ( ) ) . isProblem ( ) ) ; } } ) ; } if ( DialogDisplayer . getDefault ( ) . notify ( dd ) . equals ( NotifyDescriptor . OK_OPTION ) ) { statisticsUI . unsetup ( ) ; } }", "{ this . entityTracker = new CubicEntityTracker ( this ) ; CubicChunks . addConfigChangeListener ( this ) ; } @ Override public void onConfigUpdate ( CubicChunks . Config config ) { if ( config . useFastEntitySpawner ( ) && this . entitySpawner instanceof CubeWorldEntitySpawner ) this . entitySpawner = new FastCubeWorldEntitySpawner ( ) ; else if ( ! config . useFastEntitySpawner ( ) && this . entitySpawner instanceof FastCubeWorldEntitySpawner ) this . entitySpawner = new CubeWorldEntitySpawner ( ) ; }", "public SerializableStateObservation ( StateObservation s , Game g ) public SerializableStateObservation ( StateObservation s , Boolean both ) { try { if ( ! both ) { buildGameData ( s ) ; imageArray = imageToByteArray ( ) ; } else { buildGameData ( s ) ; imageArray = imageToByteArray ( ) ; buildDataVariables ( s ) ; buildDataArraylists ( s ) ; } } catch ( IOException e ) { System . out . println ( \"Transforming image to byte array failed. Original error: \" + e ) ; } } public SerializableStateObservation ( StateObservation s )", ". waitForCodeLocations ( notificationTaskRange , projectNameVersion , codeLocationWaitController . getCodeLocationNames ( ) , codeLocationWaitController . getExpectedNotificationCount ( ) , timeoutInSeconds ) ;", "RecordReaderImplementation < Group > recordReader = getRecordReader ( columnIO2 , schema2 , memPageStore ) ;", "", "", "import android . app . Notification ;", "import org . sonatype . nexus . test . utils . ResponseMatchers ;", "import net . minecraft . util . SoundCategory ;", "static final int LOGOUT_BUTTON_OVERLAY = 31 ;", "waitingLoading ( ) ; WebDriverWait wait = new WebDriverWait ( this . driver , 10 ) ; Select select = new Select ( wait . until ( ExpectedConditions . elementToBeClickable ( filterRepo ) ) ) ; select . selectByVisibleText ( repoName ) ; waitingLoading ( ) ;", "final Iterable < PluginProperty > pluginPropertiesFromBody = extractPluginProperties ( json . getProperties ( ) ) ; final Iterable < PluginProperty > pluginPropertiesFromQuery = extractPluginProperties ( pluginPropertiesString ) ; final Iterable < PluginProperty > pluginProperties = Iterables . concat ( pluginPropertiesFromQuery , pluginPropertiesFromBody ) ; final CallContext callContext = context . createCallContextNoAccountId ( createdBy , reason , comment , request ) ;", "public void baseId ( Player player , BlockStateHolder block ) throws WorldEditException { CFISettings settings = assertSettings ( player ) ; settings . getGenerator ( ) . setBedrock ( block . toImmutableState ( ) ) ; player . print ( TextComponent . of ( \"Set base id!\" ) ) ; }", "public MessageProducer messageProducer ( EventuateSchema eventuateSchema , SqlDialectSelector sqlDialectSelector ) { return new MessageProducerJdbcImpl ( eventuateSchema , sqlDialectSelector . getDialect ( ) . getCurrentTimeInMillisecondsExpression ( ) , messageInterceptors ) ; }", "* Put an dictionary of complex type with values { \"0\" : { \"integer\" : 1 , \"string\" : \"2\" } , \"1\" : { \"integer\" : 3 , \"string\" : \"4\" } , \"2\" : { \"integer\" : 5 , \"string\" : \"6\" } }", "selenium . click ( \"//td[6]/div/span[12]/a\" ) ; selenium . waitForCondition ( \"selenium.isElementPresent(\" + \"\\\"class=wicket_modal\\\");\" , \"30000\" ) ; selenium . waitForFrameToLoad ( \"class=wicket_modal\" , \"30000\" ) ; selenium . selectFrame ( \"index=0\" ) ;", "import static org . assertj . core . api . Assertions . assertThatExceptionOfType ; import static org . assertj . core . api . Assertions . assertThat ;", "retry : while ( true ) { Instance i = conn . getInstance ( ) ; ZooReaderWriter zk = new ZooReaderWriter ( i . getZooKeepers ( ) , i . getZooKeepersSessionTimeOut ( ) , \"\" ) ; WalStateManager wals = new WalStateManager ( i , zk ) ; try { outer : for ( Entry < Path , WalState > entry : wals . getAllState ( ) . entrySet ( ) ) { for ( Path path : paths ) { if ( entry . getKey ( ) . toString ( ) . startsWith ( path . toString ( ) ) ) { continue outer ; }", "import static org . jboss . seam . annotations . Install . FRAMEWORK ;", "* Get date dictionary value { \"0\" : \"2012-01-01\" , \"1\" : null , \"2\" : \"1776-07-04\" }", "iconToolBarScrollPane . putClientProperty ( ViewController . VISIBLE_PROPERTY_KEY , \"leftToolbarVisible\" ) ;", "", "", "import us . ihmc . yoVariables . registry . YoVariableRegistry ; import us . ihmc . yoVariables . variable . YoDouble ;", "import com . conveyal . r5 . transit . TransitLayer ;", "@ Override public void onDetach ( ) { setOnRefreshListener ( null ) ; mContainerActivity = null ; super . onDetach ( ) ; }", "import stroom . statistics . impl . InternalStatisticsConfig ; import stroom . statistics . impl . hbase . internal . HBaseStatisticsConfig ; import stroom . statistics . impl . sql . SQLStatisticsConfig ; import stroom . storedquery . impl . db . StoredQueryHistoryConfig ;", "{ String vmName = vmSpec . getName ( ) ; LibvirtVMDef vm = null ; State state = State . Stopped ; Connect conn = null ; try { conn = LibvirtConnection . getConnection ( ) ; synchronized ( _vms ) { _vms . put ( vmName , State . Starting ) ; } vm = createVMFromSpec ( vmSpec ) ; createVbd ( conn , vmSpec , vmName , vm ) ; createVifs ( vmSpec , vm ) ; s_logger . debug ( \"starting \" + vmName + \": \" + vm . toString ( ) ) ; startDomain ( conn , vmName , vm . toString ( ) ) ; Script . runSimpleBashScript ( \"virsh schedinfo \" + vmName + \" --set cpu_shares=\" + vmSpec . getCpus ( ) * vmSpec . getSpeed ( ) ) ; NicTO [ ] nics = vmSpec . getNics ( ) ; for ( NicTO nic : nics ) { if ( nic . getIsolationUri ( ) != null && nic . getIsolationUri ( ) . getScheme ( ) . equalsIgnoreCase ( IsolationType . Ec2 . toString ( ) ) ) { if ( vmSpec . getType ( ) != VirtualMachine . Type . User ) { default_network_rules_for_systemvm ( conn , vmName ) ; break ; } else { default_network_rules ( conn , vmName , nic , vmSpec . getId ( ) ) ; } } } state = State . Running ; return new StartAnswer ( cmd ) ; } catch ( Exception e ) { s_logger . warn ( \"Exception \" , e ) ; if ( conn != null ) { handleVmStartFailure ( conn , vmName , vm ) ; break ; } else { default_network_rules ( conn , vmName , nic , vmSpec . getId ( ) ) ; } } } state = State . Running ; return", "ExtensionResultStatusType getCategorySearchFacets ( Category category , List < SearchFacet > searchFacets ) ; ExtensionResultStatusType getSearchableIndexFields ( List < IndexField > fields ) ; ExtensionResultStatusType batchFetchCatalogData ( List < Product > products ) ;", "bind ( SaharaService . class , SaharaServiceImpl . class ) ; bind ( ClusterService . class , ClusterServiceImpl . class ) ; bind ( NodeGroupTemplateService . class , NodeGroupTemplateServiceImpl . class ) ; bind ( MemberService . class , MemberServiceImpl . class ) ; bind ( VipService . class , VipServiceImpl . class ) ; bind ( HealthMonitorService . class , HealthMonitorServiceImpl . class ) ; bind ( LbPoolService . class , LbPoolServiceImpl . class ) ; bind ( LoadBalancerService . class , LoadBalancerServiceImpl . class ) ; bind ( BlockVolumeTransferService . class , BlockVolumeTransferServiceImpl . class ) ;", "JdbcLoader loader = new JdbcLoader ( jdbcConnector , getArgs ( ) , monitor ) ; PgDatabase database = loader . getDbFromJdbc ( ) ; errors = loader . getErrors ( ) ; return database ;", "TypeResolutionContext tc , MixInResolver mixins , TypeFactory typeFactory , JavaType type , List < JavaType > superTypes , Class < ? > primaryMixIn , boolean collectAnnotations )", "import net . i2p . crypto . KeyGenerator ; import net . i2p . crypto . SigType ; import net . i2p . util . RandomSource ;", "import org . schabi . newpipe . extractor . AudioStream ;", "@ Override public void run ( final FCPConnectionHandler handler , Node node )", "static synchronized boolean isUsingVersion7 ( ) { if ( ! hasCheckedVersion . get ( ) ) { final ProcessBuilder pb = new ProcessBuilder ( ) ; final List < String > command = new ArrayList < > ( ) ; command . add ( getPath ( \"magick\" ) ) ; pb . command ( command ) ; try { isUsingVersion7 = false ; final String commandString = String . join ( \" \" , pb . command ( ) ) ; LOGGER . debug ( \"isUsingVersion7(): trying to invoke {}\" , commandString ) ; final Process process = pb . start ( ) ; process . waitFor ( ) ; LOGGER . info ( \"isUsingVersion7(): found magick command; \" + \"assuming ImageMagick 7+\" ) ; isUsingVersion7 = true ; } catch ( Exception e ) { LOGGER . info ( \"isUsingVersion7(): couldn't find magick \" + \"command; assuming ImageMagick <7\" ) ; LOGGER . warn ( \"ImageMagick <7 support is DEPRECATED. \" + \"Please upgrade to version 7.\" ) ; isUsingVersion7 = false ; } } }", "public static SystemInfo getInfo ( ) { return getInfo ( null ) ; } public static SystemInfo getInfo ( SystemInfo defaultInfo ) { SystemInfo actualInfo = defaultInfo ; if ( actualInfo == null && ApplicationContextHolder . get ( ) != null ) { actualInfo = ApplicationContextHolder . get ( ) . getBean ( SystemInfo . class ) ; } return actualInfo ; } public String getScmRevision ( ) { return scmRevision ; } public void setScmRevision ( String scmRevision ) { this . scmRevision = scmRevision ; } public String getScmUrl ( ) { return scmUrl ; } public void setScmUrl ( String scmUrl ) { this . scmUrl = scmUrl ; }", "import com . cloud . capacity . Capacity ;", "int dup ( int fd ) ; int dup2 ( int oldFd , int newFd ) ; int getdtablesize ( ) ;", "import org . apache . hadoop . hive . ql . lockmgr . HiveTxnManager ; import org . apache . hadoop . hive . ql . lockmgr . LockException ; import org . apache . hadoop . hive . ql . metadata . HiveStorageHandler ;", "", "setState ( 533 ) ;", "import techreborn . util . CraftingHelper ; import techreborn . util . LogHelper ; import techreborn . util . OreUtil ; import techreborn . util . RecipeRemover ;", "import io . mycat . calcite . rewriter . Distribution ; import io . mycat . gsi . GSIService ;", "Instance instance = newStubInstance ( \"findMissingBlobs-test\" ) ;", "void setProperty ( int property , Object value ) ;", "", "import org . n52 . sos . ogc . om . AbstractPhenomenon ; import org . n52 . sos . ogc . om . OmCompositePhenomenon ;", "", "private final SnapshotCompletionMonitor m_snapMonitor ; boolean m_replayComplete = false ; private final DurabilityListener m_durabilityListener ;", "@ Autowired private CommunityService cs ; @ Autowired private BitstreamService bitstreamService ; public CommunityRestRepository ( CommunityService dsoService ) { super ( dsoService , new DSpaceObjectPatch < CommunityRest > ( ) { } ) ; }", "_store . create ( new ConfiguredObjectRecordImpl ( id , \"Queue\" , Collections . < String , Object > emptyMap ( ) ) ) ; _store . closeConfigurationStore ( ) ; _store . openConfigurationStore ( _virtualHostName , _configurationStoreSettings ) ;", "setState ( 696 ) ;", "@ Inject RileyLinkUtil rileyLinkUtil ; @ Inject MedtronicPumpPlugin medtronicPumpPlugin ; @ Inject BlePreCheck blePrecheck ;", "import com . mikepenz . iconics . typeface . IIcon ; import com . mikepenz . iconics . utils . Utils ;", "referenceCoMGenerator . setNumberOfRegisteredSteps ( referenceCoPGenerator . getNumberOfFootstepsRegistered ( ) ) ; referenceCoMGenerator . initializeForTransfer ( ZERO_TIME , referenceCMPGenerator . getTransferCMPTrajectories ( ) , referenceCMPGenerator . getSwingCMPTrajectories ( ) , referenceICPGenerator . getICPPositionDesiredInitialList ( ) , referenceICPGenerator . getICPPositionDesiredFinalList ( ) ) ; referenceICPGenerator . getICPPhaseEntryCornerPoints ( icpPhaseEntryCornerPoints ) ; referenceICPGenerator . getICPPhaseExitCornerPoints ( icpPhaseExitCornerPoints ) ;", "setLogLevel ( DataBridgeWebClient . class , LogLevel . WARN ) ; setLogLevel ( DownloaderWebClient . class , LogLevel . WARN ) ;", "} , progressTask , exporter , config ) ;", "CarpetScriptHost host = getHost ( context ) ; BlockBox area = new BlockBox ( a , b ) ;", "BookmarkablePageLink < Page > usersLink = new BookmarkablePageLink < Page > ( \"users\" , Users . class ) ; MetaDataRoleAuthorizationStrategy . authorize ( usersLink , WebPage . ENABLE , xmlRolesReader . getEntitlement ( \"Users\" , \"list\" ) ) ;", "import org . n52 . sos . ds . hibernate . entities . observation . AbstractTemporalReferencedObservation ; import org . n52 . sos . ds . hibernate . entities . observation . BaseObservation ; import org . n52 . sos . ds . hibernate . entities . observation . Observation ; import org . n52 . sos . ds . hibernate . entities . observation . TemporalReferencedObservation ; import org . n52 . sos . ds . hibernate . entities . observation . ValuedObservation ; import org . n52 . sos . ds . hibernate . entities . observation . legacy . AbstractValuedLegacyObservation ; import org . n52 . sos . ds . hibernate . util . observation . ObservationValueCreator ; import org . n52 . sos . ogc . gml . CodeWithAuthority ; import org . n52 . sos . ogc . gml . ReferenceType ;", "import mekhq . campaign . personnel . familyTree . Genealogy ; import mekhq . campaign . personnel . enums . * ;", "List < Encounter > encsCreated = new ArrayList < Encounter > ( ) ;", "", "@ Override public boolean contains ( final K key , final int keyHash , final int shift ) { }", "{ \"modify_sequence_maxvalue_set\" , false } , { \"modify_sequence_maxvalue_unset\" , false } ,", "{ ServiceClient serviceClient = new ServiceClient ( restBuilder . build ( ) ) { } ; Response response = serviceClient . restClient ( ) . httpClient ( ) . newCall ( new Request . Builder ( ) . url ( \"http://localhost\" ) . build ( ) ) . execute ( ) ; Assert . assertEquals ( 200 , response . code ( ) ) ; } @ Test public void tokenCredentialsTest ( ) throws Exception { OkHttpClient . Builder clientBuilder = new OkHttpClient . Builder ( ) ; Retrofit . Builder retrofitBuilder = new Retrofit . Builder ( ) ; TokenCredentials credentials = new TokenCredentials ( null , \"this_is_a_token\" ) ; RestClient . Builder restBuilder = new RestClient . Builder ( \"http://localhost\" , clientBuilder , retrofitBuilder ) . withCredentials ( credentials ) . withInterceptor ( new Interceptor ( ) { @ Override public Response intercept ( Chain chain ) throws IOException { String header = chain . request ( ) . header ( \"Authorization\" ) ; Assert . assertEquals ( \"Bearer this_is_a_token\" , header ) ; return new Response . Builder ( ) . request ( chain . request ( ) ) . code ( 200 ) . protocol ( Protocol . HTTP_1_1 ) . build ( ) ; } } ) ; ServiceClient serviceClient = new ServiceClient ( restBuilder . build ( ) ) { } ; Response response = serviceClient . restClient ( ) . httpClient ( ) . newCall ( new Request . Builder ( ) . url ( \"http://localhost\" ) . build ( ) ) . execute ( ) ; Assert . assertEquals ( 200 ) . request ( chain . request ( ) ) . code ( 200 ) . protocol ( Protocol . HTTP_1_1 ) . build ( ) ; } } ) ; ServiceClient serviceClient = new ServiceClient ( restBuilder . build ( ) ) { } ; Response response = serviceClient", "if ( ! variant . equals ( \"inventory\" ) ) parentState = TRSRTransformation . identity ( ) ; IBakedModel newModel = model . bake ( new OBJModel . OBJState ( visibleGroups , false , parentState ) , DefaultVertexFormats . ITEM , spriteFunction ) ; if ( clazz != null ) { try { newModel = clazz . getConstructor ( IBakedModel . class ) . newInstance ( newModel ) ; } catch ( Exception e ) { GCLog . severe ( \"ItemModel constructor problem for \" + modelResourceLocation ) ; e . printStackTrace ( ) ; } } event . getModelRegistry ( ) . putObject ( modelResourceLocation , newModel ) ;", "import com . wikia . webdriver . PageObjectsFactory . ComponentObject . Vet . VetAddVideoComponentObject ; import com . wikia . webdriver . Common . Properties . Properties ;", "TimePageLink pageLink = createTimePageLink ( pageSize , page , textSearch , sortProperty , sortOrder , startTime , endTime ) ; List < ActionType > actionTypes = parseActionTypesStr ( actionTypesStr ) ; return checkNotNull ( auditLogService . findAuditLogsByTenantIdAndUserId ( tenantId , new UserId ( UUID . fromString ( strUserId ) ) , actionTypes , pageLink ) ) ;", "public Builder withUpdate200Status ( ) { updateStatusCode = HttpStatus . SC_OK ; return this ; } public Builder withUpdate204Status ( ) { updateStatusCode = HttpStatus . SC_NO_CONTENT ; return this ; } public Builder withDefaultMaxPageSize ( int maxPageSize ) { defaultMaxPageSize = maxPageSize ; return this ; } public Builder withDefaultPageSize ( int pageSize ) { defaultPageSize = pageSize ; return this ; }", "@ Override public Type getType ( ) { return Type . INTERNAL ; } private Argument transformListArgument ( Object rawArgument , SensitivityLevel sensitivityLevel ) { }", "return ItemFactory . getInstance ( ) . createDateItem ( this . getStringValue ( ) ) ; case TimeItem : return ItemFactory . getInstance ( ) . createDateTimeItem ( DateTimeItem . getDateTimeFromString ( this . getStringValue ( ) , AtomicTypes . TimeItem ) ) ;", "", "* Get max datetime value with positive num offset 9999 - 12 - 31 t23 : 59 : 59.9999999 + 14 : 00", "Array inhrelsarray = res . getArray ( \"inhrelnames\" ) ; if ( inhrelsarray != null ) { String [ ] inhrelnames = ( String [ ] ) inhrelsarray . getArray ( ) ; String [ ] inhnspnames = ( String [ ] ) res . getArray ( \"inhnspnames\" ) . getArray ( ) ; for ( int i = 0 ; i < inhrelnames . length ; ++ i ) { t . addInherits ( schemaName . equals ( inhnspnames [ i ] ) ? null : inhnspnames [ i ] , inhrelnames [ i ] ) ; t . addDep ( new GenericColumn ( inhnspnames [ i ] , inhrelnames [ i ] , DbObjType . TABLE ) ) ; } }", "this . entityVersionCleanupFactory = entityVersionCleanupFactory ; this . mvccLogEntrySerializationStrategy = mvccLogEntrySerializationStrategy ;", "{ lockService . createLockStore ( partitionId , new DefaultObjectNamespace ( MapService . SERVICE_NAME , name ) ) ; this . sizeEstimator = SizeEstimators . createMapSizeEstimator ( ) ; if ( nodeEngine . getThisAddress ( ) . equals ( nodeEngine . getPartitionService ( ) . getPartitionOwner ( partitionId ) ) ) { if ( mapContainer . getStore ( ) != null && ! loaded . get ( ) ) { Map < Data , Object > loadedKeys = mapContainer . getInitialKeys ( ) ; if ( loadedKeys != null && ! loadedKeys . isEmpty ( ) ) { Map < Data , Object > partitionKeys = new HashMap < Data , Object > ( ) ; Iterator < Data > iterator = loadedKeys . keySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Data data = iterator . next ( ) ; if ( partitionId == nodeEngine . getPartitionService ( ) . getPartitionId ( data ) ) { partitionKeys . put ( data , loadedKeys . get ( data ) ) ; iterator . remove ( ) ; } } try { nodeEngine . getExecutionService ( ) . submit ( \"hz:map-load\" , new MapLoadAllTask ( partitionKeys ) ) ; } catch ( Throwable t ) { ExceptionUtil . rethrow ( t ) ; } } else { loaded . set ( true ) ; } } } else { loaded . set ( true ) ; } } } else { loaded . set ( true ) ; } } public boolean isLoaded ( ) { return loaded . get ( ) ; } public void setLoaded ( boolean isLoaded ) { loaded . set ( isLoaded ) ; } private void checkIfLoaded ( ) { if ( mapContainer . getStore ( ) != null && ! loaded . get ( ) ) { ExceptionUtil . rethrow ( new RetryableHazelcastException ( \"Map is not ready!!!\" ) ) ; } } else { loaded . set ( isLoaded ) ; } private void checkIfLoaded", "assertEquals ( View . GONE , button . findViewById ( R . id . bt_coinbase_button ) . getVisibility ( ) ) ; assertEquals ( View . GONE , button . findViewById ( R . id . bt_android_pay_button ) . getVisibility ( ) ) ;", "* Long running post request , service returns a 202 to the initial request Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "Backing < EthAccountContext > genericBacking = new InMemoryAccountContextsBacking < > ( ) ; EthBlockchainService ethBlockchainService = new EthBlockchainService ( configuration . getBlockBookEndpoints ( ) ) ; configuration . addEthServerListChangedListener ( ethBlockchainService ) ;", "Cursor cursor = contentResolver . query ( downloads . getAllDownloadsContentUri ( ) , new String [ ] { Downloads . Impl . _DATA } , null , null , null ) ;", "defineGlobal ( context , module , \"__table_base\" , I32_TYPE , GlobalModifier . CONSTANT , 0 ) ; defineGlobal ( context , module , \"DYNAMICTOP_PTR\" , I32_TYPE , GlobalModifier . CONSTANT , 0 ) ; defineFunction ( module , \"___lock\" , types ( I32_TYPE ) , types ( ) , new Lock ( language , null ) ) ; defineFunction ( module , \"___unlock\" , types ( I32_TYPE ) , types ( ) , new Unlock ( language , null ) ) ; defineFunction ( module , \"___setErrNo\" , types ( I32_TYPE ) , types ( ) , new SetErrNo ( language , null ) ) ;", "prop . setComment ( \"If this is enabled, GC oil will be added to existing Overworld maps where possible.\" ) ; prop . setLanguageKey ( \"gc.configgui.enable_retrogen_oil\" ) ;", "import org . restlet . representation . EmptyRepresentation ;", "ImgPlus < FloatType > img = imageOpener . openImg ( arg , acf ) ; reportInformation ( img . getImg ( ) ) ;", "if ( statements . isEmpty ( ) ) { return new SqlStatement [ 0 ] ; } InsertSetStatement statementSet = this . createStatementSet ( getCatalogName ( ) , getSchemaName ( ) , getTableName ( ) ) ;", "if ( ByteUtils . isBitEnabled ( rx16Packet . getReceiveOptions ( ) , 1 ) || ByteUtils . isBitEnabled ( rx16Packet . getReceiveOptions ( ) , 2 ) ) isBroadcastData = true ; notifySerialDataReceived ( address , data , isBroadcastData ) ; break ; case IO_DATA_SAMPLE_RX_INDICATOR : IODataSampleRxIndicatorPacket ioSamplePacket = ( IODataSampleRxIndicatorPacket ) apiPacket ; remoteXBeeDevice = new RemoteXBeeDevice ( xbeeDevice , ioSamplePacket . get64bitSourceAddress ( ) ) ; notifyIOSampleReceived ( remoteXBeeDevice , ioSamplePacket . getIOSample ( ) ) ; break ; case RX_IO_64 : RX64IOPacket rx64IOPacket = ( RX64IOPacket ) apiPacket ; remoteXBeeDevice = new RemoteXBeeDevice ( xbeeDevice , rx64IOPacket . get64bitSourceAddress ( ) ) ; notifyIOSampleReceived ( remoteXBeeDevice , rx64IOPacket . getIOSample ( ) ) ; break ; case RX_IO_16 : RX16IOPacket rx16IOPacket = ( RX16IOPacket ) apiPacket ; remoteXBeeDevice = new RemoteRaw802Device ( xbeeDevice , rx16IOPacket . get16bitSourceAddress ( ) ) ; notifyIOSampleReceived ( remoteXBeeDevice , rx16IOPacket . getIOSample ( ) ) ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "@ UML ( identifier = \"onlineResource\" , obligation = OPTIONAL , specification = ISO_19115 )", "setState ( 583 ) ;", "import lombok . Data ; import lombok . EqualsAndHashCode ;", "import java . io . InputStream ; import ch . bfh . anuto . game . data . Level ; import ch . bfh . anuto . game . objects . impl . BasicTower ; import ch . bfh . anuto . game . objects . impl . RocketTower ;", "@ Override public Container < ? > getSteps ( ) { return null ; } @ Override public Collection < ? > getActions ( ) { List < BlueActionProxy > actionProxies = new ArrayList < > ( ) ; for ( Action action : run . getAllActions ( ) ) { if ( ! action . getClass ( ) . isAnnotationPresent ( ExportedBean . class ) ) { continue ; } actionProxies . add ( new ActionProxiesImpl ( action , this ) ) ; } return actionProxies ; } protected static BlueRun getBlueRun ( Run r , Link parent ) { }", "@ Override public void sendMessage ( final String message ) { if ( ! StringMan . isEqual ( this . getMeta ( \"lastMessage\" ) , message ) || (", "private final Namespace myOwnNamespace ; private final Namespace myInstanceNamespace ; private final Map < ClassField , String > myFields = new HashMap < > ( ) ;", "final TextField noOfGroupsField = getTextfield ( \"prompt.number.of.groups\" ) ; noOfGroupsField . setId ( SPUIComponentIdProvider . ROLLOUT_NO_OF_GROUPS_ID ) ;", "MockHttpServletRequest request = getMockRequest ( ) ;", "", "final Map < Path , List < KeyExtent > > completeFailures = Collections . synchronizedSortedMap ( new TreeMap < > ( ) ) ;", "import com . google . common . util . concurrent . FutureCallback ; import com . google . common . util . concurrent . Futures ; import build . bazel . remote . execution . v2 . Digest ;", "public FacilityMailingListReportPage navigateViewFacilityMailingListReport ( ) throws IOException { SeleneseTestNgHelper . assertTrue ( ReportsMenuItem . isDisplayed ( ) ) ; testWebDriver . waitForElementToAppear ( ReportsMenuItem ) ; testWebDriver . keyPress ( ReportsMenuItem ) ; testWebDriver . waitForElementToAppear ( FacilityMailingListReportMenu ) ; testWebDriver . keyPress ( FacilityMailingListReportMenu ) ; testWebDriver . waitForElementToAppear ( facilityListingReportPageHeader ) ; return new FacilityMailingListReportPage ( testWebDriver ) ; } public FacilityListingReportPage navigateViewFacilityListingReport ( ) throws IOException { SeleneseTestNgHelper . assertTrue ( ReportsMenuItem . isDisplayed ( ) ) ; testWebDriver . waitForElementToAppear ( ReportsMenuItem ) ; testWebDriver . keyPress ( ReportsMenuItem ) ; testWebDriver . waitForElementToAppear ( FacilityListingReportMenu ) ; testWebDriver . keyPress ( FacilityListingReportMenu ) ; return new FacilityListingReportPage ( testWebDriver ) ; } public SummaryReportPage navigateViewSummaryReport ( ) throws IOException { SeleneseTestNgHelper . assertTrue ( ReportsMenuItem . isDisplayed ( ) ) ; testWebDriver . waitForElementToAppear ( ReportsMenuItem ) ; testWebDriver . keyPress ( ReportsMenuItem ) ; testWebDriver . waitForElementToAppear ( SummaryReportMenu ) ; testWebDriver . keyPress ( SummaryReportMenu ) ; testWebDriver . keyPress ( SummaryReportMenu ) ; testWebDriver . keyPress ( SummaryReportPage ) ; } public AverageConsumptionReportPage navigateViewAverageConsumptionReport ( ) throws IOException { SeleneseTestNgHelper . assertTrue ( ReportsMenuItem . isDisplayed ( Re", "{ defaultCompLang = findGLFromLabel ( dcl ) ; } Iterator entries = jarFiles . entrySet ( ) . iterator ( ) ; String z = \"\" ; String cma = \"\" ; boolean first = true ; while ( entries . hasNext ( ) ) { @ SuppressWarnings ( \"unchecked\" ) Entry < String , String > thisEntry = ( Entry < String , String > ) entries . next ( ) ; if ( ! first ) { z += cma + thisEntry . getKey ( ) + \":\" + thisEntry . getValue ( ) ; cma = \";\" ; } first = false ; }", "return new BlockStateContainer ( this , COLOR , getVariantProperty ( ) , POSITION ) ;", "import com . synopsys . integration . detectable . detectable . Requirements ; import com . synopsys . integration . detectable . ExecutableTarget ;", "", "public static final String RETRY_WAIT_MS = \"s3uploader.retry.wait.ms\" ; public static final String RETRY_COUNT = \"s3uploader.retry.count\" ; public static final String MAX_SINGLE_UPLOAD_BYTES = \"s3uploader.max.single.upload.size\" ; public static final String UPLOAD_PART_SIZE = \"s3uploader.upload.part.size\" ;", "import edu . ucsb . eucalyptus . cloud . VmAllocationInfo ; import edu . ucsb . eucalyptus . msgs . CreatePlacementGroupResponseType ; import edu . ucsb . eucalyptus . msgs . CreatePlacementGroupType ; import edu . ucsb . eucalyptus . msgs . CreateTagsResponseType ; import edu . ucsb . eucalyptus . msgs . DeletePlacementGroupResponseType ; import edu . ucsb . eucalyptus . msgs . DeletePlacementGroupType ; import edu . ucsb . eucalyptus . msgs . DeleteTagsResponseType ; import edu . ucsb . eucalyptus . msgs . DeleteTagsType ; import edu . ucsb . eucalyptus . msgs . DeleteTagsType ;", "private File defaultJavaSource ; private File generatedTsFolder ; private MavenProject project ;", "getMenu ( \"Image>Color\" , true ) ; getMenu ( \"Image>Stacks\" , true ) ; Menu hyperstacksMenu = getMenu ( \"Image>Hyperstacks\" , true ) ;", "if ( r . node instanceof IFilteringRouter ) { used . set ( r . node . getSimpleID ( ) , true ) ; }", "createFileNameWithCurrentDate ( \"sormas_case_management_\" , \".zip\" ) ) ;", "* Long running delete request , service returns a 204 to the initial request , indicating success .", "setState ( 664 ) ;", "final AbstractFeature feature = ( ( Store ) owner ) . types . trackSegment . newInstance ( ) ; feature . setPropertyValue ( AttributeConvention . IDENTIFIER , index ) ; List < AbstractFeature > wayPoints = null ;", "if ( primary ) { primaryTerm ++ ; } if ( existingAllocationId == null ) { allocationId = AllocationId . newInitializing ( ) ; } else { allocationId = AllocationId . newInitializing ( existingAllocationId ) ; }", "import lombok . extern . java . Log ; import java . time . format . DateTimeFormatter ; import java . time . format . FormatStyle ; import java . util . Comparator ;", "Assert . fail ( ex . getMessage ( ) ) ;", "trace ( trace , \" currentMark: 0x%016lx\\n\" , currentMark ) ; final Word alignedMask = Word . unsigned ( wordSize ( ) - 1 ) ; final Word stackPointer = registerAsWord ( stackPointerRegister ) . add ( config ( INJECTED_VMCONFIG ) . stackBias ) ; if ( probability ( FAST_PATH_PROBABILITY , currentMark . subtract ( stackPointer ) . and ( alignedMask . subtract ( pageSize ( ) ) ) . equal ( 0 ) ) ) { lock . writeWord ( lockDisplacedMarkOffset ( INJECTED_VMCONFIG ) , Word . zero ( ) , DISPLACED_MARK_WORD_LOCATION ) ; traceObject ( trace , \"+lock{cas:recursive}\" , object , true , options ) ; lockCasRecursive . inc ( ) ; }", "@ NonNull public File getDexOutputFolder ( IncrementalBuildType processType ) { return processType == IncrementalBuildType . FULL ? getDexOutputFolder ( ) : getInitialIncrementalDexOutputFolder ( ) ; } @ NonNull Set < File > getJniFolders ( ) ;", "import java . util . ArrayList ; import java . util . LinkedList ; import java . util . List ; import java . util . ListIterator ;", "retVal = engine . processHeader ( originFile . getAbsolutePath ( ) , consolidate , null ) ;", "ClusterTierManagerClientEntityFactory factory = new ClusterTierManagerClientEntityFactory ( CONNECTION , Runnable :: run ) ; assertFalse ( factory . abandonLeadership ( \"testAbandonLeadershipWhenNotOwning\" , true ) ) ;", "StoragePoolSearch = _vmInstanceDao . createSearchBuilder ( ) ; SearchBuilder < VolumeVO > volumeSearch = _volumeDao . createSearchBuilder ( ) ; volumeSearch . and ( \"volumeType\" , volumeSearch . entity ( ) . getVolumeType ( ) , SearchCriteria . Op . EQ ) ; volumeSearch . and ( \"poolId\" , volumeSearch . entity ( ) . getPoolId ( ) , SearchCriteria . Op . EQ ) ; StoragePoolSearch . join ( \"vmVolume\" , volumeSearch , volumeSearch . entity ( ) . getInstanceId ( ) , StoragePoolSearch . entity ( ) . getId ( ) , JoinBuilder . JoinType . INNER ) ; StoragePoolSearch . done ( ) ; LocalStorageSearch = _storagePoolDao . createSearchBuilder ( ) ; SearchBuilder < StoragePoolHostVO > storageHostSearch = _storagePoolHostDao . createSearchBuilder ( ) ; storageHostSearch . and ( \"hostId\" , storageHostSearch . entity ( ) . getHostId ( ) , SearchCriteria . Op . EQ ) ; LocalStorageSearch . and ( \"poolHost\" , storageHostSearch , storageHostSearch . entity ( ) . getPoolId ( ) , LocalStorageSearch . entity ( ) . getId ( ) , JoinBuilder . JoinType . INNER ) ; LocalStorageSearch . and ( \"type\" , LocalStorageSearch . entity ( ) . getPoolType ( ) , SearchCriteria . Op . IN ) ; LocalStorageSearch . done ( ) ;", "generateConstructor ( typeNode , level , findRequiredFields ( typeNode ) , false , staticName , skipIfConstructorExists , onConstructor , sourceNode , null , false ) ;", "private IPropertyControlCreator createPathPropertyCreator ( final String name , final boolean isDir , final boolean showHidden , final String [ ] suffixes ) { }", "import org . terasology . entitySystem . entity . EntityManager ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "", "@ Bean public ApiMetadataService apiMetadataService ( ) { return mock ( ApiMetadataService . class ) ; } @ Bean public VirtualHostService virtualHostService ( ) { return mock ( VirtualHostService . class ) ; } @ Bean public ViewService viewService ( ) { return mock ( ViewService . class ) ; } @ Bean public PolicyOperationVisitorManager policyOperationVisitorManager ( ) { return mock ( PolicyOperationVisitorManager . class ) ; }", "", "import net . minecraft . item . Item ; import net . minecraft . item . ItemBlock ;", "@ Override", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "prop = getConfig ( Constants . CONFIG_CATEGORY_DIMENSIONS , \"Set new Space Stations to be static loaded\" , false ) ; prop . setComment ( \"Set this to true to have an automatic /gckeeploaded for any new Space Station created.\" ) ;", "import org . mozilla . mozstumbler . service . Prefs ; import org . mozilla . mozstumbler . service . stumblerthread . motiondetection . LocationChangeSensor ; import org . mozilla . mozstumbler . service . stumblerthread . motiondetection . MotionSensor ;", "import com . apollocurrency . aplwallet . apl . core . account . AccountLedger ; import com . apollocurrency . aplwallet . apl . core . app . transaction . Messaging ; import com . apollocurrency . aplwallet . apl . core . app . transaction . TransactionType ; import com . apollocurrency . aplwallet . apl . core . db . TransactionalDataSource ; import com . apollocurrency . aplwallet . apl . core . chainid . BlockchainConfigUpdater ;", "private String oldDbHistoryTopicName = \"eventuate.local.cdc.my-sql-connector.offset.storage\" ; private String mySqlBinLogClientName = \"MySqlBinLog\" ;", "import org . apache . hadoop . hive . common . ValidWriteIds ;", "@ UiThread private int removeParentWrapper ( int flatParentPosition ) { }", "", "", "{ if ( bookmarks == null ) { this . bookmarks = new ArrayList < Bookmark > ( ) ; addDefaultBookmarks ( ) ; } if ( attributeTypes == null ) { this . attributeTypes = new ArrayList < AttributeType > ( ) ; addDefaultAttributeTypes ( ) ; } } private void addDefaultBookmarks ( ) { bookmarks . add ( new Bookmark ( \"Yahoo Finance\" , \"http://de.finance.yahoo.com/q?s={tickerSymbol}\" ) ) ; bookmarks . add ( new Bookmark ( \"Yahoo Finance\" , \"http://de.finance.yahoo.com/q?s={tickerSymbol}\" ) ) ; bookmarks . add ( new Bookmark ( \"OnVista\" , \"http://www.onvista.de/suche.html?SEARCH_VALUE={isin}&SELECTED_TOOL=ALL_TOOLS\" ) ) ; }", "import logisticspipes . utils . FluidIdentifier ; import logisticspipes . utils . Pair ;", "public void lineEndingProblem ( ) throws Exception { CheckFormatTask task = create ( createTestFile ( \"testFile\" , \"A\\r\\nB\\r\\nC\\r\\n\" ) ) ; }", "friendListView . setOnItemClickListener ( new AdapterView . OnItemClickListener ( ) { @ Override public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { String friendName = parent . getItemAtPosition ( position ) . toString ( ) ; chatIntent . putExtra ( EXTRA_MESSAGE , friendName ) ; if ( ! friendName . equals ( \"You have no friends\" ) ) startActivity ( chatIntent ) ; }", "Optional < KBProperty > property = kbService . readProperty ( groupModel . getObject ( ) . getKb ( ) , groupModel . getObject ( ) . getProperty ( ) . getIdentifier ( ) ) ; IModel < KBProperty > propertyModel = Model . of ( property . orElse ( null ) ) ;", "super ( COMMENT , new ParameterList ( ) , new Factory ( ) ) ;", "import com . gentics . mesh . util . URIUtils ;", "* Send a 200 response with no payload , when a payload is expected - client should return a null object of thde type for model A", "YoVariableRegistry parentRegistry )", "private HashMap < String , String > attributes ; private ResourceExtractor resourceExtractor ; @ Before public void setUp ( ) throws Exception { attributes = new HashMap < String , String > ( ) ; resourceExtractor = new ResourceExtractor ( ) ; resourceExtractor . addLocalRClass ( R . class ) ; resourceExtractor . addSystemRClass ( android . R . class ) ; } @ Test public void getSystemAttributeResourceValue_shouldReturnTheResourceValue ( ) throws Exception { attributes . put ( \"android:id\" , \"@android:id/text1\" ) ; TestAttributeSet testAttributeSet = new TestAttributeSet ( attributes , resourceExtractor , null , null ) ; assertThat ( testAttributeSet . getAttributeResourceValue ( \"android\" , \"id\" , 0 ) , equalTo ( android . R . id . text1 ) ) ; } @ Test public void getAttributeResourceValue_shouldReturnTheResourceValue ( ) throws Exception { attributes . put ( \"message\" , \"@string/howdy\" ) ; TestAttributeSet testAttributeSet = new TestAttributeSet ( attributes , resourceExtractor , null , null ) ; assertThat ( testAttributeSet . getAttributeResourceValue ( \"some namespace\" , \"message\" , 0 ) , equalTo ( R . string . howdy ) ) ; } @ Test public void getAttributeResourceValue_withNamespace_shouldReturnTheResourceValue ( ) throws Exception { attributes . put ( \"xxx:message\" , \"@string/howdy\" ) ; TestAttributeSet testAttributeSet = new TestAttributeSet ( attributes , resourceExtractor , null , null ) ; assertThat ( testAttributeSet . getAttributeResourceValue ( \"some namespace\" , \"message\" , 0 ) , equalTo ( R . string . howdy ) ) ; } @ Test public void getAttributeResourceValue_shouldReturnDefaultValueWhenNotInAttributeSet ( ) throws Exception { attributes . put ( \"xxx:message\" , \"@string/howdy\" ) ;", "public void listFoldersFailed ( Account account , String message ) { if ( account . equals ( mAccount ) ) { } }", "private Module ( ) { }", "@ TargetApi ( 16 ) private static class Level16Apis { static void enableUniversalAccess ( WebSettings settings ) { settings . setAllowUniversalAccessFromFileURLs ( true ) ; } } public void printBackForwardList ( ) { WebBackForwardList currentList = this . copyBackForwardList ( ) ; int currentSize = currentList . getSize ( ) ; for ( int i = 0 ; i < currentSize ; ++ i ) { WebHistoryItem item = currentList . getItemAtIndex ( i ) ; String url = item . getUrl ( ) ; LOG . d ( TAG , \"The URL at index: \" + Integer . toString ( i ) + \"is \" + url ) ; } } public boolean startOfHistory ( ) { WebBackForwardList currentList = this . copyBackForwardList ( ) ; WebHistoryItem item = currentList . getItemAtIndex ( 0 ) ; String url = item . getUrl ( ) ; String currentUrl = this . getUrl ( ) ; LOG . d ( TAG , \"The current URL is: \" + currentUrl ) ; LOG . d ( TAG , \"The URL at item 0 is:\" + url ) ; return currentUrl . equals ( url ) ; } public void showCustomView ( View view , WebChromeClient . CustomViewCallback callback ) { Log . d ( TAG , \"showing Custom View\" ) ; if ( mCustomView != null ) { callback . onCustomViewHidden ( ) ; return ; } mCustomView = view ; mCustomViewCallback = callback ; ViewGroup parent = ( ViewGroup ) this . getParent ( ) ; parent . addView ( view , COVER_SCREEN_GRAVITY_CENTER ) ; this . setVisibility ( View . GONE ) ; parent . setVisibility ( View . GONE ) ; ViewGroup parent = ( ViewGroup ) this . getParent ( ) ; parent . addView ( view , COVER_SCREEN_GRAVITY_CENTER ) ; this .", "import net . moddity . droidnubekit . responsemodels . DNKRecordField ;", "import org . eclipse . xtend . core . jvmmodel . SyntheticNameClashResolver ; import org . eclipse . xtend . core . jvmmodel . XtendJvmModelInferrer ; import org . eclipse . xtend . core . xtend . CreateExtensionInfo ; import org . eclipse . xtend . core . xtend . XtendAnnotationType ; import org . eclipse . xtend . core . xtend . XtendClass ; import org . eclipse . xtend . core . xtend . XtendConstructor ; import org . eclipse . xtend . core . xtend . XtendEnum ; import org . eclipse . xtend . core . xtend . XtendField ; import org . eclipse . xtend . core . xtend . XtendFile ; import org . eclipse . xtend . core . xtend . XtendFunction ; import org . eclipse . xtend . core . xtend . XtendInterface ; import org . eclipse . xtend . core . xtend . XtendMember ; import org . eclipse . xtend . core . xtend . XtendParameter ; import org . eclipse . xtend . core . xtend . XtendTypeDeclaration ; import org . eclipse . xtend . lib . macro . declaration . Modifier ;", "", "xstream . registerConverter ( listConverter ) ; instanceId = RestcommConfiguration . getInstance ( ) . getMain ( ) . getInstanceId ( ) ; if ( ! amazonS3Configuration . isEmpty ( ) ) { boolean amazonS3Enabled = amazonS3Configuration . getBoolean ( \"enabled\" ) ; if ( amazonS3Enabled ) { final String accessKey = amazonS3Configuration . getString ( \"access-key\" ) ; final String securityKey = amazonS3Configuration . getString ( \"security-key\" ) ; final String bucketName = amazonS3Configuration . getString ( \"bucket-name\" ) ; final String bucketFolder = amazonS3Configuration . getString ( \"folder\" ) ; final boolean reducedRedundancy = amazonS3Configuration . getBoolean ( \"reduced-redundancy\" ) ; final int minutesToRetainPublicUrl = amazonS3Configuration . getInt ( \"minutes-to-retain-public-url\" , 10 ) ; final boolean removeOriginalFile = amazonS3Configuration . getBoolean ( \"remove-original-file\" ) ; final String bucketRegion = amazonS3Configuration . getString ( \"bucket-region\" ) ; final boolean testing = amazonS3Configuration . getBoolean ( \"testing\" , false ) ; final String testingUrl = amazonS3Configuration . getString ( \"testing-url\" , null ) ; s3AccessTool = new S3AccessTool ( accessKey , securityKey , bucketName , bucketFolder , reducedRedundancy , minutesToRetainPublicUrl , removeOriginalFile , bucketRegion , testing , testingUrl ) ; } }", "* Long running put request , service returns a 202 to the initial request with Azure - AsyncOperation header . Subsequent calls to operation status do not contain Azure - AsyncOperation header .", "public final class LoginToutPresenter extends Presenter < LoginToutActivity > { }", "private PasswordPolicyConfiguration createLdapPasswordPolicyConfiguration ( final LdapPasswordPolicyProperties passwordPolicy , final Authenticator authenticator , final Multimap < String , Object > attributes ) { final PasswordPolicyConfiguration cfg = new PasswordPolicyConfiguration ( passwordPolicy ) ; }", "this . setRegistryName ( Ref . MOD_ID , type . getName ( ) + \"_\" + id ) ;", "", "import org . streampipes . messaging . kafka . SpKafkaProducer ;", "", "", "List < SpanHandler > spanHandlers = new ArrayList < > ( ) ;", "private static final String VARIABLE_ANACONDA_DIR = \"anaconda_dir\" ; private static final String VARIABLE_INFLUXDB_ADDRESS = \"influxdb_address\" ; private static final String VARIABLE_INFLUXDB_USER = \"influxdb_user\" ; private static final String VARIABLE_INFLUXDB_PW = \"influxdb_pw\" ;", "setState ( 339 ) ;", "if ( ( infer || esc ) ) { heapCount = nextHeapCount ( ) ; }", "@ ImportField ( name = \"Display Order\" , type = \"int\" )", "TransactionResult result = exec . execute ( tx , as . track ( ) , ds . track ( ) , bh ) ; assertFalse ( result . getCode ( ) . isSuccess ( ) ) ;", "private static SparseArray < MessagesStorage > Instance = new SparseArray ( ) ; private final static int LAST_DB_VERSION = 78 ;", "jj_la1 [ 206 ] = jj_gen ;", "this . userExtTextField . setText ( \"\" ) ;", "", "setState ( 668 ) ;", "protected int busNumber ; protected long lockAquireTimeout ; protected TimeUnit lockAquireTimeoutUnit ; private final ReentrantLock accessLock = new ReentrantLock ( true ) ;", "private RichConnection connection ; private DbSettings . SourceType targetType ; private int maxRowsPerTable = 1000 ; private boolean firstFieldAsKey ; private boolean doUniformSampling ;", "private final AisConsentMapper aisConsentMapper ;", "import javafx . beans . property . IntegerProperty ; import javafx . beans . property . ObjectProperty ;", "bind ( OSGIKillbill . class ) . to ( DefaultOSGIKillbill . class ) . asEagerSingleton ( ) ; bind ( OSGIDataSourceProvider . class ) . asEagerSingleton ( ) ; bind ( DataSource . class ) . annotatedWith ( Names . named ( OSGI_NAMED ) ) . toProvider ( OSGIDataSourceProvider . class ) . asEagerSingleton ( ) ; installOSGIServlet ( ) ;", "MultipleWaypointsTrajectoryGenerator multiWaypointTrajectoryGenerator = new MultipleWaypointsTrajectoryGenerator ( oneDoFJoint . getName ( ) , 15 , registry ) ; jointTrajectoryGenerators . put ( oneDoFJoint , multiWaypointTrajectoryGenerator ) ;", "public static final String KEY_ALLOW_EXISTING_FILE = \"KEY_ALLOW_EXISTING_FILE\" ; public static final String KEY_SINGLE_CLICK = \"KEY_SINGLE_CLICK\" ;", "private final ListenerCollection < ? > globalListeners = new ListenerCollection < > ( ) ; private final Multimap < UUID , SpawnServiceListener > agentLifecycleListeners = ArrayListMultimap . create ( ) ; private final Map < UUID , Agent > agents = new TreeMap < > ( ) ; private final Injector injector ; private final SarlSpecificationChecker sarlSpecificationChecker ; @ Inject public StandardSpawnService ( Injector injector , SarlSpecificationChecker sarlSpecificationChecker ) { this . injector = injector ; this . sarlSpecificationChecker = sarlSpecificationChecker ; } protected final Object getAgentRepositoryMutex ( ) { return this . agents ; } protected final Object getAgentLifecycleListenerMutex ( ) { return this . agentLifecycleListeners ; } @ Override public final Class < ? extends Service > getServiceType ( ) { return SpawnService . class ; } @ Override public Collection < Class < ? extends Service > > getServiceDependencies ( ) { return Arrays . < Class < ? extends Service > > asList ( ContextSpaceService . class ) ; } private void ensureSarlSpecificationVersion ( Class < ? extends Agent > agentClazz ) { if ( ! this . sarlSpecificationChecker . isValidSarlElement ( agentClazz ) ) { throw new InvalidSarlSpecificationException ( agentClazz ) ; } } @ Override public UUID spawn ( UUID spawningAgent , AgentContext parent , UUID agentID , Class < ? extends Agent > agentClazz , Object ... params ) { if ( isRunning ( ) ) { try { ensureSarlSpecificationVersion ( agentClazz ) ; final JustInTimeAgentInjectionModule agentInjectionModule = new JustInTimeAgentInjectionModule ( this . injector , agentClazz , parent . getID ( ) , agentID ) ; final Injector agentInjector = this . injector . createChildInjector ( agentInjectionModule ) ; final Agent agent = agentInjector . getInstance ( Agent . class ) ; assert agent != null ; synchronized ( getAgentRepositoryMutex ( ) ) { this . agents . put ( agent . getID", "resetHandlers ( _handlers ) ; logger . info ( \"Handling new session, session id:\" + _sessionId + \"instance:\" + _instanceName ) ;", "import java . util . List ; import java . util . Map ; import java . util . Set ;", "assert ( tableList . size ( ) == 1 ) ; Table table = tableList . get ( 0 ) ;", "import lu . nowina . nexu . NexuException ; import lu . nowina . nexu . api . Feedback ; import lu . nowina . nexu . generic . DebugHelper ; import lu . nowina . nexu . flow . StageHelper ;", "import java . util . ArrayList ; import java . util . Collections ; import java . util . Comparator ; import java . util . HashMap ; import java . util . HashSet ; import java . util . List ;", "", "import us . ihmc . euclid . referenceFrame . FramePoint3D ; import us . ihmc . euclid . referenceFrame . FrameVector3D ; import us . ihmc . euclid . referenceFrame . ReferenceFrame ;", "import org . apache . commons . lang3 . exception . ExceptionUtils ; import org . osgi . service . cm . ConfigurationException ; import org . osgi . service . cm . ManagedService ;", "super ( chooser , message ) ; this . msg = message ;", "version = node . getGraphFieldContainer ( \"en\" ) . getVersion ( ) ; tx . success ( ) ;", "List < EventSummaryDetails > eventSummaries = null ; if ( exportConfiguration == null || exportConfiguration . getProperties ( ) . contains ( CaseExportDto . LATEST_EVENT_ID ) || exportConfiguration . getProperties ( ) . contains ( CaseExportDto . LATEST_EVENT_STATUS ) || exportConfiguration . getProperties ( ) . contains ( CaseExportDto . LATEST_EVENT_TITLE ) ) { eventSummaries = eventService . getEventSummaryDetailsByCases ( resultCaseIds ) ; } Pseudonymizer pseudonymizer = Pseudonymizer . getDefault ( userService :: hasRight , I18nProperties . getCaption ( Captions . inaccessibleValue ) ) ;", "expr . getArgument ( ) . getExpression ( ) . accept ( pp , new Precedence ( Concrete . Expression . PREC ) ) ;", "EntityType entityType = when ( mock ( EntityType . class ) . getName ( ) ) . thenReturn ( \"entity\" ) . getMock ( ) ; Attribute idAttr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( \"id\" ) . getMock ( ) ; when ( entityType . getIdAttribute ( ) ) . thenReturn ( idAttr ) ; Attribute attr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( \"attr\" ) . getMock ( ) ;", "public class DetectInspectorResolver implements DockerInspectorResolver , NugetInspectorResolver , PipInspectorResolver , GradleInspectorResolver { }", "protected long checkValid ( long fp ) { if ( fp == 0L ) { } return fp ; } protected int getIndex ( long fp ) { return ( int ) ( fp & this . mask ) ; }", "{ PropWriter . write ( null , docIn , TEST_OUTPUT_DIR , \"test\" , locale ) ; assertInputAndOutputDocContentSame ( docName ) ; } private void assertInputAndOutputDocContentSame ( String docName ) throws FileNotFoundException , IOException , MalformedURLException { File newFile = new File ( TEST_OUTPUT_DIR . getPath ( ) + File . separator + docName ) ; InputStream newStream = newFile . toURI ( ) . toURL ( ) . openStream ( ) ; InputStream origStream = getResourceAsStream ( docName ) ; String origContent = IOUtils . toString ( origStream ) ; String newContent = IOUtils . toString ( newStream ) ; }", "import com . apollocurrency . aplwallet . apl . core . app . GenesisImporter ;", "import android . support . annotation . CallSuper ;", "private boolean jj_3R_946 ( ) { if ( jj_scan_token ( NOT ) ) return true ; if ( jj_3R_668 ( ) ) return true ; return false ; } private boolean jj_3R_937 ( ) { if ( jj_3R_669 ( ) ) return true ; }", "* * @ author < a href = \"mailto:c.hollmann@52north.org\" > Carsten Hollmann < / a >", "} catch ( InputCoercionException e ) { verifyException ( e , \"out of range of `int`\" ) ; assertEquals ( JsonToken . VALUE_NUMBER_INT , e . getInputType ( ) ) ; assertEquals ( Integer . TYPE , e . getTargetType ( ) ) ;", "import stroom . docref . DocRef ; import stroom . core . client . HasSave ;", "droneMgr = DroneManager . generateDroneManager ( context , connParams , new Handler ( Looper . getMainLooper ( ) ) ) ;", "return jjStopAtPos ( 0 , 269 ) ;", "ItemStack offHandItem = player . getHeldItemOffhand ( ) ; if ( ! theCurrentItem . isEmpty ( ) )", "import javax . xml . namespace . QName ; import java . net . URI ;", "", "import backtype . storm . contrib . cassandra . bolt . mapper . ColumnFamilyMapper ; import backtype . storm . contrib . cassandra . bolt . mapper . DefaultColumnFamilyMapper ; import backtype . storm . contrib . cassandra . bolt . mapper . DefaultColumnsMapper ; import backtype . storm . contrib . cassandra . bolt . mapper . DefaultRowKeyDeterminable ; import backtype . storm . tuple . RowKeyMapper ;", "", "import io . nuls . core . exception . NulsException ; import io . nuls . core . exception . NulsRuntimeException ; import io . nuls . core . log . Log ; import io . nuls . core . model . BigIntegerUtils ; import io . nuls . core . model . ObjectUtils ; import io . nuls . core . model . StringUtils ; import io . nuls . core . parse . JSONUtils ; import io . nuls . core . rpc . model . ModuleE ; import io . nuls . core . rpc . model . message . Response ; import io . nuls . core . rpc . netty . processor . ResponseMessageProcessor ; import io . nuls . core . rpc . util . TimeUtils ; import io . nuls . core . rpc . util . NulsDateUtils ;", "this . nameOriginText = nameOriginText ;", "LOGGER . info ( \"newSourceImageOutputStream(Identifier): miss; caching {}\" ,", "if ( jj_3R_277 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_278 ( ) ) return true ; }", "public Integer visit ( final ModuleRequiresDirective n , final Void arg ) { }", "import static org . assertj . core . util . Sets . newHashSet ; import static org . assertj . core . util . Sets . newLinkedHashSet ;", "return RestUtil . badRequest ( \"Page size, if used, must be greater than 1\" ) ;", "Map < String , Vector < String [ ] > > xHashMap1 = new HashMap < > ( ) ;", "import buildcraft . core . network . BuildCraftChannelHandler ;", "", "import gov . gtas . vo . passenger . CaseVo ; import gov . gtas . vo . passenger . DispositionStatusVo ; import org . springframework . security . access . prepost . PreAuthorize ;", "return conferenceDataSubject ;", "import com . groupon . jenkins . mongo . MongoBuildInfo ; import com . groupon . jenkins . mongo . MongoRepository ; import com . groupon . jenkins . mongo . MongoRunMap ;", "this . iri = new SimpleRDF ( ) . createIRI ( name ) ;", "", "package de . teamlapen . vampirism . proxy ; import java . util . Iterator ; import java . util . List ; import de . teamlapen . vampirism . entity . player . VampirePlayer ; import net . minecraft . client . Minecraft ; import net . minecraft . entity . Entity ; import net . minecraft . entity . player . EntityPlayer ; import net . minecraft . server . MinecraftServer ; import net . minecraft . util . ResourceLocation ; import net . minecraft . server . MinecraftServer ; import net . minecraft . world . WorldServer ; public class ServerProxy extends CommonProxy { private boolean allPlayersSleepingInCoffin ; private List playerEntities ; private WorldServer server = MinecraftServer . getServer ( ) . worldServerForDimension ( 0 ) ; @ Override public void registerKeyBindings ( ) { } @ Override public void registerRenderer ( ) { } @ Override public void registerSounds ( ) { } @ Override public void registerSubscriptions ( ) { super . registerSubscriptions ( ) ; } @ Override public EntityPlayer getSPPlayer ( ) { return null ; } @ Override public String translateToLocal ( String s ) { return s ; } @ Override public ResourceLocation checkVampireTexture ( Entity entity , ResourceLocation loc ) { return loc ; }", "private LiveSignalEnforcement ( final Contextual < Signal > context , final Cache < EntityIdWithResourceType , Entry < EntityIdWithResourceType > > thingIdCache , final Cache < EntityIdWithResourceType , Entry < Enforcer > > policyEnforcerCache , final Cache < EntityIdWithResourceType , Entry < Enforcer > > aclEnforcerCache , final LiveSignalPub liveSignalPub ) { }", "Set < Status > statusSet = new HashSet < > ( ) ; if ( healthIndicators != null ) { statusSet . addAll ( healthIndicators . values ( ) . stream ( ) . map ( HealthIndicator :: health ) . map ( Health :: getStatus ) . collect ( Collectors . toSet ( ) ) ) ; } if ( reactiveHealthIndicators != null ) { statusSet . addAll ( reactiveHealthIndicators . values ( ) . stream ( ) . map ( ReactiveHealthIndicator :: health ) . map ( health -> { return health . block ( ) . getStatus ( ) ; } ) . collect ( Collectors . toSet ( ) ) ) ; }", "public final void writeFloat ( final float value ) throws IOException { ensureBufferAccepts ( Float . SIZE / Byte . SIZE ) ; buffer . putFloat ( value ) ; }", "import melnorme . lang . ide . core_text . LangDocumentPartitionerSetup ;", "", "protected static final PluginClient PLUGIN_CLIENT = Mockito . mock ( PluginClient . class ) ; protected static final String TEST_PLUGIN_TYPE = \"test-plugin-type\" ; protected static final String TEST_RESOURCE_TYPE = \"test-resource-type\" ; protected static final String TEST_RESOURCE_NAME = \"test-resource-name\" ; protected static final String TEST_RESOURCE_VERSION = \"1\" ; protected static final TenantClient TENANT_CLIENT = Mockito . mock ( TenantClient . class ) ; protected static final ProvisionerClient PROVISIONER_CLIENT = Mockito . mock ( ProvisionerClient . class ) ; private static final Injector injector = Guice . createInjector ( new CodecModules ( ) . getModule ( ) ) ; private static final Gson GSON = injector . getInstance ( Gson . class ) ;", "", "when ( profileConfiguration . getTransactionLifetime ( ) ) . thenReturn ( TRANSACTION_LIFETIME ) ; when ( profileConfiguration . isBankOfferedConsentSupport ( ) ) . thenReturn ( BANK_OFFERED_CONSENT_SUPPORT ) ;", "public Observable < AtomObservation > getAtoms ( EUID destination ) { }", "import io . subutai . common . security . objects . PermissionObject ; import io . subutai . common . security . relation . RelationLinkDto ;", "if ( context . isSubsorted ( Sort . LIST , node . getDeclaredSort ( ) . getSort ( ) ) ) { msg += \"List, \" ; count ++ ; } if ( context . isSubsorted ( Sort . BAG , node . getDeclaredSort ( ) . getSort ( ) ) ) { }", "import com . orientechnologies . orient . core . record . impl . ODocument ; import com . orientechnologies . orient . core . version . ORecordVersion ;", "", "import org . molgenis . data . meta . model . AttributeFactory ; import org . molgenis . data . meta . model . EntityType ; import org . molgenis . data . meta . model . EntityTypeFactory ;", "import com . android . build . gradle . tasks . SourceCodeIncrementalSupport ;", "* @ author Phillip Webb * @ author Andy Wilkinson", "", "static final int ACTION_BAR_COLOR = Color . DKGRAY ; public static final String ACTION_OPEN_BOOK = \"android.fbreader.action.VIEW\" ;", "player . setBatchEvent ( new BatchEvent ( player , 600 , \"Fletching Make Bow\" , Formulae . getRepeatTimes ( player , SKILLS . FLETCHING . id ( ) ) , false ) {", "private static final TemplateType demonBloodedType = new TemplateType ( new SpiritCharacterType ( ) , new Identifier (", "public void modifyPayPerBlock ( ) { long fund = getDynamicPropertiesStore ( ) . getFund ( ) ; long dayToSustain = getDynamicPropertiesStore ( ) . getDayToSustainByFund ( ) ; long pay = fund / ( 86400 / 3 * dayToSustain ) ; logger . info ( \"[Modify Pay Per Block], fund = {}, daytosustain = {}, pay = {}\" , fund , dayToSustain , pay ) ; getDynamicPropertiesStore ( ) . saveWitnessPayPerBlock ( getDynamicPropertiesStore ( ) . getFund ( ) / ( 86400 / 3 * getDynamicPropertiesStore ( ) . getDayToSustainByFund ( ) ) ) ; } public long adjustFund ( long num ) { long fund = getDynamicPropertiesStore ( ) . getFund ( ) ; if ( num == 0 ) { return 0 ; } if ( num < 0 && fund < - num ) { getDynamicPropertiesStore ( ) . saveFund ( 0 ) ; return fund * ( - 1 ) ; } getDynamicPropertiesStore ( ) . saveFund ( fund + num ) ; return num ; } public boolean needMaintenance ( long blockTime ) { return this . dynamicPropertiesStore . getNextMaintenanceTime ( ) <= blockTime ; } public void updateMaintenanceState ( boolean needMaint ) { if ( needMaint ) { getDynamicPropertiesStore ( ) . saveStateFlag ( 1 ) ; } else { getDynamicPropertiesStore ( ) . saveStateFlag ( 0 ) ; } getDynamicPropertiesStore ( ) . saveFund ( fund + num ) ; return num ; }", "import org . checkerframework . javacutil . AnnotationUtils ; import org . checkerframework . javacutil . ElementUtils ; import org . checkerframework . javacutil . InternalUtils ; import org . checkerframework . javacutil . TreeUtils ; import org . checkerframework . javacutil . TypesUtils ; import java . lang . annotation . Annotation ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . ArrayDeque ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Set ; import javax . lang . model . element . AnnotationMirror ; import javax . lang . model . element . Element ; import javax . lang . model . element . ExecutableElement ; import javax . lang . model . element . Modifier ; import javax . lang . model . element . Name ; import javax . lang . model . element . VariableElement ; import javax . lang . model . type . ArrayType ; import javax . lang . model . type . DeclaredType ; import javax . lang . model . type . TypeKind ; import javax . lang . model . type . TypeMirror ; import com . sun . source . tree . AssignmentTree ; import com . sun . source . tree . BinaryTree ; import com . sun . source . tree . CompoundAssignmentTree ;", "TimeServiceImpl . class , BlockDaoImpl . class , TransactionDaoImpl . class , GenesisPublicKeyTable . class )", "import com . google . common . collect . ImmutableList ; import it . unibz . inf . ontop . model . atom . TargetAtom ; import it . unibz . inf . ontop . model . atom . TargetAtomFactory ;", "", "import android . preference . * ; import android . preference . Preference ; import android . preference . PreferenceFragment ; import android . preference . PreferenceManager ; import android . support . v4 . app . FragmentActivity ;", "import com . asf . appcoins . sdk . iab . payment . PaymentStatus ; import io . reactivex . Completable ;", "@ JsonProperty public String getDockerfilePath ( ) { return dockerfilePath ; } public void setDockerfilePath ( String dockerfilePath ) { this . dockerfilePath = dockerfilePath ; } @ JsonProperty public String getCwlPath ( ) { return cwlPath ; } public void setCwlPath ( String cwlPath ) { this . cwlPath = cwlPath ; } @ JsonProperty public boolean isHidden ( ) { return hidden ; } public void setHidden ( boolean hidden ) { this . hidden = hidden ; } @ Override public int compareTo ( Tag o ) { return Long . compare ( this . getId ( ) , o . getId ( ) ) ; } public Set < SourceFile > getSourceFiles ( ) { return sourceFiles ; } public void addSourceFile ( SourceFile file ) { sourceFiles . add ( file ) ; }", "int indexTags = cursor . getColumnIndex ( PodDBAdapter . KEY_FEED_TAGS ) ; int indexEpisodeNotification = cursor . getColumnIndex ( PodDBAdapter . KEY_EPISODE_NOTIFICATION ) ;", "this . setPenisGirth ( PenisGirth . ONE_THIN ) ; this . setPenisSize ( 8 ) ;", "this . spinnerDialog = ProgressDialog . show ( DroidGap . this , title , message , true , true , new DialogInterface . OnCancelListener ( ) { public void onCancel ( DialogInterface dialog ) { me . spinnerDialog = null ; } } ) ;", "public boolean isValidUser ( ) { CmsShell shell = new CmsShell ( getWebAppRfsPath ( ) + \"WEB-INF\" + File . separator , getServletMapping ( ) , getDefaultWebApplication ( ) , \"${user}@${project}>\" , null ) ; boolean validUser = shell . validateUser ( getAdminUser ( ) , getAdminPwd ( ) , CmsRole . ROOT_ADMIN ) ; shell . exit ( ) ; return validUser ; }", "Iterator < Session > iter = sessions . values ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Session session = iter . next ( ) ; synchronized ( session ) { if ( session . state == State . UNRESERVED ) { long configuredIdle = maxIdle ; if ( session instanceof UpdateSession ) { configuredIdle = maxUpdateIdle ; } long idleTime = System . currentTimeMillis ( ) - session . lastAccessTime ; if ( idleTime > configuredIdle ) { log . info ( \"Closing idle session from user={}, client={}, idle={}ms\" , session . getUser ( ) , session . client , idleTime ) ; iter . remove ( ) ; sessionsToCleanup . add ( session ) ; session . state = State . REMOVED ; } } } } }", "private final boolean dropInvalidMessage ; private final DataConverter converter ;", "for ( Instance inst : ConfigurationHelper . allInstances ( cfg ) ) { for ( Port p : ThingMLHelpers . allPorts ( inst . getType ( ) ) ) { initDynCo += \"_dyn_co_rlist_tail[\" + ctx . getInstanceVarName ( inst ) ; } }", "penguinBody = new ModelRenderer ( this , 0 , 16 ) . setTextureSize ( 64 , 32 ) ; penguinBody . addBox ( - 1.5F , - 14F , - 1.5F , 3 , 5 , 3 ) ; bipedHead . addChild ( penguinBody ) ; penguinArm1 = new ModelRenderer ( this , 28 , 16 ) . setTextureSize ( 64 , 32 ) ; penguinArm1 . addBox ( - 2.5F , - 14F , - 1.0F , 1 , 3 , 2 ) ; bipedHead . addChild ( penguinArm1 ) ; penguinArm2 = new ModelRenderer ( this , 28 , 16 ) . setTextureSize ( 64 , 32 ) ; penguinArm2 . addBox ( 1.5F , - 14F , - 1.0F , 1 , 3 , 2 ) ; bipedHead . addChild ( penguinArm2 ) ; penguinHead = new ModelRenderer ( this , 12 , 16 ) . setTextureSize ( 64 , 32 ) ; penguinHead . addBox ( - 2.0F , - 18F , - 2.0F , 4 , 4 , 4 ) ; bipedHead . addChild ( penguinHead ) ; penguinNose = new ModelRenderer ( this , 34 , 16 ) . setTextureSize ( 64 , 32 ) ; penguinNose . addBox ( - 0.5F , - 16.5F , - 4.0F , - 4.0F , 1 , 1 , 2 ) ; bipedHead . addChild ( - 0.5F , - 16 ) . setTextureSize ( 64 , 32 ) ; penguinNose . addBox ( - 0.5F , - 16 ) . setTextureSize ( 64 , 32 )", "public ResourceLocation getEntityTexture ( EntitySongbird entity ) { return entity . getVariantTexture ( ) ; }", "final var valid = HttpRequestUtils . doesParameterExist ( request , OAuth20Constants . REDIRECT_URI ) && HttpRequestUtils . doesParameterExist ( request , OAuth20Constants . CODE ) && OAuth20Utils . checkCallbackValid ( clientRegisteredService , redirectUri ) ;", "import com . thinkaurelius . titan . diskstorage . keycolumnvalue . * ; import com . google . common . collect . ImmutableList ;", "import android . annotation . SuppressLint ;", "import org . apache . oozie . client . OozieClient ; import org . apache . zookeeper . ZooKeeper ;", "toInject . add ( new FieldInsnNode ( GETFIELD , internalFoodStatsName , isObfuscated ? \"field_75126_c\" : \"foodExhaustionLevel\" , \"F\" ) ) ; toInject . add ( new MethodInsnNode ( INVOKESTATIC , Type . getInternalName ( Hooks . class ) , \"fireExhaustionTickEvent\" , \"(Lnet/minecraft/entity/player/EntityPlayer;F)F\" , false ) ) ;", "LogHelper . info ( \"PreInitialization Complete\" ) ; ProgressManager . pop ( bar ) ;", "GL11 . glPushMatrix ( ) ; ItemExosuitArmor item = ( ( ItemExosuitArmor ) me . getItem ( ) ) ; if ( item . hasUpgrade ( me , SteamcraftItems . enderShroud ) ) { if ( ( entity instanceof EntityLivingBase ) && ( ( EntityLivingBase ) entity ) . hurtTime != 0 ) { System . out . println ( ( ( EntityLivingBase ) entity ) . hurtTime ) ; GL11 . glColor4f ( 1.0F , 1.0F , 1.0F , ( float ) ( ( EntityLivingBase ) entity ) . hurtTime / 9F ) ; GL11 . glDepthMask ( false ) ; GL11 . glEnable ( GL11 . GL_BLEND ) ; GL11 . glBlendFunc ( GL11 . GL_SRC_ALPHA , GL11 . GL_ONE_MINUS_SRC_ALPHA ) ; GL11 . glAlphaFunc ( GL11 . GL_GREATER , 0.003921569F ) ; } else { GL11 . glColor4f ( 1.0F , 1.0F , 1.0F , 0.0F ) ; GL11 . glDepthMask ( false ) ; GL11 . glEnable ( GL11 . GL_BLEND ) ; GL11 . glBlendFunc ( GL11 . GL_SRC_ALPHA , GL11 . GL_ONE_MINUS_SRC_ALPHA ) ; GL11 . glAlphaFunc ( GL11 . GL_GREATER , 0.003921569F ) ; } } this . setRotationAngles ( par2 , par3 , par4 , par5 , par6 , par7 , entity ) ; if ( armor == 0 ) { if ( ( ( ItemExosuitArmor ) me", "bodyInterceptor = new BaseBodyInterceptor ( aptoideClientUUID , accountManager ) ; requestBodyFactory = new RequestBodyFactory ( ) ; serializer = new ObjectMapper ( ) ; serializer . setSerializationInclusion ( JsonInclude . Include . NON_NULL ) ;", "", "import bibliothek . gui . dock . util . color . ColorCodes ; import bibliothek . gui . dock . util . Transparency ;", "protected void refreshTagsSearch ( ) { Query < Tag > tags = Tag . all ( mTagsBucket ) . where ( NAME_PROPERTY , Query . ComparisonType . LIKE , \"%\" + mSearchQuery + \"%\" ) . orderByKey ( ) . include ( Tag . NOTE_COUNT_INDEX_NAME ) . reorder ( ) ; Bucket . ObjectCursor < Tag > cursor = tags . execute ( ) ; mTagsAdapter . swapCursor ( cursor ) ; } private void setEmptyListImage ( @ DrawableRes int image ) { if ( mEmptyViewImage != null ) { if ( image != - 1 ) { mEmptyViewImage . setVisibility ( View . VISIBLE ) ; mEmptyViewImage . setImageResource ( image ) ; } else { mEmptyViewImage . setVisibility ( View . GONE ) ; } } } private void setEmptyListMessage ( String message ) { if ( mEmptyViewText != null && message != null ) { mEmptyViewText . setText ( message ) ; } }", "Diffs dlnPdf = Laplace . withParameters ( mu . getValue ( ) , beta . getValue ( ) ) . dLogProb ( value ) ; return convertDualNumbersToDiff ( dlnPdf . get ( MU ) . getValue ( ) , dlnPdf . get ( BETA ) . getValue ( ) , dlnPdf . get ( X ) . getValue ( ) ) ;", "{ \"R_useBulkCopyForBatchInsertPropertyDescription\" , \"Whether the driver will use bulk copy API for batch insert operations\" } , { \"R_UnknownDataClsTokenNumber\" , \"Unknown token for Data Classification.\" } , { \"R_InvalidDataClsVersionNumber\" , \"Invalid version number {0} for Data Classification.\" } , { \"R_unknownUTF8SupportValue\" , \"Unknown value for UTF8 support.\" } ,", "import alluxio . wire . WorkerInfo ;", "setState ( 596 ) ;", "setState ( 561 ) ;", "private final PatchSetInfoFactory psInfoFactory ; private final PersonIdent myIdent ;", "import org . junit . jupiter . api . AfterAll ; import org . assertj . core . api . Assertions ;", "Integer value = preferences . getInt ( ResultViewerPersistence . getColumnPositionKey ( tfn , prop . getName ( ) ) , - 1 ) ;", "import org . zanata . rest . client . IVersionResource ; import org . zanata . rest . client . TestProxyFactory ;", "", "public static void symmLowerToFull ( DMatrixRMaj A ) { if ( A . numRows != A . numCols ) throw new MatrixDimensionException ( \"Must be a square matrix\" ) ; final int cols = A . numCols ; for ( int row = 0 ; row < A . numRows ; row ++ ) { for ( int col = row + 1 ; col < cols ; col ++ ) { A . data [ row * cols + col ] = A . data [ col * cols + row ] ; } } } public static void symmUpperToFull ( DMatrixRMaj A ) { if ( A . numRows != A . numCols ) throw new MatrixDimensionException ( \"Must be a square matrix\" ) ; final int cols = A . numCols ; for ( int row = 0 ; row < A . numRows ; row ++ ) { for ( int col = 0 ; col <= row ; col ++ ) { A . data [ row * cols + col ] = A . data [ col * cols + row ] ; } } }", "{ mCurrentAnimation = startAnimationToWorkspaceFromOverlay ( fromWorkspaceState , toWorkspaceState , mLauncher . getWidgetsButton ( ) , widgetsView , widgetsView . getContentView ( ) , widgetsView . getRevealView ( ) , null , animated , onCompleteRunnable , cb ) ; }", "bitField0_ |= 0x00100000 ;", "package org . sleuthkit . autopsy . datamodel ; import java . util . ArrayList ; import java . util . List ; import javax . swing . Action ; import org . sleuthkit . autopsy . directorytree . ExternalViewerAction ; import org . sleuthkit . autopsy . directorytree . ExtractAction ; import org . sleuthkit . autopsy . directorytree . HashSearchAction ; import org . sleuthkit . autopsy . directorytree . NewWindowViewAction ; import org . sleuthkit . autopsy . actions . AddContentTagAction ; import org . sleuthkit . autopsy . directorytree . ViewContextAction ; import org . sleuthkit . datamodel . AbstractFile ; import org . sleuthkit . datamodel . TskData . TSK_DB_FILES_TYPE_ENUM ; import org . sleuthkit . datamodel . TskData . TSK_FS_NAME_FLAG_ENUM ; public class FileNode extends AbstractFsContentNode < AbstractFile > { public FileNode ( AbstractFile file ) { this ( file , true ) ; setIcon ( file ) ; } public FileNode ( AbstractFile file , boolean directoryBrowseMode ) { super ( file , directoryBrowseMode ) ; setIcon ( file ) ; } private void setIcon ( AbstractFile file ) { if ( file . isDirNameFlagSet ( TSK_FS_NAME_FLAG_ENUM . UNALLOC ) ) { if ( file . getType ( ) . equals ( TSK_DB_FILES_TYPE_ENUM . CARVED ) ) { this . setIconBaseWithExtension ( \"org/sleuthkit/autopsy/images/carved-file-icon-16.png\" ) ; } else { this . setIconBaseWithExtension ( \"org/sleuthkit/autopsy/images", "private final CountDownLatch mMasterContainerAllocatedLatch ; private final CountDownLatch mApplicationDoneLatch ;", "import org . n52 . iceland . ds . ConnectionProvider ; import org . n52 . shetland . ogc . gml . AbstractFeature ; import org . n52 . shetland . ogc . om . OmObservableProperty ; import org . n52 . shetland . ogc . ows . exception . InvalidParameterValueException ; import org . n52 . shetland . ogc . ows . exception . NoApplicableCodeException ; import org . n52 . shetland . ogc . ows . exception . OwsExceptionReport ; import org . n52 . shetland . ogc . sensorML . SensorML ; import org . n52 . shetland . ogc . sos . Sos2Constants ; import org . n52 . shetland . ogc . sos . SosConstants ; import org . n52 . shetland . ogc . sos . SosOffering ; import org . n52 . shetland . ogc . sos . ds . hibernate . dao . DaoFactory ; import org . n52 . sos . ds . hibernate . dao . FeatureOfInterestDAO ;", "", "", "private Statistics mStatistics ; private final URIStatus mFileInfo ; private final FileInStream mInputStream ;", "public String parse ( String command , String arguments , String target , GameCharacter character ) { return Units . size ( character . getHeightValue ( ) , Units . ValueType . NUMERIC , Units . UnitType . LONG ) ; }", "public void persistFile ( long fileId , long nonce , String path ) throws tachyon . thrift . TachyonTException , org . apache . thrift . TException ;", "ser = provider . handlePrimaryContextualization ( ser , property ) ; return withResolved ( property , typeSer , ser , _forceTypeInformation ) ;", "", "", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "import android . annotation . SuppressLint ;", "import mekanism . common . tile . prefab . TileEntityMultiblock ;", "List < Row > resultRows = new ArrayList < > ( ) ; for ( Entry < String , ArrayList < String > > stringArrayListEntry : hash . entrySet ( ) ) { ArrayList < String > r = stringArrayListEntry . getValue ( ) ; }", "{ template = getTestingTemplate ( ) ; templateList . add ( template ) ; when ( templateManager . getRegisteredTemplates ( ) ) . thenReturn ( templateList ) ; when ( resolver . findWebHookTemplatesForProject ( sProject ) ) . thenReturn ( templateList ) ; finishedBuildsHistory . addAll ( finishedSuccessfulBuilds ) ; finishedBuildsHistory . addAll ( finishedFailedBuilds ) ; ( ( MockSBuildType ) sBuildType ) . setMockingFrameworkInstance ( this ) ; } @ Override public List < SFinishedBuild > getMockedBuildHistory ( ) { return finishedBuildsHistory ; } private WebHookTemplate getTestingTemplate ( ) { return new WebHookTemplate ( ) { WebHookTemplateManager manager ; BuildStateEnum [ ] supportedStates = { BuildStateEnum . BUILD_SUCCESSFUL , BuildStateEnum . BUILD_FAILED , BuildStateEnum . BUILD_BROKEN , BuildStateEnum . BUILD_FIXED } ; @ Override public boolean supportsPayloadFormat ( String payloadFormat ) { return true ; } @ Override public void setTemplateManager ( WebHookTemplateManager webhookTemplateManager ) { this . manager = webhookTemplateManager ; } @ Override public void setRank ( Integer rank ) { } @ Override public void register ( ) { this . manager . register ( ) ; } @ Override public String getTemplateToolTipText ( ) { return \"Test Tool Tip\" ; } @ Override public String getTemplateShortName ( ) { return \"mockedJsonTemplate\" ; } @ Override public WebHookTemplateContent getTemplateForState ( BuildStateEnum buildState ) { return WebHookTemplateContent . create ( buildState . getShortName ( ) , \"Template for \" + buildState . getShortName ( ) , true , \"\" ) ; } @ Override public String getTemplateShortName ( ) { return \"mockedJsonTemplate\" ; } @ Override public String getTemplateShortName ( ) { return \"Branch template for \" + buildState . getShortName ( ) , \"Branch template", "import java . util . Map ; import java . util . function . Consumer ;", "Log . info ( \"Geo cookie: \" , driver . manage ( ) . getCookieNamed ( \"Geo\" ) . getValue ( ) ) ; Assertion . assertEquals ( new TrackingOptInPage ( ) . isVisible ( ) , shouldGetModal ) ;", "import java . util . * ; import java . util . concurrent . Callable ; import java . util . concurrent . * ; import java . util . concurrent . atomic . AtomicInteger ;", "", "final File tmpdirectory , final boolean distinct , final int numHeader , CSVFormat format ) throws IOException {", "bind ( OkHttpClient . class ) . toInstance ( okHttpClient ) ;", "import org . zalando . nakadi . utils . EventTypeTestBuilder ; import org . zalando . nakadi . utils . TestUtils ;", "assertEquals ( \"com.microsoft.rest.v2.SwaggerMethodParserTests$TestInterface3.testMethod3\" , methodParser . fullyQualifiedMethodName ( ) ) ; assertEquals ( \"PATCH\" , methodParser . httpMethod ( ) ) ;", "import java . awt . event . KeyAdapter ; import java . awt . event . KeyEvent ;", "primer . setBlockState ( x , y , z , grassBlock ) ;", "TimelineAnalytics timelineAnalytics , SocialRepository socialRepository , InstalledRepository installedRepository , WindowManager windowManager ) {", "TaskDispatchManager taskDispatchManager , Event < List < Transaction > > txEvent , ShardDao shardDao ) {", "public DataSet < LocatedRow > getDataSet ( DataSetProcessor dsp ) throws StandardException { return firstResultSet . getDataSet ( ) . union ( secondResultSet . getDataSet ( ) ) . map ( new SetCurrentLocatedRowFunction ( dsp ) ) ; }", "switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case MINUS : jj_consume_token ( MINUS ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case TO : case VALUE : case VALUES : case SET : case ADD : case PUT : case MERGE : case CONTENT : case REMOVE : case ORDER : case GROUP : case OFFSET : case RECORD : case CACHE : case CYCLE : case NOLIMIT : case NOCYCLE : case LUCENE : case NEAR : case WITHIN : case MINDEPTH : case CLASS : case SUPERCLASS : case CLASSES : case SUPERCLASSES : case VIEW : case UPDATABLE : case EXCEPTION : case PROFILE : case STORAGE : case ON : case OFF : case TRUNCATE : case FIND : case REFERENCES : case EXTENDS : case CLUSTERS : case ABSTRACT : case ALTER : case NAME : case SHORTNAME : case OVERSIZE : case STRICTMODE : case ADDCLUSTER : case REMOVECLUSTER : case CUSTOM : case CLUSTERSELECTION : case DESCRIPTION : case ENCRYPTION : case DROP : case PROPERTY : case FORCE : case FORCE : case FORCE : case CLUSTERSELECTION : case DESCRIPTION : case ENCRYPTION : case DROP : case FORCE : case FORCE : jjtn000 : case CLUSTERS : case ABSTRACT : case ALTER : case NAME : case SHORTNAME : case OVERSIZE : case STRICTMODE : case ADDCLUSTER : case CUSTOM : case CLUSTERSELECTION : case DESCRIPTION : case ENCRYPTION : case DROP : case FORCE : case FORCE : case CLUSTERSELECTION : case DESCRIPTION : case FORCE : case CLUSTERSELECTION : case DROP : case FORCE : case FORCE : case DROP :", "if ( ! ProjectManager . getAnalyzer ( featureModel ) . isValid ( ) ) { markerHandler . createModelMarker ( THE_FEATURE_MODEL_IS_VOID_COMMA__I_E__COMMA__IT_CONTAINS_NO_PRODUCTS , IMarker . SEVERITY_ERROR , 0 ) ; }", "doc . add ( new Table ( UnitValue . createPercentArray ( 1 ) ) . useAllAvailableWidth ( ) . setBorder ( new SolidBorder ( ColorConstants . ORANGE , 2 ) ) . addCell ( \"Is my occupied area correct?\" ) ) ;", "FragmentManager supportFragmentManager = getSupportFragmentManager ( ) ; contributionsList = ( ContributionsListFragment ) supportFragmentManager", "default String getBindingName ( ) { return null ; }", "case Property . BORDER : return ( T1 ) DEFAULT_BORDER ; case Property . PADDING_BOTTOM : case Property . PADDING_LEFT : case Property . PADDING_RIGHT : case Property . PADDING_TOP : return ( T1 ) Float . valueOf ( 2 ) ;", "private final List < DeepShortcutView > mShortcuts = new ArrayList < > ( ) ; private final PointF mInterceptTouchDown = new PointF ( ) ; private final Point mIconLastTouchPos = new Point ( ) ;", "if ( MekanismUtils . isOp ( ( EntityPlayerMP ) player ) ) { return true ; } return canAccess ( security . getSecurity ( ) . getMode ( ) , player . getName ( ) , security . getSecurity ( ) . getOwner ( ) ) ;", "loadBalancerTemplate , loadBalancerServiceIdOverride , loadBalancerUpstreamGroup , skipHealthchecksOnDeploy , healthcheckProtocol , deployInstanceCountPerStep , deployStepWaitTimeMs , autoAdvanceDeploySteps , maxTaskRetries , shell , user ) ;", "import cyclops . companion . CyclopsCollectors ; import cyclops . companion . Streams ; import cyclops . async . Future ; import cyclops . async . QueueFactories ;", "setState ( 698 ) ;", "", "import com . alexstyl . specialdates . datedetails . DateDetailsActivity ;", "import moze_intel . projecte . PECore ; import moze_intel . projecte . api . item . IModeChanger ;", "IndexShardReference ref = IndexShardReferenceImpl . createOnPrimary ( indexShard ) ; assert addShardReference ( ref , \"primary: \" + request . toString ( ) + \" \" + ref . routingEntry ( ) ) ; return ref ;", "private transient Map < String , Interpreter > _ips ; private final FunctionMapper _mapper = new PageFuncMapper ( ) ; private transient List _mappers ;", "import javax . persistence . * ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Set ;", "import alien4cloud . model . cloud . Network ; import alien4cloud . tosca . ToscaUtils ;", "WITHERED , SCHEME , LACKEY , TREANT , DRAINED_THIS_TURN , TOTAL_DRAINED , DRAINED_LAST_TURN , SURGE , DYNAMIC_DESCRIPTION ;", "{ sortedMatrix = ( GeneticEvent [ ] [ ] ) sorter . sort ( sortedMatrix ) ; writeOncoPrint ( out , cancerTypeID , unsortedMatrix , sortedMatrix , dataSummary , mutationMap , caseSets , caseSetId , theOncoPrintSpecParserOutput . getTheOncoPrintSpecification ( ) , forSummaryTab ) ; return out . toString ( ) ; }", "", "", "BillingEvent event1 = new DefaultBillingEvent ( subscription , effectiveDate1 , plan , phase1 , fixedPrice . getPrice ( currency ) , null , currency , BillingPeriod . MONTHLY , 1 , BillingModeType . IN_ADVANCE , \"testEvent1\" , 1L , SubscriptionTransitionType . CREATE ) ;", "if ( fields . isEmpty ( ) ) { return Stream . empty ( ) ; } return Stream . of ( influxLineProtocol ( m . getId ( ) , \"unknown\" , fields . stream ( ) ) ) ;", "import org . apache . cloudstack . api . response . AccountResponse ; import org . apache . cloudstack . api . response . AsyncJobResponse ; import org . apache . cloudstack . api . response . DiskOfferingResponse ; import org . apache . cloudstack . api . response . DomainRouterResponse ; import org . apache . cloudstack . api . response . EventResponse ; import org . apache . cloudstack . api . response . HostResponse ; import org . apache . cloudstack . api . response . ImageStoreResponse ; import org . apache . cloudstack . api . response . InstanceGroupResponse ; import org . apache . cloudstack . api . response . ListResponse ; import org . apache . cloudstack . api . response . ProjectAccountResponse ; import org . apache . cloudstack . api . response . ProjectInvitationResponse ; import org . apache . cloudstack . api . response . ProjectResponse ; import org . apache . cloudstack . api . response . ResourceTagResponse ; import org . apache . cloudstack . api . response . SecurityGroupResponse ; import org . apache . cloudstack . api . response . ServiceOfferingResponse ; import org . apache . cloudstack . api . response . StoragePoolResponse ; import org . apache . cloudstack . api . response . TemplateResponse ; import org . apache . cloudstack . api . response . UserResponse ; import org . apache . cloudstack . api . response . UserVmResponse ; import org . apache . cloudstack . api . response . VolumeResponse ; import org . apache . cloudstack . api . response . VolumeResponse ;", "ActionBarCompat abCompat = ActionBarCompat . create ( this ) ; abCompat . setDisplayHomeAsUpEnabled ( true ) ;", "* @ param id The id of the audio player", "for ( int i = 0 ; i < ModelingConfigurationRegistry . getInstance ( ) . getModelingConfiguration ( contextId ) . getMappingBranchingFactor ( ) && i < newSteinerNodes . size ( ) ; i ++ )", "private static final Logger log = LoggerFactory . getLogger ( SchematicCommands . class ) ;", "import org . compiere . util . DB ; import org . compiere . util . Env ; import org . compiere . util . TimeUtil ; import org . slf4j . Logger ; import de . adempiere . ad . security . IUserRolePermissions ; import org . compiere . util . DB ; import org . compiere . util . Env ; import de . metas . security . TimeUtil ; import de . metas . logging . LogManager ; import org . compiere . util . DB ; import org . compiere . util . Env ; import org . compiere . i18n . Language ; import de . metas . i18n . Msg ; import de . metas . logging . LogManager ; import de . metas . permissions . LegacyUOMConversionUtils ;", "@ XmlElement ( name = \"serviceTypeVersion\" ) @ UML ( identifier = \"serviceTypeVersion\" , obligation = OPTIONAL , specification = ISO_19115 )", "int maxColumns = mMasterTachyonConf . getInt ( Constants . MAX_COLUMNS , 257 ) ; sTfs . createRawTable ( new TachyonURI ( TestUtils . uniqPath ( ) ) , maxColumns ) ;", "when ( mockNodeService . exists ( mockTransaction , \"/some/path\" ) ) . thenReturn ( false ) ;", "import us . ihmc . commonWalkingControlModules . momentumBasedController . dataObjects . feedbackController . FeedbackControlCommand ; import us . ihmc . commonWalkingControlModules . momentumBasedController . dataObjects . feedbackController . OrientationFeedbackControlCommand ; import us . ihmc . commonWalkingControlModules . momentumBasedController . dataObjects . solver . InverseDynamicsCommand ; import us . ihmc . humanoidRobotics . communication . packets . walking . GoHomeMessage . BodyPart ; import us . ihmc . robotics . controllers . YoOrientationPIDGainsInterface ;", "persistAndApplyEvent ( propertyDeleted , event -> notifySender ( DeleteFeaturePropertyResponse . of ( thingId , featureId , propertyJsonPointer ,", "private final Comparator < String > tagComparator ; private final Comparator < String > pathComparator ; private final Comparator < HttpMethod > pathMethodComparator ; private boolean separatedPathsEnabled ; private String outputDirectory ;", "final SpacecraftState [ ] meanStates = new SpacecraftState [ interpolationPoints . length ] ; for ( int i = 0 ; i < interpolationPoints . length ; ++ i ) { final double time = interpolationPoints [ i ] ; final ODEStateAndDerivative sd = interpolator . getInterpolatedState ( forceModel . getParameters ( ) , time ) ; meanStates [ i ] = mapper . mapArrayToState ( time , sd . getPrimaryState ( ) , sd . getPrimaryDerivative ( ) , true ) ; }", "import org . elasticsearch . common . ParsingException ;", "* Long running put request , service returns a 200 to the initial request , with an entity that is not a valid json", "public static final String LOGOUT_INVALIDATE_HTTP_SESSION = \"stormpath.web.logout.invalidateHttpSession\" ; public static final String ACCESS_TOKEN_URL = \"stormpath.web.oauth2.uri\" ; public static final String ACCESS_TOKEN_VALIDATION_STRATEGY = \"stormpath.web.oauth2.validationStrategy\" ;", "this . contextRunner . withPropertyValues ( \"spring.mustache.prefix=classpath:/unknown/\" , \"server.error.include-stacktrace=always\" ) . run ( ( context ) -> { WebTestClient client = getWebClient ( context ) ; String body = client . get ( ) . uri ( \"/\" ) . accept ( MediaType . TEXT_HTML ) . exchange ( ) . expectStatus ( ) . isEqualTo ( HttpStatus . INTERNAL_SERVER_ERROR ) . expectHeader ( ) . contentType ( TEXT_HTML_UTF8 ) . expectBody ( String . class ) . returnResult ( ) . getResponseBody ( ) ; assertThat ( body ) . contains ( \"Whitelabel Error Page\" ) . contains ( this . logIdFilter . getLogId ( ) ) . contains ( \"<div>Expected!</div>\" ) . contains ( \"<div style='white-space:pre-wrap;'>java.lang.IllegalStateException\" ) ;", "this . ciphertextDirDeleter = ciphertextDirDeleter ; this . readonlyFlag = readonlyFlag ;", "import net . minecraft . potion . Potion ; import net . minecraft . world . gen . structure . MapGenStructureIO ;", "acc . linkedAccount , acc . disbursementDetails , acc . multiDisburseLoan , acc . canDefineInstalmentAmount , acc . fixedEmiAmount , acc . maxOutstandingLoanBalance , acc . emiAmountVariations , acc . memberVariations , acc . product , acc . inArrears , acc . graceOnArrearsAgeing , acc . overdueCharges , acc . isNPA , acc . daysInMonthType , acc . daysInYearType , acc . isInterestRecalculationEnabled , acc . interestRecalculationData , acc . originalSchedule , acc . createStandingInstructionAtDisbursement , acc . paidInAdvance ) ;", "", "", "< % _ } _ % > < % _ if ( authenticationType != = 'oauth2' && ( databaseType == = 'sql' || databaseType == = 'mongodb' || databaseType == = 'couchbase' ) ) { _ % >", "private boolean alignLabels ; private float thickness ; private float thicknessError ; private int arrowColor ; private float arrowSize ;", "{ List < BlockPos > positions = new LinkedList ( ) ; this . getPositions ( placedPosition , positions ) ; ( ( BlockMulti ) GCBlocks . fakeBlock ) . makeFakeBlock ( world , positions , placedPosition , EnumBlockMultiType . CRYO_CHAMBER ) ; } @ Override public void getPositions ( BlockPos placedPosition , List < BlockPos > positions ) { int buildHeight = this . world . getHeight ( ) - 1 ; }", "public List < ? extends SweCoordinate < ? > > getPosition ( ) { if ( ! isSetPosition ( ) ) { if ( isSetVector ( ) && getVector ( ) . isSetCoordinates ( ) ) { if ( ! isSetName ( ) && vector . isSetName ( ) ) { setName ( vector . getName ( ) ) ; } return vector . getCoordinates ( ) ; } else if ( isSetAbstractDataComponent ( ) && getAbstractDataComponent ( ) instanceof SweDataRecord ) { SweDataRecord dataRecord = ( SweDataRecord ) getAbstractDataComponent ( ) ; if ( dataRecord . isSetFields ( ) ) { List < SweCoordinate < ? > > coordinates = Lists . newArrayList ( ) ; for ( SweField field : dataRecord . getFields ( ) ) { if ( field . getElement ( ) instanceof SweQuantity ) { coordinates . add ( new SweCoordinate < Double > ( field . getName ( ) . getValue ( ) , ( SweQuantity ) field . getElement ( ) ) ) ; } } return coordinates ; } } } }", "import org . apache . asterix . common . exceptions . AsterixException ; import org . apache . asterix . common . exceptions . ErrorCode ; import org . apache . asterix . common . metadata . DataverseName ;", "private final OrcProto . BloomFilterIndex [ ] bloomFilterIndices ; private final SargApplier sargApp ; private final boolean [ ] sargColumns ;", "void dispatcherTypes ( ) throws IOException { BeanDefinition filterRegistrationBean = handleBeanDefinitionForClass ( DispatcherTypesFilter . class ) ; }", "import static org . hamcrest . MatcherAssert . assertThat ; import static org . jenkinsci . test . acceptance . Matchers . hasContent ; import static org . hamcrest . CoreMatchers . is ;", "public Long getPodId ( ) { return podId ; }", "private final MycatDataContext context ; private final Distribution distribution ; private final SQLStatement logicStatement ; private final List < Object > inParameters ; private List < Object > outParameters ; private final Set < SQL > reallySqlSet ; private final DataSourceFactory factory ;", "prop = getConfig ( Constants . CONFIG_CATEGORY_GENERAL , \"Enable Debug Messages\" , false ) ; prop . setComment ( \"If this is enabled, debug messages will appear in the console. This is useful for finding bugs in the mod.\" ) ;", "setState ( 697 ) ;", "Document studyDocument = getStudyDocument ( studyUid ) ; MongoCursor < Document > mongoCursor = getMongoCursor ( null , query , queryOptions , studyDocument , user ) ;", "{ addGraphs ( resolveAuths ( graphId ) , null , isPublic , builder ) ; } final boolean isPublic = resolveIsPublic ( graphId ) ;", "protected Symbol visitSubscriptExpression ( SubscriptExpression node , T context ) { }", "", "if ( writeKey != null ) { String debugging = context . getString ( R . string . analytics_debug ) ; int queueSize = context . getResources ( ) . getInteger ( R . integer . analytics_queue_size ) ; logger . debug ( \"SegmentTracker created with write key: \" + writeKey ) ; }", "{ this . scripts . addAll ( scripts ) ; return ( T ) this ; } public T script ( RawScript script ) { return scripts ( Arrays . asList ( script ) ) ; }", "EntityType entityType = when ( mock ( EntityType . class ) . getName ( ) ) . thenReturn ( \"entity\" ) . getMock ( ) ; Attribute idAttr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( \"idAttr\" ) . getMock ( ) ; Attribute attr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( \"attr\" ) . getMock ( ) ;", "import com . google . common . collect . ImmutableList ;", "BehaviorDispatcher . messager . submitMessage ( MessengerAPI . State , getStateMachine ( ) . getCurrentBehaviorKey ( ) . toString ( ) ) ;", "HttpResponse response = doPost ( \"/clusters\" , gson . toJson ( clusterCreateRequest ) , USER1_HEADERS ) ; assertResponseStatus ( response , expectedStatus ) ; if ( expectedStatus == HttpResponseStatus . BAD_REQUEST ) { return ; }", "import android . support . v4 . app . DialogFragment ; import android . widget . Toast ;", "if ( DEBUG ) { Log . d ( TAG , \"onBackPressed() called\" ) ; } if ( player != null && player . isFullscreen ( ) ) { if ( ! PlayerHelper . isTablet ( activity ) ) player . onPause ( ) ; restoreDefaultOrientation ( ) ; setAutoplay ( false ) ; return true ; } if ( player != null && player . getPlayQueue ( ) != null && player . videoPlayerSelected ( ) && player . getPlayQueue ( ) . previous ( ) ) { return true ; }", "import stroom . editor . client . view . EditorMenuPresenter ; import stroom . core . client . gin . PluginModule ;", "operations . add ( buildUserIdOperations ( context , masterKeyId , userId , userIdRank ) ) ;", "* Finds inheritedColumn according to specified name { @ code name } . * * @ param name name of the inheritedColumn to be searched * * @ return found inheritedColumn or null if no such inheritedColumn * has been found", "", "final Integer color = ItemImaginary . getColor ( tag ) ; if ( color == null ) return ItemStack . EMPTY ;", "ExecutionInfoToken result = super . executeNode ( conn , downstreamResults ) ; if ( parents . get ( 0 ) instanceof AsyncAggScaleExecutionNode ) { QueryExecutionNode asyncNode = parents . get ( 0 ) ; int index = - 1 ; if ( asyncNode . getParents ( ) . size ( ) == 2 ) { index = 0 ; asyncNode = asyncNode . getParents ( ) . get ( 1 ) ; } else { AsyncAggExecutionNode asyncRoot = asyncNode . getParents ( ) . get ( 0 ) . getParents ( ) . size ( ) == 2 ? ( AsyncAggExecutionNode ) asyncNode . getParents ( ) . get ( 0 ) . getParents ( ) . get ( 1 ) : ( AsyncAggExecutionNode ) asyncNode . getParents ( ) . get ( 0 ) . getParents ( ) . get ( 0 ) ; index = asyncRoot . getDependents ( ) . indexOf ( asyncNode . getParents ( ) . get ( 0 ) ) ; asyncNode = asyncRoot ; } BaseTable scrambleTable = ( ( AsyncAggExecutionNode ) asyncNode ) . getScrambleTables ( ) . get ( 0 ) ; Dimension dimension = new Dimension ( scrambleTable . getSchemaName ( ) , scrambleTable . getTableName ( ) , index , index ) ; result . setKeyValue ( \"hyperTableCube\" , Arrays . asList ( new HyperTableCube ( Arrays . asList ( dimension ) ) ) ) ; } return result ;", "private static final Logger log = Logger . getLogger ( FacesServlet . class . getName ( ) ) ; @ JSFWebConfigParam ( since = \"1.1\" )", "private final Initiator [ ] _sysinits ; private final List < Initiator > _inits ;", "import freenet . client . filter . ContentFilter ; import freenet . client . filter . UnsafeContentTypeException ; import freenet . client . filter . ContentFilter . FilterStatus ; import freenet . client . filter . ContentFilter ; import freenet . client . filter . UnsafeContentTypeException ; import freenet . client . filter . ContentFilter . FilterOutput ;", "", "public InodeTree . CreatePathResult mkdir ( TachyonURI path , CreateDirectoryOptions options ) throws InvalidPathException , FileAlreadyExistsException , IOException , AccessControlException { }", "import javax . xml . XMLConstants ; import javax . xml . bind . annotation . * ;", "", "{ searchTerm = searchTerm . trim ( ) ; String sharedSearchClause = \"\" ; if ( ! searchTerm . isEmpty ( ) ) { sharedSearchClause = \" AND \" + getSharedSearchClause ( ) ; } String qstr = \"SELECT u.id, u.useridentifier,\" ; qstr += \" u.lastname, u.firstname, u.email,\" ; qstr += \" u.affiliation, u.superuser,\" ; qstr += \" u.position, u.modificationtime,\" ; qstr += \" prov.id, prov.factoryalias\" ; qstr += \" FROM authenticateduser u,\" ; qstr += \" authenticateduserlookup prov_lookup,\" ; qstr += \" authenticationproviderrow prov\" ; qstr += \" WHERE\" ; qstr += \" u.id = prov_lookup.authenticateduser_id\" ; qstr += \" AND prov_lookup.authenticationproviderid = prov.id\" ; qstr += sharedSearchClause ; qstr += \" ORDER BY u.useridentifier\" ; qstr += \" LIMIT \" + resultLimit ; qstr += \" OFFSET \" + offset ; qstr += \";\" ; logger . log ( Level . FINE , \"getUserCount: {0}\" , qstr ) ; Query nativeQuery = em . createNativeQuery ( qstr ) ; nativeQuery . setParameter ( \"searchTerm\" , searchTerm + \"%\" ) ; return nativeQuery . getResultList ( ) ; } private String getSharedSearchClause ( ) { String searchClause = \" (u.useridentifier ILIKE #searchTerm\" ; qstr += \" LIMIT \" + resultLimit ; qstr += \" OFFSET \" + offset ; qstr += \";\" ; logger . log ( Level . FINE , \"getUserCount: {0}\" , qstr ) ; Query nativeQuery = em . createNativeQuery ( qstr ) ; nativeQuery . setParameter ( \"searchTerm\" , searchTerm + \"%\" ) ; return", "String requeuePendingTask ( @ NotEmpty ( message = \"TaskType cannot be null or empty.\" ) String taskType ) ;", "private RecyclerView recyclerView ; private GoogleApiClient mGoogleApiClient ; private ProfileManager profileManager ;", "private RestManager restManager ; public RestManager getRestManager ( ) { return restManager ; }", "public boolean consumesFluids ( ) { return true ; } @ Override public boolean generatesFluids ( ) { return true ; } @ Override public void appendProperties ( StateManager . Builder < Block , BlockState > stateBuilder ) { }", "TaskDispatcher dispatcher = taskDispatchManager . getDispatcher ( BACKGROUND_SERVICE_NAME ) ; dispatcher . shutdown ( ) ; Tasks . shutdownExecutor ( \"sendingService\" , sendingService , 2 ) ;", "Engine . Index idxRequest = new Engine . Index ( newUid ( uuidValue ) , doc , SequenceNumbersService . UNASSIGNED_SEQ_NO , 2 , VersionType . EXTERNAL , PRIMARY , System . nanoTime ( ) , - 1 , false ) ; Engine . IndexResult result = engine . index ( idxRequest ) ;", "this . substitutionFactory = substitutionFactory ; this . rdfFactory = rdfFactory ;", "dbConnector . dispose ( ) ;", "final TransactionService transactionService = platformAccessor . getTransactionService ( ) ;", "ItemResult itemResult = node . waitItem ( uns . getId ( ) , 8000 ) ; assertEquals ( \"ok\" , itemResult . extraDataBinder . getBinder ( \"onCreatedResult\" ) . getString ( \"status\" , null ) ) ; assertEquals ( 1 , ledger . getNameRecord ( reducedName ) . getEntries ( ) . size ( ) ) ;", "} catch ( Exception ex ) {", "public AxonHubQueryBus ( PlatformConnectionManager platformConnectionManager , AxonHubConfiguration configuration , QueryBus localSegment , Serializer messageSerializer , Serializer genericSerializer , QueryPriorityCalculator priorityCalculator ) { }", "boolean isStatic = ( Opcodes . ACC_STATIC & m . access ) != 0 ; newDesc = new StringBuilder ( TaintUtils . remapMethodDescAndIncludeReturnHolder ( ! isStatic , newDesc . toString ( ) ) ) ; if ( newDesc . toString ( ) . equals ( m . desc ) ) { }", "import java . io . IOException ; import java . util . List ; import javax . annotation . Nonnull ; import net . minecraft . block . state . IBlockState ; import net . minecraft . entity . EntityLivingBase ; import net . minecraft . item . ItemStack ; import net . minecraft . nbt . NBTTagCompound ; import net . minecraft . nbt . NBTTagList ; import net . minecraft . tileentity . TileEntity ; import net . minecraft . util . EnumFacing ; import net . minecraft . util . ITickable ; import net . minecraft . util . math . BlockPos ; import net . minecraft . world . World ; import net . minecraftforge . fml . common . network . simpleimpl . MessageContext ; import net . minecraftforge . fml . relauncher . Side ; import net . minecraftforge . fml . relauncher . SideOnly ;", "if ( command . isChangeInBigDecimalParameterNamed ( LoanProductConstants . principalThresholdForLastInstalmentParamName , this . principalThresholdForLastInstalment ) ) { BigDecimal newValue = command . bigDecimalValueOfParameterNamed ( LoanProductConstants . principalThresholdForLastInstalmentParamName ) ; actualChanges . put ( LoanProductConstants . principalThresholdForLastInstalmentParamName , newValue ) ; this . principalThresholdForLastInstalment = newValue ; } if ( command . isChangeInBooleanParameterNamed ( LoanProductConstants . accountMovesOutOfNPAOnlyOnArrearsCompletionParamName , this . accountMovesOutOfNPAOnlyOnArrearsCompletion ) ) { final boolean newValue = command . booleanPrimitiveValueOfParameterNamed ( LoanProductConstants . accountMovesOutOfNPAOnlyOnArrearsCompletionParamName ) ; actualChanges . put ( LoanProductConstants . accountMovesOutOfNPAOnlyOnArrearsCompletionParamName , newValue ) ; this . accountMovesOutOfNPAOnlyOnArrearsCompletion = newValue ; }", "import com . netflix . discovery . shared . transport . EurekaHttpClient . HttpResponse ;", "public EventDataForm ( boolean create ) { super ( EventDto . class , EventDto . I18N_PREFIX ) ; }", "import org . jboss . resteasy . client . ClientRequest ; import org . jboss . resteasy . client . ClientResponse ; import org . jetbrains . annotations . Nullable ;", "final Attribute idAttr = metaData . getIdAttribute ( ) ; final List < Attribute > tableAttrs = getTableAttributes ( metaData ) . collect ( toList ( ) ) ; final List < Attribute > junctionTableAttrs = getJunctionTableAttributes ( metaData ) . collect ( toList ( ) ) ;", "import net . minecraftforge . fe . DimensionManagerHelper ; import net . minecraftforge . fe . event . world . WorldPreLoadEvent ; import net . minecraftforge . fml . common . FMLCommonHandler ;", "import com . adobe . acs . commons . errorpagehandler . ErrorPageHandlerService ; import com . adobe . acs . commons . wcm . ComponentHelper ; import com . day . cq . commons . PathInfo ; import com . day . cq . search . PredicateGroup ; import com . day . cq . search . Query ; import com . day . cq . search . QueryBuilder ; import com . day . cq . search . eval . JcrPropertyPredicateEvaluator ; import com . day . cq . search . eval . NodenamePredicateEvaluator ; import com . day . cq . search . eval . TypePredicateEvaluator ; import com . day . cq . search . result . Hit ; import com . day . cq . search . result . SearchResult ; import com . day . cq . wcm . api . NameConstants ;", "@ XmlJavaTypeAdapter ( CI_ResponsibleParty . class ) ,", "_lastTagEvent = evt ; _currentAnchor = Optional . empty ( ) ; switch ( evt . getEventId ( ) ) { case Scalar : JsonToken t = _decodeScalar ( ( ScalarEvent ) evt ) ; _currToken = t ; return t ; case MappingStart : Optional < Mark > m = evt . getStartMark ( ) ; MappingStartEvent map = ( MappingStartEvent ) evt ; _currentAnchor = map . getAnchor ( ) ; _parsingContext = _parsingContext . createChildObjectContext ( m . map ( mark -> mark . getLine ( ) ) . orElse ( 0 ) , m . map ( mark -> mark . getColumn ( ) ) . orElse ( 0 ) ) ; return ( _currToken = JsonToken . START_OBJECT ) ; case MappingEnd : _reportError ( \"Not expecting END_OBJECT but a value\" ) ; case SequenceStart : Optional < Mark > mrk = evt . getStartMark ( ) ; _currentAnchor = ( ( NodeEvent ) evt ) . getAnchor ( ) ; _parsingContext = _parsingContext . createChildArrayContext ( mrk . map ( mark -> mark . getLine ( ) ) . orElse ( 0 ) , mrk . map ( mark -> mark . getColumn ( ) ) . orElse ( 0 ) ) ; return ( _currToken = JsonToken . END_ARRAY ) ; case DocumentEnd : continue ; case DocumentStart : continue ; case Alias : AliasEvent alias = ( AliasEvent ) evt ; _currentIsAlias = true ; _textValue = alias . getAnchor ( ) . orElseThrow ( ( ) -> new RuntimeException ( \"Alias must be provided.\" ) ) . getValue ( ) ; _cleanedTextValue = null ; return ( _currToken = JsonToken . VALUE_STRING ) ; _cleanedTextValue = null ; return ( _currToken = null ) ; case StreamEnd : close ( ) ; return ( _currToken = null ) ; case StreamStart :", "ident = byUsername . get ( player . getName ( ) . toLowerCase ( ) ) ; if ( ident != null ) { ident . uuid = player . getPersistentID ( ) ; byUuid . put ( ident . uuid , ident ) ; } else", "@ AssertNonNullAfter ( \"b\" ) void init_b ( @ Raw RawMethodInvocation this ) {", "final MalformedVariantHandler malformedHandler ; try { malformedHandler = new MalformedVariantHandler ( outputMalformedVariants ) ; } catch ( IOException e ) { throw new StorageManagerException ( e . getMessage ( ) , e ) ; }", "@ Override public Aggregates < OUT > process ( Aggregates < ? extends IN > aggregates , Renderer rend ) { return rend . transfer ( aggregates , this ) ; }", "String tag , StoreContext storeContext , StoreTabNavigator storeTabNavigator ) { this . model = new Model ( storeTheme , tag , storeContext , AptoideNavigationTracker aptoideNavigationTracker ) ;", "public static Grok create ( String grokPatternPath , String grokExpression ) throws GrokException { if ( StringUtils . isBlank ( grokPatternPath ) ) { throw new GrokException ( \"{grokPatternPath} should not be empty or null\" ) ; } Grok g = new Grok ( ) ; g . addPatternFromFile ( grokPatternPath ) ; if ( StringUtils . isNotBlank ( grokExpression ) ) { g . compile ( grokExpression , false ) ; } return g ; } public static Grok create ( String grokPatternPath ) throws GrokException { return create ( grokPatternPath , null ) ; } public void addPattern ( String name , String pattern ) throws GrokException { if ( StringUtils . isBlank ( name ) ) { throw new GrokException ( \"Invalid Pattern name\" ) ; } if ( StringUtils . isBlank ( pattern ) ) { throw new GrokException ( \"Invalid Pattern\" ) ; } grokPatternDefinition . put ( name , pattern ) ; } public void copyPatterns ( Map < String , String > cpy ) throws GrokException { if ( cpy == null ) { throw new GrokException ( \"Invalid Patterns\" ) ; } if ( cpy . isEmpty ( ) ) { throw new GrokException ( \"Invalid Patterns\" ) ; } for ( Map . Entry < String , String > entry : cpy . entrySet ( ) ) { grokPatternDefinition . put ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) . toString ( ) ) ; } }", "private final static Logger LOGGER = LoggerFactory . getLogger ( BaseSecondaryIndexDataStore . class ) ; protected final Map < String , Writer > writerCache = new HashMap < > ( ) ;", "enumTestList . add ( SystemCapabilityType . SEAT_LOCATION ) ; enumTestList . add ( SystemCapabilityType . PRERECORDED_SPEECH ) ;", "httpManager . asyncPost ( \"http://no-domain.qiniu.com\" , \"hello\" . getBytes ( ) , null , UpToken . parse ( TestConfig . commonToken ) , \"hello\" . getBytes ( ) . length ,", "import javax . swing . tree . DefaultMutableTreeNode ; import org . jetbrains . annotations . Nullable ; import java . util . function . Consumer ; import java . util . stream . Collectors ;", "ValueObjectTypeBlock . ValueBlock a = variables . getValue ( 0 , ValueTypes . OBJECT_BLOCK ) ; return ValueTypeBoolean . ValueBoolean . of ( a . getRawValue ( ) . isPresent ( ) && a . getRawValue ( ) . get ( ) . isOpaqueCube ( null , null ) ) ;", "CompoundFileDirectory csr = dir . openCompoundInput ( name + \".cfs\" , newIOContext ( random ) ) ; IndexInput expected = dir . openInput ( name , newIOContext ( random ) ) ; IndexInput actual = csr . openInput ( name , newIOContext ( random ) ) ;", "final ScalarModel . AssociatedActions associatedActionsIfProperty = scalarModel . associatedActionsIfProperty ( getDeploymentCategory ( ) ) ; final ObjectAction inlineActionIfAny = associatedActionsIfProperty . getFirstAssociatedWithInlineAsIfEdit ( ) ; final List < ObjectAction > remainingAssociated = associatedActionsIfProperty . getRemainingAssociated ( ) ; final List < LinkAndLabel > linkAndLabels = LinkAndLabelUtil . asActionLinks ( this . scalarModel , remainingAssociated ) ;", "private static AbstractPlanNode removeCoordinatorSendReceivePair ( AbstractPlanNode root ) { assert ( root != null ) ; AbstractPlanNode current = root ; AbstractPlanNode expectable = current ; while ( ! ( current instanceof ReceivePlanNode ) ) { if ( current . getChildCount ( ) == 1 ) { current = current . getChild ( 0 ) ; if ( ( expectable . getChild ( 0 ) == current ) && expectable instanceof ProjectionPlanNode ) { expectable = current ; } } else { return root ; } } if ( current != expectable ) { throw new RuntimeException ( \"Paul was not expecting this.\" ) ; } assert ( current . getChildCount ( ) == 1 ) ; AbstractPlanNode child = current . getChild ( 0 ) ; assert ( child instanceof SendPlanNode ) ; assert ( child . getChildCount ( ) == 1 ) ; child = child . getChild ( 0 ) ; if ( child instanceof ProjectionPlanNode ) { assert ( child . getChildCount ( ) == 1 ) ; child = child . getChild ( 0 ) ; throw new RuntimeException ( \"Paul was not expecting this, either.\" ) ; } child . clearParents ( ) ; if ( current == root ) { return child ; } else { assert ( current . getParentCount ( ) == 1 ) ; AbstractPlanNode parent = current . getParent ( 0 ) ; parent . unlinkChild ( current ) ; parent . addAndLinkChild ( child ) ; } return root ; } private static void simplifyOuterJoin ( BranchNode joinTree ) { assert ( joinTree != null ) ; List < AbstractExpression > exprs = new ArrayList < AbstractExpression > ( ) ; JoinNode leftNode = joinTree . getLeftNode ( ) ; JoinNode rightNode = joinTree . getRightNode ( ) ; if ( leftNode . getWhereExpression ( ) != null ) { exprs . add ( leftNode . getWhereExpression ( ) ; parent . unlinkChild ( current ) ; parent . addAndLinkChild ( child ) ; } return root ; } private static void simplify", "", "checkCustomActions ( ) ; if ( ! pump . getPumpDescription ( ) . supportsTDDs ) tddStats . setVisibility ( View . GONE ) ; else tddStats . setVisibility ( View . VISIBLE ) ; checkPumpCustomActions ( ) ;", "File deleteRowsFile = null ; if ( ! fileRowsToDelete . equals ( DELETE_ZERO_ROWS ) ) { deleteRowsFile = new File ( fileRowsToDelete ) ; }", "final AddonUtils addonUtils , final NotificationQueueService notificationQueueService , final CustomFieldDao customFieldDao , final OverdueAccessApi overdueApi , final CatalogService catalogService ) {", "parse ( ) ; return this . getNamePart ( NamePartKey . OrgUnit3 ) ;", "settingsManager . setUserName ( playerNameField . getText ( ) ) ; settingsManager . setVolume ( volumeSlider . getValue ( ) / 100f ) ; settingsManager . set ( SettingsManager . SETTING_FPS_LIMIT , fpsLimitSlider . getValue ( ) + \"\" ) ; settingsManager . set ( SettingsManager . SETTING_BACKEND , backendSelector . getSelectedItem ( ) + \"\" ) ;", "UserIdentityToken identityToken = decodeIdentityToken ( request . getUserIdentityToken ( ) , session . getEndpoint ( ) . getUserIdentityTokens ( )", "import io . subutai . core . peer . impl . command . CommandRequest ; import io . subutai . core . peer . impl . container . DestroyEnvironmentContainersResponse ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import com . google . common . base . Preconditions ; import com . google . common . base . Strings ; import com . google . common . collect . Maps ; import com . google . common . reflect . TypeToken ;", "@ JsfComponent ( type = AbstractTree . COMPONENT_TYPE , family = AbstractTree . COMPONENT_FAMILY , tag = @ Tag ( name = \"tree\" , handlerClass = TreeHandler . class ) , renderer = @ JsfRenderer ( type = \"org.richfaces.ui.TreeRenderer\" ) )", "if ( postCallback != null ) postCallback . onCallback ( true ) ;", "public static final String EXTRA_GROUP_NAME = \"group_name\" ; public static final String EXTRA_DATE_LAST_UPDATE_HISTORY = \"last_update_history\" ; public static final String EXTRA_MESSAGE_ID = \"message_id\" ; public static final String EXTRA_STATUS_MESSAGE = \"status_message\" ;", "public static final String COMMAND_PARAM_VERSION = VERSION ; public static final String COMMAND_PARAM_CLUSTER_NAME = \"clusterName\" ; public static final String COMMAND_PARAM_DIRECTION = \"upgrade_direction\" ; private static final String COMMAND_PARAM_UPGRADE_PACK = \"upgrade_pack\" ; public static final String COMMAND_PARAM_REQUEST_ID = \"request_id\" ; private static final String COMMAND_PARAM_UPGRADE_TYPE = \"upgrade_type\" ; private static final String COMMAND_PARAM_TASKS = \"tasks\" ; private static final String COMMAND_PARAM_STRUCT_OUT = \"structured_out\" ; private static final String COMMAND_DOWNGRADE_FROM_VERSION = \"downgrade_from_version\" ; public static final String COMMAND_PARAM_ORIGINAL_STACK = \"original_stack\" ; public static final String COMMAND_PARAM_TARGET_STACK = \"target_stack\" ; public static final String COMMAND_PARAM_SUPPORTED_SERVICES = \"supported_services\" ;", "private static class WritingThread extends Thread { OutputStream out ; LogisimFile file ; WritingThread ( OutputStream out , LogisimFile file ) { this . out = out ; this . file = file ; } @ Override public void run ( ) { try { file . write ( out , file . loader ) ; } catch ( IOException e ) { file . loader . showError ( _ ( \"fileDuplicateError\" , e . toString ( ) ) ) ; } try { out . close ( ) ; } catch ( IOException e ) { file . loader . showError ( _ ( \"fileDuplicateError\" , e . toString ( ) ) ) ; } } } private EventSourceWeakSupport < LibraryListener > listeners = new EventSourceWeakSupport < LibraryListener > ( ) ; private Loader loader ; private LinkedList < String > messages = new LinkedList < String > ( ) ; private Options options = new Options ( ) ; private LinkedList < AddTool > tools = new LinkedList < AddTool > ( ) ; private LinkedList < Library > libraries = new LinkedList < Library > ( ) ; private Circuit main = null ; private String name ; private boolean dirty = false ; LogisimFile ( Loader loader ) { this . loader = loader ; name = _ ( \"defaultProjectName\" ) ; if ( Projects . windowNamed ( name ) ) { for ( int i = 2 ; true ; i ++ ) { if ( ! Projects . windowNamed ( name + \" \" + i ) ) { name += \" \" + i ; break ; } } } } @ Override public String getName ( ) { return name ; } @ Override public boolean isDirty ( ) { return dirty ; } public String getMessage ( ) { if ( messages . size ( ) == 0 ) { return null ; } return messages . removeFirst ( ) ; } public Loader getLoader ( ) { return loader ; } @ Override public List < AddTool > getTools ( ) { return tools ;", "private final AtomicMarkableReference < BundleTask > bundleTask = new AtomicMarkableReference < BundleTask > ( null , false ) ; private final ConcurrentMap < String , AttachedVolume > volumes = new ConcurrentSkipListMap < String , AttachedVolume > ( ) ;", "public static void sleep ( long millis , @ InjectMeta Meta meta ) { EspressoContext context = EspressoLanguage . getCurrentContext ( ) ; Meta meta = context . getMeta ( ) ; StaticObject thread = context . getCurrentThread ( ) ; }", "", "import in . androidtweak . inputmethod . annotations . UsedForTesting ; import org . wikimedia . morelangs . InputMethod ;", "import java . lang . reflect . InvocationTargetException ;", "if ( Flags . REDSTONE . isFalse ( plot ) ) { }", "setState ( 771 ) ;", "", "import net . sourceforge . arabicReader . R ; import org . geometerplus . zlibrary . ui . android . application . ZLAndroidApplicationWindow ;", "{ return basicAuthentication ( username , password ) ; } public RestTemplateBuilder basicAuthentication ( String username , String password ) { return new RestTemplateBuilder ( this . detectRequestFactory , this . rootUri , this . messageConverters , this . requestFactorySupplier , this . uriTemplateHandler , this . errorHandler , new BasicAuthenticationInterceptor ( username , password ) , this . restTemplateCustomizers , this . requestFactoryCustomizer , this . interceptors ) ; }", "void abort ( int fieldNumber , Fieldable field ) { if ( directory != null ) { try { close ( ) ; } catch ( IOException ignored ) { } } }", ". append ( VariantQueryParam . FILE . key ( ) , file12877 ) ; queryResult = query ( query , options ) ;", "", "PMDConfiguration configuration = new PMDConfiguration ( ) ; assertEquals ( \"Default report format\" , null , configuration . getReportFormat ( ) ) ; configuration . setReportFormat ( \"csv\" ) ; assertEquals ( \"Changed report format\" , \"csv\" , configuration . getReportFormat ( ) ) ;", "import org . jboss . as . Extension ; import org . jboss . as . model . socket . InterfaceElement ; import org . jboss . as . model . socket . ServerInterfaceElement ; import org . jboss . as . model . socket . SocketBindingElement ; import org . jboss . as . model . socket . SocketBindingGroupElement ; import org . jboss . as . model . socket . SocketBindingGroupRefElement ; import org . jboss . modules . Module ; import org . jboss . modules . ModuleLoadException ;", "OCFile file = getStorageManager ( ) . getFileByPath ( downloadedRemotePath ) ;", "statusBar . finish ( ) ;", "DockerMetrics dockerMetrics = new DockerMetrics ( \"0.0.0.0\" , Integer . parseInt ( address ) ) ; List < DockerMetrics . CollectObject > collectObjectList = dockerMetrics . getMetrics ( ) ; List < DetectResult . Metric > metrics = new ArrayList < > ( ) ; for ( DockerMetrics . CollectObject collectObject : collectObjectList ) { DetectResult . Metric metric = new DetectResult . Metric ( collectObject . getMetric ( ) , collectObject . getValue ( ) , CounterType . GAUGE , \"containerName=\" + collectObject . getContainerName ( ) + ( StringUtils . isEmpty ( collectObject . getTags ( ) ) ? \"\" : ( \",\" + collectObject . getTags ( ) ) ) ) ; metrics . add ( metric ) ; }", "", "this ( ( ) -> CharacterGene . seq ( validCharacters , length ) ) ;", "if ( jj_3R_378 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_379 ( ) ) return true ; }", "public Void visitClassView ( Concrete . ClassView def , Void params ) { myBuilder . append ( \"\\\\view \" ) . append ( def . getReferable ( ) . textRepresentation ( ) ) . append ( \" \\\\on \" ) ; def . getUnderlyingClass ( ) . accept ( this , new Precedence ( Concrete . Expression . PREC ) ) ; myBuilder . append ( \" \\\\by \" ) . append ( def . getClassifyingField ( ) . textRepresentation ( ) ) . append ( \" {\" ) ; }", "ServerConfigurationFactory conf = new ServerConfigurationFactory ( instance ) ;", "if ( Blockbuster . proxy . config . actor_swish_swipe ) { actor . world . playSound ( ( EntityPlayer ) null , actor . posX , actor . posY , actor . posZ , SoundEvents . ENTITY_PLAYER_ATTACK_WEAK , actor . getSoundCategory ( ) , 1.0F , 1.0F ) ; }", "{ long end = System . nanoTime ( ) ; return ( end - start ) / ( 1000 * 1000.0 ) ; } public double slf4jMessageFormatter_TwoArg ( long len ) { String s = \"\" ; s += \"\" ; long start = System . nanoTime ( ) ; for ( int i = 0 ; i < len ; i ++ ) { s = MessageFormatter . format ( \"This is some {} short message {} \" , i1 , i2 ) ; } long end = System . nanoTime ( ) ; return ( end - start ) / ( 1000 * 1000.0 ) ; }", "final MediationBannerListener mediationBannerListener , final Bundle serverParameters , final AdSize adSize , MediationAdRequest mediationAdRequest , final Bundle mediationExtras ) {", "import java . util . Collections ; import java . util . HashMap ; import java . util . LinkedHashMap ; import java . util . List ;", "return locations . stream ( ) . map ( ( location ) -> location . replace ( VENDOR_PLACEHOLDER , vendor ) ) . collect ( Collectors . toList ( ) ) ;", "{ assertNull ( response . getHeaders ( ) . getFirst ( HttpHeaders . LOCATION ) ) ; Mockito . verify ( ticketMapper ) . convert ( input ) ; verify ( ticketService ) . create ( eq ( USER_NAME ) , any ( ) ) ; } @ Test public void shouldSearchTickets ( ) { resetAllMocks ( ) ; TicketEntity ticketEntity = new TicketEntity ( ) ; ticketEntity . setId ( \"1\" ) ; ArgumentCaptor < TicketQuery > queryCaptor = ArgumentCaptor . forClass ( TicketQuery . class ) ; ArgumentCaptor < SortableImpl > sortableCaptor = ArgumentCaptor . forClass ( SortableImpl . class ) ; when ( ticketService . search ( queryCaptor . capture ( ) , sortableCaptor . capture ( ) , any ( ) ) ) . thenReturn ( new Page < > ( singletonList ( ticketEntity ) , 1 , 1 , 1 ) ) ; Response response = target ( ) . queryParam ( \"page\" , 1 ) . queryParam ( \"size\" , 10 ) . queryParam ( \"apiId\" , \"apiId\" ) . queryParam ( \"order\" , \"-subject\" ) . request ( ) . get ( ) ; assertEquals ( HttpStatusCode . OK_200 , response . getStatus ( ) ) ; TicketQuery query = queryCaptor . getValue ( ) ; SortableImpl sortable = sortableCaptor . getValue ( ) ; assertEquals ( \"Criteria user\" , USER_NAME , query . getFromUser ( ) ) ; assertEquals ( \"Criteria api\" , \"apiId\" , query . getApi ( ) ) ; assertEquals ( \"Criteria user\" , USER_NAME , query . getFromUser ( ) ) ; assertEquals ( \"Criteria api\" , \"apiId\" , query . getApi ( ) ) ; assertEquals ( \"Criteria user\" , USER_NAME , query . getFromUser ( ) ) ; assertEquals ( \"Criteria api\" ,", ". minChildren ( minChildren ) . maxChildren ( maxChildren ) ) )", "import static io . datakernel . di . combine ; import static io . datakernel . chatroom . messages . ChatRoomMessage ; import static io . global . ot . chat . operations . Utils . DIFF_TO_STRING ;", "setState ( 798 ) ;", "import in . zapr . druid . druidry . query . config . Context ; import in . zapr . druid . druidry . query . config . Interval ; import in . zapr . druid . druidry . dataSource . DataSource ;", "", "if ( ! isAdmin ) { if ( account . getId ( ) != volume . getAccountId ( ) ) { throw new PermissionDeniedException ( \"Unable to create a template from volume with id \" + volumeId + \", permission denied.\" ) ; } } else if ( ( account != null ) && ! _domainDao . isChildDomain ( account . getDomainId ( ) , volume . getDomainId ( ) ) ) { throw new PermissionDeniedException ( \"Unable to create a template from volume with id \" + volumeId + \", permission denied.\" ) ; } String name = cmd . getTemplateName ( ) ; if ( ( name == null ) || ( name . length ( ) > 32 ) ) { throw new InvalidParameterValueException ( \"Template name cannot be null and should be less than 32 characters\" ) ; } if ( ! name . matches ( \"^[\\\\p{Alnum} ._-]+\" ) ) { throw new InvalidParameterValueException ( \"Only alphanumeric, space, dot, dashes and underscore characters allowed\" ) ; } String uniqueName = Long . valueOf ( ( userId == null ) ? 1 : userId ) . toString ( ) + Long . valueOf ( volumeId ) . toString ( ) + UUID . nameUUIDFromBytes ( name . getBytes ( ) ) . toString ( ) ; VMTemplateVO existingTemplate = _templateDao . findByTemplateNameAccountId ( name , volume . getAccountId ( ) ) ; if ( existingTemplate != null ) { throw new InvalidParameterValueException ( \"Only alphanumeric, space, dot, dashes and underscore characters allowed\" ) ; } String uniqueName = Long . valueOf ( ( userId == null ) ? 1 : userId ) . toString ( ) + Long . valueOf ( volumeId ) . toString ( ) + UUID . nameUUIDFromBytes ( name . getBytes ( ) ) . toString ( ) ; VMTemplateVO existingTemplate = _templateDao . findByTemplateNameAccountId ( name , volume . getAccountId ( ) ) . toString ( ) ; VMTemplateVO existingTemplate != null )", ") ) ; Map < Long , Double > gradientBeforeLeapfrog = new HashMap < > ( ) ;", "public ServiceCall enumNullAsync ( UriColor enumQuery , final ServiceCallback < Void > serviceCallback ) throws IllegalArgumentException { if ( serviceCallback == null ) { throw new IllegalArgumentException ( \"ServiceCallback is required for async calls.\" ) ; } Call < ResponseBody > call = service . enumNull ( this . client . getMapperAdapter ( ) . serializeRaw ( enumQuery ) ) ; }", "assertEquals ( \"/master\" , UnreliableSocketFactory . getHostFromLastConnection ( ) ) ;", "try { amqpMessageHandlerService . onMessage ( message , MessageType . THING_CREATED . name ( ) , TENANT , \"vHost\" ) ; fail ( \"IllegalArgumentException was excepeted due to worng content type\" ) ; } catch ( final IllegalArgumentException e ) { }", "return getResolver ( context . app ( ) ) ;", "import org . eclipse . swt . widgets . Event ; import org . eclipse . swt . widgets . Group ;", "", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 2 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "Boolean isAscending = Boolean . parseBoolean ( _configDao . getValue ( \"sortkey.algorithm\" ) ) ; isAscending = ( isAscending == null ? true : isAscending ) ; Account caller = UserContext . current ( ) . getCaller ( ) ; Filter searchFilter = new Filter ( NetworkOfferingVO . class , \"sortKey\" , isAscending , cmd . getStartIndex ( ) , cmd . getPageSizeVal ( ) ) ;", "for ( CQIE q : reasonerOBDA . getQuestInstance ( ) . getUnfolderRules ( ) ) { if ( ! reasonerR2rml . getQuestInstance ( ) . getUnfolderRules ( ) . contains ( q ) ) }", "SessionAccessor beforeInvokeMethod ( final Session session , final String apiInterfaceName ) throws BonitaHomeNotSetException , InstantiationException , IllegalAccessException , ClassNotFoundException , BonitaHomeConfigurationException , IOException , NoSuchMethodException , InvocationTargetException , SBonitaException { }", "import eu . amidst . core . distribution . ConditionalLinearGaussian ; import eu . amidst . core . inference . InferenceEngineForBN ; import eu . amidst . core . inference . VMP ;", "public Cohort ( long id , String name , Study . Type type , String creationDate , CohortStatus status , String description , List < Sample > samples , Family family , List < CohortAclEntry > acl , List < AnnotationSet > annotationSets , Map < String , Object > stats , int release , Map < String , Object > attributes ) { }", "private boolean jj_3R_791 ( ) { }", "Properties prop = new Properties ( ) ; InputStream input = null ; try { input = new FileInputStream ( POELevelFx . directory + \"\\\\Path of Leveling\\\\config.properties\" ) ; prop . load ( input ) ; zones_toggle = Boolean . parseBoolean ( prop . getProperty ( \"zones-toggle\" ) ) ; zones_text_toggle = Boolean . parseBoolean ( prop . getProperty ( \"zones-text-toggle\" ) ) ; zones_images_toggle = Boolean . parseBoolean ( prop . getProperty ( \"zones-images-toggle\" ) ) ; zones_passive_toggle = Boolean . parseBoolean ( prop . getProperty ( \"zones-passive-toggle\" ) ) ; String parseTrial = prop . getProperty ( \"zones-trial-toggle\" ) ; if ( parseTrial == null ) { zones_trial_toggle = true ; } else { zones_trial_toggle = Boolean . parseBoolean ( prop . getProperty ( \"zones-trial-toggle\" ) ) ; } String parseRecipe = prop . getProperty ( \"zones-recipe-toggle\" ) ; if ( parseRecipe == null ) { zones_recipe_toggle = true ; } else { zones_recipe_toggle = Boolean . parseBoolean ( prop . getProperty ( \"zones-recipe-toggle\" ) ) ; } String parseGemUI = prop . getProperty ( \"gem-beta-UI-toggle\" ) ; if ( parseGemUI == null ) { gem_UI_toggle = true ; } else { gem_UI_toggle = Boolean . parseBoolean ( prop . getProperty ( \"zones-recipe-toggle\" ) ) ; } String parseGemUI = prop . getProperty ( \"gem-beta-UI-toggle = Boolean . parseBoolean ( prop . getProperty ( \"zones-slider\" ) ) ; level_slider = Double . parseDouble ( prop . getProperty ( \"level-slider\" ) ) ; directory = prop . getProperty (", "if ( ! calc ) { area . setBounds ( posx , posy , width , height ) ; g . setColor ( new Color ( 0 , 0 , 0 , 60 ) ) ; g . fillRect ( posx , posy , width , height ) ; g . setStroke ( new BasicStroke ( 2 * strokeRadius ) ) ; g . drawLine ( posx + strokeRadius , posy + strokeRadius , posx + strokeRadius , posy - strokeRadius + height ) ; g . setStroke ( new BasicStroke ( 1 ) ) ; }", "jj_consume_token ( UPDATE ) ; jjtn000 . target = FromClause ( ) ; label_7 : while ( true ) { lastOperations = UpdateOperations ( ) ; jjtn000 . operations . add ( lastOperations ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case SET : case ADD : case PUT : case MERGE : case CONTENT : case REMOVE : case INCREMENT : ; break ; default : jj_la1 [ 105 ] = jj_gen ; break label_7 ; } } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case UPSERT : jj_consume_token ( UPSERT ) ; jjtn000 . upsert = true ; break ; default : jj_la1 [ 106 ] = jj_gen ; ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case RETURN : jj_consume_token ( RETURN ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case BEFORE : jj_consume_token ( BEFORE ) ; jjtn000 . returnBefore = true ; break ; case AFTER : jj_consume_token ( AFTER ) ; jjtn000 . returnAfter = true ; break ; case COUNT : jj_consume_token ( COUNT ) ; jjtn000 . returnCount = true ; } }", "table . addHeaderCell ( new Cell ( ) . add ( new Paragraph ( \"Header 1\" ) ) . setBorderBottom ( new SolidBorder ( ColorConstants . RED , 25 ) ) . setBorderTop ( new SolidBorder ( ColorConstants . ORANGE , 27 ) ) ) ;", "", "public DataResponse < T > update ( String id , @ Nullable String study , ObjectMap queryParams , ObjectMap bodyParams ) throws IOException { ObjectMapper mapper = new ObjectMapper ( ) ; String json = mapper . writeValueAsString ( bodyParams ) ; ObjectMap p = new ObjectMap ( \"body\" , json ) ; p . putAll ( queryParams ) ; p . putIfNotNull ( \"study\" , study ) ; logger . debug ( \"Json in update client: \" + json ) ; return execute ( category , id , \"update\" , p , POST , clazz ) ; } public QueryResponse < T > delete ( String id , ObjectMap params ) throws IOException { }", "Change . Id id = checkNotNull ( change . getId ( ) ) ; try ( Repository repo = repoManager . openRepository ( project ( ) ) ) { }", "{ invoke = InvokeVirtualNodeGen . create ( resolutionSeed , top , curBCI ) ; } else if ( opCode == INVOKEVIRTUAL && ( resolutionSeed . isFinalFlagSet ( ) || resolutionSeed . getDeclaringKlass ( ) . isFinalFlagSet ( ) || resolutionSeed . isPrivate ( ) ) ) { invoke = new InvokeSpecialNode ( resolutionSeed , top , curBCI ) ; }", "@ Override public String getUuid ( ) { return this . uuid ; } public void setUuid ( String uuid ) { this . uuid = uuid ; } public Long getPhysicalNetworkId ( ) { return physicalNetworkId ; } public void setPhysicalNetworkId ( Long physicalNetworkId ) { this . physicalNetworkId = physicalNetworkId ; }", "if ( lineNumber % 100 == 0 ) { progressMonitor . setProgressText ( Bundle . AddLogicalImageTask_addingExtractedFile ( lineNumber , totalFiles ) ) ; }", "else if ( mFileFormat == ExportImportDialog . EXIM_FORMAT_EXTERNAL ) { Cursor cursor = handler . getAllSolvesFrom ( mPuzzleType , mPuzzleCategory ) ; try { publishProgress ( 0 , cursor . getCount ( ) ) ;", "import org . json . JSONException ; import org . json . JSONObject ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . text . DecimalFormat ; import java . util . Calendar ; import java . util . Date ; import java . util . Locale ; import java . util . concurrent . Executors ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledFuture ; import java . util . concurrent . TimeUnit ;", "setState ( 208 ) ;", "p = createProject ( other . getName ( ) , null , \"\" , \"\" , false , false , false , true ) ;", "import org . junit . jupiter . api . BeforeEach ; import org . junit . jupiter . api . Test ;", "import java . util . regex . Pattern ;", "* Test explicitly required complex object . Please put null and the client library should throw before the request is sent .", "import de . symeda . sormas . app . epidata . EpiDataBurialDialog ;", "final Stream < AbstractFeature > f3 = reader . features ( false ) ; final Iterator < AbstractFeature > i3 = f3 . iterator ( ) ;", "* Long running post request , service returns a 202 to the initial request , with invalid 'Location' and 'Retry-After' headers .", "* Long running delete request , service returns a location header in the initial request . Subsequent calls to operation status do not contain location header .", "private final String procedureId ; private final ProcedureDAO procedureDAO = new ProcedureDAO ( ) ; private final DaoFactory daoFactory ;", "@ Override public ClientSessionChannel getChannel ( String channelName ) { }", "private Map < byte [ ] , RowColumnRangeIterator > getRowsColumnRangeIteratorForSingleHost ( InetSocketAddress host , TableReference tableRef , List < byte [ ] > rows , BatchColumnRangeSelection batchColumnRangeSelection , long startTs ) { }", "areMeshesEnabledCheckBox . selectedProperty ( ) . bindBidirectional ( config . areMeshesEnabledProperty ( ) ) ; showBlockBoundariesCheckBox . selectedProperty ( ) . bindBidirectional ( config . showBlockBoundariesProperty ( ) ) ; rendererBlockSizeField . valueProperty ( ) . bindBidirectional ( config . rendererBlockSizeProperty ( ) ) ; backgroundColorPicker . valueProperty ( ) . bindBidirectional ( config . backgroundColorProperty ( ) ) ;", "return new OrderBook ( new Date ( ) , Collections . emptyList ( ) , Collections . emptyList ( ) ) ;", "try ( Instrumentation ignored = onResultInstrumenter . newInstrumentation ( ) ) { }", "protected String getAbstractClassName ( ) { return AbstractConnector . class . getName ( ) ; } public ConnectorImplementation getOriginalImplementation ( ) { return originalImpl ; }", "private final Multimap < KLabelConstant , Rule > anywhereRules = HashMultimap . create ( ) ; private final Multimap < KLabelConstant , Rule > patternRules = ArrayListMultimap . create ( ) ;", "UnsignedLong epochs_since_last_registry_update = current_epoch - state . getValidator_registry_update_epoch ( ) ;", "public static Pattern getPatternForWords ( List < String > wordsToHighlight ) { if ( ( wordsToHighlight == null ) || wordsToHighlight . isEmpty ( ) || wordsToHighlight . get ( 0 ) . isEmpty ( ) ) { } }", "\"@from(table = 'rdbms' , datasource.name = '\" + RDBMSTestConstants . DATA_SOURCE_NAME + \"'\" + \" , table.name = '\" + RDBMSTestConstants . TABLE_NAME + \"') \" +", "import org . apache . hadoop . hdfs . server . protocol . DatanodeStorage ; import org . apache . hadoop . hdfs . server . protocol . StorageReport ; import org . apache . hadoop . hdfs . server . namenode . CachedBlock ;", "genealogy = new Genealogy ( ) ; tryingToMarry = true ; tryingToConceive = true ;", "import info . nightscout . androidaps . plugins . PumpCombo . ComboFragment ; import info . nightscout . androidaps . plugins . PumpDanaR . DanaRPlugin ;", "private final ObservableList < Series < DateTime , EventCluster > > seriesList = FXCollections . < Series < DateTime , EventCluster > > observableArrayList ( ) ; private final ObservableList < Series < DateTime , EventCluster > > sortedSeriesList = seriesList . sorted ( ( s1 , s2 ) -> { final List < String > collect = EventType . allTypes . stream ( ) . map ( EventType :: getDisplayName ) . collect ( Collectors . toList ( ) ) ; private final Map < ImmutablePair < EventType , String > , EventStripe > stripeDescMap = new HashMap < > ( ) ; private final Map < EventStripe > stripeNodeMap = new HashMap < > ( ) ; private final SimpleBooleanProperty bandByType = new SimpleBooleanProperty ( false ) ;", "Stream < String > writeFunctionCounter ( FunctionCounter counter ) { double count = counter . count ( ) ; if ( Double . isFinite ( count ) ) { return Stream . of ( event ( counter . getId ( ) , new Attribute ( \"throughput\" , count ) ) ) ; } return Stream . empty ( ) ; }", "", "@ Parameter ( readonly = true , required = true , defaultValue = \"/${project.artifactId}\" ) protected String contextPath ; @ Deprecated @ Parameter ( defaultValue = \"${project.build.directory}/tmp\" , required = true , readonly = true ) protected File tmpDirectory ;", "if ( setupState == SETUP_DISPOSED ) { return ; } if ( mAppstore != null ) { Logger . dWithTimeFromUp ( \"fireSetupFinished() === SETUP DONE === result: \" , result , \", appstore: \" , mAppstore . getAppstoreName ( ) ) ; } else { Logger . dWithTimeFromUp ( \"fireSetupFinished() === SETUP DONE === result: \" , result ) ; }", "public static final String EXTRA_URL = \"url\" ; public static final String EXTRA_INITIAL_ATTACHMENTS = \"initialAttachments\" ; private static final int MAX_ATTACHMENTS_PER_MSG = 3 ; private static final int DIALOG_ERROR_ID = 0 ; private static final int ATTACH_PICTURE = 1 ; private static final int ATTACH_FILE = 2 ; private static final int PAINT_IMAGE = 3 ; private Context mContext ; private TextView mLastUpdatedTextView ; private EditText mNameInput ; private EditText mEmailInput ; private EditText mSubjectInput ; private EditText mTextInput ; private Button mSendFeedbackButton ; private Button mAddAttachmentButton ; private Button mAddResponseButton ; private Button mRefreshButton ; private ScrollView mFeedbackScrollview ; private LinearLayout mWrapperLayoutFeedbackAndMessages ; private ListView mMessagesListView ; private SendFeedbackTask mSendFeedbackTask ; private Handler mFeedbackHandler ; private ParseFeedbackTask mParseFeedbackTask ; private Handler mParseFeedbackHandler ; private String initialUserName ; private String initialUserEmail ; private List < Uri > mInitialAttachments ; private String mUrl ; private ErrorObject mError ; private MessagesAdapter mMessagesAdapter ; private ArrayList < FeedbackMessage > mFeedbackMessages ; private boolean mInSendFeedback ; private boolean mFeedbackViewInitialized ; private String mToken ; public void enableDisableSendFeedbackButton ( boolean isEnable ) { if ( mSendFeedbackButton != null ) { mSendFeedbackButton . setEnabled ( isEnable ) ; } } else if ( viewId == R . id . button_add_response ) { configureFeedbackView ( false ) ; inSendFeedback = true ; private boolean mFeedbackViewInitialized ; private String mToken ; public void enableDisableSendFeedbackButton ( boolean isEnable ) { if ( mFeedbackMessages ; private boolean mToken ; public void enableDisableSendFeedbackButton (", "tmpMap . put ( _Fields . REWRITE_ENABLED , new org . apache . thrift . meta_data . FieldMetaData ( \"rewriteEnabled\" , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . BOOL ) ) ) ; tmpMap . put ( _Fields . MM_NEXT_WRITE_ID , new org . apache . thrift . meta_data . FieldMetaData ( \"mmNextWriteId\" , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . I64 ) ) ) ; tmpMap . put ( _Fields . MM_WATERMARK_WRITE_ID , new org . apache . thrift . meta_data . FieldMetaData ( \"mmWatermarkWriteId\" , org . apache . thrift . TFieldRequirementType . OPTIONAL , new org . apache . thrift . meta_data . FieldValueMetaData ( org . apache . thrift . protocol . TType . I64 ) ) ) ;", "parse ( ) ; return this . getNamePart ( NamePartKey . Canonical ) ;", "if ( stream . hasKind ( ) && ( StreamName . getArea ( streamKind ) == StreamName . Area . DATA ) && includedColumns [ column ] ) { }", "import java . security . PublicKey ; import java . util . Collections ; import java . util . LinkedList ; import java . util . List ; import org . bouncycastle . crypto . params . DHPrivateKeyParameters ; import org . bouncycastle . crypto . params . DHPublicKeyParameters ; import org . bouncycastle . crypto . params . ECPrivateKeyParameters ; import org . bouncycastle . crypto . params . ECPublicKeyParameters ; import org . bouncycastle . crypto . tls . Certificate ; import org . bouncycastle . crypto . tls . ServerDHParams ;", "import com . akiban . cserver . service . session . SessionImpl ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "FileFragment frag = ( ( FileDisplayActivity ) getSherlockActivity ( ) ) . getSecondFragment ( ) ; if ( frag != null && frag instanceof FileDetailFragment && frag . getFile ( ) . getFileId ( ) == targetFile . getFileId ( ) ) { item = menu . findItem ( R . id . action_see_details ) ; if ( item != null ) { item . setVisible ( false ) ; item . setEnabled ( false ) ; } }", "if ( trimmedLine . substring ( 1 ) . contains ( \":\" ) ) { String pid = StringUtils . substringBefore ( trimmedLine , \":\" ) ; String rest = trimmedLine . substring ( pid . length ( ) + 1 ) ; if ( ! pid . contains ( \".\" ) ) { pid = \"org.openhab.\" + pid ; } if ( ! rest . isEmpty ( ) && rest . substring ( 1 ) . contains ( \"=\" ) ) { String property = StringUtils . substringBefore ( rest , \"=\" ) ; String value = rest . substring ( property . length ( ) + 1 ) ; String [ ] parsedLine = { pid . trim ( ) , property . trim ( ) , value . trim ( ) } ; logger . debug ( \"Parsed configuration line {}:{}={}\" , ( Object [ ] ) parsedLine ) ; return parsedLine ; } } logger . warn ( \"Cannot parse line '{}' of main configuration file '{}'.\" , line , filePath ) ; return null ; }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event not arrived\" , callback . isEventArrived ( ) ) ;", "public void grantNamespacePermission ( TInfo tinfo , TCredentials credentials , String user , String ns , byte permission ) throws ThriftSecurityException , ThriftTableOperationException { Namespace . ID namespaceId = checkNamespaceId ( instance , ns , TableOperation . PERMISSION ) ; security . grantNamespacePermission ( credentials , user , namespaceId , NamespacePermission . getPermissionById ( permission ) ) ; }", "@ Parameter private Antlr4 antlr4 ; @ Parameter ( property = \"spotlessFiles\" ) private String filePatterns ;", "import org . apache . usergrid . persistence . index . query . Identifier ;", "static class SavedState extends BaseSavedState { Bundle mState ; public SavedState ( Parcelable superState ) { super ( superState ) ; } public SavedState ( Parcel in ) { super ( in ) ; mState = in . readBundle ( ) ; } @ Override public void writeToParcel ( Parcel dest , int flags ) { super . writeToParcel ( dest , flags ) ; dest . writeBundle ( mState ) ; } public static final Creator < SavedState > CREATOR = new Creator < SavedState > ( ) { @ Override public SavedState createFromParcel ( Parcel in ) { return new SavedState ( in ) ; } @ Override public SavedState [ ] newArray ( int size ) { return new SavedState [ size ] ; } } ; }", "HasUnit , HasPublishedFlag , HasOffering , HasSeriesType {", "private final Boolean startAsMuted ; private final Boolean guest ;", "mReadType = readType ; mWriteType = writeType ;", "@ Nullable final Instant modified , @ Nullable final Instant created , @ Nullable final Metadata metadata ) {", "protected FeatureOfInterest insertFeatureOfInterest ( final SamplingFeature samplingFeature , final Session session ) throws OwsExceptionReport { if (", "\"webelement.focus();\" + \"if (webelement.getAttribute('disabled') != undefined) return 'Cannot change value of disabled element';\" +", "public ReceiveAction ( ProtocolMessage ... expectedMessages ) { this ( Arrays . asList ( messages ) ) ; } public ReceiveAction ( Set < ReceiveOption > receiveOptions , List < ProtocolMessage > messages ) { this ( messages ) ; this . earlyCleanShutdown = receiveOptions . contains ( ReceiveOption . EARLY_CLEAN_SHUTDOWN ) ; this . checkOnlyExpected = receiveOptions . contains ( ReceiveOption . CHECK_ONLY_EXPECTED ) ; } public ReceiveAction ( Set < ReceiveOption > receiveOptions , ProtocolMessage ... messages ) { this ( receiveOptions , Arrays . asList ( messages ) ) ; } public ReceiveAction ( ReceiveOption receiveOption , List < ProtocolMessage > messages ) { this ( messages ) ; switch ( receiveOption ) { case CHECK_ONLY_EXPECTED : this . checkOnlyExpected = true ; break ; case EARLY_CLEAN_SHUTDOWN : this . earlyCleanShutdown = true ; } } public ReceiveAction ( ReceiveOption receiveOption , ProtocolMessage ... messages ) { this ( receiveOption , Arrays . asList ( expectedMessages ) ) ; }", "import lsfusion . base . RawFileData ;", "", "GalacticraftCore . packetPipeline . sendToAllAround ( new PacketSimple ( EnumSimplePacket . C_PLAY_SOUND_BOW , GCCoreUtil . getDimensionID ( this . worldObj ) , new Object [ ] { } ) , new TargetPoint ( GCCoreUtil . getDimensionID ( this . worldObj ) , this . posX , this . posY , this . posZ , 40.0D ) ) ;", "import org . bonitasoft . engine . scheduler . ServicesResolver ; import org . bonitasoft . engine . scheduler . StatelessJob ;", "import rtg . api . world . deco . DecoBaseBiomeDecorations ; import rtg . api . world . surface . SurfaceBase ; import rtg . api . world . terrain . TerrainBase ; import rtg . world . biome . deco . DecoSingleBiomeDecorations ;", "@ Override public void preInit ( ) { ItemNotepad . registerItem ( ) ; if ( ItemNotepad . item != null ) { ItemStack magGlass = ItemMagnifyingGlass . getItem ( ) ; CraftingPlugin . addShapedRecipe ( new ItemStack ( ItemNotepad . item ) , \"IF\" , \"XP\" , 'I' , new ItemStack ( Items . dye , 1 , 0 ) , 'F' , Items . feather , 'X' , magGlass , 'P' , Items . paper ) ; } EnumMachineAlpha alpha = EnumMachineAlpha . TANK_WATER ; if ( alpha . isAvailable ( ) ) CraftingPlugin . addRecipe ( alpha . getItem ( 6 ) , \"WWW\" , \"ISI\" , \"WWW\" , 'I' , \"ingotIron\" , 'S' , \"slimeball\" , 'W' , \"plankWood\" ) ; }", "boolean removed = false ; ClipboardHolder clipboard = session . getClipboard ( ) ; if ( clipboard instanceof URIClipboardHolder ) { URIClipboardHolder identifiable = ( URIClipboardHolder ) clipboard ; if ( identifiable . contains ( uri ) ) { if ( identifiable instanceof MultiClipboardHolder ) { MultiClipboardHolder multi = ( MultiClipboardHolder ) identifiable ; multi . remove ( uri ) ; if ( multi . getHolders ( ) . isEmpty ( ) ) session . setClipboard ( null ) ; } else { session . setClipboard ( null ) ; } } }", "public final static int CLASS_TYPE = 1 ; public final static int ROLE_TYPE = 2 ; private void setIndex ( String iri , int type , int idx ) { if ( type == CLASS_TYPE ) { OClass c = ofac . createClass ( iri ) ; if ( reasonerDag . getClassDAG ( ) . getVertex ( c ) == null ) throw new RuntimeException ( \"UNKNOWN CLASS: \" + iri ) ; if ( cacheSI . getEntry ( c ) != null ) throw new RuntimeException ( \"DUPLICATE CLASS INDEX: \" + iri ) ; cacheSI . setIndex ( c , idx ) ; } else { ObjectPropertyExpression ope = ofac . createObjectProperty ( iri ) ; if ( reasonerDag . getObjectPropertyDAG ( ) . getVertex ( ope ) != null ) { if ( cacheSI . getEntry ( ope ) != null ) { DataPropertyExpression dpe = ofac . createDataProperty ( iri ) ; if ( reasonerDag . getDataPropertyDAG ( ) . getVertex ( dpe ) != null ) { if ( cacheSI . getEntry ( dpe ) != null ) throw new RuntimeException ( \"DUPLICATE PROPERTY: \" + iri ) ; cacheSI . setIndex ( dpe , idx ) ; } else throw new RuntimeException ( \"UNKNOWN PROPERTY: \" + iri ) ; } else cacheSI . setIndex ( ope , idx ) ; } else { DataPropertyExpression dpe = ofac . createDataProperty ( iri ) ; if ( reasonerDag . getDataPropertyDAG ( ) . getVertex ( dpe ) != null ) { if ( cacheSI . getEntry ( dpe ) != null ) { if ( cacheSI . getEntry ( dpe ) != null ) throw new RuntimeException ( \"DUPLICATE PROPERTY: \" + iri ) ; cacheSI . setIndex ( dpe , idx ) ; } else throw new RuntimeException ( \"UNKNOWN PROPERTY: \" + iri ) ; }", "case COMMAND_SAVE_CURRENT_DOCUMENT : root . saveCurrentDocument ( ) ; break ; case COMMAND_GET_ANNOTATIONS : if ( args != null ) { final int requestId = args . getInt ( 0 ) ; Disposable annotationDisposable = root . getAnnotations ( args . getInt ( 1 ) , args . getString ( 2 ) ) . subscribeOn ( Schedulers . io ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( new Consumer < List < Annotation > > ( ) { @ Override public void accept ( List < Annotation > annotations ) { root . getEventDispatcher ( ) . dispatchEvent ( new PdfViewDataReturnedEvent ( root . getId ( ) , requestId , annotations ) ) ; } } ) ; } break ; case COMMAND_ADD_ANNOTATION : if ( args != null ) { root . addAnnotation ( args . getMap ( 0 ) ) ; } break ; case COMMAND_GET_ALL_UNSAVED_ANNOTATIONS : if ( args != null ) { final int requestId = args . getInt ( 0 ) ; Disposable annotationDisposable = root . getAllUnsavedAnnotations ( ) . subscribeOn ( Schedulers . io ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( new Consumer < JSONObject > ( ) { @ Override public void accept ( JSONObject jsonObject ) { root . getEventDispatcher ( ) . dispatchEvent ( new PdfViewDataReturnedEvent ( root . getId ( ) , requestId , jsonObject ) ) ; } break ;", "@ SuppressWarnings ( \"deprecation\" ) public int makeCuboidFaces ( final Region region , final BlockStateHolder block ) { return this . makeCuboidFaces ( region , ( Pattern ) ( block ) ) ; }", "sinkListener . publishEvents ( sb . toString ( ) ) ;", "", "import javafx . event . ActionEvent ;", "INVALID_SCHEMAS ( \"Schemas do not match; cannot port rows.\" , true ) , MISSING_METADATA_TITLE ( \"Title is Required\" , true ) , VERSION_OUT_OF_DATE ( \"Must download new version of DataSync before jobs can be run (critical update)\" , true ) ;", "final Type promote = AnalyzerCaster . promoteNumeric ( left . actual , right . actual , true ) ;", "* * @ return True if annotation is enabled ( normal case ) ; false if it is to * be ignored ( only useful for mix - in annotations to \"mask\" annotation", "new CryptoTouchFeature < Void > ( session , new DefaultTouchFeature < Void > ( new DefaultUploadFeature < Void > ( new GraphWriteFeature ( session ) ) , new GraphAttributesFinderFeature ( session ) ) , new GraphWriteFeature ( session ) , cryptomator ) . touch ( source , new TransferStatus ( ) ) ; assertTrue ( new CryptoFindFeature ( session , new DefaultFindFeature ( session ) , cryptomator ) . find ( source ) ) ; new CryptoDirectoryFeature < Void > ( session , new GraphDirectoryFeature ( session ) , new GraphWriteFeature ( session ) , cryptomator ) . mkdir ( targetFolder , null , new TransferStatus ( ) ) ; assertTrue ( new CryptoFindFeature ( session , new DefaultFindFeature ( session ) , cryptomator ) . find ( targetFolder ) ) ;", "import com . google . common . collect . FluentIterable ; import com . google . common . collect . Iterables ; import java . time . temporal . ChronoUnit ;", "String join = getTableDefinitions ( joinAtoms , index , \"LEFT OUTER JOIN\" , parenthesis , indent + INDENT ) ; return join ;", "_gcThreadPool . scheduleAtFixedRate ( new CleanupThread ( ) , gcIntervalMinutes , gcIntervalMinutes , TimeUnit . MINUTES ) ; _itMgr . registerGuru ( VirtualMachine . Type . ElasticLoadBalancerVm , this ) ;", "if ( ob . getUuid ( ) == null ) { ob . setUuid ( UUID . randomUUID ( ) . toString ( ) ) ; }", "if ( uct != null && uct . getOwnerChange ( ) != ( player != getOwner ( ) ) ) { }", "import io . reactivex . ObservableEmitter ; import io . reactivex . disposables . Disposable ; import io . reactivex . schedulers . Schedulers ; import org . knowm . xchange . ExchangeSpecification ; import org . knowm . xchange . bitmex . service . BitmexDigest ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . IOException ; import java . text . ParseException ; import java . text . SimpleDateFormat ; import java . time . ZoneOffset ; import java . util . * ; import java . util . concurrent . TimeUnit ;", "private static void assertRoundTrips ( String str , int index , int size ) throws IOException { byte [ ] bytes = str . getBytes ( UTF_8 ) ; }", "import org . adempiere . exceptions . ValueChangeEvent ; import org . adempiere . exceptions . ValueChangeListener ; import org . adempiere . webui . AdempiereIdGenerator ; import org . adempiere . webui . component . CWindowToolbar ; import org . adempiere . webui . component . Bandbox ;", "public static class CollectionsSingletonMapSerializer extends Serializer < Map > { @ Override", "@ ApiParam ( value = \"Serializer/deserializer identifier\" , required = true ) @ PathParam ( \"serDesId\" ) Long serDesId , @ Context UriInfo uriInfo ) { return handleLeaderAction ( uriInfo , ( ) -> { Response response ; try { SchemaMetadataInfo schemaMetadataInfoStorable = schemaRegistry . getSchemaMetadata ( schemaName ) ; schemaRegistry . mapSerDesWithSchema ( schemaMetadataInfoStorable . getId ( ) , serDesId ) ; response = WSUtils . respondEntity ( true , Response . Status . OK ) ; } catch ( Exception ex ) { response = WSUtils . respond ( Response . Status . INTERNAL_SERVER_ERROR , CatalogResponse . ResponseMessage . EXCEPTION , ex . getMessage ( ) ) ; }", "final IFeatureModel fm = DefaultFeatureModelFactory . getInstance ( ) . createFeatureModel ( ) ; FileHandler . load ( f . toPath ( ) , fm , new XmlFeatureModelFormat ( ) ) ;", "if ( ! hasDowngraded ) { PersistenceManager . flushAllDataToDisk ( ( ) -> { log . info ( \"Graceful shutdown resulted in a timeout. Exiting now.\" ) ; resultHandler . handleResult ( ) ; UserThread . runAfter ( ( ) -> System . exit ( EXIT_SUCCESS ) , 1 ) ; } ) ; } else { UserThread . runAfter ( ( ) -> System . exit ( EXIT_SUCCESS ) , 1 ) ; }", "import com . metamx . druid . initialization . CuratorDiscoveryConfig ; import com . metamx . druid . initialization . Initialization ; import com . metamx . druid . initialization . ServerConfig ; import com . metamx . druid . initialization . ServerInit ; import com . metamx . druid . jackson . DefaultObjectMapper ; import com . metamx . druid . loading . DataSegmentKiller ; import com . metamx . druid . loading . DataSegmentPusher ; import com . metamx . druid . loading . S3DataSegmentKiller ;", "import org . apache . kafka . clients . admin . AdminClient ; import java . util . function . Supplier ;", "context . put ( ModuleManager . class , moduleManager ) ; context . put ( Config . class , new Config ( ) ) ; context . put ( AssetManager . class , assetTypeManager . getAssetManager ( ) ) ; context . put ( NetworkSystem . class , networkSystem ) ;", "testFI ( Apps ( ConCall ( ( Constructor ) result . getDefinition ( \"c\" ) , getThisFI ( result ) ) , Zero ( ) , Lam ( param ( Nat ( ) ) , Suc ( Zero ( ) ) ) ) , result ) ;", "{ { criteria . add ( ge ( \"dateCreated\" , date ) ) ; } return criteria . list ( ) ; } @ Override public List < Patient > getPatientsModifiedAtOrAfter ( @ Nullable Date date , boolean includeVoided ) { Criteria criteria = sessionFactory . getCurrentSession ( ) . createCriteria ( Patient . class ) ; if ( ! includeVoided ) { criteria . add ( eq ( \"personVoided\" , false ) ) ; } if ( date != null ) { Disjunction orClause = Restrictions . disjunction ( ) ; orClause . add ( ge ( \"personDateChanged\" , date ) ) . add ( ge ( \"personDateCreated\" , date ) ) ; if ( includeVoided ) { orClause . add ( ge ( \"dateVoided\" , date ) ) ; } criteria . add ( orClause ) ; } }", "public class ShareLinkDialog extends ComponentDialog { private FlowPanel contentPanel ; private Label linkLabel ; }", "ViewCompat . postOnAnimation ( this , mDelayToDispatchNestedFling ) ;", "TransactionFinishCallback finish_callback = ts . initTransactionFinishCallback ( Hstore . Status . ABORT_THROTTLED ) ; hstore_coordinator . transactionFinish ( ts , status , finish_callback ) ;", "+ tableName + \".file_obj_id,\" + \"cases.case_name, cases.case_uid, data_sources.id AS data_source_id, data_sources.name, device_id, file_path, known_status, comment, data_sources.case_id, data_sources.datasource_obj_id FROM \"", "", "else if ( encoding . equalsIgnoreCase ( \"[Ball]\" ) ) { Map < String , String > dict = log . getAttributes ( ) ; Vector < String > ballLocs = new Vector < String > ( ) ; for ( int numBalls = 0 ; ; numBalls ++ ) { String location = dict . get ( \"ball\" + numBalls ) ; if ( location == null ) break ; ballLocs . add ( location ) ; } ip = new Ballimage ( width , height , log . bytes , ballLocs ) ; } else if ( encoding . equalsIgnoreCase ( \"[Y8]\" ) ) { ip = new Y8image ( width , height , log . bytes ) ; }", "private JsonTemplateProcessor jsonTemplateProcessor = new JsonTemplateProcessor ( ) ; private Timer _statTimer ;", "public InStream ( Long fileId , String name , long length ) { this . fileId = fileId ; this . name = name ; this . length = length ; } public String getStreamName ( ) { return name ; } public long getStreamLength ( ) { return length ; } static class UncompressedStream extends InStream { protected List < DiskRange > bytes ; protected List < DiskRange > offsets ; private final long length ; }", "for ( long i = 0 ; i < opts . num ; i ++ ) { byte [ ] row = encodeLong ( i + opts . start ) ; String value = \"\" + ( i + opts . start ) ; Mutation m = new Mutation ( new Text ( row ) ) ; if ( delete ) { m . putDelete ( CF , CQ ) ; } else { m . put ( CF , CQ , new Value ( value . getBytes ( Constants . UTF8 ) ) ) ; } }", "InsertModeEnum . INSERT , 10 ) ; JdbcDbWriter writer = JdbcDbWriter . from ( settings ) ; InsertModeEnum . INSERT ) ; Map < String , DbTableColumn > columnMap = new HashMap < > ( ) ; columnMap . put ( \"col1\" , new DbTableColumn ( \"col1\" , true , false , 1 ) ) ; columnMap . put ( \"col2\" , new DbTableColumn ( \"col2\" , false , true , 1 ) ) ; final DbTable tableA = new DbTable ( \"tableA\" , columnMap ) ; JdbcDbWriter writer = JdbcDbWriter . from ( settings , new DbTableInfoProvider ( ) { @ Override public List < DbTable > getTables ( String connectionUri , String user , String password ) { return Lists . newArrayList ( tableA ) ; } } ) ;", "@ Inject public RatingRangeClamp ( double min , double max ) { this ( new PreferenceDomain ( min , max ) ) ; }", "import gaffer . user . User ; import org . junit . After ; import org . junit . Before ;", "Attribute attr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( attrName ) . getMock ( ) ; when ( entityType . getAttribute ( attrName ) ) . thenReturn ( attr ) ;", "if ( schemeField . type == org . apache . thrift . protocol . TType . STRUCT ) { struct . success = new GetTablesResult ( ) ; struct . success . read ( iprot ) ; }", "", "logger . info ( \"Got disconnected for \" + tag ) ; this . result = WaitResult . DISCONNECTED ; lock . notifyAll ( ) ;", "import stroom . query . common . v2 . DateExpressionParser ; import stroom . util . shared . PageRequest ; import stroom . util . shared . Sort ;", "public Object getEarlyBeanReference ( Object bean , String beanName ) throws BeansException { return this . mockitoPostProcessor . createSpyIfNecessary ( bean , beanName ) ; }", "import org . eclipse . emf . common . command . AbortExecutionException ;", "@ PreAuthorize ( \"hasRole('WORKFLOW_FORM_LIST')\" ) @ RequestMapping ( method = RequestMethod . GET , value = \"/workflow/form/list\" ) @ Transactional ( rollbackFor = { Throwable . class } ) public List < WorkflowFormTO > getForms ( ) { return uwfAdapter . getForms ( ) ; } @ PreAuthorize ( \"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\" ) @ RequestMapping ( method = RequestMethod . GET , value = \"/workflow/form/{userId}\" ) @ Transactional ( rollbackFor = { Throwable . class } ) public WorkflowFormTO getFormForUser ( @ PathVariable ( \"userId\" ) final Long userId ) { SyncopeUser user = binder . getUserFromId ( userId ) ; return uwfAdapter . getForm ( user . getWorkflowId ( ) ) ; } @ PreAuthorize ( \"hasRole('WORKFLOW_FORM_CLAIM')\" ) @ RequestMapping ( method = RequestMethod . GET , value = \"/workflow/form/claim/{taskId}\" ) @ Transactional ( rollbackFor = { Throwable . class } ) public WorkflowFormTO claimForm ( @ PathVariable ( \"taskId\" ) final String taskId ) { return uwfAdapter . claimForm ( taskId , SecurityContextHolder . getContext ( ) . getAuthentication ( ) . getName ( ) ) ; } @ PreAuthorize ( \"hasRole('WORKFLOW_FORM_SUBMIT')\" ) @ RequestMapping ( method = RequestMethod . GET , value = \"/workflow/form/claim/{taskId}\" ) @ Transactional ( rollbackFor = { Throwable . class } ) public WorkflowFormTO claimForm ( @ PathVariable ( \"taskId\" ) @ Transactional ( rollbackFor = { Throwable . class } ) public WorkflowFormTO claimForm ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) . getName ( ) ) ; } @ PreAuthorize ( \"hasRole('WORKFLOW_FORM_SUBMIT')\" ) @ PreAuthorize ( \"hasRole", "private static final Set < TableObserver > observers = Collections . synchronizedSet ( new HashSet < TableObserver > ( ) ) ; private static final Map < Table . ID , TableState > tableStateCache = Collections . synchronizedMap ( new HashMap < > ( ) ) ;", "NetworkVO network = _networksDao . findById ( networkId ) ;", "mRotationHelper = new RotationHelper ( this ) ; mAppTransitionManager = LauncherAppTransitionManager . newInstance ( this ) ; boolean internalStateHandled = InternalStateHandler . handleCreate ( this , getIntent ( ) ) ; if ( internalStateHandled ) { if ( savedInstanceState != null ) { savedInstanceState . remove ( RUNTIME_STATE ) ; } }", "onConstructor , annotationNode , null , false ) ;", "if ( RouteType . REQUEST == route . getRouteType ( ) ) { DispatcherHandler dispatcherHandler = new DispatcherHandler ( route . getControllerClass ( ) , route . getControllerMethod ( ) , route . isBlockingAllowed ( ) , route . isInternalTemplateEngine ( ) , route . isTimerEnabled ( ) ) ; routingHandler . add ( route . getRequestMethod ( ) , route . getUrl ( ) , dispatcherHandler ) ; } else if ( RouteType . RESOURCE_FILE == route . getRouteType ( ) ) { }", "context . setPaymentService ( paymentService ) ;", "", "private void renderPipePipe ( CoreRoutedPipe pipe , double x , double y , double z ) { if ( ! pipe . getPipeSigns ( ) . isEmpty ( ) ) { List < Pair < ForgeDirection , IPipeSign > > list = pipe . getPipeSigns ( ) ; for ( Pair < ForgeDirection , IPipeSign > pair : list ) { if ( pipe . container . renderState . pipeConnectionMatrix . isConnected ( pair . getValue1 ( ) ) ) { } } } }", "warnJita ( user , scope , requestId ) ; singularityEventListener . elevatedAccessEvent ( new ElevatedAccessEvent ( user . getId ( ) , requestId , scope , System . currentTimeMillis ( ) ) ) ;", "SlackNotificationConfig newBlankConfig = new SlackNotificationConfig ( \"\" , \"\" , \"\" , \"\" , true , new BuildState ( ) . setAllEnabled ( ) , true , true , null , true , true , true , true ) ;", "import net . runelite . client . plugins . menuentryswapper . util . ConstructionCapeMode ;", "public Collection < CharacterSet > getCharacterSets ( ) { return Collections . emptySet ( ) ; }", "logger . info ( \"userBaseObj2:\" + userBaseObj2 ) ; response = createConnect ( requestUrl , userBaseObj2 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; httppost . releaseConnection ( ) ; return null ; } return response ; } public static HttpResponse getRewardOnVisible ( String httpNode , byte [ ] address , String visible ) { try { final String requestUrl = \"http://\" + httpNode + \"/wallet/getReward\" ; JsonObject userBaseObj2 = new JsonObject ( ) ; if ( visible . equals ( \"true\" ) ) { userBaseObj2 . addProperty ( \"address\" , Base58 . encode58Check ( address ) ) ; } else if ( visible . equals ( \"false\" ) ) { userBaseObj2 . addProperty ( \"address\" , ByteArray . toHexString ( address ) ) ; } userBaseObj2 . addProperty ( \"visible\" , visible ) ; logger . info ( \"userBaseObj2:\" + userBaseObj2 ) ; response = createConnect ( requestUrl , userBaseObj2 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; httppost . releaseConnection ( ) ; return null ; } return response ; } public static HttpResponse getBrokerageOnVisible ( String httpNode , byte [ ] address , String visible ) { try { final String requestUrl = \"http://\" + httpNode + \"/wallet/getReward\" ; JsonObject userBaseObj2 = new JsonObject ( ) ; if ( visible . equals ( \"visible\" , visible ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; httppost . releaseConnection ( ) ; return null ; } return response ; } public static HttpResponse getRewardFromSolidityOnVisible ( String httpSolidityNode , byte [ ] address , String visible ) { try { final String requestUrl = \"http://\" + httpSolidityNode + \"/wallet/getReward\" ;", "undoView . showWithAction ( dialog_id , UndoView . ACTION_CLEAR , ( ) -> { if ( ! pinnedMessageIds . isEmpty ( ) ) {", "return displayIRIConstant ( ( IRIConstant ) term , prefixManager ) ;", "import java . util . ArrayList ; import java . util . HashMap ;", "MasterContext . getMasterSource ( ) . incRenameOps ( ) ;", "public Optional < Boolean > getPreserveTaskSandboxAfterFinish ( ) { return preserveTaskSandboxAfterFinish ; } public ExecutorDataBuilder setPreserveTaskSandboxAfterFinish ( Optional < Boolean > preserveTaskSandboxAfterFinish ) { this . preserveTaskSandboxAfterFinish = preserveTaskSandboxAfterFinish ; return this ; } public Optional < String > getLoggingS3Bucket ( ) { return loggingS3Bucket ; } public ExecutorDataBuilder setLoggingS3Bucket ( Optional < String > loggingS3Bucket ) { this . loggingS3Bucket = loggingS3Bucket ; return this ; }", "if ( removableRoot == null || primaryRoot == null ) { removableRoot = FileUtil . getStoragePath ( _context , true ) ; primaryRoot = FileUtil . getStoragePath ( _context , false ) ; } if ( path . contains ( removableRoot ) ) path = path . substring ( displayRoot ? removableRoot . lastIndexOf ( '/' ) + 1 : removableRoot . length ( ) ) ; if ( path . contains ( primaryRoot ) ) path = path . substring ( displayRoot ? primaryRoot . lastIndexOf ( '/' ) + 1 : primaryRoot . length ( ) ) ;", "* < code > repeated . yamcs . NamedObjectId invalid = 2 ; < / code >", "@ DatabaseChangeProperty ( description = \"Column constraint and foreign key information. Setting the \\\"defaultValue\\\" attribute will specify a default value for the column. Setting the \\\"value\\\" attribute will set all rows existing to the specified value without modifying the column default.\" , requiredForDatabase = \"all\" ) public List < AddColumnConfig > getColumns ( ) { }", "import org . apache . isis . applib . services . eventbus . EventBusService ;", "import org . mskcc . cbio . portal . html . special_gene . SpecialGeneFactory ; import org . mskcc . cbio . portal . util . ExtendedMutationUtil ;", "mTextMaxLeft . setText ( String . format ( Locale . US , FORMAT_DECIMALS , speedLeft ) ) ; mTextMinLeft . setText ( String . format ( Locale . US , FORMAT_DECIMALS , speedLeft ) ) ; mTextMaxCenter . setText ( String . format ( Locale . US , FORMAT_DECIMALS , speedCenter ) ) ; mTextMinCenter . setText ( String . format ( Locale . US , FORMAT_DECIMALS , speedCenter ) ) ; mTextMinRight . setText ( String . format ( Locale . US , FORMAT_DECIMALS , speedRight ) ) ; mTextMaxRight . setText ( String . format ( Locale . US , FORMAT_DECIMALS , speedRight ) ) ;", "import java . util . Calendar ;", "preferred = max = check2048 ( c , max ) ; dh = ( com . jcraft . jsch . DH ) ( c . getDeclaredConstructor ( ) . newInstance ( ) ) ;", "public Icon [ ] textures = new Icon [ 6 ] ;", "", "assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> ApplicationContextAssertProvider . get ( TestAssertProviderApplicationContextClass . class , ApplicationContext . class , this . mockContextSupplier ) ) . withMessageContaining ( \"Type must be an interface\" ) ;", "import org . hive2hive . core . file . FileChunkUtil ; import org . hive2hive . core . model . Chunk ; import org . hive2hive . core . model . MetaChunk ;", "_accountMgr . checkAccess ( CallContext . current ( ) . getCallingAccount ( ) , null , true , vmInstance ) ; if ( isDisplayVmEnabled != null && isDisplayVmEnabled != vmInstance . isDisplayVm ( ) ) { if ( ! _accountMgr . isRootAdmin ( caller . getType ( ) ) ) { throw new PermissionDeniedException ( \"Cannot update parameter displayvm, only admin permitted \" ) ; } }", "EntryTradeVolume tradeVolume , BigDecimal longLimitPrice , BigDecimal shortLimitPrice , boolean isForcedEntry ) {", "public String getYamlLocation ( ) { return config . getProperty ( CONFIG_YAML_LOCATION , getCassHome ( ) + \"/conf/cassandra.yaml\" ) ; } public String getAuthenticator ( ) { return config . getProperty ( CONFIG_AUTHENTICATOR , DEFAULT_AUTHENTICATOR ) ; } public String getAuthorizer ( ) { return config . getProperty ( CONFIG_AUTHORIZER , DEFAULT_AUTHORIZER ) ; } @ Override public String getTargetKSName ( ) { return config . getProperty ( CONFIG_TARGET_KEYSPACE_NAME , null ) ; } @ Override public String getTargetCFName ( ) { return config . getProperty ( CONFIG_TARGET_COLUMN_FAMILY_NAME , null ) ; } @ Override public boolean doesCassandraStartManually ( ) { return config . getBoolean ( CONFIG_CASS_MANUAL_START_ENABLE , false ) ; }", "@ Autowired private ConfigurationPropertiesBean configBean ; private Map < String , ? extends JwtSigner > signers = new HashMap < String , JwtSigner > ( ) ;", "Mono < Map < StreamMessageId , Map < K , V > > > read ( StreamMessageId ... ids ) ;", "@ Override", "long total = gs . countTotal ( context ) ; List < Group > groups = gs . findAll ( context , null , pageable . getPageSize ( ) , Math . toIntExact ( pageable . getOffset ( ) ) ) ; return converter . toRestPage ( groups , pageable , total , utils . obtainProjection ( true ) ) ;", "import org . apache . usergrid . persistence . collection . EntityCollectionManagerFactory ; import org . apache . usergrid . persistence . collection . serialization . impl . migration . EntityIdScope ;", "private OwnerPermissionCurator permissionCurator ; private StatisticCurator statisticCurator ;", "* Get an dictionaries of dictionaries of type & lt ; string , string & gt ; with value { \"0\" : { \"1\" : \"one\" , \"2\" : \"two\" , \"3\" : \"three\" } , \"1\" : { \"4\" : \"four\" , \"5\" : \"five\" , \"6\" : \"six\" } , \"2\" : { \"7\" : \"seven\" , \"8\" : \"eight\" , \"9\" : \"nine\" } }", "import org . openstack4j . openstack . networking . internal . ext . VipServiceImpl ; import org . openstack4j . openstack . sahara . internal . ClusterServiceImpl ; import org . openstack4j . openstack . sahara . internal . NodeGroupTemplateServiceImpl ; import org . openstack4j . openstack . sahara . internal . SaharaServiceImpl ;", "ManagedUserVM userWithUpperCaseEmail = new ManagedUserVM ( ) ; userWithUpperCaseEmail . setId ( validUser . getId ( ) ) ; userWithUpperCaseEmail . setLogin ( \"johnjr\" ) ; userWithUpperCaseEmail . setPassword ( validUser . getPassword ( ) ) ; userWithUpperCaseEmail . setFirstName ( validUser . getFirstName ( ) ) ; userWithUpperCaseEmail . setLastName ( validUser . getLastName ( ) ) ; userWithUpperCaseEmail . setEmail ( validUser . getEmail ( ) . toUpperCase ( ) ) ; userWithUpperCaseEmail . setActivated ( validUser . isActivated ( ) ) ; < % _ if ( databaseType == = 'mongodb' || databaseType == = 'couchbase' || databaseType == = 'sql' ) { _ % > userWithUpperCaseEmail . setImageUrl ( validUser . getImageUrl ( ) ) ; < % _ } _ % > userWithUpperCaseEmail . setLangKey ( validUser . getLangKey ( ) ) ; < % _ if ( databaseType == = 'mongodb' || databaseType == = 'couchbase' || databaseType == = 'sql' ) { _ % > userWithUpperCaseEmail . setCreatedBy ( validUser . getCreatedBy ( ) ) ; userWithUpperCaseEmail . setCreatedDate ( validUser . getCreatedDate ( ) ) ; userWithUpperCaseEmail . setLastModifiedBy ( validUser . getLastModifiedBy ( ) ) ; userWithUpperCaseEmail . setLastModifiedDate ( validUser . getLastModifiedDate ( ) ) ; < % _ } _ % > userWithUpperCaseEmail . setAuthorities ( new HashSet < > ( validUser . getAuthorities ( ) ) ) ;", "jj_la1 [ 220 ] = jj_gen ;", "msgInstance = msgBuilder . getDefaultInstanceForType ( ) ; protoWritable = ProtobufWritable . newInstance ( typeRef . getRawClass ( ) ) ;", "import org . apache . solr . search . field . TopValues ;", "", "import net . floodlightcontroller . core . module . FloodlightModuleContext ; import net . floodlightcontroller . core . module . FloodlightModuleException ; import net . floodlightcontroller . core . module . IFloodlightModule ; import net . floodlightcontroller . core . module . IFloodlightService ; import net . floodlightcontroller . devicemanager . IDevice ; import net . floodlightcontroller . devicemanager . IDeviceManager ; import net . floodlightcontroller . devicemanager . IEntityClass ; import net . floodlightcontroller . devicemanager . IEntityClassifier . EntityField ;", "import cpw . mods . fml . common . network . NetworkRegistry ;", "", "* Get dictionary of complex type with empty item { \"0\" : { \"integer\" : 1 , \"string\" : \"2\" } , \"1:\" { } , \"2\" : { \"integer\" : 5 , \"string\" : \"6\" } }", "import com . b2international . snowowl . core . setup . Plugin ; import com . b2international . snowowl . snomed . datastore . SnomedDatastoreActivator ;", "public static final String VPC_OFF_ID = \"vpcofferingid\" ; public static final String NETWORK = \"network\" ; public static final String VPC_ID = \"vpcid\" ; public static final String GATEWAY_ID = \"gatewayid\" ; public static final String CAN_USE_FOR_DEPLOY = \"canusefordeploy\" ; public static final String RESOURCE_IDS = \"resourceids\" ; public static final String RESOURCE_ID = \"resourceid\" ; public static final String CUSTOMER = \"customer\" ;", "private final ArrayList < Entity > singleAlleleEntities = newArrayList ( ) ; private final ArrayList < Entity > multiAlleleEntities = newArrayList ( ) ; private final ArrayList < Entity > multiGeneEntities = newArrayList ( ) ; private final List < Entity > expectedSingleAlleleEffectEntities = newArrayList ( ) ; private final List < Entity > expectedMultiAlleleEffectEntities = new ArrayList < > ( ) ;", "{ return category ; } public void setCategory ( String category ) { this . category = category ; } public String getExtensionId ( ) { return extensionId ; } public void setExtensionId ( String extensionId ) { this . extensionId = extensionId ; } public boolean isExtended ( ) { return extensionId != null && ! extensionId . isEmpty ( ) ; } public List < String > getCandidateUsers ( ) { }", "private static PatientAlertDao PatientAlerts ; private static PatientAllergenDao PatientAllergens ;", "protected static void assertVisibleCount ( InternalEngine engine , int numDocs ) throws IOException { assertVisibleCount ( engine , numDocs , true ) ; } protected static void assertVisibleCount ( InternalEngine engine , int numDocs , boolean refresh ) throws IOException { if ( refresh ) { engine . refresh ( \"test\" ) ; } try ( Engine . Searcher searcher = engine . acquireSearcher ( \"test\" ) ) { final TotalHitCountCollector collector = new TotalHitCountCollector ( ) ; searcher . searcher ( ) . search ( new MatchAllDocsQuery ( ) , collector ) ; assertThat ( collector . getTotalHits ( ) , equalTo ( numDocs ) ) ; } } public static List < Engine . Operation > generateSingleDocHistory ( final boolean forReplica , final VersionType versionType , final boolean partialOldPrimary , final long primaryTerm , final int minOpCount , final int maxOpCount ) { final int numOfOps = randomIntBetween ( minOpCount , maxOpCount ) ; final List < Engine . Operation > ops = new ArrayList < > ( ) ; final Term id = newUid ( \"1\" ) ; final int startWithSeqNo ; if ( partialOldPrimary ) { startWithSeqNo = randomBoolean ( ) ? numOfOps - 1 : randomIntBetween ( 0 , numOfOps - 1 ) ; } else { startWithSeqNo = 0 ; } final String valuePrefix = forReplica ? \"r_\" : \"p_\" ; final boolean incrementTermWhenIntroducingSeqNo = randomBoolean ( ) ; for ( int i = 0 ; i < numOfOps ; i ++ ) { final Engine . Operation op ; final long version ; switch ( versionType ) { case INTERNAL : version = forReplica ? i : Versions . MATCH_ANY ; break ; case EXTERNAL : version = i ; break ; case EXTERNAL_GTE : version = randomBoolean ( ) ? Math . max ( i -", "schemaRegistryClientFactory , new MetaStoreImpl ( new InternalFunctionRegistry ( ) ) , ksqlConfig ) ;", "private static final Logger LOGGER = LoggerFactory . getLogger ( TaskManagerImpl . class ) ; private final TaskHandlerBeanRegistry taskHandlerBeanRegistry ; private final NodeCache nodeCache ; private final StroomBeanStore beanStore ; private final SecurityContext securityContext ;", "if ( period . isLast ( ) ) { Set < String > domains = m_reportService . queryAllDomainNames ( new Date ( dateLong ) , new Date ( dateLong + TimeUtil . ONE_HOUR ) , \"heartbeat\" ) ; }", "import blusunrize . immersiveengineering . client . utils . IERenderTypes ;", "assertThat ( cr . all . get ( 0 ) . value ) . isEqualTo ( 1 ) ; assertThat ( Iterables . getLast ( ci . messages ) . message ) . isEqualTo ( \"Uploaded patch set 1: Code-Review+1.\" ) ;", "import javafx . beans . property . SimpleIntegerProperty ; import javafx . beans . property . SimpleObjectProperty ;", "Map < String , String > approvalParams = authorizationRequest . getApprovalParameters ( ) ;", "@ Option ( value = \"Check multiple Spin invariants when model checking.\" ) public boolean spinMultipleInvs = true ; @ Option ( value = \"Run model checking processes in parallel. (Currently only for McScM)\" , aliases = { \"-p\" } ) public boolean runParallel = false ; @ Option ( value = \"Number of model checking processes to run in parallel.\" , aliases = { \"-pFactor\" } ) public int numParallel = Runtime . getRuntime ( ) . availableProcessors ( ) ;", "", "null , opencgaHome , token ) ; List < Variant > variants = secondaryFindingsAnalysis . compute ( ) . getResult ( ) ;", "import com . hazelcast . config . InMemoryFormat ; import com . hazelcast . core . * ; import com . hazelcast . nio . ObjectDataInput ; import com . hazelcast . nio . ObjectDataOutput ; import com . hazelcast . nio . serialization . DataSerializable ; import com . hazelcast . query . EntryObject ; import com . hazelcast . query . Predicate ; import com . hazelcast . query . PredicateBuilder ; import com . hazelcast . query . SampleObjects ;", "* @ param f Single argument function that acceps a double value , the fitness , and returns a { @ code Boolean } . * @ return this same { @ code Builder } , suitable for further chaining or to build the { @ link TaskScheduler }", "public void onPageScrollStateChanged ( int state ) { }", "if ( jj_3R_1018 ( ) ) { jj_scanpos = xsp ; break ; }", "import de . ovgu . featureide . fm . core . job . monitor . IMonitor ; import de . ovgu . featureide . fm . core . job . monitor . NullMonitor ; import de . ovgu . featureide . fm . core . job . LongRunningWrapper ; import de . ovgu . featureide . fm . core . job . WorkMonitor ;", "HighlightPage < SolrIndex > page = solrTemplate . queryForHighlightPage ( collection , query , SolrIndex . class ) ;", "|| options . has ( \"async\" ) || options . has ( \"native-backup\" ) || options . has ( \"rollback\" ) || options . has ( \"verify-metadata-version\" ) || options . has ( \"reserve-memory\" ) ) ) {", "@ Diseases ( { Disease . EVD , Disease . LASSA , Disease . MONKEYPOX , Disease . UNSPECIFIED_VHF , Disease . RABIES , Disease . ANTHRAX , Disease . UNDEFINED , Disease . OTHER } )", "if ( ip == null ) { InsufficientAddressCapacityException ex = new InsufficientAddressCapacityException ( \"Unable to find available public IP addresses\" , DataCenter . class , zone . getId ( ) ) ; ex . addProxyObject ( ApiDBUtils . findZoneById ( zone . getId ( ) ) . getUuid ( ) ) ; throw ex ; } CallContext . current ( ) . setEventDetails ( \"Ip Id: \" + ip . getId ( ) ) ; Ip ipAddress = ip . getAddress ( ) ;", "serial = new Serial ( port , serialRate ) { @ Override protected void message ( char buff [ ] , int n ) { addToUpdateBuffer ( buff , n ) ; } } ; updateTimer . start ( ) ;", "import lombok . extern . slf4j . Slf4j ;", "final CollectionIoEvent < Entity > writeData = new CollectionIoEvent < Entity > ( collectionScope , entity ) ;", "import net . runelite . client . util . NonScheduledExecutorServiceExceptionLogger ; import net . runelite . http . api . chat . ChatClient ;", "ZSampleGrid < WTWD > sampleGrid = router . sampleGridRenderer . getSampleGrid ( tgRequest , sptRequest ) ;", "import de . ovgu . featureide . fm . core . io . manager . FileHandler ;", "if ( jj_3R_735 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_736 ( ) ) return true ; }", "Objects . requireNonNull ( original , \"The specified original rectangle must not be null.\" ) ; Objects . requireNonNull ( bounds , \"The specified bounds for the new rectangle must not be null.\" ) ; if ( ratio < 0 ) { throw new IllegalArgumentException ( \"The specified ratio \" + ratio + \" must be larger than zero.\" ) ; }", "sb . append ( AVE_IN ) ; sb . append ( PowerDisplayUtil . formatPowerFloat ( tracker . getAverageMjTickRecieved ( ) ) ) ; player . sendChatToPlayer ( ChatMessageComponent . createFromText ( sb . toString ( ) ) ) ;", "HBaseSail sail = new HBaseSail ( HBaseConfiguration . create ( ) , hconfig . getTablespace ( ) , hconfig . isCreate ( ) , hconfig . getSplitBits ( ) , hconfig . isPush ( ) , hconfig . getEvaluationTimeout ( ) , hconfig . getElasticIndexURL ( ) , null ) ;", "void inject ( DescriptionFragment descriptionFragment ) ; void inject ( TimeLineFollowingFragment timeLineFollowingFragment ) ; void inject ( TimeLineFollowersFragment timeLineFollowersFragment ) ; void inject ( GridRecyclerSwipeWithToolbarFragment gridRecyclerSwipeWithToolbarFragment ) ; void inject ( SettingsFragment settingsFragment ) ;", "import moze_intel . projecte . api . item . IProjectileShooter ;", "public LdapPool < Ldap > getLdapPool ( ) { return ldapPool ; } public void setMultipleResults ( boolean multipleResults ) { this . multipleResults = multipleResults ; } public Integer getMaxPage ( ) { return this . maxPage ; }", "if ( ( active4 & 0x4000L ) != 0L ) return jjStopAtPos ( 15 , 270 ) ; break ; default : break ; } return jjStartNfa_0 ( 14 , 0L , 0L , 0L , 0L , active4 ) ; } private int jjStartNfaWithStates_0 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_0 ( state , pos + 1 ) ; } static final long [ ] jjbitVec0 = { 0xfffffffffffffffeL , 0xffffffffffffffffL , 0xffffffffffffffffL , 0xffffffffffffffffL } ; static final long [ ] jjbitVec2 = { 0x0L , 0x0L , 0xffffffffffffffffL , 0xffffffffffffffffL } ; private int jjMoveNfa_0 ( int startState , int curPos ) { int startsAt = 0 ; jjnewStateCnt = 1240 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int kind = 0x7fffffff ; for ( ; ; ) { switch ( jjstateSet [ -- i ] ) { case 37 : case 33 : jjCheckNAddStates ( 0 , 2 ) ; break ; case 3 : if ( ( 0x3ff000000000000L & l ) != 0L ) jjCheckNAddStates ( 3 , 9 ) ; else if ( ( 0x3ff000000000000L & l ) != 0L ) jjCheckNAddStates ( 0 , kind ) ; int kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitR", "import com . flutterwave . raveandroid . ussd . UssdFragment ; import com . flutterwave . raveandroid . uk . UkFragment ;", "import org . bladerunnerjs . model . engine . Node ;", "@ Configuration ( proxyBeanMethods = false ) @ ServletComponentScan ( basePackages = \"org.springframework.boot.web.servlet.testcomponents\" )", "import field . core . plugins . snip . TreeBrowserPlugin ; import field . core . ui . FieldMenus2 ; import field . core . ui . FieldMenus2 . Sheet ;", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "private static void idftParallel ( final int [ ] [ ] A , final int omega , int numThreads ) throws InterruptedException , ExecutionException { final int rows = 1 << ( ( 31 - Integer . numberOfLeadingZeros ( A . length ) ) / 2 ) ; final int cols = A . length / rows ; ExecutorService executor = Executors . newFixedThreadPool ( numThreads ) ; Collection < Future < ? > > pending = new ArrayList < > ( ) ; for ( int i = 0 ; i < rows ; i ++ ) { final int rowIdx = i ; Future < ? > future = executor . submit ( new Runnable ( ) { @ Override public void run ( ) { idftBailey2 ( A , omega , rows , cols , rowIdx ) ; } } ) ; pending . add ( future ) ; } for ( Future < ? > future : pending ) future . get ( ) ; applyIdftWeights ( A , omega , rows , cols ) ; pending = new ArrayList < > ( ) ; for ( int i = 0 ; i < cols ; i ++ ) { final int colIdx = i ; Future < ? > future = executor . submit ( new Runnable ( ) { @ Override public void run ( ) { idftDirect ( A , omega , rows , cols , i , cols ) ; } } ) ; pending . add ( future ) ; } for ( Future < ? > future : pending ) future . get ( ) ; executor . shutdown ( ) ; } private static void idftDirect ( int i = 0 ; i < cols ; i ++ ) {", "public void onMajorProgress ( ObjectContainer container ) { }", "", "MONGO_PASSWORD ( \"mongo.password\" ) , CLUSTERING_GROUP_ID ( \"clustering.groupId\" ) , CLUSTERING_ENABLED ( \"clustering.enabled\" ) , CLUSTERING_GROUPS ( \"clustering.clusterGroups\" ) , CLUSTERING_ALL_ACK_ENABLED ( \"clustering.allAckEnabled\" ) , CLUSTERING_ACK_TIMEOUT ( \"clustering.ackTimeout\" ) , DROOLS_GROUP ( \"drools.groups\" ) , DROOLS_GROUP_NAME ( \"name\" ) , DROOLS_GROUP_SESSION ( \"sessionName\" ) , DROOLS_GROUP_GROUP_ID ( \"groupId\" ) , DROOLS_GROUP_ARTIFACT_ID ( \"artifactId\" ) , DROOLS_GROUP_VERSION ( \"version\" ) , DROOLS_GROUP_SCAN_TIME ( \"scanFrequency\" ) , DROOLS_GROUP_SESSION_TYPE ( \"sessionType\" ) , ;", "payment . setPaymentId ( internalPaymentId ) ; spiResponse = bulkPaymentSpi . getPaymentStatusById ( spiPsuData , payment , aspspConsentData ) ;", "processingState = ItemProcessingState . DONE ;", "{ ZLLogUtil . packageName = getPackageName ( ) ; ZLAdUtil ad = new ZLAdUtil ( this , myRootView ) ; ad . start ( ) ; }", "import java . sql . SQLException ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . BlockingQueue ;", "Criterion filterHql = SosTemporalRestrictions . filterHql ( tf , 1 ) ; assertThat ( filterHql . toString ( ) , equalTo ( \"resultTime>:instant1 and resultTime<:instant1\" ) ) ;", "private static final AutoConfigurations AUTO_CONFIGURATIONS = AutoConfigurations . of ( MetricsAutoConfiguration . class , CompositeMeterRegistryAutoConfiguration . class ) ;", "p . changeStatus ( c , PersonnelStatus . WOUNDS ) ; MedicalLogEntry entry = MedicalLogger . diedOfInternalBleeding ( p , c . getLocalDate ( ) ) ;", "AdsBaseObject ads = new AdsBaseObject ( page . getUrl ( ) ) ; final AutoplayVuap vuap = new AutoplayVuap ( driver , slot , ads . findFirstIframeWithAd ( slot ) , false", "setState ( 685 ) ; _errHandler . sync ( this ) ;", "public < T > Future < QueryResult < T > > asyncGetMore ( final MongoNamespace namespace , final MongoGetMore getMore , final Decoder < T > resultDecoder ) { }", "import static com . google . common . base . Preconditions . checkArgument ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . nio . ByteBuffer ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . EnumSet ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Random ; import java . util . Set ; import java . util . SortedSet ; import java . util . TreeMap ; import java . util . TreeSet ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . ExecutorService ; import java . util . concurrent . Executors ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicReference ; import java . util . zip . ZipEntry ; import java . util . zip . ZipInputStream ; import org . apache . accumulo . core . Constants ; import org . apache . accumulo . core . client . AccumuloException ; import org . apache . accumulo . core . client . AccumuloSecurityException ;", ". getName ( ) , appViewModel . getPackageName ( ) , 5 , view . getLanguageFilter ( ) ) . observeOn ( viewScheduler ) , appViewManager . loadSimilarApps ( appViewModel . getPackageName ( ) ,", "import rtg . config . growthcraft . ConfigGC ; import rtg . config . highlands . ConfigHL ; import rtg . config . ridiculousworld . ConfigRW ;", "@ Generated ( value = \"Autogenerated by Thrift Compiler (0.9.3-wk-3)\" , date = \"2016-04-15\" )", "if ( ! parameters . getBoolean ( \"bootstrapping\" ) ) { edu . cmu . tetrad . search . TsFci search = new edu . cmu . tetrad . search . TsFci ( test . getTest ( dataSet , parameters ) ) ; search . setDepth ( parameters . getInt ( \"depth\" ) ) ; IKnowledge _knowledge = getKnowledge ( ) != null ? getKnowledge ( ) : dataSet . getKnowledge ( ) ; search . setKnowledge ( _knowledge ) ; return search . search ( ) ; } else { TsFci tsFci = new TsFci ( test , algorithm ) ; DataSet data = ( DataSet ) dataSet ; GeneralBootstrapTest search = new GeneralBootstrapTest ( data , tsFci , parameters . getInt ( \"bootstrapSampleSize\" ) ) ; BootstrapEdgeEnsemble edgeEnsemble = BootstrapEdgeEnsemble . Highest ; switch ( parameters . getInt ( \"bootstrapEnsemble\" , 1 ) ) { case 0 : edgeEnsemble = BootstrapEdgeEnsemble . Preserved ; break ; case 1 : edgeEnsemble = BootstrapEdgeEnsemble . Highest ; break ; case 2 : edgeEnsemble = BootstrapEdgeEnsemble . Majority ; } search . setEdgeEnsemble ( edgeEnsemble ) ; search . setParameters ( parameters ) ; search . setVerbose ( parameters . getBoolean ( \"verbose\" ) ) ; return search . search ( ) ; }", "public List < String > schemaStrings ( Session session , boolean withGroupTables ) { final AkibanInformationSchema ais = getAis ( ) ; }", "prop . setComment ( \"If true, moon villages will not generate.\" ) ; prop . setLanguageKey ( \"gc.configgui.disable_moon_village_gen\" ) ;", "public static final int NUM_TRIES_FETCH_FROM_LEADER = 3 ; public static final int NUM_TRIES_TOPIC_METADATA = 3 ; public static boolean reportJobFailureDueToSkippedMsg = false ; public static boolean reportJobFailureDueToOffsetOutOfRange = false ; public static boolean useMockRequestForUnitTest = false ;", "private final UIDCacheManager uidCacheManager ;", "setState ( 795 ) ;", "import io . reactivex . Completable ;", "Integer mergeRequestIid , Integer mergeRequestTargetProjectId , String targetBranch , String targetRepoName , String targetNamespace , String targetRepoSshUrl , String targetRepoHttpUrl , String triggeredByUser , String before , String after , String lastCommit , String targetProjectUrl , String triggerPhrase , String mergeRequestState , String mergedByUser , String mergeRequestAssignee , String ref , String isTag , String sha , String beforeSha , String status , String stages , String createdAt , String finishedAt , String buildDuration ) {", "public static final String CHARSET_NAME = \"UTF8\" ; private final boolean alphaNumeric ; private final int length ; private String newPassCode ; private AlertDialog passcodeDialog ; AesCbcWithIntegrity . SecretKeys key ;", "null , taskName ,", "public void configuresClientSkipPattern ( ) throws Exception { contextRunner ( ) . withPropertyValues ( \"spring.sleuth.web.client.skip-pattern=foo.*|bar.*\" ) . run ( ( context ) -> { SamplerFunction < HttpRequest > clientSampler = context . getBean ( HttpTracing . class ) . clientRequestSampler ( ) ; then ( clientSampler ) . isInstanceOf ( SkipPatternHttpClientSampler . class ) ; } ) ; } @ Test", "import org . axonframework . commandhandling . AggregateAnnotationCommandHandler ; import org . axonframework . commandhandling . AnnotationCommandHandlerAdapter ; import org . axonframework . commandhandling . AnnotationCommandTargetResolver ; import org . axonframework . commandhandling . CommandBus ; import org . axonframework . commandhandling . CommandCallback ; import org . axonframework . commandhandling . CommandMessage ; import org . axonframework . commandhandling . GenericCommandMessage ; import org . axonframework . commandhandling . SimpleCommandBus ; import org . axonframework . commandhandling . model . Aggregate ; import org . axonframework . commandhandling . model . AggregateDescriptor ; import org . axonframework . commandhandling . model . AggregateNotFoundException ; import org . axonframework . commandhandling . model . Repository ; import org . axonframework . commandhandling . model . RepositoryProvider ;", "import com . gentics . mesh . core . rest . MeshEvent ;", "final Criteria criteria = getDefaultObservationCriteria ( session ) ; Criteria seriesCriteria = criteria . createCriteria ( DataEntity . PROPERTY_DATASET ) . add ( Restrictions . eq ( DatasetEntity . PROPERTY_ID , series . getId ( ) ) ) . add ( Restrictions . eq ( DatasetEntity . PROPERTY_PUBLISHED , true ) ) ; if ( CollectionHelper . isNotEmpty ( offerings ) ) { seriesCriteria . createCriteria ( DatasetEntity . PROPERTY_OFFERING ) . add ( Restrictions . in ( OfferingEntity . IDENTIFIER , offerings ) ) ; }", "import org . robolectric . shadow . api . Shadow ; import org . robolectric . shadows . ClassNameResolver ; import org . robolectric . shadows . LegacyManifestParser ; import org . robolectric . shadows . ShadowActivityThread ; import org . robolectric . shadows . ShadowContextImpl ; import org . robolectric . shadows . ShadowLog ;", "", "if ( currentWorker != null ) { currentWorker . dispose ( ) ; } forbidDownwardFocusScroll ( ) ;", "GL11 . glTranslated ( - BLOCK_CENTRE_TRANSLATION , 0 , - BLOCK_CENTRE_TRANSLATION ) ; GlStateManager . color ( 1 , 1 , 1 ) ;", "public Set < BaseProjectProperties > getDependentSiblingProjects ( ) { return dependentSiblingProjects ; } public void setDependentSiblingProjects ( Set < BaseProjectProperties > dependentSiblingProjects ) { this . dependentSiblingProjects = dependentSiblingProjects ; } public void compareSourcesJar ( Jar sourcesJar ) { this . sourcesJar = sourcesJar ; this . dependsOn ( sourcesJar ) ; } public void comparePom ( String pomTaskName ) { this . pomTaskName = pomTaskName ; this . dependsOn ( pomTaskName ) ; }", "protected void addAllProductOptionsToModel ( Map < String , Object > newModelVars , Product product ) { List < ProductOptionXref > productOptionXrefs = ListUtils . emptyIfNull ( product . getProductOptionXrefs ( ) ) ; List < ProductOptionDTO > dtos = new ArrayList < > ( ) ; for ( ProductOptionXref optionXref : productOptionXrefs ) { } }", "import org . projectforge . business . user . UserAuthenticationsService ; import org . projectforge . business . user . UserTokenType ;", "bps = getBorderProps ( borderProps , CommonBorderPaddingBackground . AFTER , context ) ;", "public WriteResult insert ( final List < DBObject > documents , final WriteConcern aWriteConcern , final DBEncoder encoder ) { final Codec < DBObject > codec = toDBObjectSerializer ( encoder ) ; final MongoInsert < DBObject > mongoInsert = new MongoInsert < DBObject > ( documents ) . writeConcern ( this . writeConcern . toNew ( ) ) ; return new WriteResult ( insertInternal ( mongoInsert , serializer ) , aWriteConcern ) ; } private Serializer < DBObject > toDBObjectSerializer ( DBEncoder encoder ) { Serializer < DBObject > serializer ; }", "SerializableRunnable connect = new SerializableRunnable ( \"Connect to \" + locators ) { public void run ( ) { Properties props = new Properties ( ) ; props . setProperty ( MCAST_PORT , String . valueOf ( mcastport ) ) ; props . setProperty ( LOCATORS , locators ) ; props . setProperty ( LOG_LEVEL , LogWriterUtils . getDUnitLogLevel ( ) ) ; props . setProperty ( MCAST_TTL , \"0\" ) ; props . setProperty ( ENABLE_NETWORK_PARTITION_DETECTION , \"true\" ) ; addDSProps ( props ) ; DistributedSystem . connect ( props ) ; } } ;", "bbattributes . add ( new BlackboardAttribute ( ATTRIBUTE_TYPE . TSK_MSG_ID . getTypeID ( ) , EmailParserModuleFactory . getModuleName ( ) , ( ( id < 0L ) ? NbBundle . getMessage ( this . getClass ( ) , \"ThunderbirdMboxFileIngestModule.notAvail\" ) : String . valueOf ( id ) ) ) ) ;", "public void setIdentityManager ( final IdentityManager identityManager ) { this . identityManager = identityManager ; } public void setRelationManager ( final RelationManager relationManager ) { this . relationManager = relationManager ; } public void init ( )", "public class ResourceIdOperator extends AbstractIdOperator { @ XmlElement ( name = \"id\" ) private List < String > ids ; }", "final TableStatus ts = rowDef . getTableStatus ( ) ; constructHKey ( session , hEx , rowDef , oldRowData , false ) ;", "ServiceRequest r1 = new ServiceRequest ( clusterName , serviceName , repositoryVersion . getId ( ) , dStateStr , null ) ; Set < ServiceRequest > requests = new HashSet < > ( ) ;", "import cz . cuni . lf1 . lge . ThunderSTORM . thresholding . ThresholdFormulaException ; import cz . cuni . lf1 . lge . ThunderSTORM . IModule ;", "public CvPipelineEditorDialog ( Frame owner , String title , CvPipelineEditor editor ) { super ( owner , title ) ; setDefaultCloseOperation ( JDialog . DO_NOTHING_ON_CLOSE ) ; addWindowListener ( new WindowAdapter ( ) { @ Override public void windowClosing ( WindowEvent e ) { if ( editor . isDirty ( ) ) { int selection = JOptionPane . showConfirmDialog ( owner , \"Save pipeline changes?\" , \"Closing Pipeline Editor!\" , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , null ) ; switch ( selection ) { case JOptionPane . YES_OPTION : super . windowClosing ( e ) ; CvPipelineEditorDialog . this . dispose ( ) ; return ; case JOptionPane . NO_OPTION : editor . undoEdits ( ) ; super . windowClosing ( e ) ; CvPipelineEditorDialog . this . dispose ( ) ; return ; case JOptionPane . CANCEL_OPTION : return ; } } else { super . windowClosing ( e ) ; CvPipelineEditorDialog . this . dispose ( ) ; } } } ) ; getContentPane ( ) . setLayout ( new BorderLayout ( ) ) ; getContentPane ( ) . add ( editor ) ; Rectangle rect = owner . getBounds ( ) ; int wmargin = rect . width / 20 ; int hmargin = rect . height / 20 ; setBounds ( new Rectangle ( rect . x + wmargin , rect . y + hmargin , rect . width - 2 * wmargin , rect . height - 2 * hmargin ) ) ; this . editor = editor ; } } } ) ; getContentPane ( ) . add ( editor ) ; }", "import cpw . mods . fml . common . FMLCommonHandler ; import cpw . mods . fml . common . eventhandler . SubscribeEvent ; import cpw . mods . fml . common . gameevent . TickEvent ; import li . cil . oc . api . Network ; import net . minecraft . tileentity . TileEntity ;", "import java . util . HashMap ; import java . io . Writer ; import java . util . ArrayList ; import java . util . Date ;", "@ Nonnull public TimeOffRequestCollectionRequest select ( @ Nonnull final String value ) { addSelectOption ( value ) ; return this ; }", "signatureActions . addAll ( fetchAllActionResults ( wshResult . getResults ( ) , signedActions ) ) ;", "public PGPPublicKeyRing certifyKey ( long masterKeyId , long pubKeyId , String passphrase ) throws PgpGeneralException , PGPException , SignatureException { }", "if ( lambda > TOLERANCE ) { logDet += Math . log ( lambda ) ; }", "fireEvent ( HandlerEventType . MODIFY , group , notModified ) ;", "static HBaseTransaction enforceHBaseTransactionAsParam ( AbstractTransaction < ? extends CellId > tx ) { }", "return Observable . from ( writeData ) . map ( writeState ) . doOnNext ( new Action1 < CollectionIoEvent < MvccEntity > > ( ) {", "create = new Engine . Index ( newUid ( \"1\" ) , doc , indexResult . getSeqNo ( ) , indexResult . getVersion ( ) , create . versionType ( ) . versionTypeForReplicationAndRecovery ( ) , REPLICA , 0 , - 1 , false ) ; indexResult = replicaEngine . index ( create ) ; assertThat ( indexResult . getVersion ( ) , equalTo ( 1L ) ) ; long seqNo = indexResult . getSeqNo ( ) ;", "public Collection < String > readTimeBucket ( String path ) throws InterruptedException { List < String > servers = cluster . getServers ( ) ; int serverCount = servers . size ( ) ; }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event not arrived\" , callback . isEventArrived ( ) ) ;", "mappings . addAll ( MappingSameAs . addSameAsInverse ( mappings ) ) ;", "", "import com . alipay . sofa . jraft . util . Endpoint ; import com . google . protobuf . Message ; import com . google . common . base . Joiner ; import org . slf4j . Logger ;", "import java . util . Deque ; import java . util . HashMap ; import java . util . Collections ;", "", "private By editButtonSelector = By . cssSelector ( \"a#ca-edit\" ) ; private By editDropDownBy = By . cssSelector ( \"article span.drop\" ) ;", "final List < Element > elements = new ArrayList < > ( ) ; final Entity e = new Entity ( TestGroups . ENTITY ) ; final User user = new User ( ) ;", "} catch ( ParseException | CliArgumentParserException e ) { handleCliException ( e ) ;", "static final int MULTICOMBAT_INDICATOR = 17 ; static final int CLAN_CHAT_TAB = 37 ; static final int FRIENDS_TAB = 39 ; static final int IGNORES_TAB = 38 ; static final int LOGOUT_TAB = 40 ; static final int OPTIONS_TAB = 41 ; static final int EMOTES_TAB = 42 ; static final int MUSIC_TAB = 43 ; static final int CLAN_CHAT_ICON = 44 ; static final int FRIENDS_ICON = 46 ; static final int IGNORES_ICON = 45 ; static final int LOGOUT_ICON = 47 ; static final int OPTIONS_ICON = 48 ; static final int EMOTES_ICON = 49 ; static final int MUSIC_ICON = 50 ; static final int COMBAT_TAB = 53 ; static final int STATS_TAB = 54 ; static final int QUESTS_TAB = 55 ; static final int INVENTORY_TAB = 56 ; static final int EQUIPMENT_TAB = 57 ; static final int PRAYER_TAB = 58 ; static final int MAGIC_ICON = 61 ; static final int INVENTORY_ICON = 63 ; static final int INVENTORY_ICON = 65 ; static final int PRAYER_ICON = 66 ; static final int INVENTORY_ICON = 65 ; static final int MAGIC_ICON = 61 ; static final int QUESTS_ICON = 62 ; static final int INVENTORY_ICON = 62 ; static final int PRAYER_ICON = 63 ; static final int INVENTORY_ICON = 65 ; static final int PRAYER_ICON = 65 ; static final int INVENTORY_ICON = 65 ; static final int PRAYER_ICON = 65 ; static final int MAGIC_ICON = 65 ; static final int INVENTORY_ICON = 65 ; static final int", "", "void testStaticResource ( ) { ResponseEntity < String > entity = this . restTemplate . getForEntity ( \"/css/application.css\" , String . class ) ; }", "", "@ Override public void startWatching ( EntityPlayer player ) { localModeWatchers . add ( player ) ; MainProxy . sendPacketToPlayer ( PacketHandler . getPacket ( ModuleInventory . class ) . setIdentList ( ItemIdentifierStack . getListFromInventory ( _filterInventory ) ) . setPosX ( getX ( ) ) . setPosY ( getY ( ) ) . setPosZ ( getZ ( ) ) , player ) ; }", "protected final List < TransitionTime > transitionTimes ;", "import de . rub . nds . tlsattacker . core . constants . ProtocolVersion ; import de . rub . nds . tlsattacker . core . exceptions . AdjustmentException ; import de . rub . nds . tlsattacker . core . protocol . message . Cert . CertificateEntry ; import de . rub . nds . tlsattacker . core . protocol . message . Cert . CertificatePair ; import de . rub . nds . tlsattacker . core . protocol . message . extension . ExtensionMessage ; import de . rub . nds . modifiablevariable . util . ArrayConverter ; import de . rub . nds . tlsattacker . core . crypto . ec . CustomECPoint ; import de . rub . nds . tlsattacker . core . util . CertificateUtils ; import de . rub . nds . tlsattacker . core . util . CurveNameRetriever ; import de . rub . nds . tlsattacker . core . workflow . TlsContext ; import de . rub . nds . tlsattacker . core . workflow . chooser . DefaultChooser ;", "", "import com . socrata . datasync . * ; import com . socrata . datasync . preferences . UserPreferencesFile ; import com . socrata . exceptions . LongRunningQueryException ;", "setState ( 860 ) ; _errHandler . sync ( this ) ;", "IStrategoTerm completionAst = ( IStrategoTerm ) completionParseResult . ast ( ) ; final StrategoTerm topMostAmb = findTopMostAmbNode ( ( StrategoTerm ) completionTerm ) ; final IStrategoTerm inputStratego = termFactory . makeTuple ( completionAst , completionTerm , topMostAmb , parenthesizeTerm ( completionTerm , termFactory ) ) ;", "return dirNode . replaceSelf4Quota ( latest , nsQuota , dsQuota ) ; inodeMap . put ( newNode ) ;", "import com . vaadin . ui . Button ; import com . vaadin . ui . Tree ; import com . vaadin . ui . VerticalLayout ; import com . vaadin . ui . Window ;", "if ( isActive && ! robotPeer . isSentryRobot ( ) ) { int enemyCount = numberOfRobots - 1 ; }", "", "workingAggregate . getClass ( ) . getName ( ) , e ) ;", "@ JmsListener ( destination = \"${authoring.mirror.traceability.queue.name}\" ) @ Transactional public void receiveMessage ( String message ) { logger . debug ( \"Message received\" ) ; TraceabilityActivity activity = null ; try { activity = objectMapper . readValue ( message , TraceabilityActivity . class ) ; } catch ( IOException e ) { logger . error ( \"Failed to parse traceablility message.\" , e ) ; } if ( activity != null ) { logger . info ( \"Applying mirror authoring activity\" ) ; receiveActivity ( activity ) ; } } public void receiveActivity ( TraceabilityActivity activity ) throws ServiceException { }", "public IRI getLabelIri ( ) { return labelIri ; } public void setLabelIri ( IRI aLabelIri ) { labelIri = aLabelIri ; } public IRI getPropertyTypeIri ( ) { return propertyTypeIri ; } public void setPropertyTypeIri ( IRI aPropertyTypeIri ) { propertyTypeIri = aPropertyTypeIri ; } public IRI getFtsIri ( ) { return ftsIri ; } public void setFtsIri ( IRI ftsIri ) { this . ftsIri = ftsIri ; }", "verifyEvent ( m_eventBus , metricName , tags , dp , 0 ) ;", "private JLabel lblPreviewFps ; private JTextField previewFps ; private JLabel lblSuspendDuringTaks ; private JCheckBox suspendPreviewInTasks ; private JLabel lblUserActionLight ; private JCheckBox userActionLightOn ; private JLabel lblAntiglare ; private JCheckBox antiGlareLightOff ; private JLabel lblAfterCapture ; private JCheckBox afterCaptureLightOff ; private JLabel lblOn ; private JLabel lblOff ; private JLabel lblBeforeCapture ; private JCheckBox beforeCaptureLightOn ; private JRadioButton rdbtnPrimaryUpp ; private JRadioButton rdbtnSecondaryUpp ; private JTextField textFieldSecondaryUppX ; private JTextField textFieldSecondaryUppY ; private JLabel lblNewLabel ; private JLabel lblNewLabel_1 ; private JTextField textFieldPrimaryUppHeightAboveCamera ; private JTextField textFieldSecondaryUppHeightAboveCamera ; private JLabel lblObjectZ ; private JLabel lblNewLabel_3 ; private JButton btnCaptureZ ; private JPanel panelCal ; private JTextField textFieldThickness ; private JLabel lblThickness ; private JPanel panelDefaultWorkingPlane ; private JLabel lblNewLabel_2 ; private JTextField textFieldDefaultZ ; private JLabel lblNewLabel_4 ; private LocationButtonsPanel locationButtonsDefaultWorkingPlane ;", "sParams = mapParams ( CommonParams . QT , \"/sql\" , \"stmt\" , \"select id, field_i, str_s from collection1 where text='XXXX'\" ) ;", "void injectKeytab ( ExecutionCommand ec , String command , String targetHost ) throws AmbariException { String dataDir = ec . getCommandParams ( ) . get ( KerberosServerAction . DATA_DIRECTORY ) ; if ( dataDir != null ) { KerberosIdentityDataFileReader reader = null ; List < Map < String , String > > kcp = ec . getKerberosCommandParams ( ) ; try { reader = kerberosIdentityDataFileReaderFactory . createKerberosIdentityDataFileReader ( new File ( dataDir , KerberosIdentityDataFileReader . DATA_FILE_NAME ) ) ; for ( Map < String , String > record : reader ) { String hostName = record . get ( KerberosIdentityDataFileReader . HOSTNAME ) ; if ( targetHost . equalsIgnoreCase ( hostName ) ) { if ( \"SET_KEYTAB\" . equalsIgnoreCase ( command ) ) { String keytabFilePath = record . get ( KerberosIdentityDataFileReader . KEYTAB_FILE_PATH ) ; if ( keytabFilePath != null ) { String sha1Keytab = DigestUtils . sha1Hex ( keytabFilePath ) ; File keytabFile = new File ( dataDir + File . separator + hostName + File . separator + sha1Keytab ) ; if ( keytabFile . canRead ( ) ) { Map < String , String > keytabMap = new HashMap < String , String > ( ) ; String principal = record . get ( KerberosIdentityDataFileReader . PRINCIPAL ) ; String isService = record . get ( KerberosIdentityDataFileReader . SERVICE ) ; keytabMap . put ( KerberosIdentityDataFileReader . HOSTNAME , hostName ) ; keytabMap . put ( KerberosIdentityDataFileReader . SERVICE ) ; keytabMap . put ( KerberosIdentityDataFileReader . PRINCIPAL ) ; String isService = record . get ( KerberosIdentityDataFileReader . COMPONENT , record . get", "private static final String PLAYLIST_WITH_TTML_SUBTITLE = \" #EXTM3U\\n\" + \"\\n\" + \"#EXT-X-VERSION:6\\n\" + \"\\n\" + \"#EXT-X-INDEPENDENT-SEGMENTS\\n\" + \"\\n\" + \"#EXT-X-STREAM-INF:BANDWIDTH=1280000,CODECS=\\\"stpp.ttml.im1t,mp4a.40.2,avc1.66.30\\\",RESOLUTION=304x128,AUDIO=\\\"aud1\\\",SUBTITLES=\\\"sub1\\\"\\n\" + \"http://example.com/low.m3u8\\n\" + \"\\n\" + \"#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\\\"aud1\\\",NAME=\\\"English\\\",URI=\\\"a1/index.m3u8\\\"\\n\" + \"#EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID=\\\"sub1\\\",NAME=\\\"English\\\",AUTOSELECT=YES\\n\" + \"#EXT-X-MEDIA:TYPE=CLOSED-CAPTIONS,GROUP-ID=\\\"cc1\\\",LANGUAGE=\\\"en\\\",NAME=\\\"English\\\",AUTOSELECT=YES\\n\" + \"#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\\\"audio-aac\\\",LANGUAGE=\\\"es\\\",NAME=\\\"Spanish\\\",AUTOSELECT=YES,DEFAULT=YES,INSTREAM-ID=\\\"sub1\\\",NAME=\\\"English\\\",AUTOSELECT=YES,DEFAULT=YES,URI=\\\"s1/en/prog_index.m3u8\\\"\\n\" + \"#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1,BANDWIDTH=400000,RESOLUTION=480x320,CODECS=\\\"mp4a.40.2,av", "import com . google . gerrit . entities . Project ; import com . google . gerrit . entities . RefNames ; import com . google . gerrit . common . Nullable ;", "", "import net . floodlightcontroller . topology . web . TopologyWebRoutable ;", "if ( ! useAccumuloStart ) clazz = Writer . class . getClassLoader ( ) . loadClass ( classname ) . asSubclass ( KeyFunctor . class ) ; else if ( context != null && ! context . equals ( \"\" ) ) clazz = AccumuloVFSClassLoader . getContextManager ( ) . loadClass ( context , classname , KeyFunctor . class ) ;", "", "{ final String requestId = Telemetry . registerNewRequest ( ) ; final APIEvent apiEvent = createApiEvent ( mContext , clientId , requestId , EventStrings . ACQUIRE_TOKEN_3 ) ; apiEvent . setSilentRequestPromptBehavior ( prompt . toString ( ) ) ; final AuthenticationRequest request = new AuthenticationRequest ( mAuthority , resource , clientId , redirectUri , null , prompt , null , getRequestCorrelationId ( ) , getExtendedLifetimeEnabled ( ) ) ; request . setTelemetryRequestId ( requestId ) ; createAcquireTokenRequest ( apiEvent ) . acquireToken ( wrapActivity ( activity ) , false , request , callback ) ; }", "public int hollowOutRegion ( Region region , int thickness , Pattern pattern ) throws MaxChangedBlocksException { return hollowOutRegion ( region , thickness , pattern , new SolidBlockMask ( this ) ) ; } public int hollowOutRegion ( final Region region , final int thickness , final Pattern pattern , Mask mask ) { }", "public static enum EnergyCubeTier implements IStringSerializable", "public Builder setDropInvalidMessage ( boolean dropInvalidMessage ) { this . dropInvalidMessage = dropInvalidMessage ; return this ; } public Builder setBehaviorOnNullValues ( BehaviorOnNullValues behaviorOnNullValues ) { this . behaviorOnNullValues = Objects . requireNonNull ( behaviorOnNullValues , \"behaviorOnNullValues cannot be null\" ) ; return this ; }", "ClientResource client = getClientForUriPath ( RestletApplication . ADMIN_PATH , USERNAME , SECRET ) ;", "final RequestContext context = new RequestContext ( ) ; context . setOperationList ( opList , fullSize ) ; DelegateProxyService service = DelegateProxyService . getInstance ( ) ; DelegateProxy proxy = service . newDelegateProxy ( context ) ; opList . applyNonEndpointMutations ( new Info ( ) , proxy ) ;", "JsonFactory f = JsonFactory . builder ( ) . enable ( JsonReadFeature . ALLOW_NON_NUMERIC_NUMBERS ) . build ( ) ;", "import ar . renderers . ParallelSpatial ; import ar . app . util . CharityNetLoader ; import ar . rules . Aggregators ;", "import org . grouplens . lenskit . util . test . ExtraMatchers . LongSortedArraySet ; import org . junit . Test ; import com . google . common . collect . Iterators ; import com . google . common . collect . Sets ;", "if ( jj_3R_660 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_661 ( ) ) return true ; }", "@ Override public void onProtocolSessionEndedNACKed ( SessionType sessionType , byte sessionID , String correlationID ) { _connectionListener . onProtocolSessionEndedNACKed ( sessionType , sessionID , correlationID ) ; }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 2 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "import io . warp10 . continuum . store . thrift . data . DirectoryStatsRequest ; import io . warp10 . continuum . store . thrift . data . DirectoryStatsResponse ;", "void addCellsToWriter ( Map < ByteBuffer , List < ColumnUpdate > > cells , BatchWriterPlusProblem bwpe ) { }", "Mono < StreamMessageId > add ( K key , V value ) ;", "{ try { if ( dataComponent . getDefinition ( ) . contains ( OmConstants . OM_PARAMETER ) ) { parseDataRecordAsParameter ( ( SweDataRecord ) dataComponent , block , tokenIndex , parameterHolder ) ; } else { observedValue = parseSweDataRecord ( ( ( SweDataRecord ) dataComponent ) . copy ( ) , block , tokenIndex ) ; } } else if ( dataComponent instanceof SweVector ) { try { parseSweVectorAsGeometry ( ( ( SweVector ) dataComponent ) . clone ( ) , block , tokenIndex , samplingGeometry ) ; } catch ( CloneNotSupportedException e ) { throw new NoApplicableCodeException ( ) . causedBy ( e ) . withMessage ( \"Unable to copy element '%s'.\" , dataComponent . getClass ( ) . getName ( ) ) ; } }", "int widthSpec = MeasureSpec . makeMeasureSpec ( frameDesc . frame . width ( ) , MeasureSpec . EXACTLY ) ; int heightSpec = MeasureSpec . makeMeasureSpec ( frameDesc . frame . height ( ) , MeasureSpec . EXACTLY ) ;", "final View buttonView = mLauncher . getWidgetsButton ( ) ;", "TIntDoubleHashMap vector = getVector ( pageId ) ;", "if ( mustBeIndexed ) { if ( ( ds . getIndexTime ( ) == null ) || ( ds . getIndexTime ( ) . compareTo ( ds . getModificationTime ( ) ) <= 0 )", "throw new ParsingException ( parseContext , \"[\" + NAME + \"] query text missing\" ) ;", "@ Override public void createIndicesForNewExperiment ( NewExperiment newExperiment ) { LOGGER . debug ( \"Create indices for new experiment Experiment {}\" , newExperiment ) ; updateExperimentLabelIndex ( newExperiment . getID ( ) , newExperiment . getApplicationName ( ) , newExperiment . getLabel ( ) , newExperiment . getStartTime ( ) , newExperiment . getEndTime ( ) , State . DRAFT ) ; try { updateStateIndex ( newExperiment . getID ( ) , ExperimentState . NOT_DELETED ) ; } catch ( Exception e ) { LOGGER . error ( \"Create indices for new experiment Experiment {} failed\" , newExperiment , e ) ; removeExperimentLabelIndex ( newExperiment . getApplicationName ( ) , newExperiment . getLabel ( ) ) ; throw new RepositoryException ( \"Could not update indices for experiment \\\"\" + newExperiment + \"\\\"\" , e ) ; } } @ Override public AssignmentCounts getAssignmentCounts ( Experiment . ID experimentID , Context context ) { LOGGER . debug ( \"Get Assignment Counts for Experiment {} and context {}\" , new Object [ ] { experimentID , context } ) ; List < Bucket > bucketList = getBuckets ( experimentID , false ) . getBuckets ( ) ; AssignmentCounts . Builder builder = new AssignmentCounts . Builder ( ) ; builder . withExperimentID ( experimentID ) ; List < BucketAssignmentCount > bucketAssignmentCountList = new ArrayList < > ( bucketList . size ( ) + 1 ) ; long bucketAssignmentsCount = 0 , nullAssignmentsCount = 0 ; for ( Bucket bucket : bucketList ) { try { ResultSet counts = userBucketIndexAccessor . countUserBy ( experimentID . getRawID ( ) , context . toString ( ) , bucket . getLabel ( ) . toString ( ) ; Long count = counts . one ( ) . get ( 0 , Long . class ) ; bucketAssignmentCountList . add ( new BucketAssignmentCount . Builder ( ) . withBucket ( bucket . getLabel ( ) . withCount ( count )", "import it . unimi . dsi . fastutil . longs . * ;", "sideMenu . setAdapter ( drawerLayoutAdapter = new DrawerLayoutAdapter ( this , itemAnimator ) ) ; ItemTouchHelper drawerItemTouchHelper = new ItemTouchHelper ( new DrawerItemTouchHelperCallback ( ) ) ; drawerItemTouchHelper . attachToRecyclerView ( sideMenu ) ;", "", "import it . unibz . krdb . obda . ontology . ObjectPropertyExpression ; import it . unibz . krdb . obda . ontology . ObjectSomeValuesFrom ; import it . unibz . krdb . obda . owlrefplatform . core . basicoperations . * ;", "if ( ! Configuration . WITHOUT_BRANCH_NOT_TAKEN ) { }", "setState ( 574 ) ;", "onlyReturnedFields ( matchedHit . sourceAsMap ( ) , nestedLoopsRequest . getSecondTable ( ) . getReturnedFields ( ) , nestedLoopsRequest . getSecondTable ( ) . getOriginalSelect ( ) . isSelectAll ( ) ) ; InternalSearchHit searchHit = new InternalSearchHit ( currentCombinedResults , hitFromFirstTable . id ( ) + \"|\" + matchedHit . getId ( ) , new Text ( hitFromFirstTable . getType ( ) + \"|\" + matchedHit . getType ( ) ) , hitFromFirstTable . getFields ( ) ) ;", "public UserStream getUserStream ( ) throws TwitterException { ensureAuthorizationEnabled ( ) ; if ( ! ( statusListener instanceof UserStreamListener ) ) { logger . warn ( \"Use of UserStreamListener is suggested.\" ) ; } }", "httpBinding = Http . get ( actorSystem ) . bindAndHandle ( createRoute ( actorSystem , gatewayConfig , proxyActor , streamingActor , healthCheckActor , healthCheckConfig ) . flow ( actorSystem , materializer ) ,", "public int compareTo ( byte [ ] lhs , int lhsOffset , int lhsLength , ColumnModifier lhsColMod , byte [ ] rhs , int rhsOffset , int rhsLength , ColumnModifier rhsColMod , PDataType rhsType ) { switch ( rhsType ) { case TIMESTAMP : return compareTo ( lhs , lhsOffset , lhsLength , lhsColMod , rhs , rhsOffset , rhsLength , rhsColMod ) ; case DATE : case TIME : int c = DATE . compareTo ( lhs , lhsOffset , lhsLength - 4 , lhsColMod , rhs , rhsOffset , rhsLength , rhsColMod ) ; if ( c != 0 ) return c ; return lhs [ lhsOffset + 8 ] == 0 && lhs [ lhsOffset + 9 ] == 0 && lhs [ lhsOffset + 10 ] == 0 && lhs [ lhsOffset + 11 ] == 0 ? 0 : 1 ; default : throw new ConstraintViolationException ( rhsType + \" cannot be coerced to \" + this ) ; } } @ Override", "private boolean raidStarted ; @ Inject private ClientToolbar clientToolbar ; private RaidsPanel panel ; private int upperTime = - 1 ; private int middleTime = - 1 ; private int lowerTime = - 1 ; private int raidTime = - 1 ; private WidgetOverlay widgetOverlay ; private String tooltip ; public boolean canShow ; private NavigationButton navButton ;", "Cell name = new Cell ( 1 , 3 ) . add ( new Paragraph ( \"Name\" ) ) ; name . setBackgroundColor ( ColorConstants . CYAN ) ;", "\"@from(table = 'rdbms' ,datasource.name = '\" + RDBMSTestConstants . DATA_SOURCE_NAME + \"' \" + \", table.name = '\" + RDBMSTestConstants . TABLE_NAME + \"', cache='lru', cache.size='1000') \" +", "* Get max datetime value with positive num offset 9999 - 12 - 31 T23 : 59 : 59.9999999 - 14 : 00", "", "new String [ ] { selectStmt . getSqltext ( ) } , 3 , 3 , 2 , 42 , 42 , Long . MAX_VALUE ) ;", "MediaType mediaType = mUploadingMedia . get ( mediaId ) ; switch ( mediaType ) { case IMAGE : mWebView . execJavaScriptFromString ( \"ZSSEditor.markImageUploadFailed(\" + mediaId + \", '\" + errorMessage . replace ( \"'\" , \"\\\\'\" ) . replace ( \"\\\"\" , \"\\\\\\\"\" ) + \"');\" ) ; break ; case VIDEO : mWebView . execJavaScriptFromString ( \"ZSSEditor.markVideoUploadFailed(\" + mediaId + \");\" ) ; }", "{ mCurrentAnimation = startAnimationToWorkspaceFromOverlay ( fromWorkspaceState , toWorkspaceState , mLauncher . getWidgetsButton ( ) , widgetsView , widgetsView . getContentView ( ) , widgetsView . getRevealView ( ) , null , animated , onCompleteRunnable , cb ) ; }", "import org . apache . log4j . Logger ; import org . rrd4j . data . DataProcessor ; import org . rrd4j . data . Plottable ;", "protected void postEquipWeapon ( int playerId , Weapon newWeapon , Weapon currentWeapon , Player player ) { }", "Assert . fail ( ex . getMessage ( ) ) ;", "private static final class BranchAndSide implements Comparable < BranchAndSide > { private final Branch branch ; private final Branch . Side side ; }", "Preconditions . checkNotNull ( uri ) ; return new ClientKeyValueFileReader ( uri ) ;", "} catch ( Exception e ) { Logging . recoverableException ( Logging . getLogger ( Loggers . LOCALIZATION ) , getClass ( ) , \"handleGetObject\" , e ) ;", "return new OrderBook ( new Date ( ) , Collections . emptyList ( ) , Collections . emptyList ( ) ) ;", "new SpProcedureTask ( m_mailbox , procedureName , m_pendingTasks , msg , m_drGateway ) ; if ( ! msg . isReadOnly ( ) ) { if ( ! m_cl . log ( msg , newSpHandle , m_durabilityListener , task ) ) { m_pendingTasks . offer ( task ) ; } } else { m_pendingTasks . offer ( task ) ; }", "switch ( type ) { case PHAROAH_PHRASE_TABLE : case PHAROAH_PHRASE_TABLE_ALT : phraseTables . add ( new FlatPhraseTable < FV > ( filename ) ) ; generators . add ( pt ) ; tables . add ( ( PhraseTable < IString > ) pt ) ; break ; case DTU_GENERATOR : phraseTables . add ( new DTUTable < FV > ( filename ) ; generators . add ( pt ) ; tables . add ( ( PhraseTable < IString > ) pt ) ; break ; default : throw new RuntimeException ( String . format ( \"Unknown phrase table type: '%s'\\n\" , type ) ) ; }", "( ( BaseFragment ) f ) . logPageView ( ) ; if ( m_curPage == Page . Profile ) { }", "* @ param context the Ldap connection to close", "", "private static final String TOKEN = \"token\" ; private static final String DEFAULT_CHANNEL = \"defaultChannel\" ; private static final String ICON_URL = \"iconurl\" ; private static final String BOT_NAME = \"botname\" ; private static final String SHOW_BUILD_AGENT = \"showBuildAgent\" ; private static final String SHOW_COMMITS = \"showCommits\" ; private static final String SHOW_COMMITTERS = \"showCommitters\" ; private static final String SHOW_FAILURE_REASON = \"showFailureReason\" ; private static final String MAX_COMMITS_TO_DISPLAY = \"maxCommitsToDisplay\" ; private static final String SHOW_ELAPSED_BUILD_TIME = \"showElapsedBuildTime\" ; private static final String HTTPS = \"https://\" ; private static final String HTTP = \"http://\" ; private static final String PROXY = \"proxy\" ; private static final String USERNAME = \"username\" ; private static final String PASSWORD = \"password\" ; private static final String ENABLED = \"enabled\" ; private static final String TEAM_NAME = \"teamName\" ;", "@ Override public SnapshotFormat getFormat ( ) { return SnapshotFormat . CSV ; } @ Override public String toString ( ) { return m_file . toString ( ) ; }", "Set < HostRequest > hostRequests = new HashSet < > ( ) ; hostRequests . add ( new HostRequest ( host1 , cluster1 ) ) ; hostRequests . add ( new HostRequest ( host2 , cluster1 ) ) ; hostRequests . add ( new HostRequest ( host3 , cluster1 ) ) ;", "import < %= packageName % > . web . rest . util . HeaderUtil ; < % _ } _ % > < % _ if ( databaseType == = 'sql' || databaseType == = 'mongodb' || databaseType == = 'couchbase' ) { _ % > import < %= packageName % > . web . rest . util . PaginationUtil ; < % _ } _ % >", "", "import org . apereo . cas . ticket . TicketState ; import org . apereo . cas . util . serialization . SerializationUtils ;", "@ SideOnly ( Side . CLIENT ) public static void addRainParticles ( Random random , int rendererUpdateCount , float f ) { Minecraft mc = Minecraft . getMinecraft ( ) ; random . setSeed ( ( long ) rendererUpdateCount * 312987231L ) ; Entity entity = mc . getRenderViewEntity ( ) ; World world = mc . world ; BlockPos blockpos = new BlockPos ( entity ) ; int i = 10 ; double x = 0.0D ; double y = 0.0D ; double z = 0.0D ; double xx = 0.0D ; double yy = 0.0D ; double zz = 0.0D ; int j = 0 ; int k = ( int ) ( 100.0F * f * f ) ; if ( mc . gameSettings . particleSetting == 1 ) { k >>= 1 ; } else if ( mc . gameSettings . particleSetting == 2 ) { k = 0 ; } for ( int l = 0 ; l < k ; ++ l ) { BlockPos blockpos1 = world . getPrecipitationHeight ( blockpos . add ( random . nextInt ( i ) - random . nextInt ( i ) , 0 , random . nextInt ( i ) - random . nextInt ( i ) ) ; Biome biome = world . getBiome ( blockpos1 ) ; boolean canRain = biome . canRain ( ) && biome . getFloatTemperature ( blockpos1 ) >= 0.15F ; if ( world . provider instanceof IWeatherProvider ) canRain = true ; if ( canRain && blockpos1 . getY ( ) <= blockpos . getY ( ) + i && blockpos1 . getY ( ) >= blockpos . getY ( ) - random . nextInt ( i ) ) { double xd = random . nextDouble ( ) ; double zd = random . nextDouble", "import org . apache . cloudstack . api . command . admin . resource . ListCapacityCmd ; import org . apache . cloudstack . api . command . admin . pod . ListPodsByCmd ; import org . apache . cloudstack . api . command . admin . systemvm . ListSystemVMsCmd ; import org . apache . cloudstack . api . command . admin . vlan . ListVlanIpRangesCmd ; import org . apache . cloudstack . api . command . admin . systemvm . RebootSystemVmCmd ; import org . apache . cloudstack . api . command . admin . systemvm . StopSystemVmCmd ; import org . apache . cloudstack . api . command . admin . domain . UpdateDomainCmd ; import org . apache . cloudstack . api . command . admin . host . UpdateHostPasswordCmd ; import com . cloud . api . query . dao . DomainRouterJoinDao ; import com . cloud . api . query . dao . InstanceGroupJoinDao ; import org . apache . cloudstack . api . command . admin . resource . UploadCustomCertificateCmd ; import org . apache . cloudstack . api . response . ExtractResponse ;", "Map < String , Set < Model > > modelMap = new HashMap < > ( context . getModelMap ( ) ) ; for ( Set < Model > modelList : modelMap . values ( ) ) { for ( Model model : modelList ) { adapter . registerType ( model . getName ( ) , model . getId ( ) ) ; } } MergingContext mergingContext = populateTypes ( modelMap ) ; for ( ModelContext rootContext : modelContexts ) { Map < String , Model > modelBranch = newHashMap ( ) ; final Map < String , ModelContext > contextMap = newHashMap ( ) ; markIgnorablesAsHasSeen ( typeResolver , ignorableTypes , rootContext ) ; Optional < Model > pModel = modelProvider . modelFor ( rootContext ) ; List < String > branchRoots = new ArrayList < String > ( ) ; }", "", "* Long running put request , service returns a 202 to the initial request with Azure - AsyncOperation header . Subsequent calls to operation status do not contain Azure - AsyncOperation header .", "spendUsage ( usedStorageSize ) ; if ( executorType == ET_NORMAL_TYPE ) { }", "import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ;", "mDebugView . initModules ( mDrawerItems ) ;", "* < li > { @ code Set < AttributeType > } for the { @ code features } property < / li > * < li > { @ code Set < FeatureType > } for the { @ code attributes } property < / li > * < li > { @ code Set < FeatureType > } for the { @ code featureInstances } property < / li > * < li > { @ code Set < AttributeType > } for the { @ code attributeInstances } property < / li >", "generator . writeBooleanField ( \"draft\" , dataSetMetadata . isDraft ( ) ) ; generator . writeStringField ( \"certification\" , dataSetMetadata . getGovernance ( ) . getCertificationStep ( ) . toString ( ) ) ;", "NBTTagList list = tag . getTagList ( \"ItemData\" , 10 ) ;", "matcher . addURI ( authority , KeychainContract . BASE_CERTS , CERTS ) ; matcher . addURI ( authority , KeychainContract . BASE_CERTS + \"/#\" , CERTS_BY_ROW_ID ) ; matcher . addURI ( authority , KeychainContract . BASE_CERTS + \"/\" + KeychainContract . PATH_BY_KEY_ROW_ID + \"/#\" , CERTS_BY_KEY_ROW_ID ) ; matcher . addURI ( authority , KeychainContract . BASE_CERTS + \"/\" + KeychainContract . PATH_BY_KEY_ROW_ID + \"/#/all\" , CERTS_BY_KEY_ROW_ID_ALL ) ; matcher . addURI ( authority , KeychainContract . BASE_CERTS + \"/\" + KeychainContract . PATH_BY_KEY_ID + \"/#\" , CERTS_BY_KEY_ID ) ; matcher . addURI ( authority , KeychainContract . BASE_CERTS + \"/\" + KeychainContract . PATH_BY_CERTIFIER_ID + \"/#\" , CERTS_BY_CERTIFIER_ID ) ;", "* Long running put request , service returns a 202 to the initial request with Azure - AsyncOperation header . Subsequent calls to operation status do not contain Azure - AsyncOperation header .", "if ( value == null ) { writeInt48LE ( newValue , offset , 0 ) ; } else { Node inode = allocDirtyNode ( ) ; encodeInt48LE ( newValue , offset , inode . mId ) ; int levels = calculateInodeLevels ( vlength , pageSize ) ; writeMultilevelFragments ( caller , levels , inode , value , 0 , vlength ) ; }", "@ Override public double getSuccessFraction ( ObjectContainer container ) { if ( persistenceType == PERSIST_FOREVER && progressPending != null ) container . activate ( progressPending , 2 ) ; }", "if ( ThingMLHelpers . allStateMachines ( inst . getType ( ) ) != null ) { if ( StateHelper . allMessageHandlers ( ThingMLHelpers . allStateMachines ( inst . getType ( ) ) . get ( 0 ) ) != null ) { if ( StateHelper . allMessageHandlers ( ThingMLHelpers . allStateMachines ( inst . getType ( ) ) . get ( 0 ) ) . get ( p ) != null ) { if ( StateHelper . allMessageHandlers ( ThingMLHelpers . allStateMachines ( inst . getType ( ) ) . get ( 0 ) ) . get ( p ) . containsKey ( m ) ) { } } } }", "@ Override public void visit ( Tree . IfStatement that ) { Node ois = ifStatementOrExpression ; Node oss = switchStatementOrExpression ; ifStatementOrExpression = that ; switchStatementOrExpression = null ; super . visit ( that ) ; ifStatementOrExpression = ois ; switchStatementOrExpression = oss ; } @ Override public void visit ( Tree . ElseClause that ) { Tree . Variable var = that . getVariable ( ) ; if ( var != null ) { var . visit ( this ) ; if ( switchStatementOrExpression != null ) { Tree . Expression switchExpression = switchClause ( ) . getExpression ( ) ; Tree . SwitchCaseList switchCaseList = switchCaseList ( ) ; if ( switchExpression != null && switchCaseList != null ) { ProducedType st = switchExpression . getTypeModel ( ) ; if ( ! isTypeUnknown ( st ) ) { ProducedType caseUnionType = caseUnionType ( switchCaseList ) ; if ( caseUnionType != null ) { ProducedType complementType = unit . denotableType ( st . minus ( caseUnionType ) ) ; var . getType ( ) . setTypeModel ( complementType ) ; var . getDeclarationModel ( ) . setType ( complementType ) ; } } } } if ( ifStatementOrExpression != null ) { Tree . ConditionList conditionList = ifClause ( ) . getConditionList ( ) ; if ( conditionList != null ) { Tree . Condition c = conditionList . getConditions ( ) . get ( 0 ) ; Tree . SpecifierExpression se = var . getSpecifierExpression ( ) ; if ( c instanceof Tree . ExistsCondition ) { Tree . ExistsCondition ec = ( Tree . ExistsCondition ) c ; inferDefiniteType ( var , se , ! ec . getNot ( ) ) ; var . getSpecifierExpression ( ) ; if ( c instanceof Tree . IsCondition ) { Tree . ExistsCondition ec = ( Tree . IsCondition ) c ; inferDefiniteType", "import edu . emory . mathcs . backport . java . util . Collections ; import org . apache . cloudstack . acl . ControlledEntity . ACLType ; import org . apache . cloudstack . acl . SecurityChecker . AccessType ; import org . apache . cloudstack . api . command . admin . usage . ListTrafficTypeImplementorsCmd ; import org . apache . cloudstack . api . command . user . network . CreateNetworkCmd ; import org . apache . cloudstack . api . command . user . network . ListNetworksCmd ; import org . apache . cloudstack . api . command . user . network . RestartNetworkCmd ; import org . apache . log4j . Logger ; import javax . ejb . Local ; import javax . naming . ConfigurationException ; import java . net . URI ; import java . security . InvalidParameterException ; import java . sql . PreparedStatement ; import java . sql . ResultSet ; import java . sql . SQLException ; import java . util . * ; import java . util . concurrent . Executors ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . TimeUnit ;", "import com . salesforce . phoenix . schema . TableNotFoundException ; import com . salesforce . phoenix . jdbc . PhoenixStatement ; import com . salesforce . phoenix . query . KeyRange ;", "assertFalse ( \"invalid value\" , invalidCourse . isValid ( ) ) ;", "@ SuppressFBWarnings ( value = \"SE_BAD_FIELD\" , justification = \"stored value is always serializable\" ) private final Map < Symbol , MutableSparseVector > channelMap ; private Map < TypedSymbol < ? > , TypedSideChannel < ? > > typedChannelMap ;", "", "@ NoHistory private byte [ ] imageDataPreview ; @ PropertyInfo ( i18nKey = \"vacation.substitution\" ) private Set < AddressbookDO > addressbookList = new HashSet < > ( ) ;", "ObservationEncoder < Object , Object > encoder = ( ObservationEncoder < Object , Object > ) CodingRepository . getInstance ( ) . getEncoder ( new XmlEncoderKey ( response . getResponseFormat ( ) , new OmObservation ( ) . getClass ( ) ) ) ; if ( encoder == null && response . isSetContentType ( ) ) { encoder = ( ObservationEncoder < Object , Object > ) CodingRepository . getInstance ( ) . getEncoder ( new OperationEncoderKey ( response . getService ( ) , response . getVersion ( ) , response . getOperationName ( ) , response . getContentType ( ) ) ) ; } if ( encoder == null && response . isSetResponseFormat ( ) ) { try { encoder = ( ObservationEncoder < Object , Object > ) CodingRepository . getInstance ( ) . getEncoder ( new OperationEncoderKey ( response . getService ( ) , response . getVersion ( ) , response . getOperationName ( ) , MediaType . parse ( response . getResponseFormat ( ) ) ) ) ; } catch ( IllegalArgumentException iae ) { LOGGER . debug ( \"ResponseFormat isNot a XML response format\" ) ; } } if ( encoder != null ) { return encoder . shouldObservationsWithSameXBeMerged ( ) ; }", "import com . google . gerrit . server . logging . Metadata ;", "private static final Logger logger = LoggerFactory . getLogger ( MethodHandles . lookup ( ) . lookupClass ( ) ) ; private final Timer timer ; private final Collection < OnGameTypeInfoListener > onModInfoMessageListeners ; private final Collection < OnGameInfoListener > onGameInfoListeners ; private Collection < OnRankedMatchNotificationListener > onRankedMatchNotificationListeners ;", "mNewsHeadline = ( TextView ) findViewById ( R . id . news_headline ) ; mCalendarTitleText = ( TextView ) findViewById ( R . id . calendar_title ) ; mCalendarDetailsText = ( TextView ) findViewById ( R . id . calendar_details ) ;", "", "setState ( 627 ) ; ( ( CastableExprContext ) _localctx ) . main_expr = castExpr ( ) ; setState ( 631 ) ;", "final var providerIds = WebUtils . getResolvedMultifactorAuthenticationProviders ( requestContext ) ; final var providers = MultifactorAuthenticationUtils . getMultifactorAuthenticationProvidersByIds ( providerIds , applicationContext ) ;", "import ch . qos . logback . core . status . OnConsoleStatusListener ; import ch . qos . logback . core . testUtil . EnvUtilForTests ; import ch . qos . logback . core . testUtil . RandomUtil ; import ch . qos . logback . core . util . CoreTestConstants ;", "import com . stratio . meta2 . common . statements . structures . selectors . ColumnSelector ;", "NumericRestrictions numericRestrictions = new NumericRestrictions ( new Limit < > ( new BigDecimal ( 10 ) , false ) , new Limit < > ( new BigDecimal ( 30 ) , false ) ) ; FieldSpec fieldSpecWithTypedNumericRestrictionsAndNullNotDisallowed = FieldSpec . fromType ( NUMERIC ) . withNumericRestrictions ( numericRestrictions ) ;", "schemaName = resolveSchema ( resultSet ) ; boolean hasSchema = schemaName != null && ! \"\" . equals ( schemaName . trim ( ) ) ; String tableName = resultSet . getString ( \"TABLE_NAME\" ) ;", "if ( page >= totalPages ) { page = - 1 ; } PlantUmlResult . Diagram [ ] diagrams ; if ( page == - 1 ) { diagrams = new PlantUmlResult . Diagram [ totalPages ] ; for ( int i = 0 ; i < totalPages ; i ++ ) { ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; desc = reader . generateImage ( os , i , new FileFormatOption ( format . getFormat ( ) ) ) ; diagrams [ i ] = new PlantUmlResult . Diagram ( os . toByteArray ( ) ) ; } } else { diagrams = new PlantUmlResult . Diagram [ 1 ] ; ByteArrayOutputStream os = new ByteArrayOutputStream ( ) ; desc = reader . generateImage ( os , page , new FileFormatOption ( format . getFormat ( ) ) { @ Override public UGraphic createUGraphic ( ColorMapper colorMapper , double dpiFactor , Dimension2D dim , HtmlColor mybackcolor , boolean rotation ) { return super . createUGraphic ( colorMapper , dpiFactor * zoom / 100 , dim , mybackcolor , rotation ) ; } } ) ; diagrams [ 0 ] = new PlantUmlResult . Diagram ( os . toByteArray ( ) ) ; } return new PlantUmlResult ( diagrams , desc , totalPages ) ;", "", "public DexController ( DexService service , DexOfferTransactionCreator dexOfferTransactionCreator , TimeService timeService , DexEthService dexEthService , EthereumWalletService ethereumWalletService , DexMatcherServiceImpl dexMatcherService , DexOfferProcessor dexOfferProcessor , DexSmartContractService dexSmartContractService ) { }", "public int getNextAvailableIndex ( Long parentMenuId ) throws SBonitaReadException { int lastIndex = getLastUsedIndex ( parentMenuId ) ; return lastIndex + 1 ; } protected Integer executeGetLastUsedIndexQuery ( Long parentMenuId ) throws SBonitaReadException { SelectOneDescriptor < Integer > selectDescriptor ; if ( parentMenuId == null ) { selectDescriptor = new SelectOneDescriptor < Integer > ( \"getLastIndexForRootMenu\" , Collections . < String , Object > emptyMap ( ) , SApplicationMenu . class ) ; } else { SApplicationMenuBuilderFactoryImpl factory = new SApplicationMenuBuilderFactoryImpl ( ) ; selectDescriptor = new SelectOneDescriptor < Integer > ( \"getLastIndexForChildOf\" , Collections . < String , Object > singletonMap ( factory . getParentIdKey ( ) , parentMenuId ) , SApplicationMenu . class ) ; } Integer lastUsedIndex = persistenceService . selectOne ( selectDescriptor ) ; return lastUsedIndex ; } public int getLastUsedIndex ( Long parentMenuId ) throws SBonitaReadException { Integer lastUsedIndex = executeGetLastUsedIndexQuery ( parentMenuId ) ; return lastUsedIndex == null ? 0 : lastUsedIndex ; } @ Override public List < String > getAllPagesForProfile ( long profileId ) throws SBonitaReadException { SelectListDescriptor < String > selectList = new SelectListDescriptor < String > ( \"getAllPagesForProfile\" , Collections . < String , Object > singletonMap ( \"profileId\" , profileId ) , SApplicationPage . class , new QueryOptions ( 0 , QueryOptions . UNLIMITED_NUMBER_OF_RESULTS ) ) ; return persistenceService . selectList ( selectList ) ; }", "", "if ( savedInstanceState != null ) { mWaitingToPreview = ( OCFile ) savedInstanceState . getParcelable ( FileDisplayActivity . KEY_WAITING_TO_PREVIEW ) ; }", "* Set redstone trigger lock . onVehiclePositionChange ( BaseVehicle vehicle , int blockX , int blockY , int blockZ ) { if ( ! minecartControlBlocks && ! minecartTrackMessages && ! minecartDispensers ) { return ; } if ( vehicle instanceof Minecart ) { Minecart minecart = ( Minecart ) vehicle ; Vector underPt = new Vector ( blockX , blockY - 1 , blockZ ) ; int under = CraftBook . getBlockID ( blockX , blockY - 1 , blockZ ) ; if ( minecartControlBlocks ) { if ( under == minecart25xBoostBlock ) { Boolean test = testRedstoneSimpleInput ( underPt ) ; if ( test == null || test ) { minecart . setMotionX ( minecart . getMotionX ( ) * 1.25 ) ; minecart . setMotionZ ( minecart . getMotionZ ( ) * 1.25 ) ; return ; } } else if ( under == minecart100xBoostBlock ) { Boolean test = testRedstoneSimpleInput ( underPt ) ; if ( test == null || test ) { minecart . setMotionX ( minecart . getMotionX ( ) * 1.25 ) ; minecart . setMotionZ ( minecart . getMotionZ ( ) * 1.25 ) ; return ; } } else if ( under == minecart100xBoostBlock ) { Boolean test = testRedstoneSimpleInput ( underPt ) ; if ( test == null || test ) { minecart . setMotionX ( minecart . setMotionZ ( minecart . getMotionZ ( ) * 1.25 ) ; minecart . setMotionZ ( minecart . getMotionZ ( minecart . getMotionZ ( ) * 1.", "protected EntityManager getEntityManager ( ) { }", "import org . apache . hadoop . hive . metastore . TableType ; import org . apache . hadoop . hive . io . HdfsUtils ;", "import io . global . kv . GlobalKvDriver ; import io . global . kv . LocalKvNodeImpl ;", "transform . getClass ( ) . getName ( ) , taskName ,", "* Long running put request , service returns a 202 to the initial request with location header . Subsequent calls to operation status do not contain location header .", "if ( text ) { TextView undoTextView = new TextView ( context ) ; undoTextView . setOnClickListener ( v -> undo ( ) ) ; undoTextView . setBackground ( Theme . createSelectorDrawable ( ( undoCancelColor & 0x00ffffff ) | 0x19000000 , 7 ) ) ; undoTextView . setTextSize ( TypedValue . COMPLEX_UNIT_DIP , 14 ) ; undoTextView . setTypeface ( AndroidUtilities . getTypeface ( \"fonts/rmedium.ttf\" ) ) ; undoTextView . setTextColor ( undoCancelColor ) ; undoTextView . setText ( LocaleController . getString ( \"Undo\" , R . string . Undo ) ) ; undoTextView . setGravity ( Gravity . CENTER_VERTICAL ) ; ViewHelper . setPaddingRelative ( undoTextView , 16 , 0 , 16 , 0 ) ; addView ( undoTextView , LayoutHelper . createFrameRelatively ( LayoutHelper . WRAP_CONTENT , 48 , Gravity . CENTER_VERTICAL , 0 , 0 , 0 , 0 ) ) ; } else { final ImageView undoImageView = new ImageView ( getContext ( ) ) ; undoImageView . setOnClickListener ( v -> undo ( ) ) ; undoImageView . setImageResource ( R . drawable . chats_undo ) ; undoImageView . setColorFilter ( new PorterDuffColorFilter ( undoCancelColor , PorterDuff . Mode . SRC_IN ) ) ; undoImageView . setBackground ( Theme . createSelectorDrawable ( ( undoCancelColor & 0x19000000 ) ) ; ViewHelper . setPaddingRelative ( undoImageView , 0 , 12 , 0 , 12 ) ; addView ( undoImageView , LayoutHelper . createFrameRelatively ( 56 , 48 , Gravity . CENTER_VERTICAL ) ; addView ( undoImageView , LayoutHelper . createFrameRelatively ( 56 , 48 , Gravity", "try ( Stream < AbstractFeature > features = reader . features ( ) ) { final Iterator < AbstractFeature > it = features . iterator ( ) ; }", "loadPluginInfo ( RestManager . class , \"restManager\" ) ;", "dao . saveOrUpdate ( topic ) ; userMentionService . notifyNotMentionedUsers ( topic . getFirstPost ( ) ) ;", "+ \"[rose.speech(Yes, Mistress! I'd love to help!)]\"", "import java . text . SimpleDateFormat ; import java . util . Date ; import java . util . LinkedHashMap ; import java . util . LinkedList ; import java . util . Map ; import java . time . Duration ; import java . time . Instant ;", "public static class CookieResolver extends LogSupport { }", "String partitionColumns = context . getConfig ( ) . kafkaPartitionColumns ; String partitionFallback = context . getConfig ( ) . kafkaPartitionFallback ; this . partitioner = new MaxwellKafkaPartitioner ( hash , partitionKey , partitionColumns , partitionFallback ) ; this . outputDDL = context . getConfig ( ) . outputDDL ; this . ddlPartitioner = new MaxwellKafkaPartitioner ( hash , \"database\" ) ; this . ddlTopic = context . getConfig ( ) . ddlKafkaTopic ;", "EditSession editSession = session . createEditSession ( player ) ; BlockVector3 origin = clicked . toVector ( ) . toBlockPoint ( ) ; BlockType initialType = world . getBlock ( origin ) . getBlockType ( ) ;", "public void setSwingFootLocation ( FramePoint footLocation ) { this . swingFootCentroid . setIncludingFrame ( footLocation ) ; } public void setSwingFootLocation ( FramePoint2d footLocation ) { this . swingFootCentroid . setXYIncludingFrame ( footLocation ) ; } public void getSwingFootLocation ( FramePoint footLocationToPack ) { footLocationToPack . setIncludingFrame ( swingFootCentroid . getFrameTuple ( ) ) ; } public void setSupportFootLocation ( FramePoint footLocation ) { this . supportFootCentroid . setIncludingFrame ( footLocation ) ; } public void setSupportFootLocation ( FramePoint2d footLocation ) { this . supportFootCentroid . setXYIncludingFrame ( footLocation ) ; } public void getSupportFootLocation ( FramePoint footLocationToPack ) { footLocationToPack . setIncludingFrame ( supportFootCentroid . getFrameTuple ( ) ) ; } public void setFeetLocation ( FramePoint swingFootLocation , FramePoint supportFootLocation ) { setSwingFootLocation ( swingFootLocation ) ; setSupportFootLocation ( supportFootLocation ) ; } public void setFeetLocation ( FramePoint swingFootLocation , FramePoint supportFootLocation ) ; }", "public void testAcquireTokenByRefreshTokenNotReturningRefreshToken ( ) throws IOException , InterruptedException { final FileMockContext mockContext = new FileMockContext ( getContext ( ) ) ; final ITokenCacheStore mockCache = getCacheForRefreshToken ( TEST_IDTOKEN_USERID , TEST_IDTOKEN_UPN ) ; }", "ResolvedEventuateSchema . make ( eventuateSchema , jdbcUrl ) ,", "protected JmlVariableDecl newTempDecl ( DiagnosticPosition pos , Type t ) { return newTempDecl ( pos , uniqueTempString ( ) , t ) ; } protected JmlVariableDecl newTempDecl ( DiagnosticPosition pos , String s , Type t ) { Name n = M . Name ( s ) ; JmlVariableDecl d = ( JmlVariableDecl ) treeutils . makeVarDef ( t , n , ( esc || infer ) ? null : methodDecl . sym , esc ? Position . NOPOS : pos . getPreferredPosition ( ) ) ; }", "public ChatUser createOrGetChatUser ( User user ) { ChatUser chatUser = getChatUser ( user . getNick ( ) ) ; if ( chatUser != null ) { return chatUser ; } }", "import com . owncloud . android . MainApp ; import com . owncloud . android . R ; import com . owncloud . android . authentication . AccountAuthenticator ; import com . owncloud . android . datamodel . OCFile ; import com . owncloud . android . files . services . FileUploader ; import com . owncloud . android . lib . common . utils . Log_OC ; import com . owncloud . android . operations . RemoteOperation ; import com . owncloud . android . lib . common . operations . RemoteOperationResult ; import com . owncloud . android . operations . CreateFolderOperation ; import com . owncloud . android . ui . dialog . CreateFolderDialogFragment ; import com . owncloud . android . ui . dialog . LoadingDialog ; import com . owncloud . android . utils . CopyTmpFileAsyncTask ;", "DocearController . getController ( ) . getDocearEventLogger ( ) . appendToLog ( this , DocearLogEvent . MAP_CLOSED , f ) ; touchFileForAutoSaveBug ( f ) ;", "import com . cloud . vm . VirtualMachineProfile ;", "import us . ihmc . yoVariables . registry . YoVariableRegistry ; import us . ihmc . yoVariables . variable . YoVariable ;", "EntityPlayerSP player = PlayerUtil . getPlayerBaseClientFromPlayer ( FMLClientHandler . instance ( ) . getClient ( ) . player , false ) ;", "itemOrder = getResources ( ) . getStringArray ( R . array . TEA_control_sets_prefs ) ; String moreSectionTrigger = getString ( R . string . TEA_ctrl_more_pref ) ; String whenViewDescriptor = getString ( R . string . TEA_ctrl_when_pref ) ; View whenView = getView ( ) . findViewById ( R . id . when_container ) ; String shareViewDescriptor = getString ( R . string . TEA_ctrl_share_pref ) ;", "@ Override public boolean restart ( ObjectContainer container , ClientContext context ) { }", "for ( ToolModel t : machine . getTools ( ) ) { PacketBuilder pb = new PacketBuilder ( MotherboardCommandCode . TOOL_QUERY . getCode ( ) ) ; pb . add8 ( ( byte ) t . getIndex ( ) ) ; pb . add8 ( ToolCommandCode . GET_PLATFORM_TEMP . getCode ( ) ) ; PacketResponse pr = runQuery ( pb . getPacket ( ) ) ; if ( pr . isEmpty ( ) ) return ; int temp = pr . get16 ( ) ; machine . currentTool ( ) . setPlatformCurrentTemperature ( temp ) ; Base . logger . fine ( \"Current platform temperature (T\" + t . getIndex ( ) + \"): \" + machine . currentTool ( ) . getPlatformCurrentTemperature ( ) + \"C\" ) ; }", "StringBuilder logArgs = new StringBuilder ( ) ; List < DataEntity < ? > > list = new LinkedList < > ( ) ;", "try { Constructor < ? > ctor = exercise . getClass ( ) . getConstructor ( List . class ) ; TrainingExercise newExercise = ( TrainingExercise ) ctor . newInstance ( arenaController . getCanvasManager ( ) . getTargetGroups ( ) ) ; ( ( ProjectorTrainingExerciseBase ) newExercise ) . init ( config , camerasSupervisor , this , arenaController ) ; newExercise . init ( ) ; config . setExercise ( newExercise ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } } ) ;", "public TermsConsumer addField ( FieldInfo field ) throws IOException { assert currentField == null || currentField . name . compareTo ( field . name ) < 0 : \"current field name \" + ( currentField == null ? null : currentField . name ) + \" given: \" + field . name ; }", "final Thread thread = iterator . next ( ) ; if ( isEngine ( thread ) && ! thread . getName ( ) . startsWith ( \"net.sf.ehcache.CacheManager\" ) ) { }", "int expectedStage = plant . getStages ( ) [ currentMonth . id ( ) ] ;", "", "double latitude = 0.0 ; double longitude = 0.0 ; double lat = 0.0 ; double lon = 0.0 ; if ( coords != null ) return ; longitude = coords . getLongitude ( ) ; if ( lat < 0 ) { bLat . setText ( \"S\" ) ; } else { bLat . setText ( \"N\" ) ; }", "import javax . xml . bind . JAXBException ;", "public void schema_int ( ) { final String response = createResource ( Audience . INTERNAL , \"api-doc/whois-resources.xsd\" ) . request ( MediaType . APPLICATION_XML ) . get ( String . class ) ; assertThat ( response , containsString ( \"<xs:element name=\\\"whois-resources\\\">\" ) ) ; } @ Test public void lookup_accept_application_xml ( ) { final String response = createResource ( AUDIENCE , \"whois/test/person/TP1-TEST\" ) . request ( MediaType . APPLICATION_XML ) . get ( String . class ) ; assertThat ( response , containsString ( \"<?xml version='1.0' encoding='UTF-8'?>\" ) ) ; assertThat ( response , containsString ( \"<whois-resources>\" ) ) ; } @ Test public void lookup_accept_application_xml ( ) { final String response = createResource ( AUDIENCE , \"whois/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/", "private void initSpeechRecognition ( ) { SpeechToText . sharedInstance ( ) . initWithContext ( this . getHost ( STT_URL ) , this . getApplicationContext ( ) , new SpeechConfiguration ( ) ) ; SpeechToText . sharedInstance ( ) . setCredentials ( this . USERNAME_STT , this . PASSWORD_STT ) ; SpeechToText . sharedInstance ( ) . setTokenProvider ( new MyTokenProvider ( this . strSTTTokenFactoryURL ) ) ; SpeechToText . sharedInstance ( ) . setModel ( \"en-US_BroadbandModel\" ) ; SpeechToText . sharedInstance ( ) . setDelegate ( this ) ; TextToSpeech . sharedInstance ( ) . initWithContext ( this . getHost ( TTS_URL ) ) ; TextToSpeech . sharedInstance ( ) . setCredentials ( this . USERNAME_TTS , this . PASSWORD_TTS ) ; TextToSpeech . sharedInstance ( ) . setTokenProvider ( new MyTokenProvider ( this . strTTSTokenFactoryURL ) ) ; TextToSpeech . sharedInstance ( ) . setVoice ( \"en-US_MichaelVoice\" ) ; } public static class ItemModel { }", "final Options opts = checkOptions ( 3 , Q_OPTIONS , new Options ( ) , ctx ) ; ctx . resources . updates ( ) . add ( new DBAdd ( data , input , opts , ctx , info ) , ctx ) ;", "System . arraycopy ( encodedList . get ( idx ) , 0 , data , dynamicOffset , encodedList . get ( idx ) . length ) ;", "public void drawDownload ( Graphics g , float position , int id , boolean hover ) { Download download = this . download ; }", "public static final int [ ] LAYOUT_VERSIONS_203 = { - 19 , - 31 } ; public static final int LAST_PRE_FEDERATION_LAYOUT_VERSION = - 30 ;", "return el . canSpawn ( worldServer ) && el . canSpawn ( worldServer , SpawnType . NATURAL ) && SpawnRestriction . canSpawn ( el . getType ( ) , el . getEntityWorld ( ) , SpawnType . NATURAL , el . getSenseCenterPos ( ) , el . getEntityWorld ( ) . random ) &&", "public class TopologyManager implements IFloodlightModule , ITopologyService , IRoutingService , ILinkDiscoveryListener , IOFMessageListener , IHAListener { }", "payment . setPaymentId ( internalPaymentId ) ; spiResponse = periodicPaymentSpi . getPaymentStatusById ( spiPsuData , payment , aspspConsentData ) ;", "import javax . inject . Inject ; import java . util . Collections ; import java . util . List ;", "public void onResume ( ) { mMoSyncSensor . onResume ( ) ; } public void onPause ( ) { mMoSyncSensor . onResume ( ) ; }", "import android . os . Parcel ; import android . os . Parcelable ; import android . support . annotation . NonNull ; import com . mercadopago . lite . util . ParcelableUtil ; import java . io . Serializable ;", "public static List < Calibration > latest ( int number ) { Sensor sensor = Sensor . currentSensor ( ) ; if ( sensor == null ) { return null ; } return new Select ( ) . from ( Calibration . class ) . where ( \"Sensor = ? \" , sensor . getId ( ) ) . orderBy ( \"timestamp desc\" ) . limit ( number ) . execute ( ) ; } public static Calibration first ( ) { Sensor sensor = Sensor . currentSensor ( ) ; return new Select ( ) . from ( Calibration . class ) . where ( \"Sensor = ? \" , sensor . getId ( ) ) . orderBy ( \"timestamp asc\" ) . executeSingle ( ) ; } public static double max ( ) { Sensor sensor = Sensor . currentSensor ( ) ; Calibration calibration = new Select ( ) . from ( Calibration . class ) . where ( \"Sensor = ? \" , sensor . getId ( ) ) . where ( \"slope_confidence != 0\" ) . where ( \"sensor_confidence != 0\" ) . where ( \"timestamp > ?\" , ( new Date ( ) . getTime ( ) - ( 60000 * 60 * 24 * 5 ) ) ) . orderBy ( \"bg desc\" ) . executeSingle ( ) ; return calibration . bg ; } public static double min ( ) { Sensor sensor = Sensor . currentSensor ( ) ; Calibration calibration = new Select ( ) . from ( Calibration . class ) . where ( \"Sensor = ? \" , sensor . getId ( ) ) . where ( \"slope_confidence != 0\" ) . where ( \"timestamp > ?\" , ( new Date ( ) . getTime ( ) - ( 60000 * 60 * 24 * 5 ) ) ) . orderBy ( \"bg asc\" ) . executeSingle ( ) ; return calibration . bg ; } public static double min ( ) { Sensor sensor = Sensor . currentSensor ( ) ; Calibration calibration = new Select ( ) . from ( Cal", "", "", "private boolean jj_3R_627 ( ) { if ( jj_scan_token ( READ ) ) return true ; }", "private String primaryStorageUuidForRootVolume ; private String rootPassword ;", "setState ( 350 ) ;", "", "", "private FileModificationRegistry fileModificationRegistry = new FileModificationRegistry ( new File ( \".\" ) , FalseFileFilter . INSTANCE ) ;", "cardBoardItem . setSelected ( false ) ; dayDreamItem . setSelected ( false ) ; arItem . setSelected ( false ) ;", "is ( snippet ( asciidoctor ( ) ) . withContents ( httpRequest ( asciidoctor ( ) , RequestMethod . GET , \"/\" ) . header ( \"a\" , \"alpha\" ) . header ( \"b\" , \"bravo\" ) . header ( \"Content-Type\" , \"application/json\" ) . header ( \"Accept\" , MediaType . APPLICATION_JSON_VALUE ) . header ( \"Host\" , \"localhost\" ) . header ( \"Content-Length\" , \"13\" ) . content ( \"{\\\"a\\\":\\\"alpha\\\"}\" ) ) ) ) ;", "installAnalytics , limit , socialRepository , \"anyString\" , appCoinsManager , ironSourceInterstitialAdExperiment , ironSourceAdRepository ) ;", "DefaultChannel channel = new DefaultChannel ( mock ( Context . class ) , UUIDUtils . randomUUID ( ) . toString ( ) , mockPersistence , mockIngestion , mAppCenterHandler ) ; channel . addGroup ( TEST_GROUP , 50 , BATCH_TIME_INTERVAL , MAX_PARALLEL_BATCHES , null , mockListener ) ;", "private List < ParallelTaskRunner . TaskWithException < Variant , Variant , Exception > > getVariantTaskList ( ) throws IOException { List < ParallelTaskRunner . TaskWithException < Variant , Variant , Exception > > variantAnnotatorTaskList = new ArrayList < > ( numThreads ) ; }", "public void openIndex ( KnowledgeBase aKb ) { try { log . info ( \"Index has been opened for KB \" + aKb . getName ( ) ) ; } catch ( Exception e ) { log . error ( \"Unable to open index\" , e ) ; } } @ Override public void indexLocalKb ( KnowledgeBase aKb ) throws IOException { Analyzer analyzer = new StandardAnalyzer ( ) ; File f = new File ( \"${repository.path}/luceneIndex\" ) ; Directory directory = FSDirectory . open ( f . toPath ( ) ) ; IndexWriter indexWriter = new IndexWriter ( directory , new IndexWriterConfig ( analyzer ) ) ; try ( RepositoryConnection conn = getConnection ( aKb ) ) { RepositoryResult < Statement > stmts = RdfUtils . getStatementsSparql ( conn , null , RDFS . LABEL , null , Integer . MAX_VALUE , false , null ) ; while ( stmts . hasNext ( ) ) { Statement stmt = stmts . next ( ) ; String id = stmt . getSubject ( ) . stringValue ( ) ; String label = stmt . getObject ( ) . stringValue ( ) ; try { indexEntity ( id , label , indexWriter ) ; } catch ( IOException e ) { log . error ( \"Could not index entity with id [{}] and label [{}]\" , id , label ) ; } } } indexWriter . close ( ) ; } private void indexEntity ( String aId , String aLabel , IndexWriter aIndexWriter ) throws IOException { String FIELD_ID = \"id\" ; String FIELD_CONTENT = \"label\" ; Document doc = new Document ( ) ; doc . add ( new StringField ( FIELD_CONTENT , aLabel , Field . Store . YES ) ) ; aIndexWriter . add ( new StringField ( FIELD_CONTENT , aLabel , Field . Store . YES ) ) ; aIndexWriter . addDocument ( doc ) ; aIndexWriter . commit", "public CommanderChainer hasBeenCreatedWithWorkingDir ( File workingDir ) { call ( new ValueCommand < Void > ( ) { @ Override public Void call ( ) throws Exception { new BRJSBuilder ( specTest , brjs ) . hasBeenCreatedWithWorkingDir ( workingDir ) ; return null ; } } ) ; return commanderChainer ; } public CommanderChainer hasVersion ( String version ) { specTest . appVersionGenerator . setVersion ( version ) ; return commanderChainer ; }", "{ Set < Joint > consumers = retryConsumers ( retryMessageModelList ) ; if ( retryTokenAvailable ( consumers ) ) { return ; } RetryMessageModel retryMessageModel = retryMessageModelList . get ( 0 ) ; TraceStat totalRetryTrace = tracer . begin ( \"BrokerRetryManager.addRetry\" ) ; TraceStat appRetryTrace = tracer . begin ( String . format ( \"BrokerRetryManager.addRetry.%s.%s\" , retryMessageModel . getApp ( ) , retryMessageModel . getTopic ( ) ) ) ; try { long startTime = SystemClock . now ( ) ; delegate . addRetry ( retryMessageModelList ) ; } else { throw new JoyQueueException ( JoyQueueCode . RETRY_TOKEN_LIMIT ) ; } } public boolean retryTokenAvailable ( Set < Joint > consumers ) { for ( Joint consumer : consumers ) { RateLimiter rateLimiter = rateLimiterManager . getOrCreate ( consumer . getTopic ( ) , consumer . getApp ( ) ) ; if ( rateLimiter . tryAcquireTps ( ) ) { return true ; } } return false ; } public Set < Joint > retryConsumers ( List < RetryMessageModel > retryMessageModelList ) { Set < Joint > consumers = new HashSet ( retryMessageModelList . size ( ) ) ; for ( RetryMessageModel m : retryMessageModelList ) { consumers . add ( new Joint ( m . getTopic ( ) , m . getApp ( ) ) ; if ( rateLimiter . tryAcquireTps ( ) ) { return true ; } } return false ; } public Set < Joint > retryConsumers ( List < RetryMessageModel > retryMessageModelList ) { Set < Joint > consumers = new HashSet ( retryMessageModelList . size ( ) ) ; for ( RetryMessageModel m : retryMessageModelList ) { consumers . add ( new Joint ( m . getTopic ( ) , m . getApp ( ) )", "prop . setComment ( \"Lower/Raise this value to change time between suffocation damage ticks (allowed range 50-250)\" ) ; prop . setLanguageKey ( \"gc.configgui.suffocation_cooldown\" ) ;", "private static final Logger log = LoggerFactory . getLogger ( JsonUtil . class ) ;", "if ( selectedOptions . get ( direction ) . equals ( SideOption . POWER_INPUT ) ) { EnergyAttribute energyAttribute = EnergyAttribute . ENERGY_ATTRIBUTE . getFirstFromNeighbour ( this , direction ) ; }", "String queryString = \"match (role1:$x, role2:$x) isa relation1;\" ; String queryString2 = \"match (role1:$x, role2:$y) isa relation1;\" ; List < Answer > answers = qb . < MatchQuery > parse ( queryString ) . execute ( ) ; List < Answer > answers2 = qb . < MatchQuery > parse ( queryString2 ) . execute ( ) ;", "setState ( 799 ) ;", "", "when ( persistence . getLogs ( anyString ( ) , anyListOf ( String . class ) , anyInt ( ) , anyListOf ( Log . class ) ) ) . thenAnswer ( getGetLogsAnswer ( 50 ) ) . thenAnswer ( getGetLogsAnswer ( 50 ) ) . thenAnswer ( getGetLogsAnswer ( 3 ) ) ;", ": refsToDelete . stream ( ) . map ( ref -> ref . startsWith ( R_REFS ) ? ref : prefix + ref )", "import org . fcrepo . kernel . api . exception . RepositoryRuntimeException ;", "if ( logger . isLoggable ( Level . FINER ) ) logger . log ( Level . FINER , \" Returning class {0}\" , clazz ) ;", "public void thymeleafCacheIsFalse ( ) throws Exception { this . context = getContext ( ( ) -> initializeAndRun ( Config . class ) ) ; SpringResourceTemplateResolver resolver = this . context . getBean ( SpringResourceTemplateResolver . class ) ; }", "jj_la1 [ 119 ] = jj_gen ;", "import org . jetbrains . annotations . NotNull ; import okhttp3 . OkHttpClient ;", "viewport . setLayout ( null ) ; viewport . getStyle ( ) . getBackground ( ) . setColor ( 1 , 1 , 1 , 0 ) ; viewport . getStyle ( ) . setBorder ( null ) ;", "Set < IProject > projectsToDeploy , RunState runOrDebug , DebugSupport debugSupport ) {", "public static final String VIOLATION_TYPE_MISSING = \"MISSING\" ; public static final String VIOLATION_TYPE_INVALID = \"INVALID\" ; private static final String OUTPUT_FILE_DIRECTORY_COLLISION = \"An output file has the same path as an output directory\" ; private static final String OUTPUT_FILE_IS_INPUT_DIRECTORY = \"An output file has the same path as an input directory\" ; private static final String OUTPUT_DIRECTORY_IS_INPUT_FILE = \"An output directory has the same path as an input file\" ; public static final String OUTPUT_FILE_IS_OUTPUT_ANCESTOR = \"An output file is an ancestor to another output\" ; public static final String OUTPUT_DIRECTORY_IS_OUTPUT_ANCESTOR = \"An output directory is an ancestor to another output\" ; public static final String VIOLATION_TYPE_MISSING = \"MISSING\" ; public static final String VIOLATION_TYPE_INVALID = \"INVALID\" ;", "short replFactor = 1 ; MiniDFSCluster cluster = new MiniDFSCluster . Builder ( conf ) . numDataNodes ( 2 ) . build ( ) ;", "allowed = encoder . acceptWay ( way ) ; encoded = encoder . handleWayTags ( way , allowed , 0 ) ;", "public static void checkResult ( int cuResult ) { if ( cuResult != CUresult . CUDA_SUCCESS ) { throw new CudaException ( CUresult . stringFor ( cuResult ) ) ; } }", "mUriMatcher . addURI ( authority , \"virtual\" , VIRTUAL ) ; mUriMatcher . addURI ( authority , \"arbitrary_data\" , ARBITRARY_DATA ) ;", "@ Override public void cancel ( ObjectContainer container , ClientContext context ) { }", "private Blockchain blockchain ; private UTXOSet utxoSet ; private Wallet wallet ; private ECKey key ; private String type ; private Client client ; @ Inject public PeerBuilder ( Blockchain blockchain , UTXOSet utxoSet , Client client ) { this . blockchain = blockchain ; this . utxoSet = utxoSet ; this . client = client ; }", "@ Nullable public IBCPipePluggable getBCPipePluggable ( final EnumFacing sideHit ) { }", "", ". deleteCookies ( \"JSESSIONID\" < % if ( clusteredHttpSession == 'hazelcast' ) { % > , \"hazelcast.sessionId\" < % } % > ) . permitAll ( ) < % } % > . and ( ) . csrf ( ) . disable ( ) < % if ( authenticationType == 'xauth' ) { % > . csrf ( ) . disable ( ) < % } % >", "import stroom . util . zip . HeaderMap ;", "try { if ( docWriter . deleteQuery ( query ) ) { flush ( true , false ) ; } } catch ( OutOfMemoryError oom ) { handleOOM ( oom , \"deleteDocuments(Query)\" ) ; }", "TwoFactorAuthTestData td = new TwoFactorAuthTestData ( ) ; doReturn ( td . ENTITY1 . clone ( ) ) . when ( targetFileRepository ) . get ( td . ACC_1 . getId ( ) ) ;", "public HeartbeatExtensionPreparator ( Chooser chooser , HeartbeatExtensionMessage message , HeartbeatExtensionSerializer serializer ) { super ( chooser , message , serializer ) ; }", "TCondition _elem93 ; _elem93 = new TCondition ( ) ; _elem93 . read ( iprot ) ; struct . conditions . add ( _elem93 ) ;", "import moze_intel . projecte . api . tile . IEmcAcceptor ; import moze_intel . projecte . api . tile . IEmcProvider ; import moze_intel . projecte . api . tile . TileEmcBase ; import com . google . common . base . Predicates ; import com . google . common . collect . Maps ;", "session . getPlacementPosition ( player ) , radius , waterlogged ) ; player . print ( BBC . getPrefix ( ) + affected + \" block(s) have been changed.\" ) ;", "if ( editInProgress ( ) ) { stopEditing ( true ) ; } getContext ( ) . startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( url ) ) ) ;", "* Test explicitly optional complex object . Please put a valid class - wrapper with 'value' = null .", "final double d = this . noiseGen1 . getNoise ( ( x + ( chunkX * 16 ) ) , ( z + ( chunkZ * 16 ) ) ) * 8 ; final double d2 = this . noiseGen2 . getNoise ( ( x + ( chunkX * 16 ) ) , ( z + ( chunkZ * 16 ) ) ) * 24 ; final double d3 = this . noiseGen3 . getNoise ( ( x + ( chunkX * 16 ) ) , ( z + ( chunkZ * 16 ) ) ) - 0.1 ; d3 *= 4 ;", "void testSanitize2 ( ) { }", "public Room ( int roomid , boolean isleft , RoomList roomList ) { MyClient . getMyClient ( ) . setRoom ( this ) ; System . out . println ( \"\u00c3\u00a7\u00c2\u00bd\u00c4\u00b3\u00c3\u00a7\u00c2\u00bb\u00c4\u00be\u00c3\u00a5\u00c2\u00af\u00c2\u00b9\u00c3\u00a6\u00c4\u00aa\u00c4\u00ba\" ) ; this . roomList = roomList ; }", "String hostName , boolean recoveryEnabled , boolean masterComponent , Long hostId ) {", "TestShardRouting . newShardRouting ( index , i , randomFrom ( nodeIds ) , null , null , term , j == 0 , ShardRoutingState . fromValue ( ( byte ) randomIntBetween ( 2 , 4 ) ) , unassignedInfo ) ) ;", "private final AtomicLong requests ; private final AtomicLong hits ; public PartReaderAndCounters ( HostDomainPartition part , Reader reader ) { }", "final ConfigKeyPair keypair = new FilesystemKeyPair ( null , null , null ) ; final KeyConfiguration keyConfig = new KeyConfiguration ( passes , null , singletonList ( keypair ) , null , null , null ) ;", "if ( bs . getBlock ( ) == this && bs . getValue ( BlockPlatform . CORNER ) == BlockPlatform . EnumCorner . SE ) return new AxisAlignedBB ( ( double ) pos . getX ( ) + 9 / 16D , ( double ) pos . getY ( ) , ( double ) pos . getZ ( ) + 9 / 16D , ( double ) pos . getX ( ) + 1.0D , ( double ) pos . getY ( ) + HEIGHT , ( double ) pos . getZ ( ) + 1.0D ) ;", "boolean updateMatrix = true ;", "", "{ return accumulator ; } ) ; } return reducer . getResult ( ) . thenApply ( CubeDiff :: of ) ; } private List < String > getAllParents ( ) { return getAllParents ( ) ; } private static class DrillDownsAndChains { public Set < QueryResult . Drilldown > drilldowns ; public Set < List < String > > chains ; public DrillDownsAndChains ( Set < QueryResult . Drilldown > drilldowns , Set < List < String > > chains ) { this . drilldowns = drilldowns ; this . chains = chains ; } } private DrillDownsAndChains getDrillDownsAndChains ( Set < String > dimensions , Set < String > measures , AggregationPredicate where ) { Set < QueryResult . Drilldown > drilldowns = newHashSet ( ) ; List < String > queryDimensions = newArrayList ( concat ( dimensions , where . getFullySpecifiedDimensions ( ) . keySet ( ) ) ) ; for ( AggregationContainer aggregationContainer : aggregations . values ( ) ) { Set < String > aggregationMeasures = newHashSet ( ) ; aggregationMeasures . addAll ( aggregationContainer . measures ) ; if ( ! all ( queryDimensions , in ( aggregationContainer . aggregation . getKeys ( ) ) ) || ! any ( measures , in ( aggregationMeasures ) ) || AggregationPredicates . and ( aggregationContainer . predicate , where ) . simplify ( ) == alwaysFalse ( ) ) continue ; Set < String > availableMeasures = newHashSet ( ) ; intersection ( aggregationMeasures , measures ) . copyInto ( availableMeasures ) ; Iterable < String > filteredDimensions = filter ( aggregationContainer . aggregation . getKeys ( ) , not ( in ( queryDimensions ) ) ) ; Set < List < String > filteredChains = buildDrillDownChains ( Sets . < String > newHashSet ( ) , aggregationContainer . aggregation . getKeys ( ) , not ( in ( queryDimensions ) ) )", "import java . util . HashMap ; import java . util . Map ;", "import org . apache . ambari . server . controller . AmbariServer ; import org . apache . ambari . server . controller . KerberosHelper ; import org . apache . ambari . server . controller . KerberosHelperImpl ;", "import org . apache . logging . log4j . LogManager ; import org . apache . logging . log4j . core . LoggerContext ; import org . apache . logging . log4j . core . config . Configurator ; import org . bouncycastle . asn1 . pkcs . PrivateKeyInfo ; import org . bouncycastle . cert . X509CertificateHolder ; import org . bouncycastle . cert . jcajce . JcaX509CertificateConverter ; import org . bouncycastle . openssl . PEMParser ; import org . bouncycastle . openssl . jcajce . JcaPEMKeyConverter ;", "", "boolean outputBlocked = isOutputBlocked ( ) ; double distY = Math . abs ( getTile ( ) . getPos ( ) . add ( 0 , 1 , 0 ) . getY ( ) + .5 - entity . getPosY ( ) ) ; double treshold = .9 ; boolean contact = distY < treshold ;", "steppingPresenter . read ( pipeline , stepLocation , meta , childStreamType ) ;", "private final javax . swing . JScrollPane jScrollPane1 = new javax . swing . JScrollPane ( ) ; private final javax . swing . JScrollPane jScrollPane2 = new javax . swing . JScrollPane ( ) ; private final javax . swing . JScrollPane jScrollPane3 = new javax . swing . JScrollPane ( ) ; private final javax . swing . JButton refreshButton = new javax . swing . JButton ( ) ;", "settings . checkUrlParameters ( JdbcSettings . Provider . MYSQL , \"jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&useCursorFetch=true\" ) ;", "", "* Long running post request , service returns a 202 to the initial request Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "public abstract EffortDuration getTheoreticalCompletedTimeUntilDate ( Date date ) ; public BigDecimal getTheoreticalAdvancePercentageUntilDate ( Date date ) { EffortDuration totalAllocatedTime = AggregateOfDayAssignments . create ( this . getDayAssignments ( ) ) . getTotalTime ( ) ; EffortDuration totalTheoreticalCompletedTime = this . getTheoreticalCompletedTimeUntilDate ( date ) ; if ( totalAllocatedTime . isZero ( ) || totalTheoreticalCompletedTime . isZero ( ) ) { return BigDecimal . ZERO ; } Validate . isTrue ( totalTheoreticalCompletedTime . getSeconds ( ) <= totalAllocatedTime . getSeconds ( ) ) ; return totalTheoreticalCompletedTime . dividedByAndResultAsBigDecimal ( totalAllocatedTime ) ; } public abstract boolean isFinished ( ) ; public abstract boolean isInProgress ( ) ; public abstract void acceptVisitor ( TaskElementVisitor visitor ) ; public abstract void resetStatus ( ) ; public void updateAdvancePercentageFromOrderElement ( ) { setAdvancePercentage ( getOrderElement ( ) . getAdvancePercentage ( ) ) ; }", "import com . psddev . dari . db . Application ;", "void validation ( ) { ResponseEntity < String > entity = this . restTemplate . getForEntity ( \"/reverse\" , String . class ) ; }", "if ( ! ksqlVersionCheckerConfig . isProactiveSupportEnabled ( ) ) { }", "import java . util . Collections ; import com . hubspot . singularity . event . SingularityEventListener ;", "new CopyArtifact ( \"testJob\" , null , null , null , null , false , false , true ) . getProjectName ( ) ) ;", "import com . netflix . conductor . common . utils . JsonMapperProvider ; import com . google . common . base . Preconditions ; import com . netflix . conductor . client . config . ConductorClientConfiguration ; import com . netflix . conductor . client . config . DefaultConductorClientConfiguration ; import com . netflix . conductor . client . exceptions . ConductorClientException ; import com . netflix . conductor . client . exceptions . ErrorResponse ; import com . netflix . conductor . common . run . ExternalStorageLocation ; import com . netflix . conductor . common . utils . ExternalPayloadStorage ;", "import com . intellij . vcs . log . ui . table . VcsLogColumn ;", "import com . djrapitops . plan . systems . webserver . WebServerSystem ;", "if ( audioEncoder . prepareAudioEncoder ( bitrate , sampleRate , isStereo , microphoneManager . getMaxInputSize ( ) ) ) { audioInitialized = true ; return true ; } return false ;", "getClusterCommandSet ( injector ) , getPluginCommandSet ( injector ) , getTenantCommandSet ( injector ) , getProvisionerCommandSet ( injector )", "public boolean isPercentage ( ) { return type . equals ( SegmentationType . PERCENTAGE ) ; } public Integer getPercentage ( ) { return this . percentage ; } public void setPercentage ( Integer percentage ) { this . validatePercentage ( percentage , \"Percentage must be between 0 and 100\" ) ; this . percentage = percentage ; } private void validatePercentage ( Integer percentage , String message ) { if ( percentage != null ) { Assert . isTrue ( percentage <= 100 && percentage >= 0 , message ) ; } } public int sumPercentage ( Integer percentageToSum ) { this . validatePercentage ( this . percentage + percentageToSum , \"Sum of percentage of circles exceeded 100 or is lower than 0\" ) ; return this . percentage += percentageToSum ; } public Boolean isActive ( ) { return active ; } public void setActive ( Boolean active ) { this . active = active ; }", "import static com . gentics . mesh . core . rest . admin . migration . MigrationStatus . COMPLETED ; import static com . gentics . mesh . core . rest . admin . migration . MigrationStatus . RUNNING ; import static com . gentics . mesh . core . rest . common . ContainerType . DRAFT ; import static com . gentics . mesh . core . rest . common . ContainerType . PUBLISHED ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import javax . inject . Inject ; import javax . inject . Singleton ; import com . gentics . mesh . context . MicronodeMigrationContext ;", "import java . util . LinkedHashSet ; import java . util . List ;", "public Future < WebSocket > start ( ) { final FutureTask < WebSocket > future = new FutureTask < WebSocket > ( new Callable < WebSocket > ( ) { @ Override public WebSocket call ( ) throws Exception { final byte [ ] outboundMaskingKey = new byte [ ] { randomByte ( ) , randomByte ( ) , randomByte ( ) } ; bootstrap = new ClientBootstrap ( new NioClientSocketChannelFactory ( Executors . newCachedThreadPool ( ) , Executors . newCachedThreadPool ( ) ) ) ; bootstrap . setPipelineFactory ( new ChannelPipelineFactory ( ) { public ChannelPipeline getPipeline ( ) throws Exception { ChannelPipeline pipeline = pipeline ( ) ; if ( ssl ) { if ( sslFactory == null ) { throw new WebbitException ( \"You need to call setupSsl first\" ) ; } SSLContext sslContext = sslFactory . getClientContext ( ) ; SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; sslEngine . setUseClientMode ( true ) ; pipeline . addLast ( \"ssl\" , new SslHandler ( sslEngine ) ) ; } pipeline . addLast ( \"decoder\" , new HttpResponseDecoder ( ) ) ; pipeline . addLast ( \"encoder\" , new HttpRequestEncoder ( ) ) ; pipeline . addLast ( \"inflater\" , new HttpContentDecompressor ( ) ) ; pipeline . addLast ( \"handshakeHandler\" , new HandshakeChannelHandler ( outboundMaskingKey ) ) ; return pipeline ; } } ) ; ChannelFuture future = bootstrap . connect ( remoteAddress ) ; channel = future . awaitUninterruptibly ( ) . getChannel ( ) ; if ( ! future . isSuccess ( ) ) { close ( ) ; } else { ChannelFuture requestFuture = channel . write ( request ) ; requestFuture . awaitUninterruptibly ( ) ; } pipeline . addLast ( \"inflater\" , new HttpContentDecompressor ( ) ) ; pipeline . addLast ( \"handshakeHandler\" , new HandshakeChannelHandler ( outboundMask", "delete = new Engine . Delete ( \"test\" , \"1\" , newUid ( \"1\" ) , delete . seqNo ( ) , 3L", "Assert . fail ( ex . getMessage ( ) ) ;", "public static int MAX_LENGTH = 16 ; public EnumHand currentHand ;", "Length emission = FormatTools . getEmissionWavelength ( channel . emWave ) ; Length excitation = FormatTools . getExcitationWavelength ( channel . exWave ) ; Length wavelength = FormatTools . getWavelength ( channel . exWave ) ;", "PMDConfiguration configuration = new PMDConfiguration ( ) ; assertEquals ( \"Default minimum priority\" , RulePriority . LOW , configuration . getMinimumPriority ( ) ) ; configuration . setMinimumPriority ( RulePriority . HIGH ) ; assertEquals ( \"Changed minimum priority\" , RulePriority . HIGH , configuration . getMinimumPriority ( ) ) ;", "* Displays the remaining capacity in bays of the specified type * * @ param shipName String name of this ship . * @ param shipId Unique id of this ship . Used to fill out actionPerformed ( ActionEvent )", "import java . io . File ; import java . io . Serializable ;", "setState ( 447 ) ; _errHandler . sync ( this ) ;", "if ( desired == 0 && bytes . isEmpty ( ) ) { logEmptySeek ( name ) ; return ; } int i = 0 ; for ( DiskRange curRange : bytes ) { if ( desired == 0 && curRange . getData ( ) . remaining ( ) == 0 ) { logEmptySeek ( name ) ; } }", "import net . runelite . client . util . QuantityFormatter ;", "public class TileEntityTank extends SyncedTileEntity implements IActivateAwareTile , IPlaceAwareTile , INeighbourAwareTile , ICustomHarvestDrops , ITickable { }", "FluidRenderer . renderFluid ( FluidSpriteType . STILL , fluid . fluid , fluid . amount , tank . getCapacity ( ) , size . min , size . max , bb , null ) ;", "@ SuppressWarnings ( { \"unchecked\" , \"ConstantConditions\" , \"ForLoopReplaceableByForEach\" } )", "", "public void renderToImpl ( GL2 gl , Camera camera , Projection projection ) { }", "root . setLayoutParams ( new LinearLayout . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , ViewGroup . LayoutParams . MATCH_PARENT , 0.0F ) ) ;", ". addField ( FieldNames . SUBTYPE , \"malformed\" ) , meta ) ;", "queueManager . rescheduleTask ( queueMessage , RetrieveManager . QUEUE_NAME , queueEvent ) ;", "Assert . fail ( ex . getMessage ( ) ) ;", "import de . deepamehta . core . service . Transactional ; import de . deepamehta . core . service . accesscontrol . AccessControlException ; import de . deepamehta . core . service . accesscontrol . Operation ;", "public ResultValidator < T > expectState ( Consumer < T > aggregateStateValidator ) { DefaultUnitOfWork < Message < ? > > uow = DefaultUnitOfWork . startAndGet ( null ) ; try { state . get ( ) . execute ( aggregateStateValidator ) ; } finally { uow . rollback ( ) ; } return this ; } @ Override public ResultValidator < T > expectScheduledDeadlineMatching ( Duration duration , Matcher < ? super DeadlineMessage < ? > > matcher ) { deadlineManagerValidator . assertScheduledDeadlineMatching ( duration , matcher ) ; return this ; } @ Override public ResultValidator expectScheduledDeadline ( Duration duration , Object deadline ) { return expectScheduledDeadlineMatching ( duration , messageWithPayload ( Matchers . equalTo ( deadline , fieldFilter ) ) ) ; } @ Override public ResultValidator expectScheduledDeadlineOfType ( Duration duration , Class < ? > deadlineType ) { return expectScheduledDeadlineMatching ( duration , messageWithPayload ( Matchers . equalTo ( deadline , fieldFilter ) ) ) ; } @ Override public ResultValidator expectScheduledDeadlineOfType ( Instant scheduledTime , Matcher < ? super DeadlineMessage < ? > > matcher ) { deadlineManagerValidator . assertScheduledDeadlineMatching ( scheduledTime , matcher ) ; return this ; } @ Override public ResultValidator expectScheduledDeadline ( Instant scheduledTime , Object deadline ) { return expectScheduledDeadlineMatching ( scheduledTime , messageWithPayload ( Matchers . equalTo ( deadline , fieldFilter ) ) ) ; } @ Override public ResultValidator expectScheduledDeadlineOfType ( Instant scheduledTime , Class < ? > deadlineType ) { return expectScheduledDeadlineMatching ( scheduledTime , messageWithPayload ( Matchers . equalTo ( deadline , fieldFilter ) ) ) ; } @ Override public ResultValidator expectScheduledDeadlineOfType ( Instant scheduledTime , Class < ? > deadlineType ) { return expectScheduledDeadlineMatching ( scheduledTime , messageWithPayload ( Matchers . equalTo ( deadline , messageWithPayload ( Matchers . equal", "", "contentService . setProjectService ( projectService ) ; contentService . setContentAuditLogSupport ( contentAuditLogSupport ) ; contentService . initialize ( ) ;", "Flux < HttpClientResponse > responseFlux = this . httpClient . chunkedTransfer ( chunkedTransfer ) . request ( method ) . uri ( url ) . send ( ( req , nettyOutbound ) -> { req . headers ( httpHeaders ) ; if ( preserveHost ) { String host = request . getHeaders ( ) . getFirst ( HttpHeaders . HOST ) ; req . header ( HttpHeaders . HOST , host ) ; } return nettyOutbound . options ( NettyPipeline . SendOptions :: flushOnEach ) . send ( request . getBody ( ) . map ( dataBuffer -> ( ( NettyDataBuffer ) dataBuffer ) . getNativeBuffer ( ) ) ) ; } ) . responseConnection ( ( res , connection ) -> { ServerHttpResponse response = exchange . getResponse ( ) ; HttpHeaders headers = new HttpHeaders ( ) ; res . responseHeaders ( ) . forEach ( entry -> headers . add ( entry . getKey ( ) , entry . getValue ( ) ) ) ; String contentTypeValue = headers . getFirst ( HttpHeaders . CONTENT_TYPE ) ; if ( StringUtils . hasLength ( contentTypeValue ) ) { exchange . getAttributes ( ) . put ( ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR , contentTypeValue ) ; } HttpStatus status = HttpStatus . resolve ( res . status ( ) . code ( ) ) ; if ( status != null ) { response . setStatusCode ( status ) ; } else if ( response instanceof AbstractServerHttpResponse ) { ( ( AbstractServerHttpResponse ) response ) . setStatusCodeValue ( res . status ( ) . code ( ) ) ; } HttpStatus status = HttpStatus . resolve ( res . status ( ) . code ( ) ) ; if ( status != null ) { response . setStatusCode ( status ) ; } else if ( response instanceof AbstractServerHttpResponse ) { ( ( AbstractServerHttpResponse ) response ) . setStatusCodeValue ( res . status ( ) . code ( ) ) ; } else { throw new IllegalStateException ( \"Unable to set status code ( res . status ( ) . code (", "public String getUserAgent ( ) { String constructedUserAgent = \"SalesforceMobileSDK/\" + SDK_VERSION + \" android/\" + Build . VERSION . RELEASE ; return constructedUserAgent ; }", "", "import org . n52 . svalbard . util . GmlHelper ;", "* Long running delete request , service returns a 202 to the initial request . The endpoint indicated in the Azure - AsyncOperation header is invalid", "int chunks = FileChunkUtil . getNumberOfChunks ( file , config . getChunkSize ( ) ) ; logger . trace ( \"{} chunks to upload for file '{}'.\" , Integer . toString ( chunks ) , file . getName ( ) ) ;", "import java . io . File ; import java . io . Serializable ;", "import org . json . JSONObject ; import org . junit . Before ; import org . junit . Test ; import org . springframework . http . converter . StringHttpMessageConverter ; import org . springframework . test . web . servlet . MockMvc ; import org . zalando . nakadi . config . SecuritySettings ; import org . zalando . nakadi . domain . Storage ; import org . zalando . nakadi . security . ClientResolver ; import org . zalando . nakadi . service . Result ; import org . zalando . nakadi . service . StorageService ; import org . zalando . nakadi . problem . Problem ;", "", "public static boolean isPerfOrAboveLogging ( HiveConf conf ) { String loggingLevel = conf . getVar ( HiveConf . ConfVars . HIVE_SERVER2_LOGGING_OPERATION_LEVEL ) ; return conf . getBoolVar ( HiveConf . ConfVars . HIVE_SERVER2_LOGGING_OPERATION_ENABLED ) && ( loggingLevel . equalsIgnoreCase ( \"PERFORMANCE\" ) || loggingLevel . equalsIgnoreCase ( \"VERBOSE\" ) ) ; } public static void stripHivePasswordDetails ( Configuration conf ) { if ( HiveConf . getVar ( conf , HiveConf . ConfVars . METASTOREPWD ) != null ) { HiveConf . setVar ( conf , HiveConf . ConfVars . METASTOREPWD , \"\" ) ; } if ( HiveConf . getVar ( conf , HiveConf . ConfVars . HIVE_SERVER2_SSL_KEYSTORE_PASSWORD ) != null ) { HiveConf . setVar ( conf , HiveConf . ConfVars . HIVE_SERVER2_SSL_KEYSTORE_PASSWORD , \"\" ) ; } } @ SuppressWarnings ( \"rawtypes\" ) public static String jarFinderGetJar ( Class klass ) { Preconditions . checkNotNull ( klass , \"klass\" ) ; ClassLoader loader = klass . getClassLoader ( ) ; if ( loader != null ) { String class_file = klass . getName ( ) . replaceAll ( \"\\\\.\" , \"/\" ) + \".class\" ) { try { for ( Enumeration itr = loader . getResources ( class_file ) ; itr . hasMoreElements ( ) ; ) { String class_file = klass . getName ( ) . replaceAll ( \"\\\\.\" , \"/\" ) + \".class\" ) ; try { for ( Enumeration itr = loader . getResources ( class_file ) ; itr . hasMoreElements ( ) ; ) { String class_file = klass . getName ( ) . replaceAll ( \"\\\\.\" , \"/\" ) + \".class\" ; try { for ( Enumeration itr = loader . getResources ( class_file ) ; itr . nextElement", "OperationList ops = new OperationList ( ) ;", "\" @Pure\" , \" public static Integer fct() {\" ,", "private void addEmbeddedColumnNameToDocument ( String superColumnName , Document currentDoc ) { Field luceneField = getLuceneField ( SUPERCOLUMN_INDEX , superColumnName , Store . YES , Field . Index . NO ) ; }", "{ checkForTransliteration ( ) ; } private void checkForTransliteration ( ) { if ( getCurrentSubtype ( ) . containsExtraValueKey ( Constants . Subtype . ExtraValue . TRANSLITERATION_METHOD ) ) { InputMethod im ; try { String transliterationName = getCurrentSubtype ( ) . getExtraValueOf ( Constants . Subtype . ExtraValue . TRANSLITERATION_METHOD ) ; mService . enableTransliteration ( transliterationName ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; throw new RuntimeException ( e ) ; } } else { mService . disableTransliteration ( ) ; } }", "", "if ( ivb != null ) { data = EncryptUtils . decryptCBC ( data , new IvParameterSpec ( ivb ) ) ; } else { }", "", "import com . linbit . drbdmanage . security . ObjectProtection ; import com . linbit . drbdmanage . stateflags . Flags ; import com . linbit . drbdmanage . stateflags . StateFlags ;", "@ SuppressWarnings ( \"deprecation\" ) private static final Property INSTANCE_DFS_URI = Property . INSTANCE_DFS_URI ; static TemporaryFolder tempFolder = new TemporaryFolder ( new File ( System . getProperty ( \"user.dir\" ) + \"/target\" ) ) ;", "@ AssistedInject UserResourceProvider ( @ Assisted AmbariManagementController managementController ) { super ( managementController ) ; }", "import net . minecraft . block . Block ; import net . minecraft . block . BlockAir ; import net . minecraft . block . state . IBlockState ; import net . minecraft . util . math . BlockPos ;", "final KafkaStreams streams = new KafkaStreams ( builder . build ( ) , streamsConfiguration ) ;", "package lsfusion . client . logics ; import lsfusion . base . BaseUtils ; import lsfusion . base . OrderedMap ; import lsfusion . base . context . ApplicationContextHolder ; import lsfusion . base . context . ContextIdentityObject ; import lsfusion . client . Main ; import lsfusion . client . SwingUtils ; import lsfusion . client . form . LogicsSupplier ; import lsfusion . client . serialization . ClientCustomSerializable ; import lsfusion . client . serialization . ClientSerializationPool ; import lsfusion . interop . form . layout . AbstractForm ; import javax . swing . * ; import java . io . DataInputStream ; import java . io . DataOutputStream ; import java . io . IOException ; import java . util . * ; public class ClientForm extends ContextIdentityObject implements LogicsSupplier , ClientCustomSerializable , AbstractForm < ClientContainer , ClientComponent , String > , ApplicationContextHolder { public KeyStroke keyStroke = null ; public String caption = \"\" ; public String canonicalName = \"\" ; public String creationPath = \"\" ; public int autoRefresh = 0 ; public static ClientGroupObject lastActiveGroupObject ; public Integer overridePageWidth ; public ClientContainer mainContainer ; public Set < ClientTreeGroup > treeGroups = new HashSet < > ( ) ; public List < ClientGroupObject > groupObjects = new ArrayList < > ( ) ; public List < ClientGroupObject > groupObjects = new ArrayList < > ( ) ; public List < ClientPropertyDraw > propertyDraws = new ArrayList < > ( ) ; public List < ClientGroupObject > groupObjects = new ArrayList < > ( ) ; public List < ClientPropertyDraw > propertyDraws = new ArrayList < > ( ) ; public Set < ClientTreeGroup > treeGroups = new HashSet < > ( ) ; public List < ClientGroupObject > groupObjects = new ArrayList < > ( ) ; public List < ClientGroupObject > groupObjects =", "mes ( n , config ( ) . GAME_TICK * 2 , \"Would you like to be teleport to Varrock centre for 1000 gold?\" ) ;", "* Put an array of complex type with values [ { 'integer' : 1 'string' : '2' } , { 'integer' : 3 , 'string' : '4' } , { 'integer' : 5 , 'string' : '6' } ]", "Object toStringPredicate = ( predicate == null ) ? pPredicate : predicate ; return Format . Describe ( this . getExplainer ( ) ) ;", "import org . apache . http . entity . ContentType ; import com . mashape . unirest . request . HttpRequest ; import org . apache . commons . io . IOUtils ;", "when ( mockNodeService . exists ( mockTransaction , \"/some/path\" ) ) . thenReturn ( true ) ;", "@ Override public void visitBeforeChildren ( ConfigurationNode node , NodeHandler < ConfigurationNode > handler )", "if ( Config . VIRTUALPUMP ) pluginsList . add ( VirtualPumpPlugin . getPlugin ( ) ) ; if ( Config . APS ) pluginsList . add ( LoopPlugin . getPlugin ( ) ) ; if ( Config . APS ) pluginsList . add ( OpenAPSMAPlugin . getPlugin ( ) ) ; if ( Config . APS ) pluginsList . add ( OpenAPSAMAPlugin . getPlugin ( ) ) ; if ( Config . OPENAPSENABLED ) pluginsList . add ( OpenAPSSMBPlugin . getPlugin ( ) ) ;", "@ NotNull @ SuppressWarnings ( \"unchecked\" ) protected void addFeature ( Feature feature , @ Nullable String featureName ) { if ( featureName == null ) { featureName = feature . getClass ( ) . toString ( ) ; } Feature registeredFeature = mFeatures . put ( featureName , feature ) ; if ( registeredFeature != null ) { } }", "for ( Site catalog_site : CatalogUtil . getAllSites ( this . catalog ) ) { if ( catalog_site . getId ( ) != this . siteId ) { tmp_transactionRequestBuildersParameters . put ( catalog_site . getId ( ) , new HashSet < Integer > ( ) ) ; } tmp_transactionRequestBuilderInputs . put ( catalog_site . getId ( ) , new HashSet < Integer > ( ) ) ; }", "jj_la1 [ 169 ] = jj_gen ;", "import javax . annotation . Resource ; import java . time . ZoneOffset ; import java . time . ZonedDateTime ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collections ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import java . util . UUID ; import java . util . function . LongSupplier ; import java . util . function . Supplier ;", "private static Float [ ] getFloatArrayFromDicomElement ( DicomObject dicom , int tag , Float [ ] defaultValue ) { DicomElement element = dicom . get ( tag ) ; if ( element != null && ! element . isEmpty ( ) ) { float [ ] fResults = element . getFloats ( false ) ; if ( fResults != null && fResults . length > 0 ) { List < Float > fResultList = new ArrayList < Float > ( fResults . length ) ; for ( float result : fResults ) { fResultList . add ( result ) ; } return fResultList . toArray ( new Float [ fResultList . size ( ) ] ) ; } } return defaultValue ; } public static Integer getIntegerFromDicomElement ( DicomObject dicom , int tag , Integer defaultValue ) { if ( dicom == null ) { return defaultValue ; } }", "import micdoodle8 . mods . galacticraft . core . network . PacketSimple ; import micdoodle8 . mods . galacticraft . core . network . PacketSimple . EnumSimplePacket ;", "import com . cloud . offering . NetworkOffering ; import com . cloud . offering . NetworkOffering . GuestIpType ;", "public static DenseMatrix64F wrapDiagonal ( final double [ ] source , final int offset , final int dim , final double [ ] buffer ) { for ( int i = 0 ; i < dim ; ++ i ) { buffer [ i * dim + i ] = source [ i ] ; } return DenseMatrix64F . wrap ( dim , dim , buffer ) ; } public static DenseMatrix64F wrapDiagonalInverse ( final double [ ] source , final int offset , final int dim ) { double [ ] buffer = new double [ dim * dim ] ; return wrapDiagonalInverse ( source , offset , dim , buffer ) ; } public static DenseMatrix64F wrapDiagonalInverse ( final double [ ] source , final int offset , final int dim , final double [ ] buffer ) { for ( int i = 0 ; i < dim ; ++ i ) { buffer [ i * dim + i ] = 1 / source [ i ] ; } return DenseMatrix64F . wrap ( dim , dim , buffer ) ; }", "import org . testng . AssertJUnit ; import org . testng . annotations . Test ;", "{ errorMsgs . add ( Bundle . VolatilityProcessor_errorMessage_outputParsingError ( \"dlllist\" ) ) ; logger . log ( Level . SEVERE , Bundle . VolatilityProcessor_errorMessage_outputParsingError ( \"dlllist\" ) , ex ) ; } return fileSet ;", "", "this . forceUnixNewlines = forceUnixNewlines ;", "import org . knowm . xchange . Exchange ; import org . knowm . xchange . cexio . dto . ArchivedOrdersRequest ; import org . knowm . xchange . cexio . dto . CexIORequest ; import org . knowm . xchange . cexio . dto . CexioCancelReplaceOrderRequest ; import org . knowm . xchange . cexio . dto . CexioSingleIdRequest ; import org . knowm . xchange . cexio . dto . CexioSingleOrderIdRequest ; import org . knowm . xchange . cexio . dto . PlaceOrderRequest ; import org . knowm . xchange . cexio . dto . trade . CexIOArchivedOrder ; import org . knowm . xchange . cexio . dto . trade . CexIOCancelAllOrdersResponse ; import org . knowm . xchange . cexio . dto . trade . CexIOCancelReplaceOrderResponse ; import org . knowm . xchange . cexio . dto . trade . CexIOOpenOrder ; import org . knowm . xchange . cexio . dto . trade . CexIOOpenOrders ; import org . knowm . xchange . cexio . dto . trade . CexIOOrder ; import org . knowm . xchange . currency . CurrencyPair ; import org . knowm . xchange . dto . Order ; import org . knowm . xchange . dto . trade . CexIOOpenOrders ; import org . knowm . xchange . dto . trade . CexIOOrder ; import org . knowm . xchange . cexio . dto . trade . CexIOOrder ; import org . knowm . xchange . cexio . dto . trade . CexIOOrder ; import org . knowm . xchange . xchange . x", "statusBar . finish ( ) ; return result ;", "this . chunkSendTasks . put ( index , Boolean . TRUE ) ; BaseFullChunk chunk = getChunk ( x , z ) ; if ( chunk != null ) { BatchPacket packet = chunk . getChunkPacket ( ) ; if ( packet != null ) { this . sendChunk ( x , z , index , packet ) ; continue ; } }", "ShardRouting ( Index index , int shardId , String currentNodeId , String relocatingNodeId , RestoreSource restoreSource , long primaryTerm , boolean primary , ShardRoutingState state ,", "", "@ Test public void shouldRetieveElementsInRangeBetweenSeedsGaffer1Store ( ) throws StoreException { shouldRetieveElementsInRangeBetweenSeeds ( gaffer1KeyStore ) ; } private void shouldRetieveElementsInRangeBetweenSeeds ( final AccumuloStore store ) throws StoreException { final User user = new User ( ) ; }", "", "setState ( 699 ) ;", "@ Path ( \"/workflow/{name}/{version}\" ) @ ApiOperation ( \"Removes workflow definition. It does not remove workflows associated with the definition.\" ) public void unregisterWorkflowDef ( @ PathParam ( \"name\" ) String name , @ PathParam ( \"version\" ) Integer version ) { metadataService . unregisterWorkflowDef ( name , version ) ; }", "@ Test public void should_call_on_lazy_loaded_getter_use_lazyLoader ( ) throws Exception { PersonEntity personEntity = new PersonEntity ( ) ; final Method method = PersonEntity . class . getMethod ( \"getWithLazyLoadedAnnotation\" ) ; doReturn ( \"lazyResult\" ) . when ( lazyLoader ) . load ( any ( Method . class ) , anyLong ( ) ) ; PersonEntity proxy = serverProxyfier . proxify ( personEntity ) ; final String withLazyLoadedAnnotation = proxy . getWithLazyLoadedAnnotation ( ) ; verify ( lazyLoader ) . load ( method , personEntity . getPersistenceId ( ) ) ; assertThat ( withLazyLoadedAnnotation ) . isEqualTo ( \"lazyResult\" ) ; } @ Test public void should_not_call_lazyLoader ( ) throws Exception { PersonEntity personEntity = new PersonEntity ( ) ; final Method method = PersonEntity . class . getMethod ( \"getWithoutLazyLoadedAnnotation\" ) ; PersonEntity proxy = serverProxyfier . proxify ( personEntity ) ; final String withLazyLoadedAnnotation = proxy . getWithoutLazyLoadedAnnotation ( ) ; verify ( lazyLoader , never ( ) ) . load ( method , personEntity . getPersistenceId ( ) ) ; assertThat ( withLazyLoadedAnnotation ) . isEqualTo ( \"getWithoutLazyLoadedAnnotation\" ) ; }", "", "if ( matcherWpNote . find ( ) && matcherWpNote . groupCount ( ) > 0 ) { waypoint . note = matcherWpNote . group ( 1 ) . trim ( ) ; }", "throw new SocketOperationException ( RESULT_CANCEL ) ; } catch ( final AOCertificatesNotFoundException e ) {", "* Set String value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'", "import com . monke . monkeybook . utils . NetworkUtil ; import com . monke . monkeybook . utils . RxUtils ; import com . monke . monkeybook . model . analyzeRule . assit . Global ;", "", "return runActionOnExclusivLockedBus ( ( ) -> { int selectResponse = checkSlaveSelect ( device ) ; if ( selectResponse < 0 ) { return selectResponse ; } return I2C . i2cWriteBytesDirect ( fd , size , offset , buffer ) ; } ) ;", "import com . stratio . meta . core . structures . * ;", "", "spinnerLabel . addSpinnerListener ( spinnerListener ) ;", "public ConnectionImpl ( ServerImpl server , TransportConnection transportConnection , Context context ) { Protocol protocol = new Protocol ( this ) ; RecordParser recordParser = protocol . recordParser ( ) ; transportConnection . handler ( recordParser :: handle ) ; }", "import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import java . util . concurrent . atomic . AtomicInteger ; import java . util . concurrent . atomic . AtomicReference ; import java . util . concurrent . ConcurrentLinkedQueue ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . atomic . AtomicLong ; import java . util . concurrent . atomic . AtomicReference ; import java . util . concurrent . atomic . AtomicReferenceFieldUpdater ;", "@ Transactional ( readOnly = true , rollbackFor = { Throwable . class } ) public List < UserTO > search ( final NodeCond searchCondition , final int page , final int size )", "protected AstRefVisitor ( CGNode n , Collection < PointerKey > result , PointerAnalysis < InstanceKey > pa , AstHeapModel h ) { }", "import org . niis . xroad . restapi . dto . InitializationStatusDto ;", "public void fillPredicatesForSideTable ( String exeSql , Map < String , AbstractSideTableInfo > sideTableMap ) throws SqlParseException { FlinkPlannerImpl flinkPlanner = FlinkPlanner . getFlinkPlanner ( ) ; SqlNode sqlNode = flinkPlanner . parse ( exeSql ) ; }", "msg += \"<a href='builder.osmand.net:8080'>builder</a>: <b>FAILED</b>. Jobs: \" + formatJobNamesAsHref ( buildServer . jobsFailed ) + \"\\n\" ;", "allColumnsMetadataRs = databaseMetaData . getColumns ( ( ( AbstractJdbcDatabase ) database ) . getJdbcCatalogName ( schema ) , ( ( AbstractJdbcDatabase ) database ) . getJdbcSchemaName ( schema ) , relation . getName ( ) , null ) ; TreeMap < Integer , CachedRow > treeSet = new TreeMap < > ( ) ; for ( CachedRow row : allColumnsMetadataRs ) { treeSet . put ( row . getInt ( \"ORDINAL_POSITION\" ) , row ) ; } Logger log = LogService . getLog ( getClass ( ) ) ; int currentOrdinal = 0 ; for ( CachedRow row : treeSet . values ( ) ) { currentOrdinal ++ ; int rsOrdinal = row . getInt ( \"ORDINAL_POSITION\" ) ; if ( rsOrdinal != currentOrdinal ) { log . debug ( LogType . LOG , String . format ( \"Repairing ORDINAL_POSITION with gaps for table=%s, column name=%s, \" + \"bad ordinal=%d, new ordinal=%d\" , relation . getName ( ) , row . getString ( \"COLUMN_NAME\" ) , rsOrdinal , currentOrdinal ) ) ; row . set ( \"ORDINAL_POSITION\" , currentOrdinal ) ; } } List < CachedRow > metaDataNotNullConst = databaseMetaData . getNotNullConst ( schema . getCatalogName ( ) , schema . getName ( ) , relation . getName ( ) ) ;", "import com . apollocurrency . aplwallet . apl . core . transaction . TransactionTypes ; import com . apollocurrency . aplwallet . apl . core . transaction . UnsupportedTransactionVersion ;", "String schemaName ; String tableName ; String aliasName ; String aggregationBlockColumn ; List < String > partitionAttributeValues = new ArrayList < > ( ) ; String inclusionProbabilityColumn ; String subsampleColumn ; public ScrambleMetaForTable ( ) { } public void addPartitionAttributeValue ( String partitionAttributeValue ) { partitionAttributeValues . add ( partitionAttributeValue ) ; } public String getSchemaName ( ) { return schemaName ; } public void setSchemaName ( String schemaName ) { this . schemaName = schemaName ; } public String getTableName ( ) { return tableName ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public String getAliasName ( ) { return aliasName ; } public void setAliasName ( String aliasName ) { this . aliasName = aliasName ; } public int getPartitionCount ( ) { return partitionAttributeValues . size ( ) ; } public String getAggregationBlockColumn ( ) { return aggregationBlockColumn ; } public void setAggregationBlockColumn ( String aggregationBlockColumn ) { this . aggregationBlockColumn = aggregationBlockColumn ; } public String getPartitionAttributeValue ( int i ) { return partitionAttributeValues . get ( i ) ; } public String getInclusionProbabilityColumn ( ) { return inclusionProbabilityColumn ; } public void setInclusionProbabilityColumn ( String inclusionProbabilityColumn ) { this . inclusionProbabilityColumn = inclusionProbabilityColumn ; } public List < String > getPartitionAttributes ( ) { return partitionAttributeValues ; } public void setSubsampleColumn ( String subsampleColumn ) { this . subsampleColumn = subsampleColumn ; } public String getInclusionProbabilityColumn ( ) { return subsampleColumn ; } public String getInclusionProbabilityColumn ( ) { return subsampleColumn ; } public String getInclusionProbabilityColumn ( ) { return inclusionProbabilityColumn ; } public void setInclusionProbabilityColumn ( String inclusionProbabilityColumn ) { this . inclusionProbabilityColumn ) { this . subsampleColumn = subsampleColumn ; } public String getSubsampleColumn ( ) { return subsampleColumn ; } public", "return RestUtil . badRequest ( \"Invalid sortBy field\" ) ;", "import crazypants . enderio . machine . generator . zombie . NutrientTank ;", "algo . setEdgeFilter ( levelFilter ) ; prepareGraph ( ) ) ; return algo ;", ". whenComplete ( ( $ , e ) -> server . close ( ) ) . whenComplete ( assertComplete ( $ -> { for ( int i = 0 ; i < tasks . size ( ) ; i ++ ) { assertArrayEquals ( CONTENT , Files . readAllBytes ( storage . resolve ( \"file\" + i ) ) ) ; } } ) ) ;", "{ Integer result = getInt ( o , null ) ; if ( null == result ) { throw new IllegalArgumentException ( \"Don't know how to convert null + to int\" ) ; } return result ; } public static Integer getInt ( Object o , Integer defaultValue ) { if ( null == o ) { return defaultValue ; } if ( o instanceof Long ) { return ( ( Long ) o ) . intValue ( ) ; } else if ( o instanceof Integer ) { return ( Integer ) o ; } else if ( o instanceof Short ) { return ( ( Short ) o ) . intValue ( ) ; } else if ( o instanceof String ) { return Integer . parseInt ( ( String ) o ) ; } else { throw new IllegalArgumentException ( \"Don't know how to convert \" + o + \" + to int\" ) ; } } public static boolean getBoolean ( Object o , boolean defaultValue ) { if ( null == o ) { return defaultValue ; } if ( o instanceof Boolean ) { return ( Boolean ) o ; } else { throw new IllegalArgumentException ( \"Don't know how to convert \" + o + \" + to boolean\" ) ; } }", "{ defaultImg = BitmapFactory . decodeResource ( mContext . getResources ( ) , DisplayUtils . getResourceId ( \"image/png\" , \"default.png\" ) ) ; new InitDiskCacheTask ( ) . execute ( ) ; } class InitDiskCacheTask extends AsyncTask < File , Void , Void > { @ Override protected Void doInBackground ( File ... params ) { synchronized ( thumbnailDiskCacheLock ) { try { mThumbnailCache = new DiskLruImageCache ( mContext , \"thumbnailCache\" , DISK_CACHE_SIZE , mCompressFormat , mCompressQuality ) ; } catch ( Exception e ) { Log_OC . d ( TAG , \"Thumbnail cache could not be opened \" , e ) ; mThumbnailCache = null ; } mThumbnailCacheStarting = false ; thumbnailDiskCacheLock . notifyAll ( ) ; } return null ; } } static class AsyncDrawable extends BitmapDrawable { private final WeakReference < ThumbnailGenerationTask > bitmapWorkerTaskReference ; public AsyncDrawable ( Resources res , Bitmap bitmap , ThumbnailGenerationTask bitmapWorkerTask ) { super ( res , bitmap ) ; bitmapWorkerTaskReference = new WeakReference < ThumbnailGenerationTask > ( bitmapWorkerTask ) ; } public ThumbnailGenerationTask getBitmapWorkerTask ( ) { return bitmapWorkerTaskReference . get ( ) ; } } class ThumbnailGenerationTask extends AsyncTask < OCFile , Void , Bitmap > { private final WeakReference < ImageView > imageViewReference ; private OCFile file ; public ThumbnailGenerationTask ( ImageView imageView ) { imageViewReference = new WeakReference < ImageView > ( ImageView imageView ) { imageViewReference = new WeakReference < ImageView > ( imageView ) ; } public ThumbnailGenerationTask getBitmapWorkerTask ( ) { return bitmapWorkerTaskReference . get ( ) ; } } class ThumbnailGenerationTask < OCFile , Void , Bitmap > { final WeakReference", "* Get byte dictionary value { \"0\" : hex ( FF FF FF FA ) , \"1\" : hex ( 01 02 03 ) , \"2\" : hex ( 25 , 29 , 43 ) } with each item encoded in base64", "void addMatchedTask ( SingularityTask task ) { LOG . trace ( \"Accepting task {} for offers {}\" , task . getTaskId ( ) , offers . stream ( ) . map ( Offer :: getId ) . collect ( Collectors . toList ( ) ) ) ; }", "import cpw . mods . fml . common . network . simpleimpl . IMessage ; import cpw . mods . fml . common . network . simpleimpl . IMessageHandler ; import cpw . mods . fml . common . network . simpleimpl . MessageContext ; import crazypants . enderio . conduit . item . FilterRegister ;", "RegistryKey < World > from ; public DimensionType to ; public BlockPortalShape fromShape ; public BlockPortalShape toShape ;", "import com . eucalyptus . keys . KeyPairs ;", "Map < Path , List < KeyExtent > > assignmentFailures = Collections . synchronizedMap ( new TreeMap < > ( ) ) ;", "@ RosIgnoredField public WeightMatrix3DMessage angularWeightMatrix ; public WeightMatrix3DMessage linearWeightMatrix ; @ RosExportedField ( documentation = \"Frame information for this message.\" ) public FrameInformation frameInformation = new FrameInformation ( ) ;", "import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . concurrent . TimeUnit ;", "* Get date - time dictionary value { \"0\" : \"2000-12-01t00:00:01z\" , \"1\" : \"1980-01-02T00:11:35+01:00\" , \"2\" : \"1492-10-12T10:15:01-08:00\" }", "import org . junit . * ; import org . mockito . * ;", "DefaultRepositorySystemSession session = container . setupRepoSession ( maven , settings ) ; Artifact artifact = MavenConvertUtils . coordinateToMavenArtifact ( dep ) ;", "import java . util . List ;", "import net . minecraft . world . DimensionType ;", "private IInventory inventory ; private IGuiAnimatedStat lastLeftStat , lastRightStat ;", "actor . print ( \"Fast mode enabled.\" ) ;", "void testContinueFromPreviousToken ( ) throws Exception { }", "ThingPersistenceActor ( final String thingId , final ActorRef pubSubMediator , final SnapshotAdapter < ThingWithSnapshotTag > snapshotAdapter ) { }", "displayableWidgetMappings . add ( new DisplayableWidgetMapping ( ( RecommendedStoreWidget . class ) , RecommendedStoreDisplayable . class ) ) ; displayableWidgetMappings . add ( new DisplayableWidgetMapping ( ( OfficialAppWidget . class ) , OfficialAppDisplayable . class ) ) ;", "BigInteger minGasLimit = BigInteger . valueOf ( constants . getMinGasLimit ( ) ) ; BigInteger targetGasLimit = BigInteger . valueOf ( constants . getTargetGasLimit ( ) ) ; BigInteger newGasLimit = calc . calculateBlockGasLimit ( minGasLimit , BigInteger . ZERO , minGasLimit , targetGasLimit , false ) ;", "", "{ return ( ( RuleRuntime ) rulesBoltDependenciesFactory . createRuleProcessorRuntimeStorm ( ) . getRulesRuntime ( ) . get ( i ) ) . getStreams ( ) . get ( 0 ) ; } protected abstract RulesBoltDependenciesFactory . ScriptType getScriptType ( ) ; public static class RulesTopologyTestGroovy extends RulesTopologyTest { public static void main ( String [ ] args ) throws AlreadyAliveException , InvalidTopologyException { RulesTopologyTest rulesTopologyTest = new RulesTopologyTestGroovy ( ) ; rulesTopologyTest . submitTopology ( ) ; } protected RulesBoltDependenciesFactory . ScriptType getScriptType ( ) { return RulesBoltDependenciesFactory . ScriptType . GROOVY ; } } public static class RulesTopologyTestSql extends RulesTopologyTest { public static void main ( String [ ] args ) throws AlreadyAliveException , InvalidTopologyException { RulesTopologyTest rulesTopologyTest = new RulesTopologyTestSql ( ) ; rulesTopologyTest . submitTopology ( ) ; } protected RulesBoltDependenciesFactory . ScriptType getScriptType ( ) { return RulesBoltDependenciesFactory . ScriptType . SQL ; } }", "xWidth = textWidth = this . textRenderer . getWidth ( text ) ; xWidth ++ ; this . textRenderer . draw ( matrices , text , - textWidth , 0 , scaleAlpha << 24 ) ;", "setState ( 815 ) ;", "networkExceptions . add ( new NetworkFailureException ( address . getIdentifier ( ) , e ) ) ; logger . warn ( \"PushNetworkException when sending message to %s\" + Util . redact ( address . getNumber ( ) ) ) ;", "void registerUser ( String roomName , String userid , String username , String role , String externUserID , String authToken , String avatarURL , Boolean guest ) ;", "protected ClimateControl climateControl ; protected ButterflyHatch butterflyHatch ;", "* @ param tips List of tip transaction hashes ( including milestones ) you want to search for", "", "public long findAllWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long ptrQuery ) { validateQuery ( ) ; context . executeDelayedDisposal ( ) ; return nativeFindAllWithHandover ( bgSharedGroupPtr , nativeReplicationPtr , ptrQuery , 0 , Table . INFINITE , Table . INFINITE ) ; } public long findAllSortedWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long ptrQuery , long columnIndex , boolean ascending ) { validateQuery ( ) ; context . executeDelayedDisposal ( ) ; return nativeFindAllSortedWithHandover ( bgSharedGroupPtr , nativeReplicationPtr , ptrQuery , 0 , Table . INFINITE , Table . INFINITE , columnIndex , ascending ) ; } public long findAllMultiSortedWithHandover ( long bgSharedGroupPtr , long nativeReplicationPtr , long [ ] columnIndices , boolean [ ] ascending ) { validateQuery ( ) ; context . executeDelayedDisposal ( ) ; return nativeFindAllMultiSortedWithHandover ( bgSharedGroupPtr , nativeReplicationPtr , long , 0 , Table . INFINITE , Table . INFINITE , columnIndices , ascending ) ; } public TableView importHandoverTableView ( long handoverPtr , long callerSharedGroupPtr ) { long nativeTvPtr = 0 ; try { nativeTvPtr = nativeImportHandoverTableViewIntoSharedGroup ( handoverPtr , callerSharedGroupPtr ) ; return new TableView ( this . context , this . table , nativeTvPtr ) ; } catch ( RuntimeException e ) { if ( nativeTvPtr != 0 ) { TableView . nativeClose ( nativeTvPtr ) ; } catch ( RuntimeException e ) { if ( nativeTvPtr , this . table , nativeTvPtr ) ; return new TableView ( this . context , this . table , nativeTvPtr , this . table , nativeTvPtr", "import org . elasticsearch . index . mapper . VersionFieldMapper ; import org . elasticsearch . index . seqno . SeqNoStats ;", "Boolean force , LocalDate effectiveTime ) {", "", "new java . lang . String [ ] { \"SequenceNumber\" , \"AddMountPoint\" , \"BlockContainerIdGenerator\" , \"BlockInfo\" , \"CompleteFile\" , \"CompletePartition\" , \"CompleteStore\" , \"CreateStore\" , \"DeleteFile\" , \"DeleteLineage\" , \"DeleteMountPoint\" , \"DeleteStore\" , \"InodeDirectory\" , \"InodeDirectoryIdGenerator\" , \"InodeFile\" , \"InodeLastModificationTime\" , \"Lineage\" , \"LineageIdGenerator\" , \"MergeStore\" , \"PersistDirectory\" , \"AsyncPersistRequest\" , \"ReinitializeFile\" , \"Rename\" , \"SetAcl\" , \"SetState\" , \"Entry\" , } ) ;", "Mono < StreamMessageId > addAll ( Map < K , V > entries , int trimLen , boolean trimStrict ) ;", "public void removeNamespace ( Namespace . ID namespaceId ) throws KeeperException , InterruptedException { ZooReaderWriter . getInstance ( ) . recursiveDelete ( ZooUtil . getRoot ( instance ) + Constants . ZNAMESPACES + \"/\" + namespaceId , NodeMissingPolicy . SKIP ) ; }", "return registeredGroundRules . size ( ) ;", "m_normalizePayload . normalize ( model , payload ) ; if ( StringUtil . isEmpty ( ipAddress ) || ipAddress . equals ( CatString . ALL ) ) { model . setRealIp ( payload ) ; model . setIpAddress ( payload . getRealIp ( ) ) ; } m_normalizePayload . normalize ( model , payload ) ;", "public DoubleColumn set ( final Selection rowSelection , final double newValue ) { for ( final int row : rowSelection ) { } }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "root . add ( TreeUtils . makeNode ( r ) ) ;", "@ GET @ Path ( \"{folderId}/{fileId}/{fileName}\" ) public Response getFileStream ( @ PathParam ( \"fileId\" ) String fileId ) { return ( Response ) new EasyShareUnrestrictedRunner ( ) { @ Override public Object run ( CoreSession session , IdRef docRef ) { if ( session . exists ( docRef ) ) { try { DocumentModel doc = session . getDocument ( docRef ) ; Blob blob = doc . getAdapter ( BlobHolder . class ) . getBlob ( ) ; DocumentModel docFolder = session . getDocument ( doc . getParentRef ( ) ) ; OperationContext ctx = new OperationContext ( session ) ; ctx . setInput ( doc ) ; Date today = new Date ( ) ; if ( today . after ( docFolder . getProperty ( \"dc:expired\" ) . getValue ( Date . class ) ) ) { return Response . serverError ( ) . status ( Response . Status . NOT_FOUND ) . build ( ) ; } Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( \"event\" , \"Download\" ) ; params . put ( \"category\" , \"Document\" ) ; params . put ( \"comment\" , \"IP: \" + request . getRemoteAddr ( ) ) ; AutomationService service = Framework . getLocalService ( AutomationService . class ) ; service . run ( ctx , \"Audit.Log\" , params ) ; if ( doc . is ( ) ) { return Response ( ) . status ( Response . Status . NOT_FOUND ) . build ( ) ; AutomationService service = Framework . getLocalService ( AutomationService . class ) ; service . run ( ctx , \"Audit.Log\" , params ) ; params . put ( \"IP: \" + request . getRemoteAddr ( ) ) ; AutomationService service = Framework . getLocalService ( AutomationService . class ) ; service . run ( ctx , \"Audit.Log", "import build . buildfarm . instance . TreeIterator . DirectoryEntry ; import build . buildfarm . v1test . CompletedOperationMetadata ; import build . buildfarm . v1test . ExecutingOperationMetadata ; import build . buildfarm . v1test . QueuedOperationMetadata ; import com . google . common . annotations . VisibleForTesting ;", "this . worldObj . setBlockState ( vec . toBlockPos ( ) , Blocks . AIR . getDefaultState ( ) , 4 ) ;", "import java . util . Set ;", "product . getOutstandingLoanBalance ( ) , acc . emiAmountVariations , acc . memberVariations , product , acc . inArrears , product . getGraceOnArrearsAgeing ( ) ) ;", "RulesTimer timer = ruleEngine . getRulesTimer ( ) ; timer . timeObjectSomeValuesFromDecompositionRule -= CachedTimeThread . currentTimeMillis ( ) ; try { ruleEngine . produce ( ruleEngine . getCreateContext ( filler ) , new BackwardLink ( context , property ) ) ; } finally { timer . timeObjectSomeValuesFromDecompositionRule += CachedTimeThread . currentTimeMillis ( ) ; }", "", "import com . google . gerrit . server . group . GroupAuditService ;", "setState ( 380 ) ;", "", "CmsADEConfigData config = getConfigData ( containerPage . getRootPath ( ) ) ; CmsResourceTypeConfig typeConfig = config . getResourceType ( CmsResourceTypeXmlContainerPage . INHERIT_CONTAINER_TYPE_NAME ) ; referenceResource = typeConfig . createNewElement ( cms , containerPage . getRootPath ( ) ) ;", "updater . applyTripUpdates ( graph , fullDataset , Arrays . asList ( tripUpdate ) , feedId ) ;", "actor . printInfo ( TranslatableComponent . of ( \"worldedit.naturalize.naturalized\" , TextComponent . of ( affected ) ) ) ;", "\"CreateVolume\" , \"CreateSnapshot\" , \"DeleteVolume\" , \"DeleteSnapshot\" , \"DescribeVolumes\" , \"DescribeSnapshots\" , \"AttachVolume\" , \"DetachVolume\" , \"DescribeRegions\" , \"BundleInstance\" , \"DescribeBundleTasks\" , \"CancelBundleTask\" , \"DescribeReservedInstances\" , \"DescribeReservedInstancesOfferings\" , \"PurchaseReservedInstancesOffering\" , \"DescribeRegions\" , \"DescribeBundleTasks\" , \"DescribeReservedInstancesOfferings\" , \"DescribeReservedInstances\" } ) public EucalyptusMessage handle ( EucalyptusMessage msg ) { if ( msg instanceof DescribeRegionsType ) { DescribeRegionsResponseType reply = ( DescribeRegionsResponseType ) msg . getReply ( ) ; try { SystemConfiguration config = EucalyptusProperties . getSystemConfiguration ( ) ; reply . getRegionInfo ( ) . add ( new RegionInfoType ( \"Eucalyptus\" , config . getStorageUrl ( ) . replaceAll ( \"Walrus\" , \"Eucalyptus\" ) ) ) ; reply . getRegionInfo ( ) . add ( new RegionInfoType ( \"Walrus\" , config . getStorageUrl ( ) ) ) ; reply . getRegionInfo ( ) . add ( new RegionInfoType ( \"Walrus\" , config . getStorageUrl ( ) ) ) ; } catch ( EucalyptusCloudException e ) { } return reply ; } else if ( msg instanceof DescribeRegionsType ) { DescribeRegionsResponseType reply = ( DescribeRegionsResponseType ) msg . getReply ( ) ; } catch ( EucalyptusCloudException e ) { } return reply ; }", "private static final int MAX_HARVEST_LEVEL = 3 ; private int harvestLevel = 0 ; public BoardRobotMiner ( EntityRobotBase iRobot ) { super ( iRobot ) ; detectHarvestLevel ( ) ; } @ Override public void delegateAIEnded ( AIRobot ai ) { super . delegateAIEnded ( ai ) ; if ( ai instanceof AIRobotFetchAndEquipItemStack ) { if ( ai . success ( ) ) { detectHarvestLevel ( ) ; } } } private void detectHarvestLevel ( ) { ItemStack stack = robot . getHeldItem ( ) ; if ( stack != null && stack . getItem ( ) != null && stack . getItem ( ) . getToolClasses ( stack ) . contains ( \"pickaxe\" ) ) { harvestLevel = stack . getItem ( ) . getHarvestLevel ( stack , \"pickaxe\" ) ; } } @ Override public RedstoneBoardRobotNBT getNBTHandler ( ) { return BCBoardNBT . REGISTRY . get ( \"miner\" ) ; } @ Override public boolean isExpectedTool ( ItemStack stack ) { return stack != null && stack . getItem ( ) . getToolClasses ( stack ) . contains ( \"pickaxe\" ) ; } @ Override public boolean isExpectedBlock ( World world , BlockPos pos ) { return BuildCraftAPI . getWorldProperty ( \"ore@hardness=\" + Math . min ( MAX_HARVEST_LEVEL , harvestLevel ) ) . get ( world , pos ) ; }", "CaseDbConnection connection = connections . getConnection ( ) ; s = connection . createStatement ( ) ; rs = connection . executeQuery ( s , \"SELECT DISTINCT blackboard_artifacts.artifact_id, \" + \"blackboard_artifacts.obj_id, blackboard_artifacts.artifact_type_id \" + \"FROM blackboard_artifacts, blackboard_attributes \" + \"WHERE blackboard_artifacts.artifact_id = blackboard_attributes.artifact_id \" + \"AND blackboard_attributes.attribute_type_id IS \" + attrType . getTypeID ( ) + \" AND blackboard_attributes.value_text IS '\" + value + \"'\" ) ; return getArtifactsHelper ( rs ) ;", "OwnCloudClient client ; OwnCloudAccount ocAccount =", "", "private Attribute violatedAttribute ; private EntityType entityType ;", "try ( Scanner s = ReplicationTable . getScanner ( conn ) ) { StatusSection . limit ( s ) ; Iterator < Entry < Key , Value > > iter = s . iterator ( ) ; assertTrue ( \"Found no records in replication table\" , iter . hasNext ( ) ) ; entry = iter . next ( ) ; assertTrue ( \"Expected to find element in replication table\" , tableIds . remove ( entry . getKey ( ) . getColumnQualifier ( ) . toString ( ) ) ) ; assertTrue ( \"Expected to find two elements in replication table, only found one \" , iter . hasNext ( ) ) ; entry = iter . next ( ) ; assertTrue ( \"Expected to find element in replication table\" , tableIds . remove ( entry . getKey ( ) . getColumnQualifier ( ) . toString ( ) ) ) ; assertFalse ( \"Expected to only find two elements in replication table\" , iter . hasNext ( ) ) ; }", "", "protected void onActivityResult ( int requestCode , int resultCode , Intent intent ) { super . onActivityResult ( requestCode , resultCode , intent ) ; IPlugin callback = this . activityResultCallback ; if ( callback != null ) { callback . onActivityResult ( requestCode , resultCode , intent ) ; } } public void setActivityResultCallback ( IPlugin plugin ) { this . activityResultCallback = plugin ; }", "fail ( TestUtils . CONST_EXCEPTION_EXPECTED ) ; } catch ( AuthenticationException e ) { }", "", "while ( replyIndex < replies . length ) { ServerMessage . Mutable reply = replies [ replyIndex ] ; if ( reply != null ) { if ( needsComma ) { output . write ( ',' ) ; } needsComma = true ; getBayeux ( ) . freeze ( reply ) ; writeMessage ( response , output , session , reply ) ; } ++ replyIndex ; }", "+ CONTENT_SALT_SIZE_LENGTH_BYTES + contentSalt . length + ENCRYPTED_CONTENT_SIZE_LENGTH_BYTES + encrypted . length ) ; buffer . putInt ( defaultConfig . protocolVersion ) ;", "case EtlCommons . REPEATS_DATA : if ( speciesHasInfoToDownload ( sp , \"repeats\" ) ) { downloadRepeats ( sp , assembly . getName ( ) , spFolder ) ; } break ; case EtlCommons . STRUCTURAL_VARIANTS_DATA : if ( speciesHasInfoToDownload ( sp , \"svs\" ) ) { downloadStructuralVariants ( sp , assembly . getName ( ) , spFolder ) ; } break ;", ". withMaster ( zooKeeper -> new MesosMaster ( dockerClient , zooKeeper , masterConfig ) ) . withSlave ( zooKeeper -> new MesosAgent ( dockerClient , zooKeeper ) )", "{ if ( statement . getFrom ( ) . size ( ) == 1 ) { StatementContext context = new StatementContext ( statement , connection , resolver , binds , scan ) ; return compileSingleQuery ( context , statement , binds ) ; } StatementContext context = new StatementContext ( statement , connection , resolver , binds , scan , true , new HashCacheClient ( connection ) ) ; JoinSpec join = JoinCompiler . getJoinSpec ( context , statement ) ; return compileJoinQuery ( context , statement , binds , join ) ; } @ SuppressWarnings ( \"unchecked\" ) protected QueryPlan compileJoinQuery ( StatementContext context , SelectStatement statement , List < Object > binds , JoinSpec join ) throws SQLException { byte [ ] emptyByteArray = new byte [ 0 ] ; List < JoinTable > joinTables = join . getJoinTables ( ) ; if ( joinTables . isEmpty ( ) ) { context . setCurrentTable ( join . getMainTable ( ) ) ; join . projectColumns ( context . getScan ( ) , join . getMainTable ( ) ) ; ScanProjector . serializeProjectorIntoScan ( context . getScan ( ) , join . getScanProjector ( ) ) ; return compileSingleQuery ( context , statement , binds ) ; } StarJoinType starJoin = JoinCompiler . getStarJoinType ( join ) ; if ( starJoin == StarJoinType . BASIC ) { context . setCurrentTable ( context . getResolver ( ) . getTables ( ) . get ( 0 ) ) ; int count = joinTables . size ( ) ; ImmutableBytesPtr [ ] joinIds = new ImmutableBytesPtr [ count ] ; List < Expression > [ ] joinExpressions = ( List < Expression > [ ] ) new List [ count ] ; List < Expression > [ ] ) new List [ count ] ; List < Expression > [ ] hashExpressions = ( List < Expression > [ ] ) new List [ count ] ; List < Expression > [ ] ) new List", "static Logger log = LoggerFactory . getLogger ( FacadeResource . class ) ;", "if ( type == BasicBlockType . BIN && stack . getTagCompound ( ) != null )", "return response ;", "long feeLimit , long value , long consumeUserResourcePercent , long originEnergyLimit , long tokenValue , String tokenId , String libraryAddressPair )", "public Void visitData ( Concrete . DataDefinition def , Void ignored ) { }", "shutdownHook = new ShutdownThread ( this ) ; Runtime . getRuntime ( ) . addShutdownHook ( shutdownHook ) ; log . debug ( \"Installed shutdown hook {}\" , shutdownHook , new Throwable ( \"Hook creation trace\" ) ) ;", "@ Override public void addErrorMsg ( I_ESR_ImportLine importLine , String msg ) { if ( Check . isEmpty ( msg , true ) ) { return ; } String errorMsg = importLine . getErrorMsg ( ) ; if ( errorMsg == null ) { errorMsg = \"\" ; } if ( ! Check . isEmpty ( errorMsg , true ) ) { errorMsg += \"; \" ; } errorMsg += msg ; importLine . setErrorMsg ( errorMsg ) ; } @ Override public void addErrorMsgInFront ( I_ESR_ImportLine importLine , String msg ) { if ( Check . isEmpty ( msg , true ) ) { return ; } String errorMsg = importLine . getErrorMsg ( ) ; if ( errorMsg == null ) { errorMsg = \"\" ; } final StringBuffer err = new StringBuffer ( ) ; err . append ( msg ) ; if ( ! Check . isEmpty ( errorMsg , true ) ) { err . append ( \"; \" ) ; } err . append ( errorMsg ) ; importLine . setErrorMsg ( err . toString ( ) ) ; } private boolean isControlLine ( final I_ESR_ImportLine line ) { final String trxType = line . getESRTrxType ( ) ; return ESRConstants . ESRTRXTYPE_Payment . equals ( trxType ) || ESRConstants . ESRTRXTYPE_Receipt . equals ( trxType ) ; }", "import java . lang . reflect . Type ;", "st . getDeviation ( ) ,", "IAlignmentDataManager dataManager = getRenderer ( trackComponent . track ) . getDataManager ( ) ; SpliceJunctionHelper . LoadOptions loadOptions = dataManager . getSpliceJunctionLoadOptions ( ) ;", "mMaster . workerRegister ( workerId , Arrays . asList ( \"MEM\" ) , ImmutableMap . of ( \"MEM\" , 1024L ) , ImmutableMap . of ( \"MEM\" , blocks ) ) ;", "", "if ( zone . getNetworkType ( ) == NetworkType . Advanced && ! areServicesSupportedInNetwork ( network . getId ( ) , Service . SourceNat ) ) ) { }", "import javax . xml . rpc . ServiceException ; import java . io . IOException ; import java . rmi . RemoteException ;", "public String getName ( ) { return m_name ; } public void setName ( String name ) { this . m_name = name ; } public String getDescription ( ) { return m_description ; } public void setDescription ( String description ) { this . m_description = description ; } public Date getStartDate ( ) { return m_startDate ; } public Date getEndDate ( ) { return m_endDate ; } public void setStartDate ( String startDate ) { try { m_startDateStr = startDate ; m_startDate = m_sdf . parse ( startDate ) ; } catch ( ParseException e ) { Cat . logError ( e ) ; } } public void setEndDate ( String endDate ) { try { m_endDateStr = endDate ; m_endDate = m_sdf . parse ( endDate ) ; } catch ( ParseException e ) { Cat . logError ( e ) ; } } public String getStartDateStr ( ) { return m_startDateStr ; } public String getEndDateStr ( ) { return m_endDateStr ; } public String [ ] getDomains ( ) { return m_domains ; } public void setDomains ( String [ ] domains ) { this . m_domains = domains ; } public int getStrategyId ( ) { return m_strategyId ; } public void setStrategyId ( int strategyId ) { this . m_strategyId = strategyId ; } public String getStrategyConfig ( ) { return m_strategyConfig ; } public void setStrategyConfig ( String strategyConfig ) { this . m_strategyConfig = strategyConfig ; } public boolean isDisableAbtest ( ) { return m_disableAbtest ; }", "import org . molgenis . data . meta . model . Attribute ; import org . molgenis . data . meta . model . EntityType ;", "public int compareTo ( byte [ ] lhs , int lhsOffset , int lhsLength , ColumnModifier lhsColMod , byte [ ] rhs , int rhsOffset , int rhsLength , ColumnModifier rhsColMod , PDataType rhsType ) { switch ( rhsType ) { case DATE : case TIME : return compareTo ( lhs , lhsOffset , lhsLength , lhsColMod , rhs , rhsOffset , rhsLength , rhsColMod ) ; case TIMESTAMP : return - TIMESTAMP . compareTo ( rhs , rhsOffset , rhsLength , rhsColMod , lhs , lhsOffset , lhsLength , lhsColMod , this ) ; default : throw new ConstraintViolationException ( rhsType + \" cannot be coerced to \" + this ) ; } } @ Override", "SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder ( getText ( page , parentView , parentRichText , textAnchor . text , parentBlock , maxWidth , noTranslate ) ) ;", "import java . io . IOException ; import java . util . Map ; import java . util . NavigableMap ; import java . util . TreeMap ;", "if ( isComplete ( ) ) { throw new WriteCompleteException ( ) ; }", "ApplicationId application = ProvisioningTester . makeApplicationId ( ) ; tester . makeReadyHosts ( 10 , defaultResources ) . activateTenantHosts ( ) ;", "", "scorer = new ScoreOperationChainHandler ( operationScorePropertiesStream , operationAuthorisationScoreLimitStream ) ;", "private boolean jj_3R_703 ( ) { if ( jj_scan_token ( EXTENDS ) ) return true ; if ( jj_3R_103 ( ) ) return true ; Token xsp ; while ( true ) { xsp = jj_scanpos ; if ( jj_3R_789 ( ) ) { jj_scanpos = xsp ; break ; } } return false ; } private boolean jj_3R_67 ( ) { if ( jj_scan_token ( CREATE ) ) return true ; if ( jj_scan_token ( CLASS ) ) return true ; if ( jj_3R_104 ( ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_3R_707 ( ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_708 ( ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_709 ( ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_710 ( ) ) jj_scanpos = xsp ; }", "import org . apache . bsf . BSFException ; import org . opentripplanner . analyst . request . IsoChroneSPTRendererAccSampling ; import org . opentripplanner . analyst . request . Renderer ; import org . opentripplanner . analyst . request . SPTCache ; import org . opentripplanner . analyst . request . SampleGridRenderer ; import org . opentripplanner . analyst . request . TileCache ; import org . opentripplanner . api . resource . PlanGenerator ;", "FacesConverter annotation = identifier . getAnnotation ( FacesConverter . class ) ; if ( annotation != null ) { return ( Converter < T > ) getReference ( identifier , annotation ) ; } else { return ( Converter ) instance ( identifier ) ; }", "protected Set < Long > getSeries ( ) { return series ; } @ Override public void mergeValue ( StreamingValue < AbstractValuedLegacyObservation < ? > > streamingValue ) { if ( streamingValue instanceof HibernateSeriesStreamingValue ) { series . addAll ( ( ( HibernateSeriesStreamingValue ) streamingValue ) . getSeries ( ) ) ; } } protected boolean checkValue ( AbstractValue value ) { if ( isDuplicated ( ) ) { return value . getOfferings ( ) != null && value . getOfferings ( ) . size ( ) == 1 ; } return true ; } protected boolean isDuplicated ( ) { return duplicated ; }", "", "if ( jj_3R_501 ( ) ) { jj_scanpos = xsp ; if ( jj_scan_token ( 37 ) ) return true ; }", "extensionRegistry . fireRender ( aCas , getModelObject ( ) , vdoc , aWindowBeginOffset , aWindowEndOffset ) ;", "", "public DockerAccessWithHttpClient ( String apiVersion , String baseUrl , String certPath , Logger log ) throws IOException { }", "public ResponseObject < AccountReport > getAccountReport ( String accountId , Date dateFrom , Date dateTo , String transactionId ,", "import org . molgenis . data . meta . model . AttributeFactory ; import org . molgenis . data . meta . model . EntityType ; import org . molgenis . data . meta . model . EntityTypeFactory ;", "public FluentWait explicitlyFor ( long amount , TimeUnit timeUnit ) { try { timeUnit . sleep ( amount ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } return this ; }", "case PERSONAL_CHEST : if ( ! entityplayer . isSneaking ( ) && ! world . isSideSolid ( pos . up ( ) , EnumFacing . DOWN ) )", "ConfigurationNode root = DataTranslators . CONFIGURATION_NODE . translate ( container ) ;", "public DoubleTensor sample ( KeanuRandom random ) { return TensorGaussian . sample ( getShape ( ) , mu . getValue ( ) , sigma . getValue ( ) , random ) ; }", "ValueExpr vex = new ValueExpr ( defSchema ) ; vex . analyze ( new Vex ( column_constraint . constr_body ( ) . default_expr ) ) ; col . addAllDeps ( vex . getDepcies ( ) ) ;", "c . add ( Restrictions . in ( \"s.\" + DatasetEntity . PROPERTY_ID , series ) ) ;", "", "", "if ( params . containsKey ( INDEX_STATS_PARAM ) && params . getBoolean ( INDEX_STATS_PARAM ) ) { indexStats ( ) ; }", "return _hreq != null ? _hreq . getRequestURI ( ) : _attrs . get ( Attributes . INCLUDE_REQUEST_URI ) ;", "* Set String value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'", "siteConfig . put ( INSTANCE_DFS_URI . getKey ( ) , \"hdfs://\" ) ; MiniAccumuloConfigImpl config = new MiniAccumuloConfigImpl ( tempFolder . getRoot ( ) , \"password\" ) . setSiteConfig ( siteConfig ) . initialize ( ) ; assertEquals ( \"hdfs://\" , config . getSiteConfig ( ) . get ( INSTANCE_DFS_URI . getKey ( ) ) ) ;", "import static com . github . javaparser . JavaParser . parseExpression ; import static com . github . javaparser . utils . Utils . EOL ;", "import org . bcia . javachain . msp . mgmt . Principal ;", "ConversionProvider prov = getConversionProvider ( type ) ;", "import ch . qos . logback . classic . net . SSLSocketRemote ; import ch . qos . logback . classic . net . server . SSLServerSocketAppender ;", "for ( ConstrainedTerm result : results ) { }", "mainButton . setText ( R . string . menu_install ) ; mainButton . setOnClickListener ( mOnClickListener ) ; btMain . setEnabled ( true ) ;", "if ( tile instanceof TileEntityCoalGenerator ) { TileEntityCoalGenerator tileEntity = ( TileEntityCoalGenerator ) tile ; if ( tileEntity . heatGJperTick > 0 ) { int metadata = getMetaFromState ( stateIn ) ; float particlePosX = pos . getX ( ) + 0.5F ; float particlePosY = pos . getY ( ) + 0.0F + rand . nextFloat ( ) * 6.0F / 16.0F ; float particlePosZ = pos . getZ ( ) + 0.5F ; float particleSize0 = 0.52F ; float particleSize1 = rand . nextFloat ( ) * 0.6F - 0.3F ; if ( metadata == 3 ) { worldIn . spawnParticle ( EnumParticleTypes . SMOKE_NORMAL , particlePosX - particleSize0 , particlePosY , particlePosZ + particleSize1 , 0.0D , 0.0D , 0.0D ) ; worldIn . spawnParticle ( EnumParticleTypes . FLAME , particlePosX - particleSize0 , particlePosY , particlePosZ + particleSize1 , 0.0D , 0.0D , 0.0D ) ; } else if ( metadata == 2 ) { worldIn . spawnParticle ( EnumParticleTypes . SMOKE_NORMAL , particlePosX , particleSize0 , particlePosY , particlePosZ + particleSize1 , 0.0D , 0.0D , 0.0D , 0.0D , 0.0D , 0.0D , 0.0D , 0.0D , 0.0D , 0.0D , 0.0D , 0.0D ) ; } else if ( metadata == 2 ) { worldIn . spawnParticle ( EnumParticleTypes . SMOKE_NORMAL , particlePosX", "private SurfaceHolder . Callback surfaceHolderCallback = new SurfaceHolder . Callback ( ) { @ Override public void surfaceCreated ( SurfaceHolder surfaceHolder ) { try { if ( ActivityCompat . checkSelfPermission ( context , Manifest . permission . CAMERA ) != PackageManager . PERMISSION_GRANTED ) { Log . e ( LOGTAG , \"Permission not granted!\" ) ; return ; } else if ( ! cameraRunning && cameraSource != null && surfaceView != null ) { cameraSource . start ( surfaceView . getHolder ( ) ) ; cameraRunning = true ; } } catch ( IOException ie ) { Log . e ( LOGTAG , ie . toString ( ) ) ; } } @ Override public void surfaceChanged ( SurfaceHolder surfaceHolder , int i , int i1 , int i2 ) { } @ Override public void surfaceDestroyed ( SurfaceHolder surfaceHolder ) { stop ( ) ; } } ; public QREader ( final Builder builder ) { this . autoFocusEnabled = builder . autofocusEnabled ; }", "import org . esa . snap . ui . AppContext ; import org . esa . snap . ui . ModelessDialog ; import org . esa . snap . ui . tooladapter . actions . EscapeAction ;", "return a . build ( ) ;", "minecraftbyexample . creativetab . Startup . initCommon ( ) ; minecraftbyexample . overlay_simple . Startup . initCommon ( ) ; minecraftbyexample . overlay_advanced . Startup . initCommon ( ) ; minecraftbyexample . mbe03_block_variants . Startup . initCommon ( ) ; minecraftbyexample . mbe10_item_simple . Startup . initCommon ( ) ; minecraftbyexample . mbe11_item_variants . Startup . initCommon ( ) ;", "Integer networkRate = _networkModel . getNetworkRate ( network . getId ( ) , vm . getId ( ) ) ; NicProfile vmNic = new NicProfile ( vo , network , vo . getBroadcastUri ( ) , vo . getIsolationUri ( ) , networkRate , _networkModel . isSecurityGroupSupportedInNetwork ( network ) , _networkModel . getNetworkTag ( vm . getHypervisorType ( ) ,", "", "@ ContextConfiguration ( classes = JavaQueueListenerTest . JavaQueueListenerTestConfiguration . class ) class JavaQueueListenerTest extends QueueListenerTest { }", "this . serverVariables . put ( \"character_set_client\" , mysqlCharsetName ) ; this . serverVariables . put ( \"character_set_connection\" , mysqlCharsetName ) ;", "import org . jpmml . sparkml . MatrixUtil ;", "import org . joyqueue . network . session . Joint ; import org . joyqueue . monitor . PointTracer ; import org . joyqueue . monitor . TraceStat ;", "private ArrivalAndDepartureQuery createArrivalAndDepartureQuery ( ArrivalAndDepartureForStopQueryBean query ) { ArrivalAndDepartureQuery adQuery = new ArrivalAndDepartureQuery ( ) ; AgencyAndId stopId = AgencyAndIdLibrary . convertFromString ( query . getStopId ( ) ) ; StopEntry stop = _transitGraphDao . getStopEntryForId ( stopId , true ) ; AgencyAndId tripId = AgencyAndIdLibrary . convertFromString ( query . getTripId ( ) ) ; TripEntry trip = _transitGraphDao . getTripEntryForId ( tripId ) ; if ( trip == null ) throw new NoSuchTripServiceException ( query . getTripId ( ) ) ; adQuery . setStop ( stop ) ; adQuery . setStopSequence ( query . getStopSequence ( ) ) ; adQuery . setTrip ( trip ) ; adQuery . setServiceDate ( query . getServiceDate ( ) ) ; adQuery . setVehicleId ( AgencyAndIdLibrary . convertFromString ( query . getVehicleId ( ) ) ) ; adQuery . setTime ( query . getTime ( ) ) ; return adQuery ; }", "@ Singleton @ Path ( \"/fsm/machines\" ) @ Path ( \"/api\" ) @ Named", "import com . google . inject . Inject ; import com . google . inject . persist . Transactional ;", "", "SoftReference < Map < Character , Object > > current = changedBlocks . computeIfAbsent ( index , k -> new SoftReference < > ( new HashMap < > ( ) ) ) ; Map < Character , Object > currentMap = current . get ( ) ;", "private static final ByteBuf THROWABLE = Unpooled . buffer ( 1 ) ; private final BlockingQueue < ByteBuf > mPackets = new LinkedBlockingQueue < > ( ) ; private final AtomicInteger mBufferSize = new AtomicInteger ( 0 ) ; private volatile Throwable mPacketReaderException ; private final AtomicBoolean mPacketReaderExceptionThrown = new AtomicBoolean ( false ) ; private boolean mDone = false ;", "if ( ! AuthenticationType . GSS . equals ( service . getAuthenticationType ( ) ) ) { }", "import com . gentics . mesh . core . data . schema . impl . AddFieldChangeImpl ; import com . gentics . mesh . core . data . schema . impl . FieldTypeChange ; import com . gentics . mesh . core . data . schema . impl . FieldTypeChangeImpl ;", "private InputStream getPathFromUri ( String path ) throws IOException { if ( path . startsWith ( \"content:\" ) ) { Uri uri = Uri . parse ( path ) ; return mApp . getActivity ( ) . getContentResolver ( ) . openInputStream ( uri ) ; } if ( path . startsWith ( \"http:\" ) || path . startsWith ( \"file:\" ) ) { URL url = new URL ( path ) ; return url . openStream ( ) ; } else { return new FileInputStream ( path ) ; } }", "XmlHelper . makeGmlIdsUnique ( encodedObject . getDomNode ( ) ) ; if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( \"Encoded object {} is valid: {}\" , encodedObject . schemaType ( ) . toString ( ) , XmlHelper . validateDocument ( encodedObject ) ) ; }", "EntityType entityType = when ( mock ( EntityType . class ) . getName ( ) ) . thenReturn ( \"entity\" ) . getMock ( ) ; Attribute attr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( \"attr\" ) . getMock ( ) ;", "setState ( 338 ) ;", "import java . util . HashMap ; import java . util . Map ; import java . io . File ;", "private void startAnimationToWorkspaceFromAllApps ( final Workspace . State fromWorkspaceState , final Workspace . State toWorkspaceState , final boolean animated , final Runnable onCompleteRunnable ) { }", "public class MainActivity extends BaseActivity { }", "if ( taskElement . getTaskSource ( ) != null && taskElement . getTaskSource ( ) . isNewObject ( ) ) { saveTaskSources ( taskElement ) ; } for ( TaskElement taskElement : state . getTasksToSave ( ) ) { }", "import org . freeplane . features . common . addins . styles . MapViewLayout ; import org . freeplane . features . common . addins . misc . HierarchicalIcons ;", "import org . apache . accumulo . core . data . impl . KeyExtent ;", "public void publish ( InternalActionContext ac , Branch branch , BulkActionContext bac ) { String branchUuid = branch . getUuid ( ) ; }", "class FakePagingManager implements PagingManager { public void activate ( ) { } public long addSize ( final long size ) { return 0 ; } public void addTransaction ( final PageTransactionInfo pageTransaction ) { } public PagingStore createPageStore ( final SimpleString destination ) throws Exception { return null ; } public long getTotalMemory ( ) { return 0 ; } public SimpleString [ ] getStoreNames ( ) { return null ; } public long getMaxMemory ( ) { return 0 ; } public PagingStore getPageStore ( final SimpleString address ) throws Exception { return null ; } public void deletePageStore ( SimpleString storeName ) throws Exception { } public PageTransactionInfo getTransaction ( final long transactionID ) { return null ; } public boolean isBackup ( ) { return false ; } public boolean isGlobalPageMode ( ) { return false ; } public boolean isPaging ( final SimpleString destination ) throws Exception { return false ; } public void page ( final ServerMessage message , final boolean duplicateDetection ) throws Exception { return false ; } public void reloadStores ( ) throws Exception { } public void removeTransaction ( final long transactionID ) { return null ; } public void setUniqueIDSequence ( final long id ) { } public void addQueueBinding ( final Binding binding ) throws Exception { } public void commit ( final long txID ) throws Exception { } public void deleteQueueBinding ( final Binding binding ) throws Exception { } public void commit ( final long txID ) throws Exception { } public void deleteDuplicateID ( final long recordID ) throws Exception { } public void deleteDuplicateIDTransactional ( final long txID , final long recordID ) throws Exception { } public void deleteMessage ( final long transactionId , final boolean duplicateDetection ) throws Exception { } public void resumeDepages ( ) { } public void sync ( final Collection < SimpleString > destinationsToSync ) throws Exception { } public void commit ( final long txID ) throws Exception { } public void", "import com . google . common . util . concurrent . MoreExecutors ; import com . google . common . util . concurrent . FutureCallback ; import com . google . common . util . concurrent . ListenableFuture ; import com . google . common . util . concurrent . ListeningExecutorService ; import build . bazel . remote . execution . v2 . Action ; import build . bazel . remote . execution . v2 . ActionResult ; import build . bazel . remote . execution . v2 . Command ; import build . bazel . remote . execution . v2 . Digest ; import build . bazel . remote . execution . v2 . Directory ; import build . bazel . remote . execution . v2 . ExecuteOperationMetadata ; import build . bazel . remote . execution . v2 . Platform ;", "private static void extractPathsOfController ( Map < String , Object > level1 , String controller , Map resultMap ) { level1 . entrySet ( ) . forEach ( e1 -> { String key1 = e1 . getKey ( ) ; Object value1 = e1 . getValue ( ) ; if ( isInnerNode ( value1 ) ) { Map < String , Object > level2 = innerNode ( value1 ) ; if ( hasTag ( level2 , controller ) ) { resultMap . put ( key1 , value1 ) ;", "@ Override public boolean isScopeEnforced ( ) { return false ; } @ Override public boolean isRequirable ( ) { return true ; } private String getModuleContent ( ) { return \"\u00c4\u012bmodule.exports = require('br/ServiceRegistry').getService('\" + requirePath + \"');\\n\" ; }", "root . removeAllViews ( ) ; child1 . setTag ( \"tag1\" ) ; child2 . setTag ( \"tag2\" ) ; child3 . setTag ( \"tag3\" ) ; root . addView ( child1 ) ; root . addView ( child2 ) ; root . addView ( child3 , 1 ) ; assertThat ( root . findViewWithTag ( \"tag1\" ) , sameInstance ( child1 ) ) ; assertThat ( root . findViewWithTag ( \"tag2\" ) , sameInstance ( ( View ) child2 ) ) ; assertThat ( ( ViewGroup ) root . findViewWithTag ( \"tag3\" ) , sameInstance ( child3 ) ) ;", "final String visibilitySource = getOptionalParameter ( request , \"visibilitySource\" ) ; String workspaceId = getWorkspaceId ( request ) ;", "void should_use_RateLimitedSampler_withSpanHandler ( ) { this . contextRunner . withUserConfiguration ( WithSpanHandler . class ) . run ( ( context -> { final Sampler bean = context . getBean ( Sampler . class ) ; BDDAssertions . then ( bean ) . isInstanceOf ( RateLimitingSampler . class ) ; } ) ) ; }", "DelegateExtensionFunctionDefinition ( final StroomXSLTFunctionLibrary library , final String functionName , final int minArgs , final int maxArgs , final SequenceType [ ] argTypes , final SequenceType resultType , final Class < ? > delegateClass ) { }", "txtDesc . setBackground ( Color . WHITE ) ;", "@ Override @ SuppressWarnings ( \"unchecked\" ) public ResponseObject getResponse ( ) { List < VolumeVO > volumes = ( List < VolumeVO > ) getResponseObject ( ) ; ListResponse response = new ListResponse ( ) ; List < VolumeResponse > volResponses = new ArrayList < VolumeResponse > ( ) ; }", "this . schemaPosition = new ReadOnlySchemaPosition ( this . getMaxwellConnectionPool ( ) , this . getServerID ( ) , this . config . databaseName ) ;", "@ io . swagger . annotations . ApiOperation ( value = \"Finds Pets by status\" , notes = \"Multiple status values can be provided with comma separated strings\" , response = Pet . class , responseContainer = \"List\" , authorizations = { @ io . swagger . annotations . Authorization ( value = \"petstore_auth\" , scopes = { @ io . swagger . annotations . AuthorizationScope ( scope = \"write:pets\" , description = \"modify pets in your account\" ) , @ io . swagger . annotations . AuthorizationScope ( scope = \"read:pets\" , description = \"read your pets\" ) } ) } , tags = { \"pet\" , } ) @ io . swagger . annotations . ApiResponses ( value = { @ io . swagger . annotations . ApiResponse ( code = 200 , message = \"successful operation\" , response = Pet . class , responseContainer = \"List\" ) , @ io . swagger . annotations . ApiResponse ( code = 400 , message = \"Invalid status value\" , response = Pet . class , responseContainer = \"List\" ) } ) public Response findPetsByStatus ( @ NotNull @ QueryParam ( \"status\" ) List < String > status , @ Context SecurityContext securityContext )", "private static org . apache . stratos . autoscaler . applications . pojo . stub . SubscribableContext [ ] getSubscribableContextArrayFromSubscribableDefinitions ( List < SubscribableDefinition > subscribableDefinitions ) { }", "import de . ovgu . featureide . fm . core . base . FeatureUtils ; import de . ovgu . featureide . fm . core . base . IFeature ; import de . ovgu . featureide . fm . core . base . IFeatureModel ; import de . ovgu . featureide . fm . core . editing . AdvancedNodeCreator ; import de . ovgu . featureide . fm . core . functional . Functional ;", "boolean hasProx ( ) { return fieldInfos . hasProx ( ) ; }", "populateAndCacheStripeDetails ( ) ; Configuration conf = context . conf ; List < OrcProto . Type > types = orcReader . getTypes ( ) ; SearchArgument sarg = createSarg ( types , conf ) ; List < StripeStatistics > stripeStats = null ; int [ ] filterColumns = null ; if ( sarg != null ) { List < PredicateLeaf > sargLeaves = null ; String [ ] columnNames = conf . get ( serdeConstants . LIST_COLUMNS ) . split ( \",\" ) ; if ( columnNames == null ) { columnNames = conf . get ( ColumnProjectionUtils . READ_COLUMN_NAMES_CONF_STR ) . split ( \",\" ) ; } sargLeaves = sarg . getLeaves ( ) ; filterColumns = new int [ sargLeaves . size ( ) ] ; for ( int i = 0 ; i < filterColumns . length ; ++ i ) { String colName = sargLeaves . get ( i ) . getColumnName ( ) ; filterColumns [ i ] = RecordReaderImpl . findColumns ( columnNames , colName ) ; } Metadata metadata = orcReader . getMetadata ( ) ; stripeStats = metadata . getStripeStatistics ( ) ; }", "import java . util . Random ;", "public static final StringId CacheCreation_CACHESERVERS_SIZE = new StringId ( 2304 , \"cacheServers size\" ) ; public static final StringId CacheCreation_CACHE_SERVER_0_NOT_FOUND = new StringId ( 2305 , \"cache server {0} not found\" ) ; public static final StringId CacheCreation_NAMEDATTRIBUTES_SIZE = new StringId ( 2306 , \"namedAttributes size\" ) ; public static final StringId CacheCreation_NO_ATTRIBUTES_FOR_0 = new StringId ( 2307 , \"No attributes for {0}\" ) ; public static final StringId CacheCreation_NO_ROOT_0 = new StringId ( 2308 , \"no root {0}\" ) ; public static final StringId CacheCreation_REGIONS_DIFFER = new StringId ( 2309 , \"regions differ\" ) ; public static final StringId CacheCreation_ROOTS_SIZE = new StringId ( 2310 , \"roots size\" ) ; public static final StringId CacheCreation_SAMECONFIG = new StringId ( 2311 , \"!sameConfig\" ) ; public static final StringId CacheCreation_THE_MESSAGESYNCINTERVAL_PROPERTY_FOR_CACHE_CANNOT_BE_NEGATIVE = new StringId ( 2312 , \"The ''message-sync-interval'' property for cache cannot be negative\" ) ; public static final StringId CacheCreation_TXLISTENER = new StringId ( 2313 , \"txListener\" ) ; public static final StringId CacheDisplay_INVALID_INSPECTIONTYPE_PASSED_TO_CACHEDISPLAYGETCACHEDOBJECTDISPLAY = new StringId ( 2314 , \"Invalid inspectionType passed to CacheDisplay.getCachedObjectDisplay\" ) ; public static final StringId CacheDistributionAdvisor_ILLEGAL_REGION_CONFIGURATION_FOR_CACHE_CANNOT_BE_NEGATIVE = new StringId ( 2314", "import org . apache . commons . compress . utils . IOUtils ; import org . apache . http . client . config . RequestConfig ; import org . apache . http . config . Registry ; import org . apache . http . config . RegistryBuilder ; import org . apache . http . conn . ConnectTimeoutException ; import org . apache . http . conn . socket . ConnectionSocketFactory ; import org . apache . http . conn . socket . PlainConnectionSocketFactory ; import org . apache . http . conn . ssl . SSLConnectionSocketFactory ; import org . apache . http . impl . conn . PoolingHttpClientConnectionManager ; import org . glassfish . hk2 . api . MultiException ; import org . glassfish . jersey . apache . connector . ApacheClientProperties ; import org . glassfish . jersey . apache . connector . ApacheConnectorProvider ; import org . glassfish . jersey . client . ClientConfig ; import org . glassfish . jersey . internal . util . Base64 ; import org . glassfish . jersey . jackson . JacksonFeature ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "", "@ Nonnull public EntityType2CollectionRequest expand ( @ Nonnull final String value ) { addExpandOption ( value ) ; return this ; }", "} else { instanceTransactionViewModels . get ( 0 ) . setValidity ( tangle , initialSnapshot , - 1 ) ;", "case T__68 :", "protected void generateInitializationCode ( Configuration cfg , StringBuilder builder , CCompilerContext ctx ) { }", "setState ( 597 ) ;", "public class CommandDoAs extends ForgeEssentialsCommandBase", "assertEquals ( \"{ }|{ }|[ ]\" , _generateRoot ( JSON_F , new DefaultPrettyPrinter ( \"|\" ) ) ) ;", "@ Deprecated protected Duration computeHearbeatInterval ( ) { }", "import com . favorites . service . CollectorService ; import com . favorites . service . LookAroundService ;", "import org . jabref . logic . xmp . XmpPreferences ;", "package org . bonitasoft . engine . api . impl ; import static java . util . Arrays . asList ; import static org . assertj . core . api . Assertions . assertThat ; import static org . assertj . core . api . Assertions . fail ; import static org . junit . Assert . assertEquals ; import static org . mockito . BDDMockito . given ; import static org . mockito . Matchers . any ; import static org . mockito . Matchers . anyInt ; import static org . mockito . Matchers . anyList ; import static org . mockito . Matchers . anyListOf ; import static org . mockito . Matchers . anyLong ; import static org . mockito . Matchers . anyMap ; import static org . mockito . Matchers . anyString ; import static org . mockito . Matchers . eq ; import static org . mockito . Mockito . doNothing ; import static org . mockito . Mockito . doReturn ; import static org . mockito . Mockito . doThrow ; import static org . mockito . Mockito . mock ; import static org . mockito . Mockito . never ; import static org . mockito . Mockito . times ; import static org . mockito . Mockito . verify ; import static org . mockito . Mockito . never ; import static org . mockito . Mockito . times ; import static org . mockito . Mockito . verify ; import static org . mockito . Mockito . never ; import static org . mockito . Mockito . mock ; import static org . mockito . Mockito . never ; import static org . mockito . Mockito . times ; import static org . mockito . Mockito . verify ; import static org . mockito . Mockito . when ; import java . io . File ; import java . io . Serializable ; import java . util", "entityVertexMutation . setProperty ( LumifyProperties . GLYPH_ICON . getKey ( ) , ArtifactThumbnail . getUrl ( imageVertex . getId ( ) ) , metadata , lumifyVisibility . getVisibility ( ) ) ;", "assertEquals ( 3 , serviceCodes . size ( ) ) ; assertTrue ( serviceCodes . contains ( TestUtils . SERVICE_CODE_GET_RANDOM ) ) ; assertTrue ( serviceCodes . contains ( TestUtils . SERVICE_CODE_GET_RANDOM ) ) ;", "for ( int i = 0 ; i < 263 ; i ++ ) jj_la1 [ i ] = - 1 ;", "addDropdownData ( \"fundList\" , persistenceService . findAllBy ( \" from Fund where isactive=true and isnotleaf=false order by name\" ) ) ; addDropdownData ( \"departmentList\" , persistenceService . findAllBy ( \"from Department order by name\" ) ) ; addDropdownData ( \"functionList\" , masterCache . get ( \"egi-function\" ) ) ;", "conf . getInt ( CommonConfigurationKeysPublic . IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY , CommonConfigurationKeysPublic . IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT ) , conf . getInt ( CommonConfigurationKeysPublic . IPC_CLIENT_CONNECT_MAX_RETRIES_KEY , CommonConfigurationKeysPublic . IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT ) , conf . getInt ( CommonConfigurationKeysPublic . IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY , CommonConfigurationKeysPublic . IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT ) , conf . getBoolean ( CommonConfigurationKeysPublic . IPC_CLIENT_TCPNODELAY_KEY , CommonConfigurationKeysPublic . IPC_CLIENT_TCPNODELAY_DEFAULT ) ,", "jj_la1 [ 224 ] = jj_gen ;", "jj_la1 [ 224 ] = jj_gen ; break label_153 ;", "if ( ! handleResult ( doc ) )", "? \"native\" : \"pure-java\" ) ) ;", "distC . getNormal ( 2 ) . setVariance ( 0.0025 ) ;", "", "public final void onWorldEvent ( WorldEvent event ) { if ( Baritone . settings ( ) . chunkCaching . get ( ) ) { } }", "import static org . apache . sis . internal . metadata . MetadataUtilities . warnNonPositiveArgument ; import org . opengis . annotation . UML ; import static org . opengis . annotation . Obligation . OPTIONAL ; import static org . opengis . annotation . Obligation . CONDITIONAL ; import static org . opengis . annotation . Specification . ISO_19115 ;", "public OnToesState ( FootControlHelper footControlHelper , ToeOffHelper toeOffHelper , YoSE3PIDGainsInterface gains , YoVariableRegistry registry )", "public void onPerformSync ( Account account , Bundle bundle , String authority , ContentProviderClient contentProviderClient , SyncResult syncResult ) { ( ( CommonsApplication ) getContext ( ) . getApplicationContext ( ) ) . injector ( ) . inject ( this ) ; }", "if ( ! processCommand ( Command . SET_TESTRIG + \" \" + _settings . getTestrigId ( ) ) ) { }", "", "origTag . removeRoutingTo ( next ) ;", "private class InternalClusterEventListener implements ClusterEventListener { @ Override public void event ( ClusterEvent event ) { switch ( event . type ( ) ) { case INSTANCE_ADDED : case INSTANCE_ACTIVATED : break ; case INSTANCE_REMOVED : case INSTANCE_DEACTIVATED : break ; default : log . warn ( \"unknown cluster event {}\" , event ) ; } } } public class InternalDelegate implements MastershipStoreDelegate { @ Override public void notify ( MastershipEvent event ) { log . info ( \"dispatching mastership event {}\" , event ) ; eventDispatcher . post ( event ) ; } }", "import java . io . IOException ; import org . apache . http . Header ;", "public void writeData ( Resource resource , Map < String , List < Map < String , Object > > > actualData , String ... methodName ) { }", "import buildcraft . api . power . PowerHandler ; import buildcraft . api . power . PowerHandler . PowerReceiver ; import buildcraft . api . power . PowerHandler . Type ;", "", "this . revertAir ( ) ;", "setTrkPreparedStmt ( GPXTablesFactory . createTrackTable ( connection , trackTableName ) ) ; setTrkSegmentsPreparedStmt ( GPXTablesFactory . createTrackSegmentsTable ( connection , trackSegmentsTableName ) ) ; setTrkPointsPreparedStmt ( GPXTablesFactory . createTrackPointsTable ( connection , trackPointsTableName ) ) ; tableNames . add ( trackTableName ) ; tableNames . add ( trackSegmentsTableName ) ; tableNames . add ( trackPointsTableName ) ;", "mFormKey , mFormCookie , mThreadId , getIntent ( ) . getStringExtra ( Constants . POST_ID ) ) ;", "case 29 : return \"CP Evolved\" ; case 30 : return \"Duel Ability IV\" ; case 31 : return \"Gym Offense IV\" ; case 32 : return \"Gym Defense IV\" ;", "mAccountTypeSpinner = new SpinnerHelper ( DialogUtils . configureTypeSpinner ( findViewById ( R . id . AccountType ) ) ) ; mAccountColorIndicator = findViewById ( R . id . Color ) ;", "@ Override public final Portlet getInstance ( EntityContext context ) { }", "if ( index . equalsIgnoreCase ( \"size\" ) ) { cube . setSize ( Static . getInt32 ( specArray . get ( index , t ) , t ) ) ; }", "setState ( 719 ) ;", "import org . schabi . newpipe . settings . SettingsActivity ; import org . schabi . newpipe . util . NavStack ; import org . schabi . newpipe . util . ThemeHelper ;", "import org . junit . ClassRule ; import org . junit . Rule ;", "public class Simplenote extends Application implements HeartbeatListener { public static final String DELETED_NOTE_ID = \"deletedNoteId\" ; public static final String SELECTED_NOTE_ID = \"selectedNoteId\" ; public static final String TAG = \"Simplenote\" ; public static final int INTENT_EDIT_NOTE = 2 ; public static final int INTENT_PREFERENCES = 1 ; private static final String AUTH_PROVIDER = \"simplenote.com\" ; private static final int TEN_SECONDS_MILLIS = 10000 ; private static final long HEARTBEAT_TIMEOUT = WebSocketManager . HEARTBEAT_INTERVAL * 2 ; private static final String TAG_SYNC = \"sync\" ; private static Bucket < Preferences > mPreferencesBucket ; }", "public int getEnergyCost ( ItemStack tool ) { return Config . GADGETS . GADGET_DESTRUCTION . energyCost . get ( ) ; }", "case SubscriptionFragment . TAG : SubscriptionFragment subscriptionFragment = new SubscriptionFragment ( ) ; subscriptionFragment . setItemAccess ( itemAccess ) ; fragment = subscriptionFragment ; break ; default : tag = QueueFragment . TAG ; fragment = new QueueFragment ( ) ; args = null ; break ;", "{ fbReader . addAction ( ActionCode . SPEAK , new SpeakAction ( this , fbReader ) ) ; fbReader . addAction ( ActionCode . CANCEL , new CancelAction ( this , fbReader ) ) ; } @ Override protected void onNewIntent ( Intent intent ) { if ( Intent . ACTION_SEARCH . equals ( intent . getAction ( ) ) ) { final String pattern = intent . getStringExtra ( SearchManager . QUERY ) ; final Handler successHandler = new Handler ( ) { public void handleMessage ( Message message ) { showTextSearchControls ( true ) ; } } ; final Handler failureHandler = new Handler ( ) { public void handleMessage ( Message message ) { UIUtil . showErrorMessage ( FBReader . this , \"textNotFound\" ) ; } } ; final Runnable runnable = new Runnable ( ) { public void run ( ) { final FBReaderApp fbReader = ( FBReaderApp ) FBReaderApp . Instance ( ) ; fbReader . TextSearchPatternOption . setValue ( pattern ) ; if ( fbReader . getTextView ( ) . search ( pattern , true , false , false , false ) != 0 ) { successHandler . sendEmptyMessage ( 0 ) ; } else { failureHandler . sendEmptyMessage ( 0 ) ; } } } ; UIUtil . wait ( \"search\" , runnable , this ) ; } else { super . onNewIntent ( intent ) ; } }", "private SessionManager ( EventBus eventBus , WSClient wsClient , OkHttpClient okHttpClient )", "import stroom . index . impl . db . IndexDbConfig ; import stroom . job . JobSystemConfig ; import stroom . lifecycle . impl . LifecycleConfig ; import stroom . node . impl . NodeConfig ;", "repeatButton . setIconColor ( Theme . getColor ( Theme . key_player_buttonActive ) ) ; Theme . setSelectorDrawableColor ( repeatButton . getBackground ( ) , Theme . getColor ( Theme . SRC_IN ) & 0x19ffffff , true ) ;", "{ this . credentials = credentials ; } @ Override public SSession call ( ) throws Exception { }", "", "@ Override public void initGui ( ) { super . initGui ( ) ; lastLeftStat = lastRightStat = null ; if ( inventory instanceof TileMachineBase ) { WidgetTabItemLister backlogTab = new WidgetTabItemLister ( this , \"gui.tab.stuffed\" , Refs . MODID + \":textures/gui/widgets/gui_stuffed.png\" , guiLeft + xSize , guiTop + 5 , 0xFFc13d40 , null , false ) ; lastRightStat = backlogTab ; backlogTab . setItems ( ( ( TileMachineBase ) inventory ) . getBacklog ( ) ) ; addWidget ( backlogTab ) ; } String unlocalizedInfo = inventory . getInventoryName ( ) + \".info\" ; String localizedInfo = I18n . format ( unlocalizedInfo ) ; if ( ! unlocalizedInfo . equals ( localizedInfo ) ) { addAnimatedStat ( \"gui.tab.info\" , Refs . MODID + \":textures/gui/widgets/gui_info.png\" , 0xFF8888FF , isInfoStatLeftSided ( ) ) . setText ( unlocalizedInfo ) ; } } protected boolean isInfoStatLeftSided ( ) { return true ; } protected GuiAnimatedStat addAnimatedStat ( String title , ItemStack icon , int color , boolean leftSided ) { GuiAnimatedStat stat = new GuiAnimatedStat ( this , title , icon , guiLeft + ( leftSided ? 0 : xSize ) , leftSided && lastLeftStat != null || ! leftSided && lastLeftStat != null || ! leftSided && lastRightStat != null ? 3 : guiTop + 5 , color , leftSided ? lastLeftStat : lastRightStat , leftSided ) { GuiAnimatedStat stat = new GuiAnimatedStat", "Long eventId = ActionEventUtils . onScheduledActionEvent ( ( callerUserId == null ) ? User . UID_SYSTEM : callerUserId ,", "this . factory = factory ;", "statementSetup . accept ( ps ) ; try ( ResultSet resultSet = ps . executeQuery ( ) ) { return dsl . fetch ( resultSet ) ; }", "true , true , TEST_OP_TIME_MS , childrenIds , PermissionStatus . getDirDefault ( ) ) ) ; } @ Test public void inodeLastModificationTimeEntryTest ( ) throws IOException { entryTest ( new InodeLastModificationTimeEntry ( TEST_FILE_ID , TEST_OP_TIME_MS ) ) ;", "ItemStack cbc = BINDER_COMPOSITE . getStack ( 8 ) ; if ( Config . useAlternateBinderRecipe ) { addShaped ( cbc , \"gcg\" , \"sgs\" , \"gcg\" , 'g' , Blocks . gravel , 's' , Blocks . sand , 'c' , Items . clay_ball ) ; }", "case NEAR : case WITHIN : case MINDEPTH :", "public Boolean getDisableNotification ( ) { return disableNotification ; } public void enableNotification ( ) { this . disableNotification = false ; } public void disableNotification ( ) { this . disableNotification = true ; } public String getChatId ( ) { return chatId ; } public void setChatId ( String chatId ) { this . chatId = chatId ; } public String getAudio ( ) { return audio ; } public void setAudio ( String audio ) { this . audio = audio ; this . isNewVoice = false ; } public void setNewAudio ( String audio , String audioName ) { this . audio = audio ; this . isNewVoice = false ; this . voiceName = audioName ; } public Integer getReplayToMessageId ( ) { return replayToMessageId ; } public void setReplayToMessageId ( Integer replayToMessageId ) { this . replayToMessageId = replayToMessageId ; } public ReplyKeyboard getReplayMarkup ( ) { return replayMarkup ; } public void setReplayMarkup ( ReplyKeyboard replayMarkup ) { this . replayMarkup = replayMarkup ; } public Integer getDuration ( ) { return duration ; } public void setDuration ( Integer duration ) { this . duration = duration ; } public boolean isNewVoice ( ) { return isNewVoice ; } public String getVoiceName ( ) { return voiceName ; } @ Override public String toString ( ) { return \"SendVoice{\" + \"chatId='\" + chatId + '\\'' + \", audio='\" + audio + '\\'' + \", replayMarkup=\" + replayMarkup + \", duration=\" + duration + '}' ; }", "", "import com . google . common . collect . Sets ; import org . n52 . iceland . util . action . Action ; import org . n52 . shetland . convert . ConverterRepository ; import org . n52 . sos . ogc . swes . SwesFeatureRelationship ; import org . n52 . shetland . util . CollectionHelper ; import org . n52 . sos . cache . SosContentCache ; import org . n52 . sos . cache . SosWritableContentCache ; import org . n52 . shetland . ogc . sos . SosOffering ; import org . n52 . shetland . ogc . sos . request . InsertSensorRequest ; import org . n52 . shetland . ogc . sos . response . InsertSensorResponse ;", "amqpMessageHandlerService . onMessage ( message , MessageType . EVENT . name ( ) , TENANT , \"vHost\" ) ; fail ( \"IllegalArgumentException was excepeted due to unknown topic\" ) ;", "public void addAnnotation ( Map < String , Object > annotation , Presentation presentation ) ; public void addText ( TextGraphic shape , Presentation presentation ) ; public void modifyText ( TextGraphic shape , Presentation presentation ) ; public void undoWBGraphic ( Presentation presentation ) ; public void toggleGrid ( boolean value , Presentation presentation ) ;", "import us . ihmc . robotics . math . trajectories . TrajectoryMathTools ;", "import de . rub . nds . tlsattacker . core . util . JKSLoader ; import de . rub . nds . tlsattacker . core . constants . TokenBindingKeyParameters ; import de . rub . nds . tlsattacker . core . constants . TokenBindingVersion ;", "GetAdsRequest . ofHomepage ( aptoideClientUuid , googlePlayServicesAvailable , oemid , mature ) . observe ( ) . compose ( AptoideUtils . ObservableU . applySchedulers ( ) ) . subscribe ( getAdsResponse -> setObjectView ( wsWidget , countDownLatch , getAdsResponse ) , action1 ) ;", "BaseRobotRules rules = createRobotRules ( \"crawler2\" , simpleRobotsTxt . getBytes ( ) ) ; assertFalse ( rules . isAllowed ( \"http://www.domain.com/anypage.html\" ) ) ;", "private StatementResult result ; private Session session ;", "import net . minecraft . util . EnumFacing ; import openmods . api . IActivateAwareTile ; import openmods . api . ICustomHarvestDrops ; import openmods . api . ICustomPickItem ; import openmods . api . IPlacerAwareTile ; import openmods . colors . ColorMeta ;", "", "import org . opengis . referencing . ReferenceIdentifier ; import org . apache . sis . internal . referencing . NilReferencingObject ;", "setState ( 773 ) ;", "logger . debug ( \"autoCalibrateSuccess {} {} {} {}\" , ( int ) bounds . getMinX ( ) , ( int ) bounds . getMinY ( ) , ( int ) bounds . getWidth ( ) , ( int ) bounds . getHeight ( ) ) ; Platform . runLater ( ( ) -> { controller . calibrate ( bounds , false ) ; } ) ;", "private String lastVersion ; private Float responseTimeAlertingLevelWarning ; private Float responseTimeAlertingLevelError ; private Float errorsRateAlertingLevelWarning ; private Float errorsRateAlertingLevelError ;", "private Map < String , Object > prepareEmail ( User user , Application client , int expiresAfter , String redirectUri , String redirectUriName ) { final String token = getUserRegistrationToken ( user ) ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( getUserRegistrationUri ( user . getReferenceId ( ) , redirectUri ) ) . append ( \"?token=\" ) . append ( token ) ; if ( client != null ) { sb . append ( \"&client_id=\" ) . append ( client . getSettings ( ) . getOauth ( ) . getClientId ( ) ) ; } String redirectUrl = sb . toString ( ) ; Map < String , Object > params = new HashMap < > ( ) ; params . put ( \"user\" , user ) ; params . put ( redirectUriName , redirectUrl ) ; params . put ( \"token\" , token ) ; params . put ( \"expireAfterSeconds\" , expiresAfter ) ; return params ; } private String getUserRegistrationUri ( String domain , String redirectUri ) { String entryPoint = gatewayUrl ; if ( entryPoint != null && entryPoint . endsWith ( \"/\" ) ) { entryPoint = entryPoint . substring ( 0 , entryPoint . length ( ) - 1 ) ; } return entryPoint + \"/\" + domain + redirectUri ; }", "private static final String [ ] defaultDeploymentXML = { \"<?xml version=\\\"1.0\\\"?>\" , \"<deployment>\" , \" <cluster hostcount=\\\"1\\\" sitesperhost=\\\"2\\\" />\" , \" <httpd enabled=\\\"true\\\">\" , \" <jsonapi enabled=\\\"true\\\" />\" , \" </httpd>\" , \"</deployment>\" } ; static class RejoinCallback implements ProcedureCallback { ClientResponse response ; @ Override public synchronized void clientCallback ( ClientResponse clientResponse ) throws Exception { response = clientResponse ; if ( response . getStatus ( ) != ClientResponse . SUCCESS ) { hostLog . fatal ( response . getStatusString ( ) ) ; VoltDB . crashLocalVoltDB ( response . getStatusString ( ) , false , null ) ; } VoltTable results [ ] = clientResponse . getResults ( ) ; if ( results . length > 0 ) { VoltTable errors = results [ 0 ] ; while ( errors . advanceRow ( ) ) { hostLog . fatal ( \"Host \" + errors . getLong ( 0 ) + \" error: \" + errors . getString ( 1 ) ) ; } VoltDB . crashLocalVoltDB ( \"No additional info.\" , false , null ) ; } this . notify ( ) ; } public synchronized ClientResponse waitForResponse ( int timeout ) throws InterruptedException { final long start = System . currentTimeMillis ( ) ; while ( response == null ) { this . wait ( timeout ) ; long finish = System . currentTimeMillis ( ) ; if ( finish - start >= timeout ) { return null ; } } return response ; } }", "return new TestOperatorCompiler ( parser , properties , ais , defaultSchemaName , functionsRegistry , costEstimator ) ;", "import com . cloud . agent . manager . AgentManager ;", "public int makeSphere ( BlockVector3 pos , Pattern block , double radiusX , double radiusY , double radiusZ , final boolean filled ) { }", "this . createScopeServices ( ) ; this . services . init ( ) ; this . debugger = services . getDebugger ( ) ; this . windowManager = services . getWindowManager ( ) ; this . exec = services . getExec ( ) ; this . actionHandler = new PbActionHandler ( services ) ; this . cookieManager = services . getCookieManager ( ) ; this . prefs = services . getPrefs ( ) ;", "", "\"@from(table = 'rdbms' ,datasource.name = '\" + RDBMSTestConstants . DATA_SOURCE_NAME + \"' \" + \", table.name = '\" + RDBMSTestConstants . TABLE_NAME + \"') \" +", "", "case T__61 : case T__62 : case T__63 : case T__64 : case T__65 : case T__66 : case T__67 : case T__68 : case T__69 : { setState ( 675 ) ; ( ( ObjectLookupContext ) _localctx ) . tkw = typesKeywords ( ) ; } break ;", "setState ( 744 ) ;", "Optional < AisConsent > consent = getActualAisConsent ( encryptedConsentId ) ; if ( ! consent . isPresent ( ) ) { return Optional . empty ( ) ; } Optional < EncryptedData > encryptedConsentData = securityDataService . encryptConsentData ( encryptedConsentId , request . getAspspConsentDataBase64 ( ) ) . map ( Base64 . getDecoder ( ) :: decode ) . map ( aspspConsentData ) ; if ( ! encryptedConsentData . isPresent ( ) ) { return Optional . empty ( ) ; } updateConsentData -> new AspspConsentData ( aspspConsentData , encryptedConsentData . get ( ) . getExternalId ( ) , encryptedConsentData . get ( ) . getData ( ) ) ; return Optional . of ( encryptedConsentId ) . map ( aspspDataService :: updateAspspConsentData ) . filter ( BooleanUtils :: isTrue ) . map ( updated -> encryptedConsentId ) ;", "import javax . ejb . Local ; import javax . persistence . TableGenerator ; import java . util . List ; import java . util . Map ; import java . util . Random ; @ Component", "@ Override public void onFailure ( LowLevelPutException e , Object keyNum , ObjectContainer container , ClientContext context ) { if ( persistent ) container . activate ( errors , 1 ) ; }", "case NonMarshalledAuthority . HREF :", "controller . addExtension ( HighlightController . class , new HighlightController ( ) ) ; controller . addAction ( currentController . getAction ( \"AboutAction\" ) ) ;", "ApplicationConfig applicationConfig = configManager . getApplication ( ) . orElseThrow ( ( ) -> new IllegalStateException ( \"ApplicationConfig cannot be null\" ) ) ; if ( ! METADATA_REMOTE . equals ( applicationConfig . getMetadata ( ) ) ) { exportMetadataService ( applicationConfig , configManager . getRegistries ( ) , configManager . getProtocols ( ) ) ; }", "String extraChatMessage = \"\" ; if ( TextUtils . isEmpty ( messageBody ) ) { extraChatMessage = context . getResources ( ) . getString ( R . string . file_was_attached ) ; } else { extraChatMessage = messageBody ; } intent . putExtra ( QBServiceConsts . EXTRA_CHAT_MESSAGE , extraChatMessage ) ; intent . putExtra ( QBServiceConsts . EXTRA_SENDER_CHAT_MESSAGE , DatabaseManager . getFriend ( context , chatMessage . getSenderId ( ) ) . getFullname ( ) ) ;", "PageTitle title , ValidatedWikitext validatedWikitext , boolean forInclusion , ContentNode parentLog ) throws CompilerException", "private ObservationConstellation insertObservationConstellationForProfiles ( ObservationConstellationDAO obsConstDao , ObservationTypeDAO obsTypeDao , OmObservation o , Session session ) { Procedure procedure = new ProcedureDAO ( ) . getProcedureForIdentifier ( o . getObservationConstellation ( ) . getProcedureIdentifier ( ) , session ) ; ObservableProperty observableProperty = new ObservablePropertyDAO ( ) . getOrInsertObservableProperty ( o . getObservationConstellation ( ) . getObservableProperty ( ) , session ) ; Offering offering = new OfferingDAO ( ) . getOfferingForIdentifier ( o . getObservationConstellation ( ) . getOfferings ( ) . iterator ( ) . next ( ) , session ) ; ObservationConstellation oc = obsConstDao . checkOrInsertObservationConstellation ( procedure , observableProperty , offering , false , session ) ; if ( o . getObservationConstellation ( ) . isSetObservationType ( ) ) { oc . setObservationType ( obsTypeDao . getObservationTypeObject ( o . getObservationConstellation ( ) . getObservationType ( ) , session ) ) ; } return oc ; } private boolean isConvertComplexProfileToSingleProfiles ( ) { return ServiceConfiguration . getInstance ( ) . isConvertComplexProfileToSingleProfiles ( ) ; } @ Override public CapabilitiesExtension getExtension ( ) { final SosInsertionCapabilities insertionCapabilities = new SosInsertionCapabilities ( ) ; }", "reviewsManager , adsManager , preferencesManager , downloadStateParser , appViewAnalytics , notificationAnalytics , storeManager , flagManager , storeUtilsProxy , aptoideAccountManager ) ; } @ FragmentScope @ Provides AppViewPresenter providesAppViewPresenter ( AccountNavigator accountNavigator , AppViewAnalytics analytics , AppViewNavigator appViewNavigator , AppViewManager appViewManager , AptoideAccountManager accountManager , CrashReport crashReport ) { return new AppViewPresenter ( ( AppViewView ) fragment , accountNavigator , analytics , appViewNavigator , appViewManager , accountManager , AndroidSchedulers . mainThread ( ) , crashReport , arguments . getLong ( NewAppViewFragment . BundleKeys . APP_ID . name ( ) ) , arguments . getString ( NewAppViewFragment . BundleKeys . PACKAGE_NAME . name ( ) ) ) ;", "import edu . cmu . tetrad . util . Parameters ;", "HasChildQueryBuilder hasChildQueryBuilder = new HasChildQueryBuilder ( childType , iqb , maxChildren , minChildren , shortCircuitParentDocSet , scoreType , queryInnerHits ) ; hasChildQueryBuilder . queryName ( queryName ) ; hasChildQueryBuilder . boost ( boost ) ; return hasChildQueryBuilder ;", "public boolean doLoadOnAllNodes ( ) { return getInfo ( ) . loadOnAllNodes ( ) ; } public boolean isManaged ( ) { return managed ; } public void setManaged ( boolean b ) { managed = b ; }", "public final class PushNotifications { private final @ ApplicationContext Context context ; private final ApiClientType client ; private final DeviceRegistrarType deviceRegistrar ; }", "if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list217 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . I64 , iprot . readI32 ( ) ) ; struct . metrics = new ArrayList < Long > ( _list217 . size ) ; long _elem218 ; for ( int _i219 = 0 ; _i219 < _list217 . size ; ++ _i219 ) { _elem218 = iprot . readI64 ( ) ; struct . metrics . add ( _elem218 ) ; } } struct . setMetricsIsSet ( true ) ; } if ( incoming . get ( 1 ) ) { { org . apache . thrift . protocol . TList _list273 = new org . apache . thrift . protocol . TList ( org . apache . thrift . protocol . TType . I64 , iprot . readI32 ( ) ) ; struct . metrics = new ArrayList < Long > ( _list273 . size ) ; long _elem274 ; for ( int _i275 = 0 ; _i275 < _list273 . size ; ++ _i275 ) { _elem274 = iprot . readI64 ( ) ; struct . metrics . add ( _elem274 ) ; } } struct . setMetricsIsSet ( true ) ; }", "if ( dvObject . getIdentifier ( ) == null || dvObject . getIdentifier ( ) . isEmpty ( ) ) { dvObject = generateIdentifier ( dvObject ) ; } String identifier = getIdentifier ( dvObject ) ; Map < String , String > metadata = getMetadataForCreateIndicator ( dvObject ) ;", "", "* Test explicitly required array . Please put a valid array - wrapper with 'value' = null and the client library should throw before the request is sent .", "", "TLRPC . Chat chat = getMessagesController ( ) . getChat ( chat_id ) ; hasVoiceChatItem = false ; if ( ChatObject . isChannel ( chat ) ) { if ( ChatObject . hasAdminRights ( chat ) || chat . megagroup ) { editItemVisible = true ; } if ( chatInfo != null ) { if ( chat . megagroup && ChatObject . canManageCalls ( chat ) && chatInfo . call == null ) { otherItem . addSubItem ( call_item , R . drawable . msg_voicechat , LocaleController . getString ( \"StartVoipChat\" , R . string . StartVoipChat ) ) ; hasVoiceChatItem = true ; } } }", "import it . unimi . dsi . fastutil . objects . Object2FloatMap . Entry ;", "public void render ( MatrixStack matrices , int mouseX , int mouseY , float par3 ) { }", "this . refDataStore = refDataStoreProvider . get ( ) ; this . metaDataHolder = metaDataHolder ;", "import com . gentics . mesh . core . data . impl . GraphFieldContainerEdgeImpl ; import com . gentics . mesh . core . data . generic . MeshVertexImpl ;", "@ TruffleBoundary", "if ( pricingConditionsResult == null ) { return ; }", "import org . apache . hadoop . hive . metastore . TableType ; import org . apache . hadoop . hive . metastore . api . * ;", "\"Role\" , \"Individual\" , \"Name\" ,", "setState ( 757 ) ;", "public static ObservationStream createSosObservationFromObservationConstellation ( ObservationConstellation oc , List < String > fois , AbstractObservationRequest request , LocalizedProducer < OwsServiceProvider > serviceProvider , Locale language , String pdf , DaoFactory daoFactory , Session session ) throws OwsExceptionReport , ConverterException { return new ObservationConstellationOmObservationCreator ( oc , fois , r , serviceProvider , LocaleHelper . decode ( r . getRequestedLanguage ( ) ) , i18nr , pdf , daoFactory , session ) . create ( ) ; } public static Collection < ? extends OmObservation > createSosObservationFromObservationConstellation ( ObservationConstellation oc , List < String > fois , AbstractObservationRequest request , LocalizedProducer < OwsServiceProvider > sp , Locale language , String pdf , DaoFactory daoFactory , Session session )", "", "@ Test public void connectionDenied ( ) { UsernamePasswordMetadata credentials = new UsernamePasswordMetadata ( \"user\" , \"password\" ) ; this . requester = requester ( ) . setupMetadata ( credentials , UsernamePasswordMetadata . BASIC_AUTHENTICATION_MIME_TYPE ) . connectTcp ( this . server . address ( ) . getHostName ( ) , this . server . address ( ) . getPort ( ) ) . block ( ) ; assertThatCode ( ( ) -> this . requester . route ( \"prohibit\" ) . data ( \"data\" ) . retrieveMono ( String . class ) . block ( ) ) . isInstanceOf ( ApplicationErrorException . class ) ; } @ Test public void connectWithAnyRole ( ) { UsernamePasswordMetadata credentials = new UsernamePasswordMetadata ( \"user\" , \"password\" ) ; this . requester = requester ( ) . setupMetadata ( credentials , UsernamePasswordMetadata . BASIC_AUTHENTICATION_MIME_TYPE ) . connectTcp ( this . server . address ( ) . getHostName ( ) , this . server . address ( ) . getPort ( ) ) . block ( ) ; String hiRob = this . requester . route ( \"anyroute\" ) . data ( \"rob\" ) . retrieveMono ( String . class ) . block ( ) ; assertThat ( hiRob ) . isEqualTo ( \"Hi rob\" ) ; }", "GT_ModHandler . addCraftingRecipe ( ItemList . Cover_SolarPanel_MV . get ( 1 ) , GT_ModHandler . RecipeBits . NOT_REMOVABLE | GT_ModHandler . RecipeBits . REVERSIBLE , new Object [ ] { \" S \" , \"STS\" , \" S \" , 'S' , ItemList . Cover_SolarPanel_LV , 'T' , ItemList . Transformer_MV_LV } ) ;", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "prop = getConfig ( Constants . CONFIG_CATEGORY_COMPATIBILITY , \"Rocket fuel factor\" , 1 ) ; prop . setComment ( \"The normal factor is 1. Increase this to 2 - 5 if other mods with a lot of oil (e.g. BuildCraft) are installed to increase GC rocket fuel requirement.\" ) ;", "} Transaction txt = Transaction . currentTxn ( ) ; AsyncJobResult jobResult = new AsyncJobResult ( jobId ) ; try { txt . start ( ) ; AsyncJobVO job = _jobDao . findById ( jobId ) ; if ( job != null ) { jobResult . setCmdOriginator ( job . getCmdOriginator ( ) ) ; jobResult . setJobStatus ( job . getStatus ( ) ) ; jobResult . setProcessStatus ( job . getProcessStatus ( ) ) ; jobResult . setResult ( job . getResult ( ) ) ; jobResult . setResultCode ( job . getResultCode ( ) ) ; jobResult . setUuid ( job . getUuid ( ) ) ; if ( job . getStatus ( ) == AsyncJobResult . STATUS_SUCCEEDED || job . getStatus ( ) == AsyncJobResult . STATUS_FAILED ) { if ( s_logger . isDebugEnabled ( ) ) {", "@ Nullable Sprite createItemSprite ( int itemId , int quantity , int border , int shadowColor , int stackable , boolean noted , int scale ) ;", "final BeanPropertyDefinition propDef = candidate . propertyDef ( 0 ) ; final boolean useProps = preferPropsBased || _checkIfCreatorPropertyBased ( ctxt , ctor , propDef ) ;", "import org . kframework . kore . K ; import org . kframework . kore . KApply ;", "public Templates ( CodeCacheProvider runtime , Assumptions assumptions ) { super ( runtime , assumptions , CheckCastSnippets . class ) ; exact = snippet ( \"checkcastExact\" , Object . class , Word . class , boolean . class ) ; primary = snippet ( \"checkcastPrimary\" , Word . class , Object . class , boolean . class , int . class ) ; secondary = snippet ( \"checkcastSecondary\" , Word . class , Object . class , Word [ ] . class , boolean . class ) ; dynamic = snippet ( \"checkcastDynamic\" , Word . class , Object . class , boolean . class ) ; }", "setState ( 467 ) ;", "Predicate contactPersonsFilter = buildSimilarityCriteriaFilter ( criteria , cb , contactPersonsRoot . join ( Contact . PERSON , JoinType . LEFT ) ) ; Predicate activeContactsFilter = contactService . createActiveContactsFilter ( cb , contactPersonsRoot ) ; Predicate contactUserFilter = contactService . createUserFilter ( cb , contactPersonsQuery , contactPersonsRoot ) ; contactPersonsQuery . where ( and ( cb , contactPersonsFilter , activeContactsFilter , contactUserFilter ) ) ; Predicate contactPersonsFilter = contactService . createUserFilter ( cb , contactPersonsQuery , contactPersonsRoot ) ; contactPersonsQuery . where ( and ( cb , contactPersonsFilter , contactUserFilter ) ) ;", "EntityPlayerSP p = FMLClientHandler . instance ( ) . getClientPlayerEntity ( ) ; GCPlayerStatsClient stats = GCPlayerStatsClient . get ( p ) ; if ( list . contains ( p ) && ! stats . getPlatformControlled ( ) && p . getRidingEntity ( ) == null ) { if ( p . movementInput . sneak ) }", "public void testSimpleQueryString ( ) throws Exception { IndexQueryParserService queryParser = queryParser ( ) ; String query = copyToStringFromClasspath ( \"/org/elasticsearch/index/query/simple-query-string.json\" ) ; Query parsedQuery = queryParser . parse ( query ) . query ( ) ; assertThat ( parsedQuery , instanceOf ( BooleanQuery . class ) ) ; } @ Test public void testSimpleQueryStringBoost ( ) throws Exception { IndexQueryParserService queryParser = queryParser ( ) ; SimpleQueryStringBuilder simpleQueryStringBuilder = new SimpleQueryStringBuilder ( \"test\" ) ; simpleQueryStringBuilder . field ( \"body\" , 5 ) ; Query parsedQuery = queryParser . parse ( simpleQueryStringBuilder . toString ( ) ) . query ( ) ; assertThat ( parsedQuery , instanceOf ( TermQuery . class ) ) ; assertThat ( parsedQuery . getBoost ( ) , equalTo ( 5f ) ) ; simpleQueryStringBuilder = new SimpleQueryStringBuilder ( \"test\" ) ; simpleQueryStringBuilder . field ( \"body\" , 5 ) ; simpleQueryStringBuilder . boost ( 2 ) ; parsedQuery = queryParser . parse ( simpleQueryStringBuilder . toString ( ) ) . query ( ) ; assertThat ( parsedQuery , instanceOf ( TermQuery . class ) ) ; assertThat ( parsedQuery . getBoost ( ) , equalTo ( 10f ) ) ; } @ Test", "public ManagedUserVM ( < % if ( databaseType == = 'sql' ) { % > Long < % } else { % > String < % } % > id , String login , < % if ( authenticationType != = 'oauth2' ) { % > String password , < % } % > String firstName , String lastName , String email , boolean activated < % if ( databaseType == = 'mongodb' || databaseType == = 'couchbase' || databaseType == = 'sql' ) { % > , String imageUrl < % } % > , String langKey , < % if ( databaseType == = 'mongodb' || databaseType == = 'couchbase' || databaseType == = 'sql' ) { % > String createdBy , Instant createdDate , String lastModifiedBy , Instant lastModifiedDate ,", "? paintingState . getBaseTransform ( ) : getState ( ) . getTransform ( ) ;", "AutoCompleter < String > autoCompleter = JabRef . jrf . getCurrentBasePanel ( ) . getAutoCompleters ( ) . get ( \"journal\" ) ;", "if ( isMap ( type ) && type instanceof DeclaredType ) { List < ? extends TypeMirror > typeArguments = ( ( DeclaredType ) type ) . getTypeArguments ( ) ; if ( typeArguments . size ( ) == 2 && isSupportedNative ( typeArguments . get ( 0 ) . toString ( ) ) ) { String keyRead = getReadType ( type , typeArguments . get ( 0 ) , adapterFieldInfo ) ; String valueRead = getReadType ( type , typeArguments . get ( 1 ) , adapterFieldInfo ) ; String result = prefix + \"if(reader.peek() == com.google.gson.stream.JsonToken.BEGIN_OBJECT) {\\n\" + prefix + \"\\tobject.\" + variableName + \"= new \" + ( TypeUtils . getOuterClassType ( type ) . equals ( Map . class . getName ( ) ) ? \"java.util.LinkedHashMap<>\" : type . toString ( ) ) + \"();\\n\" + prefix + \"\\treader.beginObject();\\n\" + prefix + \"\\twhile (reader.hasNext()) {\\n\" + prefix + \"\\t\\t\\tcom.google.gson.internal.JsonReaderInternalAccess.INSTANCE.promoteNameToValue(reader);\\n\" + prefix + \"\\t\\t\" + typeArguments . get ( 0 ) . toString ( ) + \" key = \" + keyRead + \";\\n\" + prefix + \"\\t\\t\\t\" + typeArguments . get ( 1 ) . toString ( ) + \" value = \" + valueRead + \";\\n\" + prefix + \"\\t\\t\" + prefix + \"\\t\\t\\t\\t\\t\\n\" + prefix + \"\\t\\t\\t\\t\\t\\t\\t\" + prefix + \"\\t\\t\\t\" + typeArguments . get ( 0 ) . toString ( ) + \"\\t\\t\\t\\", "} ) . doOnNext ( indexOperationMessages -> { bufferQueue . ack ( indexOperationMessages ) ; inFlight . addAndGet ( - 1 * indexOperationMessages . size ( ) ) ; } ) . subscribeOn ( Schedulers . newThread ( ) ) ;", "@ ElementCollection private List < String > tags = new ArrayList < > ( ) ; @ ElementCollection private List < SkillTag > skillTags = new ArrayList < > ( ) ; @ ElementCollection private List < KVTag > kvTags = new ArrayList < > ( ) ;", "jj_la1 [ 221 ] = jj_gen ;", "* Get an array of Dictionaries of type & lt ; string , string & gt ; with value [ ]", "if ( zoneGate != null ) { Block block = zoneGate . getRelative ( left ) . getRelative ( back , 1 ) ; if ( block . getType ( ) != Material . SIGN_POST ) { block . setType ( Material . SIGN_POST ) ; } block . setData ( data ) ; int zoneCap = 0 ; int zonePlayers = 0 ; for ( Team t : zone . getTeams ( ) ) { zonePlayers += t . getPlayers ( ) . size ( ) ; zoneCap += zone . getTeamCap ( ) ; } String [ ] lines = new String [ 4 ] ; lines [ 0 ] = \"Warzone\" ; lines [ 1 ] = zone . getName ( ) ; lines [ 2 ] = zonePlayers + \"/\" + zoneCap + \" players\" ; lines [ 3 ] = zone . getTeams ( ) . size ( ) + \" teams\" ; SignHelper . setToSign ( War . war , block , data , lines ) ; } else { War . war . log ( \"Failed to find warhub gate for \" + zone . getName ( ) + \" warzone.\" , Level . WARNING ) ; }", "return _jobDao . findInstancePendingAsyncJobs ( instanceType , accountId ) ; } @ Override public long submitAsyncJob ( AsyncJobVO job ) { return submitAsyncJob ( job , false ) ; } @ Override @ DB", "import static android . os . Build . VERSION . SDK_INT ;", "assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_SPEED ) , cmd . getSpeed ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_RPM ) , cmd . getRpm ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_EXTERNAL_TEMPERATURE ) , cmd . getExternalTemperature ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_FUEL_LEVEL ) , cmd . getFuelLevel ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_PRNDL ) , cmd . getPrndl ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_TIRE_PRESSURE ) , cmd . getTirePressure ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_ENGINE_TORQUE ) , cmd . getEngineTorque ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_ENGINE_OIL_LIFE ) , cmd . getEngineOilLife ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . MATCH , JsonUtils . readBooleanFromJsonObject ( parameters , UnsubscribeVehicleData . KEY_ODOMETER ) , cmd . getOdometer ( ) ) ; assertEquals ( TestValues . MATCH , JsonUtils . read", "import net . minecraft . util . TypeFilterableList ; import net . minecraft . util . hit . BlockHitResult ; import net . minecraft . util . hit . HitResult ;", "@ SuppressFBWarnings ( \"URF_UNREAD_FIELD\" ) private Future < ? > mTtlCheckerService ; @ SuppressFBWarnings ( \"URF_UNREAD_FIELD\" ) private Future < ? > mLostFilesDetectionService ;", "throw new TskCoreException ( String . format ( \"Error creating OsAccount with sid = %s, loginName = %s, realm = %s, referring host = %d\" , ( sid != null ) ? sid : \"Null\" , ( loginName != null ) ? loginName : \"Null\" , ( realmName != null ) ? realmName : \"Null\" , referringHost ) , ex ) ;", "setState ( 699 ) ;", "InventoryContentPacket creativePacket = new InventoryContentPacket ( ) ; creativePacket . setContainerId ( ContainerId . CREATIVE ) ; creativePacket . setContents ( Toolbox . CREATIVE_ITEMS ) ; upstream . sendPacket ( creativePacket ) ;", "public static final String INVALID_ACTION = \"The `Action` was invalid.\" ; public static final String INVALID_COMMAND = \"The `Command` of the `Action` was invalid.\" ; public static final String INVALID_FILE_NAME =", "import net . minecraft . util . EnumFacing ; import net . minecraft . world . EnumSkyBlock ; import net . minecraft . world . World ;", "private static void serverMetadata ( ) { try { final Metadata metadata = ga4ghApi . toolsMetadataGet ( ) ; final Gson gson = io . cwl . avro . CWL . getTypeSafeCWLToolDocument ( ) ; out ( gson . toJson ( metadata ) ) ; } catch ( ApiException ex ) { kill ( \"Exception: \" + ex ) ; } } private static void search ( java . util . List < String > args ) { }", "private static void assertPropertyTypeEquals ( final DefaultAttributeType < ? > p , final String name , final Class < ? > valueClass , final int minOccurs , final int maxOccurs )", "@ Order ( 75 ) @ ExportEntity ( LocationDto . class ) @ ExportProperty ( { EventDto . EVENT_LOCATION , LocationDto . STREET } )", "public < K > Map < K , String > getMulti ( Serializer < K > keySerializer , K ... keys ) { MultigetSliceQuery < K , String , String > q = createMultigetSliceQuery ( keyspace , keySerializer , serializer , serializer ) ; }", "return environmentWebClient . getCpuSet ( peerInfo , containerHost . getContainerId ( ) ) ;", "", "private static final IWorldGenerator LOOSE_ROCKS_GEN = new WorldGenLooseRocks ( true ) ; private static final IWorldGenerator SNOW_ICE_GEN = new WorldGenSnowIce ( ) ; private static final IWorldGenerator STALACTITE_GEN = new WorldGenSpikes ( true , 300 ) ; private static final IWorldGenerator STALAGMITE_GEN = new WorldGenSpikes ( false , 300 ) ; private static final IWorldGenerator WATERFALL_GEN = new WorldGenFalls ( FRESH_WATER , 50 ) ; private static final IWorldGenerator LAVAFALL_GEN = new WorldGenFalls ( Blocks . FLOWING_LAVA . getDefaultState ( ) , 15 ) ;", "", "private GoIVSettings settings ;", "request , this . serviceMetadataRepository . getServiceProviderFactory ( request . getService ( ) ) , getRequestedLocale ( request ) , daoFactory , session ) ) ;", "", "case 1 : if ( schemeField . type == org . apache . thrift . protocol . TType . STRUCT ) { struct . req = new PartitionsByExprRequest ( ) ; struct . req . read ( iprot ) ; struct . setReqIsSet ( true ) ;", "public static void setUserId ( String userId ) { if ( isConfigured ) { INSTANCE . telemetryContext . configUserContext ( userId ) ; } }", "{ assertStringArrayEquals ( \"fatal: A branch named 'master' already exists.\" , executeUnchecked ( \"git checkout -b master\" ) ) ; }", "private static final String MODULE_NAME = EmbeddedFileExtractorModuleFactory . getModuleName ( ) ; private final UniversalDetector universalDetector = new UniversalDetector ( null ) ;", "static String getSqlSetNotNull ( EntityType entityType , Attribute attr )", "\"@Store(type=\\\"testStoreContainingInMemoryTable\\\", @Cache(size=\\\"10\\\"))\\n\" +", "import com . b2international . snowowl . snomed . datastore . id . ISnomedIdentifierService ;", "import de . adorsys . aspsp . xs2a . service . consent . Xs2aPisConsentDataService ; import de . adorsys . aspsp . xs2a . service . consent . PisConsentService ;", "resultList = read ( aKB , ( conn ) -> { String QUERY = SPARQLQueryStore . listRootConcepts ( aKB ) ;", "public void sendMidiSystemCommonMessage ( int cable , byte bytes [ ] ) { if ( bytes == null ) { return ; } switch ( bytes . length ) { case 1 : sendMidiMessage ( 0x5 , cable , bytes [ 0 ] & 0xff , 0 , 0 ) ; break ; case 2 : sendMidiMessage ( 0x2 , cable , bytes [ 0 ] & 0xff , bytes [ 1 ] & 0xff , 0 ) ; break ; case 3 : sendMidiMessage ( 0x3 , cable , bytes [ 0 ] & 0xff , bytes [ 1 ] & 0xff , bytes [ 2 ] & 0xff ) ; break ; default : break ; } } public void sendMidiSystemExclusive ( int cable , @ NonNull byte [ ] systemExclusive ) { if ( systemExclusive . length > 3 ) { sysexTransferDataStream . reset ( ) ; for ( int sysexIndex = 0 ; sysexIndex < systemExclusive . length ; sysexIndex += 3 ) { if ( ( sysexIndex + 3 < systemExclusive . length ) ) { sysexTransferDataStream . write ( ( ( ( cable & 0xf ) << 4 ) | 0x4 ) ) ; sysexTransferDataStream . write ( ( ( ( cable & 0xf ) << 4 ) | 0x5 ) ) ; sysexTransferDataStream . write ( ( ( ( cable & 0xf ) << 4 ) | 0x6 ) ) ; sysexTransferDataStream . write ( ( ( ( cable & 0xf ) << 4 ) | 0x5 ) ) ; sysexTransferDataStream . write ( ( ( ( cable & 0x6 ) ) ; sysexTransferDataStream . write ( systemExclusive [ sysexIndex ] & 0xff ) ; sysexTransferDataStream . write ( systemExclusive [ sysexIndex ] & 0xff ) ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 3 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "public static GregorianCalendar gregorianCalendar ( ) { return new GregorianCalendar ( ) ; } public static long getTimeZoneOffsetMs ( ) { return new GregorianCalendar ( ) . getTimeZone ( ) . getRawOffset ( ) ; } public static int getTimeZoneOffsetMinutes ( final long timestamp ) { return TimeZone . getDefault ( ) . getOffset ( timestamp ) / 60000 ; } public static String niceTimeScalar ( long t ) { String unit = MainApp . gs ( R . string . unit_second ) ; t = t / 1000 ; if ( t != 1 ) unit = MainApp . gs ( R . string . unit_seconds ) ; if ( t > 59 ) { unit = MainApp . gs ( R . string . unit_minute ) ; t = t / 60 ; if ( t != 1 ) unit = MainApp . gs ( R . string . unit_minutes ) ; if ( t > 59 ) { unit = MainApp . gs ( R . string . unit_hour ) ; t = t / 60 ; if ( t != 1 ) unit = MainApp . gs ( R . string . unit_hours ) ; if ( t > 24 ) { unit = MainApp . gs ( R . string . unit_day ) ; t = t / 24 ; if ( t != 1 ) unit = MainApp . gs ( R . string . unit_days ) ; if ( t > 28 ) { unit = MainApp . gs ( R . string . unit_week ) ; t = t / 7 ; if ( t != 1 ) unit = MainApp . gs ( R . string . unit_weeks ) ; } } } } return qs ( ( double ) t , 0 ) + \" \" + unit ; } private static DecimalFormatSymbols dfs ; private static DecimalFormat df ; public static String qs ( double x , int digits ) { if ( digits == - 1 ) { digits = 0 ; if ( ( ( ( int ) x != x ) ) { digits", "import org . bonitasoft . studio . model . process . builders . ActorFilterBuilder ; import org . bonitasoft . studio . model . process . builders . ActivityBuilder ;", "import com . continuuity . loom . common . conf . Configuration ; import com . continuuity . loom . common . conf . Constants ; import com . continuuity . loom . common . conf . guice . ConfigurationModule ; import com . continuuity . loom . common . queue . guice . QueueModule ;", "public class TileEntityTerraformer extends TileBaseElectricBlockWithInventory implements ISidedInventory , IDisableableMachine , IBubbleProviderColored , IFluidHandler , IFluidHandlerWrapper", "_typeFactory = src . _typeFactory ; _classIntrospector = src . _classIntrospector ; _typeResolverProvider = src . _typeResolverProvider ;", "case 111 : { n = jj_consume_token ( 111 ) ;", "import static org . junit . Assert . assertNotNull ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ;", "index = new Engine . Index ( newUid ( \"1\" ) , doc , SequenceNumbersService . UNASSIGNED_SEQ_NO , 2L , VersionType . INTERNAL , PRIMARY , 0 ) ;", "{ return changed ; } protected boolean removeEmpty ( Chain < ChainableSubsumerRule > ruleChain , Matcher < ChainableSubsumerRule , ? extends SuperClassFromSubClassRule > matcher ) { ruleChain . remove ( matcher ) ; LOGGER_ . trace ( \"{}: removed \" , NAME ) ; return true ; } for ( IndexedClassExpression ice : toldSuperClassExpressions_ ) { if ( removed == 0 ) break ; removed -- ; LOGGER_ . trace ( \"{}: adding to {} [revert]\" , ice , NAME ) ; rule . toldSuperClassExpressions_ . add ( ice ) ; } return false ;", "jj_la1 [ 145 ] = jj_gen ; break label_29 ;", "return ( database instanceof AbstractDb2Database ) || ( database instanceof MSSQLDatabase ) || ( database instanceof OracleDatabase ) || database instanceof PostgresDatabase ;", "@ Override public TargetQuery unfoldAndGenerateTargetQuery ( String sparqlQuery ) throws OBDAException { return unfoldAndGenerateTargetQuery ( sparqlQuery , null ) ; }", "private static HashMap < NonNullList < Object > , ItemStack > recipes = new HashMap < > ( ) ;", "String annotationId = this . defaultAnnotationId ; if ( defaultAnnotationId == null ) { try { int annotationIdNum = resultSet . getInt ( VariantPhoenixHelper . VariantColumn . ANNOTATION_ID . column ( ) ) ; annotationId = annotationIds . get ( annotationIdNum ) ; } catch ( SQLException e ) { throw VariantQueryException . internalException ( e ) ; } } return post ( variantAnnotation , releases , annotationId , syncStatus , studies ) ;", "final List < OperationMethod > methods = new ArrayList < OperationMethod > ( factory . getAvailableMethods ( SingleOperation . class ) ) ; JDK8 . removeIf ( methods , new org . apache . sis . internal . jdk8 . Predicate < OperationMethod > ( ) { @ Override public boolean test ( OperationMethod method ) { return method . getClass ( ) . getName ( ) . endsWith ( \"Mock\" ) ; } } ) ;", "import org . adempiere . webui . component . StringBox ;", "public void visitConditional ( @ NotNull HaxeConditional o ) { visitPsiCompositeElement ( o ) ; } public void visitConstructorName ( @ NotNull HaxeConstructorName o ) { visitPsiCompositeElement ( o ) ; }", "import com . boydti . fawe . FaweAPI ; import com . boydti . fawe . FaweCache ; import com . boydti . fawe . config . BBC ; import com . boydti . fawe . object . FaweLimit ; import com . sk89q . jnbt . CompoundTag ;", "attrsToRet . add ( new BlackboardAttribute ( ATTRIBUTE_TYPE . TSK_COMMENT , moduleName , tsvFileArtifactComments . get ( fileName ) ) ) ;", "boolean success = false ; try { for ( int i = 0 ; i < fieldCount ; i ++ ) { FieldInfo fi = fieldInfos . fieldInfo ( i ) ; if ( fi . isIndexed || fi . hasDocValues ( ) ) { fields . add ( fi . name ) ; Codec codec = segmentCodecs . codecs [ fi . codecId ] ; if ( ! producers . containsKey ( codec ) ) { producers . put ( codec , codec . fieldsProducer ( new SegmentReadState ( dir , si , fieldInfos , readBufferSize , indexDivisor , \"\" + fi . codecId ) ) ) ; } codecs . put ( fi . name , producers . get ( codec ) ) ; } } success = true ; } finally { if ( ! success ) { for ( FieldsProducer fp : producers . values ( ) ) { try { fp . close ( ) ; } catch ( Throwable t ) { } } } }", "this . shardRecoveryDao = Objects . requireNonNull ( shardRecoveryDao , \"shard recovery dao cannot be null\" ) ; this . shardDao = Objects . requireNonNull ( shardDao , \"shardDao is NULL\" ) ; this . recoveryDao = Objects . requireNonNull ( recoveryDao , \"recoveryDao is NULL\" ) ;", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "triple . setAll ( JenaNodeFormatter . format ( quad . getSubject ( ) ) , JenaNodeFormatter . format ( quad . getPredicate ( ) ) , JenaNodeFormatter . format ( quad . getObject ( ) ) ) ; callback . processTriple ( triple , 0 ) ;", "PendingTrace ( final DDTracer tracer , final String traceId , final Map < String , String > serviceNameMappings ) { }", "public static final int FULLSCREEN_CONTAINER_TLI = 165 ;", "import org . elasticsearch . index . query . QueryShardException ; import org . elasticsearch . index . query . functionscore . weight . WeightBuilder ; import org . elasticsearch . index . query . support . QueryInnerHits ;", "@ Override public VpcOfferingResponse createVpcOfferingResponse ( VpcOffering offering ) { VpcOfferingResponse response = new VpcOfferingResponse ( ) ; response . setId ( offering . getId ( ) ) ; response . setName ( offering . getName ( ) ) ; response . setDisplayText ( offering . getDisplayText ( ) ) ; response . setIsDefault ( offering . isDefault ( ) ) ; response . setState ( offering . getState ( ) . name ( ) ) ; Map < Service , Set < Provider > > serviceProviderMap = ApiDBUtils . listVpcOffServices ( offering . getId ( ) ) ; List < ServiceResponse > serviceResponses = new ArrayList < ServiceResponse > ( ) ; for ( Service service : serviceProviderMap . keySet ( ) ) { ServiceResponse svcRsp = new ServiceResponse ( ) ; if ( service == Service . Gateway ) { continue ; } svcRsp . setName ( service . getName ( ) ) ; List < ProviderResponse > providers = new ArrayList < ProviderResponse > ( ) ; for ( Provider provider : serviceProviderMap . get ( service ) ) { if ( provider != null ) { ProviderResponse providerRsp = new ProviderResponse ( ) ; providerRsp . setName ( provider . getName ( ) ) ; providers . add ( providerRsp ) ; } } svcRsp . setProviders ( providers ) ; serviceResponses . add ( svcRsp ) ; } response . setServices ( serviceResponses ) ; response . setObjectName ( \"vpcoffering\" ) ; return response ; } @ Override public VpcResponse createVpcResponse ( Vpc vpc ) { VpcResponse response = new VpcResponse ( ) ; response . setId ( vpc . getId ( ) ) ; response . setDisplayText ( vpc . getDisplayText ( ) ) ; response . setVpcOfferingId ( vpc . getVpcOfferingId ( ) ) ; response . setZoneId ( vpc . getZoneId ( ) ) ; response . setRestartRequired ( vpc . isRestartRequired (", "esProvider . getClient ( ) . admin ( ) . indices ( ) . prepareRefresh ( indexName ) . execute ( ) . actionGet ( ) ; logger . debug ( \"Refreshed index: \" + indexName ) ;", "import java . util . HashSet ;", "window . setCloseListener ( ( ) -> ! isDuplicate ( ) ) ;", "viewer . reload ( ) ;", "", "", "@ Test public void shouldNThrowExceptionIfGraphViewIsInvalid ( ) throws OperationException { final Store store = mock ( Store . class ) ; final View view = mock ( View . class ) ; given ( view . validate ( ) ) . willReturn ( false ) ; try { new Graph ( store , view ) ; fail ( \"Exception expected\" ) ; } catch ( final SchemaException e ) { assertTrue ( e . getMessage ( ) . contains ( \"view\" ) ) ; } } @ Test public void shouldNThrowExceptionIfOperationViewIsInvalid ( ) throws OperationException { final Store store = mock ( Store . class ) ; final View opView = mock ( View . class ) ; given ( opView . validate ( ) ) . willReturn ( false ) ; final View view = mock ( View . class ) ; given ( view . validate ( ) ) . willReturn ( true ) ; final Graph graph = new Graph ( store , view ) ; final int expectedResult = 5 ; final Operation < ? , Integer > operation = mock ( Operation . class ) ; given ( operation . getView ( ) ) . willReturn ( opView ) ; final OperationChain < Integer > opChain = new OperationChain < > ( operation ) ; given ( store . execute ( opChain ) ) . willReturn ( expectedResult ) ; try { graph . execute ( opChain ) ; fail ( \"Exception expected\" ) ; } @ Override protected < OUTPUT > OUTPUT doUnhandledOperation ( final Operation < ? , OUTPUT > operation ) { return null ; } }", "", "", "String suffix = new String ( mDfuFile . file , length - 8 , 3 ) ;", "public static int BOARD_SIZE = Lizzie . config . config . getJSONObject ( \"ui\" ) . optInt ( \"board-size\" , 19 ) ; private static final String alphabet = \"ABCDEFGHJKLMNOPQRST\" ;", "", "import com . scottlogic . deg . common . profile . constraints . atomic . * ;", "public PriceInfo ( String title , BigDecimal amount ) { }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "@ Test public void issue76a ( ) { trimming ( \"a*b + a*c\" ) . to ( \"a*(b+c)\" ) ; } @ Test public void issue76b ( ) { trimming ( \"b*a + c*a\" ) . to ( \"a*(b+c)\" ) ; } @ Test public void issue76c ( ) { trimming ( \"b*a + c*a + d*a\" ) . to ( \"a*(b+c+d)\" ) ; } @ Test public void issue82a ( ) { trimming ( \"(long)5\" ) . to ( \"1L*5\" ) ; } @ Test public void issue82b ( ) { trimming ( \"(long)a\" ) . to ( \"1L*a\" ) ; } @ Test public void issue82c ( ) { trimming ( \"(long)(long)a\" ) . to ( \"1L*(long)a\" ) . to ( \"1L*1L*a\" ) ; } @ Test public void issue82d ( ) { trimming ( \"(long)a*(long)b\" ) . to ( \"1L*a*1L*b\" ) ; } @ Test public void issue82e ( ) { trimming ( \"(double)(long)a\" ) . to ( \"1.*(long)a\" ) . to ( \"1.*(long)a\" ) . to ( \"1.*(long)b\" ) ; } @ Test public void issue85_86a ( ) { trimming ( \"(double)(long)a\" ) . to ( \"1.*(long)a\" ) . to ( \"1L*a*1L*b\" ) ; } @ Test public void issue82e ( ) { trimming ( \"(double)(long)a\" ) . to ( \"", "return runAnalysis ( outWriter , options , parameters , false , false ) ; case RUN_ANALYSIS_DELTA : return runAnalysis ( outWriter , options , parameters , true , false ) ; case RUN_ANALYSIS_DIFFERENTIAL : return runAnalysis ( outWriter , options , parameters , false , true ) ;", "package org . activiti . engine . test . bpmn . event . timer ; import java . util . Calendar ; import java . util . Date ; import java . util . List ;", "public void testAcquireTokenMultiResourceADFSIssue ( ) throws InterruptedException { }", "ScriptObject sobj = this ; if ( isScope ( ) ) { while ( sobj != null && ! ( sobj instanceof Global ) ) { sobj = sobj . getProto ( ) ; } assert sobj != null : \"no parent global object in scope\" ; } sobj . addSpillProperty ( key , 0 , value , true ) ;", "uploadDeviceKeys ( new ApiCallback < KeysUploadResponse > ( ) {", "{ deviceManager . addListener ( mockListener ) ; ITopologyService mockTopology = createMock ( ITopologyService . class ) ; expect ( mockTopology . getSwitchClusterId ( 1L ) ) . andReturn ( 1L ) . anyTimes ( ) ; expect ( mockTopology . getSwitchClusterId ( 5L ) ) . andReturn ( 1L ) . anyTimes ( ) ; expect ( mockTopology . getSwitchClusterId ( 10L ) ) . andReturn ( 10L ) . anyTimes ( ) ; expect ( mockTopology . getSwitchClusterId ( 50L ) ) . andReturn ( 10L ) . anyTimes ( ) ; expect ( mockTopology . isInternal ( anyLong ( ) , anyShort ( ) ) ) . andReturn ( false ) . anyTimes ( ) ; replay ( mockTopology ) ; deviceManager . topology = mockTopology ; Calendar c = Calendar . getInstance ( ) ; Entity entity1 = new Entity ( 1L , null , 1 , 1L , 1 , c . getTime ( ) ) ; c . add ( Calendar . SECOND , 1 ) ; Entity entity2 = new Entity ( 1L , null , null , 5L , 1 , c . getTime ( ) ) ; c . add ( Calendar . SECOND , 1 ) ; Entity entity3 = new Entity ( 1L , null , null , 10L , 1 , c . getTime ( ) ) ; c . add ( Calendar . SECOND , 1 ) ; Entity entity4 = new Entity ( 1L , null , null , 50L , 1 , c . getTime ( ) ) ; c . add ( Calendar . SECOND , 1 ) ; new Entity ( 1L , null , null , 5L , 1 , c . getTime ( ) ) ; c . add ( Calendar . SECOND , 1 ) ; new Entity ( 1L , null , null , 10L , 1 , c . getTime ( ) ) ; c . add ( Calendar . SECOND , 1", "public int getBorrowTotal ( int readerId ) { Connection conn = null ; Statement st = null ; ResultSet rs = null ; int total = 0 ; try { conn = DatabaseUtil . getInstance ( ) . getConnection ( ) ; st = conn . createStatement ( ) ; String sql = \"SELECT COUNT(*) AS borrowTotal \" + \"FROM borrow_item \" + \"WHERE return_time IS NULL \" + \"AND reader_id=\" + readerId ; rs = st . executeQuery ( sql ) ; if ( rs . next ( ) ) { total = rs . getInt ( \"borrowTotal\" ) ; } rs . close ( ) ; st . close ( ) ; conn . close ( ) ; return total ; } catch ( Exception e ) { System . out . println ( \"--ReaderDAO--,getBorrowTotal(),suffers exception\" ) ; return - 1 ; } }", "EntityType refEntityMeta = entityTypeFactory . create ( ) . setName ( REF_ENTITY_NAME ) . setLabel ( REF_ENTITY_NAME ) . addAttribute ( attributeFactory . create ( ) . setName ( REF_ATTR_ID_NAME ) , ROLE_ID , ROLE_LABEL , ROLE_LOOKUP ) . addAttribute ( attributeFactory . create ( ) . setName ( REF_ATTR_VALUE_NAME ) ) . addAttribute ( attributeFactory . create ( ) . setName ( REF_ATTR_REF_NAME ) . setDataType ( XREF ) . setRefEntity ( refRefEntityType ) ) ;", "public abstract class JCRPlugin < T extends JCRPlugin > extends CRaSHPlugin < T > { }", "import org . eclipse . imp . pdb . facts . io . SerializableValue ;", "public Boolean getMustHaveCaseManagementData ( ) { }", "DataComposerFactory dataComposerFactory = getApplicationContext ( ) . getBean ( DataComposerFactory . class ) ; HttpServletRequest request = getMockRequest ( ) ; HttpServletResponse response = this . getMockResponse ( ) ; dataComposer = dataComposerFactory . newInstance ( request ) ; HDIVUtil . setDataComposer ( this . dataComposer , request ) ; dataComposer . startPage ( ) ; RequestInitializer requestInitializer = this . getApplicationContext ( ) . getBean ( RequestInitializer . class ) ; this . requestWrapper = requestInitializer . createRequestWrapper ( request , response ) ; this . responseWrapper = requestInitializer . createResponseWrapper ( request , response ) ;", "setState ( 676 ) ;", "if ( fkTable != null ) { depth . increment ( ) ; resolveForeginKeyOrder ( fkTable , allTables , resolved , temporary , finalList , t , missingDependencyMap , dependencyMap , depth , position , tablePrefix , resolvedPosition , parentPosition ) ; Integer resolvedParentTableChannel = resolvedPosition . get ( fkTable ) ; if ( resolvedParentTableChannel != null ) { parentTablesChannels . add ( resolvedParentTableChannel ) ; } }", "if ( calc ( ) == false ) return ; if ( gp != null ) cuListener . update ( coords ) ;", "* A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages", "Optional < TaskDef > taskDefinition = pendingTask . getTaskDefinition ( ) ; if ( taskDefinition . isPresent ( ) ) { checkForTimeout ( taskDefinition . get ( ) , pendingTask ) ; if ( isResponseTimedOut ( taskDefinition . get ( ) , pendingTask ) ) { timeoutTask ( taskDefinition , pendingTask ) ; } }", "if ( jj_3R_878 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_879 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_880 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_881 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_882 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_883 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_884 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_885 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_886 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_887 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_888 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_899 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_890 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_891 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_892 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_893 ( ) ) { jj_scanpos = xsp ; if ( jj_scanpos = xsp ; if ( jj_scanpos = xsp ; if ( jj_scanpos = xsp ; if ( jj_scanpos = xsp ; if ( jj_3R_892 ( ) ) { jj_scanpos = xsp ; if ( jj", "public String getRootPassword ( ) { return rootPassword ; } public void setRootPassword ( String rootPassword ) { this . rootPassword = rootPassword ; } public String getPrimaryStorageUuidForRootVolume ( ) { return primaryStorageUuidForRootVolume ; } public void setPrimaryStorageUuidForRootVolume ( String primaryStorageUuidForRootVolume ) { this . primaryStorageUuidForRootVolume = primaryStorageUuidForRootVolume ; }", "final AtomicReference < ServerMessage > publishRef = new AtomicReference < > ( ) ; new BroadcastChannelService ( bayeux , channel , publishRef ) ;", "private final OverdueAccessApi overdueApi ; private final CatalogService catalogService ;", "import graphql . execution . instrumentation . Instrumentation ; import graphql . execution . instrumentation . InstrumentationContext ; import graphql . execution . instrumentation . NoOpInstrumentation ; import graphql . execution . instrumentation . parameters . ExecutionParameters ; import graphql . execution . instrumentation . parameters . ValidationParameters ; import graphql . execution . SimpleExecutionStrategy ;", "", "final Long keepLastFrame , final File output , final String attribution , final SpeedUnit speedUnit , final int fontSize , final String fontName , final String fontStyle , final Double markerSize , final Double waypointSize ,", "repository . add ( aUserTask ( ) . withName ( \"executingTask\" ) . withStateExecuting ( true ) . withStable ( true ) . withTerminal ( false ) . withRootProcessInstanceId ( ROOT_PROCESS_INSTANCE_ID_SUPERVISED_BY_JOHN_WITH_ONLY_KO_TASKS ) . withAssigneeId ( JACK_ID ) . withProcessDefinition ( PROCESS_DEFINITION_ID_SUPERVISED_BY_JOHN_WITH_ONLY_KO_TASKS ) . build ( ) ) ; repository . add ( aUserTask ( ) . withName ( \"notStableTask\" ) . withStateExecuting ( false ) . withStable ( false ) . withTerminal ( true ) . withRootProcessInstanceId ( ROOT_PROCESS_INSTANCE_ID_SUPERVISED_BY_JOHN_WITH_ONLY_KO_TASKS ) . withAssigneeId ( JACK_ID ) . withStateId ( 4 ) . withProcessDefinition ( PROCESS_DEFINITION_ID_SUPERVISED_BY_JOHN_WITH_ONLY_KO_TASKS ) . build ( ) ) ; repository . add ( aUserTask ( ) . withName ( \"terminalTask\" ) . withStateExecuting ( false ) . withStateExecuting ( false ) . withStable ( false ) . withTerminal ( true ) . withStateId ( 4 ) . withProcessDefinition ( PROCESS_DEFINITION_ID_SUPERVISED_BY_JOHN_WITH_ONLY_KO_TASKS ) . build ( ) ) ; repository . add ( aUserTask ( ) . withName ( PROCESS_DEFINITION_ID_SUPERVISED_BY_JOHN_WITH_ONLY_KO_TASKS ) . build ( ) ) ; repository . add ( aUserTask ( ) . withName ( \"", "TachyonURI checkpointPath ) throws SuspectedFileSizeException , BlockInfoException , FileDoesNotExistException {", "fromContactFrameDrift . setToZero ( transferFromContactFramePosition . getReferenceFrame ( ) ) ;", "public ImmutableList < OBDAMappingAxiom > getMappings ( ) throws OBDAException { }", "", "{ final ItemType itemType = player . getItemInHand ( HandSide . MAIN_HAND ) . getType ( ) ; session . setTool ( player , new QueryTool ( ) ) ; BBC . TOOL_INFO . send ( player , itemType . getType ( ) . getName ( ) ) ; } @ Command ( name = \"inspect\" , desc = \"Inspect edits within a radius\" ) @ CommandPermissions ( \"worldedit.tool.inspect\" ) public void inspectBrush ( Player player , LocalSession session ) throws WorldEditException { BaseItemStack itemStack = player . getItemInHand ( HandSide . MAIN_HAND ) ; session . setTool ( player , new InspectBrush ( ) ) ; BBC . TOOL_INSPECT . send ( player , itemStack ) ; }", "import fr . neamar . kiss . pojo . Pojo ; import fr . neamar . kiss . pojo . AppPojo ; import fr . neamar . kiss . preference . ExcludePreferenceScreen ; import fr . neamar . kiss . preference . PreferenceScreenHelper ; import fr . neamar . kiss . preference . SwitchPreference ; import fr . neamar . kiss . pojo . TagDummyPojo ;", "public static class persistFile_args implements org . apache . thrift . TBase < persistFile_args , persistFile_args . _Fields > , java . io . Serializable , Cloneable , Comparable < persistFile_args > { private static final org . apache . thrift . protocol . TStruct STRUCT_DESC = new org . apache . thrift . protocol . TStruct ( \"persistFile_args\" ) ; }", "void onFoundEdition ( long l , USK key , ObjectContainer container , ClientContext context , boolean metadata , short codec , byte [ ] data ) ;", "import com . facebook . imagepipeline . core . ImagePipelineConfig ; import com . facebook . imagepipeline . decoder . SimpleProgressiveJpegConfig ;", "private EventHandler < ActionEvent > expandNodeAction = getExpandNodeAction ( ) ; private EventHandler < ActionEvent > unExpandNodeAction = getUnExpandNodeAction ( ) ; private EventHandler < ActionEvent > exportNodeAction = getExportNodeAction ( ) ;", "import static org . assertj . core . api . Assertions . assertFalse ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; import static org . mockito . Mockito . mock ;", "scanCount . set ( 0 ) ;", "private Download getDownloadFromList ( List < Download > downloads , String md5 ) { for ( int i = 0 ; i < downloads . size ( ) ; i ++ ) { Download download = downloads . get ( i ) ; if ( TextUtils . equals ( download . getMd5 ( ) , md5 ) ) { return download ; } } return null ; }", "if ( destGeometry != null ) { destGeometry . setSRID ( sourceGeometry . getSRID ( ) ) ; } return ( T ) destGeometry ;", "Map < String , Collection < String > > foiMap = new HashMap < > ( ) ; results . forEach ( result -> {", "tbl . getViewOriginalText ( ) , tbl . getViewExpandedText ( ) , tbl . isRewriteEnabled ( ) , tableType , tbl . isSetMmNextWriteId ( ) ? tbl . getMmNextWriteId ( ) : 0 , tbl . isSetMmWatermarkWriteId ( ) ? tbl . getMmWatermarkWriteId ( ) : - 1 ) ;", "ArrayList < Table > copy = new ArrayList < > ( locks . size ( ) ) ;", "public Void visitNumber ( Concrete . NumberLevelExpression expr , Precedence param ) { }", "public final int [ ] sort ( double [ ] [ ] populationData ) { }", "List < ClientPresentationModel > changes = dolphin . findAllPresentationModelsByType ( DolphinConstants . LIST_ADD ) ;", "import org . eclipse . ditto . protocoladapter . HeaderTranslator ; import org . eclipse . ditto . model . base . headers . DittoHeadersSizeChecker ; import org . eclipse . ditto . services . gateway . endpoints . config . AuthenticationConfig ; import org . eclipse . ditto . services . gateway . endpoints . config . CachesConfig ; import org . eclipse . ditto . services . gateway . endpoints . config . DevOpsConfig ; import org . eclipse . ditto . services . gateway . endpoints . config . HttpConfig ; import org . eclipse . ditto . services . gateway . endpoints . config . WebSocketConfig ;", "if ( CollectionServiceStarter . isDexbridgeWixel ( getApplicationContext ( ) ) ) { Log . w ( TAG , \"setSerialDataToTransmitterRawData: Dealing with Dexbridge packet!\" ) ; int DexSrc ; int TransmitterID ; String TxId ; Calendar c = Calendar . getInstance ( ) ; long secondsNow = c . getTimeInMillis ( ) ; ByteBuffer tmpBuffer = ByteBuffer . allocate ( len ) ; tmpBuffer . order ( ByteOrder . LITTLE_ENDIAN ) ; tmpBuffer . put ( buffer , 0 , len ) ; ByteBuffer txidMessage = ByteBuffer . allocate ( 6 ) ; txidMessage . order ( ByteOrder . LITTLE_ENDIAN ) ; if ( buffer [ 0 ] == 0x07 && buffer [ 1 ] == - 15 ) { Log . w ( TAG , \"setSerialDataToTransmitterRawData: Received Beacon packet.\" ) ; DexSrc = tmpBuffer . getInt ( 2 ) ; TxId = PreferenceManager . getDefaultSharedPreferences ( getApplicationContext ( ) ) . getString ( \"dex_txid\" , \"00000\" ) ; TransmitterID = convertSrc ( TxId ) ; if ( TxId . compareTo ( \"00000\" ) != 0 && Integer . compare ( DexSrc , TransmitterID ) != 0 ) { Log . w ( TAG , \"setSerialDataToTransmitterRawData: TXID wrong. Expected \" + TransmitterID + \" but got \" + DexSrc ) ; txidMessage . put ( 0 , ( byte ) 0x06 ) ; txidMessage . put ( 1 , ( byte ) 0x01 ) ; txidMessage . putInt ( 2 , TransmitterID ) ; sendBtMessage ( txidMessage ) ; } return ; } if ( buffer [ 0 ] == 0 && Integer . compare ( DexSrc , TransmitterID ) != 0 && Integer . compare ( DexSrc , Trans", "import buildcraft . core . lib . network . PacketCoordinates ; import buildcraft . core . lib . utils . BitSetUtils ;", "import com . amazonaws . auth . DefaultAWSCredentialsProviderChain ; import com . amazonaws . auth . AWSStaticCredentialsProvider ; import com . amazonaws . auth . EC2ContainerCredentialsProviderWrapper ;", "PrivateKeyData privateKeyData = mock ( PrivateKeyData . class ) ; final KeyDataConfig privKeyDataConfig = mock ( KeyDataConfig . class ) ; when ( privKeyDataConfig . getPrivateKeyData ( ) ) . thenReturn ( privateKeyData ) ; when ( privKeyDataConfig . getType ( ) ) . thenReturn ( PrivateKeyType . LOCKED ) ; final InlineKeypair keyPair = mock ( InlineKeypair . class ) ; when ( keyPair . getPrivateKeyConfig ( ) ) . thenReturn ( privKeyDataConfig ) ;", "if ( matcher . find ( ) ) { tableName = matcher . group ( 3 ) ; selectSql = \"select \" + matcher . group ( 4 ) ; }", "return new ObservationConstellationOmObservationCreator ( oc , fois , request , serviceProvider , language , pdf , daoFactory , session ) . create ( ) ;", "public Boolean visit ( final ModuleRequiresDirective n , final Visitable arg ) { final ModuleRequiresDirective n2 = ( ModuleRequiresDirective ) arg ; }", "import uk . gov . gchq . gaffer . operation . Operation ; import uk . gov . gchq . gaffer . operation . OperationException ;", "setState ( 339 ) ;", "public PipeItemsCraftingLogistics ( Item item ) { super ( item ) ; craftingModule = new ModuleCrafter ( this ) ; craftingModule . registerPosition ( ModulePositionType . IN_PIPE , 0 ) ; }", "void sendMessage ( Chat chat , Message message ) throws NotConnectedException , InterruptedException { for ( Map . Entry < MessageListener , StanzaFilter > interceptor : interceptors . entrySet ( ) ) { StanzaFilter filter = interceptor . getValue ( ) ; } }", "playQueue = ( PlayQueue ) savedState . getSerializable ( VideoPlayer . PLAY_QUEUE_KEY ) ;", "", "public void printProperties ( ) throws IOException { try { kylinConfig . save ( System . out ) ; } catch ( ConfigurationException ex ) { throw new IOException ( \"Error printing KylinConfig\" , ex ) ; } } public static String getKylinHome ( ) { String kylinHome = System . getenv ( KYLIN_HOME ) ; if ( StringUtils . isEmpty ( kylinHome ) ) { logger . warn ( \"KYLIN_HOME has not been set\" ) ; throw new RuntimeException ( \"KYLIN_HOME has not been set\" ) ; } return kylinHome ; }", "return matchEvent ( RetrieveConnectionMetrics . class , ( command , data ) -> retrieveConnectionMetrics ( command ) ) . event ( ThingSearchCommand . class , this :: forwardThingSearchCommand ) . event ( RetrieveConnectionStatus . class , this :: retrieveConnectionStatus ) . event ( ResetConnectionMetrics . class , this :: resetConnectionMetrics ) . event ( EnableConnectionLogs . class , ( command , data ) -> enableConnectionLogs ( command ) ) . event ( RetrieveConnectionLogs . class , ( command , data ) -> retrieveConnectionLogs ( command ) ) . event ( ResetConnectionLogs . class , this :: resetConnectionLogs ) . event ( CheckConnectionLogsActive . class , ( command , data ) -> checkLoggingActive ( command ) ) . event ( InboundSignal . class , this :: handleInboundSignal ) . event ( PublishMappedMessage . class , this :: publishMappedMessage ) . event ( ConnectivityCommand . class , this :: onUnknownEvent ) . event ( Signal . class , this :: handleSignal ) . event ( ActorRef . class , this :: onOtherClientActorStartup ) . event ( Terminated . class , this :: otherClientActorTerminated ) . eventEquals ( Control . REFRESH_CLIENT_ACTOR_REFS , this :: refreshClientActorRefs ) . event ( FatalPubSubException . class , this :: failConnectionDueToPubSubException ) . event ( org . eclipse . ditto . signals . events . base . Event . class , ( event , data ) -> connectivityConfigProvider . canHandle ( event ) , ( ccb , data ) -> { handleEvent ( ccb ) ; return stay ( ) ; } ) ;", "import org . apache . mesos . v1 . Protos . AgentID ; import org . apache . mesos . v1 . Protos . Offer ; import org . apache . mesos . v1 . Protos . TaskID ; import org . apache . mesos . v1 . Protos . TaskState ; import org . apache . mesos . v1 . Protos . TaskStatus ; import org . assertj . core . api . Assertions ;", "", "if ( isEmpty ( ) ) return true ; ContradictionFromDisjointnessRule rule = ruleChain . getCreate ( MATCHER_ , FACTORY_ ) ; rule . addAxioms ( inconsistentAxioms_ ) ; return ! isEmpty ( ) ;", "import org . json . JSONObject ;", "* Checks if a { @ code ScheduledTrigger } is scheduled in the scheduler or not . * @ warn exception SchedulerException description missing * @ warn parameter scheduledTrigger description missing *", "JFrame d ; JTextField prompt ; JList completions ; JScrollPane scrollPane ; DefaultListModel completionsModel ; JButton runButton , closeButton , exportButton ; JCheckBox fullInfoCheckBox , fuzzyCheckBox , closeCheckBox ;", "name = \"Friends chat info (transparent)\" , description = \"Friends chat information (eg. when joining a channel) (transparent)\" , titleSection = \"transparentTitle\"", "private void updateAttributeRec ( EntityType entityType , Attribute attr , Attribute updatedAttr )", "public static final String ALERT_CHANNEL_ID = \"AndroidAPS-InsightAlert\" ; private final AAPSLogger aapsLogger ; private final RxBusWrapper rxBus ; private final ResourceHelper resourceHelper ; private final ConstraintChecker constraintChecker ; private final TreatmentsPlugin treatmentsPlugin ; private final SP sp ; private final CommandQueueProvider commandQueue ;", "this . enfNode = new NodeEnf ( this ) ; this . remArc = new ArcRem ( this ) ; this . concernedNodes = concernedNodes ; } public PropEachNodeHasLoop ( GraphVar graph , Solver sol , Constraint constraint ) { this ( graph , graph . getEnvelopGraph ( ) . getActiveNodes ( ) , sol , constraint ) ; } /", "@ Test void specificSecurityProtocolOverridesCommonSecurityProtocol ( ) { this . contextRunner . withPropertyValues ( \"spring.kafka.security.protocol=SSL\" , \"spring.kafka.admin.security.protocol=PLAINTEXT\" ) . run ( ( context ) -> { DefaultKafkaProducerFactory < ? , ? > producerFactory = context . getBean ( DefaultKafkaProducerFactory . class ) ; Map < String , Object > producerConfigs = producerFactory . getConfigurationProperties ( ) ; assertThat ( producerConfigs . get ( CommonClientConfigs . SECURITY_PROTOCOL_CONFIG ) ) . isEqualTo ( \"SSL\" ) ; KafkaAdmin admin = context . getBean ( KafkaAdmin . class ) ; Map < String , Object > configs = admin . getConfig ( ) ; assertThat ( configs . get ( CommonClientConfigs . SECURITY_PROTOCOL_CONFIG ) ) . isEqualTo ( \"PLAINTEXT\" ) ; } ) ; } @ Test void testConcurrentKafkaListenerContainerFactoryWithCustomConsumerFactory ( ) { this . contextRunner . withUserConfiguration ( ConsumerFactoryConfiguration . class ) . run ( ( context ) -> { ConcurrentKafkaListenerContainerFactory < ? , ? > kafkaListenerContainerFactory = context . getBean ( ConcurrentKafkaListenerContainerFactory . class ) ; assertThat ( kafkaListenerContainerFactory . getConsumerFactory ( ) ) . isNotSameAs ( context . getBean ( ConsumerFactoryConfiguration . class ) . consumerFactory ) ; } ) ; }", "", "private boolean timer ; private List < Annotation > classAnnotations ; private List < Annotation > methodAnnotations ;", "", "import com . splicemachine . derby . utils . SpliceZooKeeperManager ; import com . splicemachine . derby . utils . ZkUtils ;", "this . voc = voc ; this . nativeQLFactory = nativeQLFactory ;", "* Get array of complex type with null item [ { 'integer' : 1 'string' : '2' } , null , { 'integer' : 5 , 'string' : '6' } ]", "if ( args . length ( ) == 1 ) { this . registerView ( args . getInt ( 0 ) , callbackContext ) ; }", "private final int BUFFER_SIZE = 1024 ; static class PWriter implements Runnable { PipedOutputStream pos ; public byte bytes [ ] ; public void run ( ) { try { pos . write ( bytes ) ; synchronized ( this ) { notify ( ) ; } } catch ( IOException e ) { e . printStackTrace ( System . out ) ; System . out . println ( \"Could not write bytes\" ) ; } } public PWriter ( PipedOutputStream pout , int nbytes ) { pos = pout ; bytes = new byte [ nbytes ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = ( byte ) ( System . currentTimeMillis ( ) % 9 ) ; } } } Thread t ; PWriter pw ; PipedInputStream pis ; PipedOutputStream pos ; public void test_Constructor ( ) { } public void test_ConstructorLjava_io_PipedOutputStream ( ) throws Exception { pis = new PipedInputStream ( new PipedOutputStream ( ) ) ; pis . available ( ) ; }", "if ( settings . isValidationEnabled ( ) ) { validator . validate ( targetObject ) ; }", "import com . bluepowermod . blocks . BPBlockMultipart ; import com . bluepowermod . blocks . BlockContainerBase ;", "import com . pspdfkit . annotations . Annotation ; import com . pspdfkit . react . events . PdfViewDataReturnedEvent ; import com . pspdfkit . react . events . PdfViewAnnotationChangedEvent ; import com . pspdfkit . react . events . PdfViewAnnotationTappedEvent ; import com . pspdfkit . react . events . PdfViewDocumentSavedEvent ;", "whenNew ( RequisitionStatusChangeEvent . class ) . withArguments ( requisition ) . thenReturn ( event ) ;", "public ElasticsearchScheduler ( Configuration configuration , FrameworkState frameworkState , ClusterState clusterState , TaskInfoFactory taskInfoFactory , OfferStrategy offerStrategy , SerializableState zookeeperStateDriver ) { }", "import com . generalbytes . batm . server . extensions . extra . bitcoin . sources . coinpaprika . CoinPaprikaRateSource ; import com . generalbytes . batm . server . extensions . extra . bitcoin . sources . coingecko . CoinGeckoRateSource ;", "isInterestRecalculationEnabled , interestRecalculationData , originalSchedule , createStandingInstructionAtDisbursement , paidInAdvance ) ;", "setPullRequestDataToTask ( Optional . ofNullable ( pullRequest ) , task ) ; } } ) ; deferredConfiguration ( project , new Runnable ( ) { @ Override public void run ( ) { task . setBaseBranch ( upgradeDependencyExtension . getBaseBranch ( ) ) ;", "private Session getSession ( final Map < String , Serializable > options ) { return ( Session ) options . get ( \"session\" ) ; } private SessionType getSessionType ( final Session session ) { }", "private final static Logger logger = Logger . getLogger ( SlangCLI . class ) ;", "public static int countInContainer ( IItemHandler container , Item item ) { }", "PanmirrorUIExecute uiExecute , PanmirrorUIChunkFactory uiChunks )", "jj_la1 [ 186 ] = jj_gen ; break label_127 ;", "public static boolean OC_CARD_NOISE ; public static boolean OC_BOARD_LIGHT ; public static boolean OC_BOARD_BOOM ; public static boolean OC_BOARD_CAPACITOR ;", "import squeek . appleskin . helpers . AppleCoreHelper ; import squeek . appleskin . helpers . BetterWithModsHelper ;", "public void sendRawTransaction ( String signedTransactionData , TransactionSucCallback callback ) throws IOException { Request < ? , SendTransaction > request = sendRawTransaction ( signedTransactionData ) ; request . setNeedTransCallback ( true ) ; request . setTransactionSucCallback ( callback ) ; request . sendOnly ( ) ; } @ Override public Request < ? , SendTransaction > sendRawTransactionAndGetProof ( String signedTransactionData ) { return new Request < > ( \"sendRawTransactionAndGetProof\" , Arrays . asList ( groupId , signedTransactionData ) , web3jService , SendTransaction . class ) ; } @ Override public void sendRawTransactionAndGetProof ( String signedTransactionData , TransactionSucCallback callback ) throws IOException { Request < ? , SendTransaction > request = sendRawTransactionAndGetProof ( signedTransactionData ) ; request . setNeedTransCallback ( true ) ; request . setTransactionSucCallback ( callback ) ; request . sendOnly ( ) ; } @ Override", "", "return this . builder . seq ( new BinaryEqualityProtocol ( inLeft , inRight ) ) ;", "", "import uk . gov . gchq . gaffer . operation . SeededGraphGet ;", "public ContainerHost getContainerHostByUUID ( UUID uuid ) { Iterator < ContainerHost > iterator = containers . iterator ( ) ; iterator . next ( ) ; while ( iterator . hasNext ( ) ) { ContainerHost containerHost = iterator . next ( ) ; if ( containerHost . getId ( ) . equals ( uuid ) ) return containerHost ; } return null ; }", "session . close ( false ) ; if ( ! criticalIOError ) { session . waitContextCompletion ( ) ; }", "this . argumentResolvers = resolvers ; this . codecCustomizers = codecCustomizers ; this . resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizer . getIfAvailable ( ) ; this . viewResolvers = viewResolvers ;", "import mikera . matrixx . algo . decompose . chol . ICholeskyResult ; import mikera . matrixx . algo . decompose . chol . impl . SimpleCholesky ;", "registry ) ; private final YoVariableDoubleProvider offsetHeightAboveGroundTrajectoryTimeProvider = new YoVariableDoubleProvider ( \"offsetHeightAboveGroundTrajectoryTimeProvider\" , registry ) ; private final MultipleWaypointsTrajectoryGenerator waypointOffsetHeightAboveGroundTrajectoryGenerator = new MultipleWaypointsTrajectoryGenerator ( \"pelvisHeightOffset\" , 15 , registry ) ; private final MultipleWaypointsTrajectoryGenerator waypointOffsetHeightAboveGroundTrajectoryGenerator = new MultipleWaypointsTrajectoryGenerator ( \"pelvisHeightOffset\" , 15 , registry ) ; private final BooleanYoVariable isUsingWaypointTrajectory = new BooleanYoVariable ( \"IsUsingWaypointTrajectoryForOffsetHeight\" , registry ) ; private DoubleTrajectoryGenerator activeTrajectoryGenerator = offsetHeightAboveGroundTrajectory ;", "private final Educator educator ; private final Shakespeare shakespeare ;", "try { threadContext = new ThreadContext ( Thread . currentThread ( ) ) ; mapContexts . put ( currentThread , threadContext ) ; Iterator < Entry < Thread , ThreadContext > > threads = mapContexts . entrySet ( ) . iterator ( ) ; while ( threads . hasNext ( ) ) { Entry < Thread , ThreadContext > entry = threads . next ( ) ; if ( ! entry . getKey ( ) . isAlive ( ) ) { entry . getValue ( ) . destroy ( ) ; threads . remove ( ) ; }", "this . resizeView = view . findViewById ( R . id . resizeTextView ) ; resizeView . setText ( PlayerHelper . resizeTypeOf ( context , getSurfaceView ( ) . getResizeMode ( ) ) ) ;", "", "import java . util . concurrent . Callable ; import java . util . concurrent . ExecutorService ; import java . util . concurrent . Executors ; import java . util . concurrent . Future ; import java . util . concurrent . TimeUnit ;", "ResponseEntity < ModelApiResponse > uploadFile ( @ ApiParam ( value = \"ID of pet to update\" , required = true ) @ PathVariable ( \"petId\" ) Long petId , @ ApiParam ( value = \"Additional data to pass to server\" ) @ RequestPart ( value = \"additionalMetadata\" , required = false ) String additionalMetadata , @ ApiParam ( value = \"file detail\" ) @ RequestPart ( \"file\" ) MultipartFile file , @ RequestHeader ( value = \"Accept\" , required = false ) String accept ) throws Exception ;", "* Get an array of Dictionaries of type & lt ; string , string & gt ; with value [ { '1' : 'one' , '2' : 'two' , '3' : 'three' } , { '4' : 'four' , '5' : 'five' , '6' : 'six' } , { '7' : 'seven' , '8' : 'eight' , '9' : 'nine' } ]", "AbstractExpression expr = m_parsedInsert . getValuesExpression ( column ) ;", "", "public static String IssuePortfolioTransactionWithoutSecurity ; public static String IssueTransactionMissingCurrencyCode ;", "1 ,", "doSpinner ( R . id . speak_spinner , ListFragment . PREF_SPEECH_PERIOD , MainActivity . DEFAULT_SPEECH_PERIOD , speechPeriods , speechName ) ;", "@ JsonProperty ( \"quality\" ) private final Quality quality ;", "import com . apollocurrency . aplwallet . apl . core . service . state . currency . CurrencyExchangeOfferFacade ; import com . apollocurrency . aplwallet . apl . core . service . state . echange . ExchangeService ; import com . apollocurrency . aplwallet . apl . core . service . state . exchange . ExchangeRequestService ;", "public Observable < T > throttleWithTimeout ( long timeout , TimeUnit unit ) { return create ( OperationThrottleWithTimeout . throttleWithTimeout ( this , timeout , unit ) ) ; } public Observable < T > throttleWithTimeout ( long timeout , TimeUnit unit , Scheduler scheduler ) { return create ( OperationThrottleWithTimeout . throttleWithTimeout ( this , timeout , unit , scheduler ) ) ; } public Observable < T > throttleLast ( long timeout , TimeUnit unit ) { return create ( OperationThrottleLast . throttleLast ( this , timeout , unit ) ) ; } public Observable < T > throttleLast ( long timeout , TimeUnit unit , Scheduler scheduler ) { return create ( OperationThrottleLast . throttleLast ( this , timeout , unit , scheduler ) ) ; } public Observable < T > throttleFirst ( long windowDuration , TimeUnit unit ) { return create ( OperationThrottleFirst . throttleFirst ( this , windowDuration , unit ) ) ; } public Observable < T > throttleFirst ( long windowDuration , TimeUnit unit , Scheduler scheduler ) { return create ( OperationThrottleFirst . throttleFirst ( this , windowDuration , unit , scheduler ) ) ; }", "", "final NotificationQueue queue = queueService . createNotificationQueue ( \"test-svc\" , \"many\" , new NotificationQueueHandler ( ) { @ Override public void handleReadyNotification ( final NotificationKey notificationKey , final DateTime eventDateTime , final UUID userToken , final Long accountRecordId , final Long tenantRecordId ) { synchronized ( expectedNotifications ) { log . info ( \"Handler received key: \" + notificationKey . toString ( ) ) ; expectedNotifications . put ( notificationKey , Boolean . TRUE ) ; expectedNotifications . notify ( ) ; } } } ) ;", "setDigestParamToSigRefIfNeeded ( reference ) ;", "takeSnapshot ( \"the thing is deleted and has no up-to-date snapshot\" ) ; scheduleCheckForThingActivity ( thingConfig . getActivityCheckConfig ( ) . getDeletedInterval ( ) ) ;", "Range seekRange = getShardRange ( ) ; String query = \"EVENT_FIELD2 =~ '.*b'\" ; event_test ( seekRange , query , false , null , Collections . EMPTY_LIST , Collections . EMPTY_LIST ) ;", "import com . opencsv . CSVReader ; import java . io . BufferedWriter ;", "public final class SimpleComponentTickHandler { public static final ArrayList < Runnable > pendingAdds = new java . util . ArrayList < Runnable > ( ) ; }", "System . err . println ( methodName + Arrays . deepToString ( methodParameters ) ) ;", "public void enableAutoCalibration ( ) { acm = new AutoCalibrationManager ( ) ; autoCalibrationEnabled = true ; cameraAutoCalibrated = false ; } public void setController ( ShootOFFController controller ) { this . controller = controller ; }", "doAThing ( 200 , \"lockable1\" , latch ) ; tryWait ( 50 , waitForTwo ) ;", "protected BaseChatMessagesAdapter messagesAdapter ; protected QMUser opponentUser ;", "{ myRootTree = new RootTree ( collection ) ; new FavoritesTree ( myRootTree ) ; new RecentBooksTree ( myRootTree ) ; new AuthorListTree ( myRootTree ) ; new FirstLevelTree ( myRootTree , LibraryTree . ROOT_BY_TITLE ) ; new FirstLevelTree ( myRootTree , LibraryTree . ROOT_BY_TAG ) ; new FileFirstLevelTree ( myRootTree ) ; } public void init ( ) { Collection . addListener ( new IBookCollection . Listener ( ) { public void onBookEvent ( BookEvent event , Book book ) { switch ( event ) { case Added : addBookToLibrary ( book ) ; synchronized ( myStatusLock ) { if ( ( myStatusMask & STATUS_LOADING ) == 0 || Collection . size ( ) % 16 == 0 ) { Library . this . fireModelChangedEvent ( ChangeListener . Code . BookAdded ) ; } } break ; } } public void onBuildEvent ( BuildEvent event ) { switch ( event ) { case Started : break ; case Completed : Library . this . fireModelChangedEvent ( ChangeListener . Code . BookAdded ) ; break ; } } } ) ; final Thread initializer = new Thread ( ) { public void run ( ) { setStatus ( myStatusMask | STATUS_LOADING ) ; int count = 0 ; for ( Book book : Collection . books ( ) ) { addBookToLibrary ( book ) ; if ( ++ count % 16 == 0 ) { Library . this . fireModelChangedEvent ( ChangeListener . Code . BookAdded ) ; } } Library . this . fireModelChangedEvent ( ChangeListener . Code . BookAdded ) ; setStatus ( myStatusMask & ~ STATUS_LOADING ) ; } } } ) ; final Thread initializer = new Thread ( ) { public void run ( ) { setStatus ( myStatusMask | STATUS_LOADING ) ; int count = 0 ; for ( Book", "import static org . zanata . rest . dto . stats . TranslationStatistics . StatUnit . WORD ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ;", "import com . gsma . services . rcs . chat . ChatMessage ; import com . gsma . services . rcs . chat . ChatService ; import com . gsma . services . rcs . chat . ChatServiceConfiguration ;", "for ( int y = 0 ; y < nlabs ; y ++ ) { tmp [ y ] = gmm0 . logWeights [ y ] + gmm0 . getLoglike ( y , z ) ; } normConst += logMath . logToLinear ( ( float ) tmp [ y ] ) ; }", "protected < C , R > void handle ( CommandMessage < C > command , MessageHandler < ? super CommandMessage < ? > > handler , CommandCallback < ? super C , ? super R > callback ) { }", "import com . torodb . torod . core . dbWrapper . exceptions . ImplementationDbException ;", "setState ( 785 ) ;", "", "final ObjectImpl object = ( ObjectImpl ) ( ( LiteralExpression ) lit . getLit ( ) . getName ( ) ) . getValue ( ) ; final ObjectDecl objectDecl = ( ObjectDecl ) object . eContainer ( ) ; final String type = objectDecl . getObjectType ( ) . getQualifiedName ( ) + ( ( objectDecl . getArray ( ) != null ) ? objectDecl . getArray ( ) : \"\" ) ; final String variable = object . getName ( ) ;", "", "Medtronic_523_723_Revel ( \"Medtronic 523/723 (Revel)\" , \"Medtronic\" , \"523/723 (Revel)\" , 0.05d , null , new DoseSettings ( 0.05d , 30 , 8 * 60 , 0.05d ) ,", "import cm . aptoide . pt . v8engine . repository . StoreRepository ; import cm . aptoide . pt . v8engine . util . CommentOperations ;", "BranchCommitValidator validator = commitValidatorFactory . create ( projectState , branch , new User ( ) ) ; RevWalk walk = receivePack . getRevWalk ( ) ; walk . reset ( ) ; walk . sort ( RevSort . NONE ) ; try { RevObject parsedObject = walk . parseAny ( cmd . getNewId ( ) ) ; if ( ! ( parsedObject instanceof RevCommit ) ) {", "* < p > * This method has a different purpose than < code > java . lang . Class . getResource < / code > , which looks up resources based * on a class loader . This method does not use class loaders . * * < p > This method bypasses both implicit ( no direct access to WEB - INF * or META - INF ) and explicit ( defined by the web application ) security * constraints . Care should be taken both when constructing the path ( e . g . * avoid unsanitized user provided data ) and when using the result not to * create a security vulnerability in the application .", "return GraknSystemProperty . CURRENT_DIRECTORY . value ( ) + \"/\" ;", "{ LOG . error ( \"Turn restriction {} has multiple 'to' members, skipping.\" , osmRelationId ) ; return ; } if ( member . type != OSMEntity . Type . WAY ) { LOG . error ( \"Turn restriction {} has a 'to' member that is not a way, skipping.\" , osmRelationId ) ; }", "null , new SavedBuildSelector ( ) , \"*.txt\" , \"\" , false , false , true ) ) ;", "", "import java . util . ArrayList ; import java . util . Arrays ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Set ; import javax . vecmath . Quat4f ; import javax . vecmath . Vector3f ;", "@ Override public SessionAttributesTranscoder createTranscoder ( final SessionManager manager ) { return getTranscoder ( manager . getContainer ( ) . getLoader ( ) . getClassLoader ( ) ) ; } protected SessionAttributesTranscoder createTranscoder ( final ClassLoader loader ) { return getTranscoder ( loader ) ; }", "final var handler = createActionState ( flow , CasWebflowConstants . STATE_ID_HANDLE_AUTHN_FAILURE , CasWebflowConstants . ACTION_ID_AUTHENTICATION_EXCEPTION_HANDLER ) ;", "setState ( 403 ) ;", "defaultMaxPageSize , updateStatusCode ) ;", ". getTagsForAttribute ( entityMapping . getTargetEntityType ( ) , attributeMapping . getTargetAttribute ( ) ) ;", "table . addCell ( new Cell ( bigRowspan , 1 ) . add ( new Paragraph ( \"Big cell\" ) ) . setBorder ( new SolidBorder ( ColorConstants . GREEN , 20 ) ) ) ;", "Iterable < Ring > elvesRings = newArrayList ( vilya , nenya , narya ) ; assertThat ( elvesRings ) . containsExactly ( vilya , nenya , narya ) . containsExactlyInAnyOrder ( vilya , nenya , narya ) . containsExactlyInAnyOrder ( nenya , vilya , narya ) ; SortedSet < Ring > elvesRingsSet = new TreeSet < Ring > ( ) ; elvesRingsSet . add ( vilya ) ; elvesRingsSet . add ( nenya ) ; assertThat ( elvesRingsSet ) . containsExactly ( vilya , nenya , narya ) ; assertThat ( elvesRings ) . containsExactlyElementsOf ( elvesRingsSet ) ; try { assertThat ( elvesRings ) . containsExactly ( nenya , vilya , narya ) ; } catch ( AssertionError e ) { logger . info ( e . getMessage ( ) ) ; logAssertionErrorMessage ( \"containsExactly\" , e ) ; } try { List < String > z = newArrayList ( \"a\" , \"a\" , \"a\" ) ; assertThat ( z ) . containsExactly ( \"a\" , \"a\" ) ; } catch ( AssertionError e ) { logger . info ( e . getMessage ( ) ) ; logAssertionErrorMessage ( \"containsExactlyElementsOf ( elvesRingsSet ) ; } catch ( AssertionError e ) { logAssertionErrorMessage ( \"containsExactlyElementsOf with elements in different order\" , e ) ; } catch ( AssertionError e ) { logger . info ( e . getMessage ( ) ) ; logAssertionErrorMessage ( \"containsExactlyElementsOf with elements in different order\" , e ) ; } catch ( AssertionError e ) {", "add ( new StreamInfoTest ( ) ) ; add ( new NotifierInfoTest ( ) ) ;", "\" @Pure\" , \" public final String fct() {\" , \" return (\\\"abc\\\" + \\\"xyz\\\");\" , \" }\" , \" \" , \" @SyntheticMember\" , \" public C1() {\" , \" super();\" , \" }\" , \"}\" , \"\" ) ; this . compiler . compile ( source , ( r ) -> { assertEquals ( expectedC1 , r . getGeneratedCode ( \"C1\" ) ) ; } ) ; } @ Test public void stringExpression03 ( ) throws Exception { String source = multilineString ( \"final class C1 {\" , \" def fct { return \\\"abc\\\" + \\\"xyz\\\" }\" , \"}\" , \"\" ) ; final String expectedC1 = multilineString ( \"import io.sarl.lang.annotation.SarlElementType;\" , \"import io.sarl.lang.annotation.SarlSpecification;\" , \"import io.sarl.lang.annotation.SyntheticMember;\" , \"import org.eclipse.xtext.xbase.lib.Inline;\" , \"\" , \"@SarlSpecification(\\\"\" + SARLVersion . SPECIFICATION_RELEASE_VERSION_STRING + \"\\\")\" , \"@SarlElementType(\" + SarlPackage . SARL_CLASS + \")\" , \"@SuppressWarnings(\\\"all\\\")\" , \"public final class C1 {\" , \" @Inline(value = \\\"\\\\\\\"abcxyz\\\\\\\"\\\", constantExpression = true)\" ,", "@ Mock private KsqlSecurityExtension securityExtension ; @ Mock private ProcessingLogContext processingLogContext ; @ Mock private ServerState serverState ; @ Mock private KafkaTopicClient topicClient ; @ Mock private DdlCommandExec ddlCommandExec ; @ Mock private KsqlServerPrecondition precondition1 ; @ Mock private KsqlServerPrecondition precondition2 ; private PreparedStatement logCreateStatement ;", "txMap . put ( item . getItemId ( ) , new TxQueueItem ( item ) . setPollOperation ( true ) . setTransactionId ( transactionId ) ) ; return item ;", "import org . mifosplatform . portfolio . loanaccount . data . HolidayDetailDTO ; import org . mifosplatform . portfolio . common . domain . DayOfWeekType ;", "markBlockAsCorrupt ( new BlockToMarkCorrupt ( storedBlock , reason , Reason . CORRUPTION_REPORTED ) , dn , storageID ) ;", "NetworkElement element = _networkModel . getElementImplementingProvider ( provider . getName ( ) ) ; if ( element instanceof IpDeployer ) { deployer = ( IpDeployer ) element ; } else if ( deployer == null ) { }", "throw new ParsingException ( parseContext , \"no value specified for fuzzy query\" ) ;", "if ( view != null ) { view . startAnimation ( show ) ; }", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "MethodList < ? > targetCandidates ) {", "", "MinimalAd minimalAd , boolean shouldInstall , InstalledRepository installedRepository , DownloadFactory downloadFactory , TimelineAnalytics timelineAnalytics , AppViewAnalytics appViewAnalytics ) {", "result . put ( OnVehicleData . KEY_HANDS_OFF_STEERING , VehicleDataHelper . HANDS_OFF_STEERING ) ; result . put ( TestValues . GENERAL_OEM_CUSTOM_VEHICLE_DATA_NAME , VehicleDataHelper . OEM_CUSTOM_VEHICLE_DATA_STATE ) ;", "putCachingSupplier ( worldPie , ( ) -> graphs . pie ( ) . worldPie ( serverContainer . getValue ( ServerKeys . WORLD_TIMES ) . orElse ( new WorldTimes ( new HashMap < > ( ) ) ) ) ) ;", "public void setState ( long fileId , org . apache . thrift . async . AsyncMethodCallback resultHandler ) throws org . apache . thrift . TException { checkReady ( ) ; setState_call method_call = new setState_call ( fileId , resultHandler , this , ___protocolFactory , ___transport ) ; this . ___currentMethod = method_call ; ___manager . call ( method_call ) ; } public static class setState_call extends org . apache . thrift . async . TAsyncMethodCall { private long fileId ; public setState_call ( long fileId , org . apache . thrift . async . AsyncMethodCallback resultHandler , org . apache . thrift . async . TAsyncClient client , org . apache . thrift . protocol . TProtocolFactory protocolFactory , org . apache . thrift . transport . TNonblockingTransport transport ) throws org . apache . thrift . TException { super ( client , protocolFactory , transport , resultHandler , false ) ; this . fileId = fileId ; } public void write_args ( org . apache . thrift . protocol . TProtocol prot ) throws org . apache . thrift . TException { prot . writeMessageBegin ( new org . apache . thrift . protocol . TMessage ( \"reportLostFile\" , org . apache . thrift . protocol . TMessageType . CALL , 0 ) ) ; reportLostFile_args args = new reportLostFile_args ( ) ; args . setFileId ( fileId ) ; args . write ( prot ) ; prot . writeMessageEnd ( ) ; } public void getResult ( ) throws tachyon . thrift . TachyonTException , org . apache . thrift . TException { if ( getState ( ) != org . apache . thrift . protocol . TMessage ( \"reportLostFile\" , org . apache . thrift . protocol . TMessageType . CALL , 0 ) ) ; reportLostFile_args args = new reportLostFile_args ( ) ; args . setFileId", "try { if ( docWriter . deleteQueries ( queries ) ) { flush ( true , false ) ; } } catch ( OutOfMemoryError oom ) { handleOOM ( oom , \"deleteDocuments(Query..)\" ) ; }", "import org . molgenis . data . meta . model . AttributeFactory ; import org . molgenis . data . meta . model . EntityTypeFactory ;", "+ \"Letting out a disappointed whine, your [npc.daughter] reluctantly accepts your excuse to leave.\" + ( offspring ( ) . getPersonality ( ) . get ( PersonalityTrait . EXTROVERSION ) == PersonalityWeight . HIGH || offspring ( ) . getPersonality ( ) . get ( PersonalityTrait . NEUROTICISM ) == PersonalityWeight . HIGH", "", "ZonedDateTime expiresAt = prepaidFrom . plusSeconds ( ( long ) ( prepaidNamesForDays * 24 * 3600 / finalEntries ) ) ; storedNames . forEach ( sn -> me . createNameRecord ( sn , expiresAt ) ) ;", "@ Override public void shouldShallowCloneOperation ( ) { final int limit = 3 ; final Entity input = new Entity ( TestGroups . ENTITY ) ; final CountGroups countGroups = new CountGroups . Builder ( ) . input ( input ) . limit ( limit ) . build ( ) ; CountGroups clone = ( CountGroups ) countGroups . shallowClone ( ) ; assertEquals ( limit , ( int ) clone . getLimit ( ) ) ; assertEquals ( input , clone . getInput ( ) . iterator ( ) . next ( ) ) ; } protected CountGroups getTestObject ( ) { return new CountGroups ( ) ; }", "import android . widget . Toast ;", "String passphrase ; if ( mIsPassPhraseSet ) passphrase = PassphraseCacheService . getCachedPassphrase ( this , masterKeyId ) ; else passphrase = \"\" ; if ( passphrase == null ) { showPassphraseDialog ( masterKeyId ) ; } else { mCurrentPassphrase = passphrase ; finallySaveClicked ( ) ; } } catch ( PgpGeneralException e ) { Toast . makeText ( this , getString ( R . string . error_message , e . getMessage ( ) ) , Toast . LENGTH_SHORT ) . show ( ) ;", "", "public EventConsumer . ReassignableEventConsumer createEventConsumer ( @ Nullable final String clientId ) { return new MultiTimelineEventConsumer ( clientId , this , timelineSync ) ; } private void switchTimelines ( final Timeline activeTimeline , final Timeline nextTimeline ) throws InconsistentStateException , RepositoryProblemException , TimelineException , ConflictException { }", "assertThat ( capturedOutput ) . doesNotContain ( \"Initializing ExecutorService\" ) ;", "parentPath = file . getRemotePath ( ) . substring ( 0 , file . getRemotePath ( ) . lastIndexOf ( file . getFileName ( ) ) ) ; if ( getStorageManager ( ) . getFileByPath ( parentPath ) == null )", "ThemeHelper . setTheme ( this , true ) ;", "", "void testGETWithEndpointDisabled ( ) throws Exception { Configuration config = Configuration . getInstance ( ) ; config . setProperty ( Key . API_ENABLED , false ) ; try { client . send ( ) ; fail ( \"Expected exception\" ) ; } catch ( ResourceException e ) { assertEquals ( 403 , e . getStatusCode ( ) ) ; } } @ Test void testGETWithNoPriorImageRequest ( ) throws Exception { }", "import java . lang . invoke . MethodHandles ; import java . io . IOException ;", "import org . restcomm . connect . commons . configuration . RestcommConfiguration ; import org . restcomm . connect . commons . dao . Sid ; import org . restcomm . connect . commons . util . UriUtils ;", "readingGoal . setText ( haveRead + howManyReadThisYear + outOf + targetToRead + getPluralized ( \" page\" , targetToRead ) ) ; toggleBooksGoalInfo ( false , hasReachedGoal ) ;", "import com . mosync . internal . android . EventQueue ; import com . mosync . internal . generated . IX_WIDGET ;", "final Vertx vertx , final ConcurrentNetworkNodes networkNodes , final Enclave enclave , final Storage < EncryptedPayload > storage , final Storage < PrivacyGroupPayload > privacyGroupStorage , final Storage < QueryPrivacyGroupPayload > queryPrivacyGroupStorage , final Storage < ArrayList < CommitmentPair > > privateTransactionStorage , final Router nodeRouter , final Router clientRouter , final Config config ) { final LoggerHandler loggerHandler = LoggerHandler . create ( ) ;", "", "setState ( 635 ) ;", "private Settings settings ; private String propertiesFilePath ;", "public static ShaclSail getInitializedShaclSailNativeStore ( String shapeData ) throws IOException { ShaclSail sail = new ShaclSail ( new NativeStore ( Files . newTemporaryFolder ( ) ) ) ; sail . init ( ) ; Utils . loadShapeData ( sail , shapeData ) ; return sail ; } public static SailRepository getInitializedShaclRepository ( URL resourceName ) { SailRepository repo = new SailRepository ( new ShaclSail ( new MemoryStore ( ) ) ) ; repo . initialize ( ) ; try { Utils . loadShapeData ( repo , resourceName ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return repo ; } public static SailRepository getSailRepository ( URL resourceName ) { SailRepository sailRepository = new SailRepository ( new MemoryStore ( ) ) ; sailRepository . initialize ( ) ; try ( SailRepositoryConnection connection = sailRepository . getConnection ( ) ) { connection . add ( resourceName , resourceName . toString ( ) , RDFFormat . TURTLE ) ; } catch ( IOException | NullPointerException e ) { System . out . println ( \"Error reading: \" + resourceName ) ; throw new RuntimeException ( e ) ; } return sailRepository ; }", "List < Witness > genesisBlockArgWitnesses = genesisBlockArg . getWitnesses ( ) ; if ( genesisBlockArgWitnesses . size ( ) < args . getWitnessMaxActiveNum ( ) ) { logger . error ( \"genesisBlockWitnessesSize must greater than witnessMaxActiveNum\" ) ; System . exit ( 1 ) ; } if ( args . getWitnessMaxActiveNum ( ) <= 0 ) { logger . error ( \"getWitnessMaxActiveNum must greater than zero\" ) ; System . exit ( 1 ) ; } List < Witness > witnessList = genesisBlockArgWitnesses . subList ( 0 , args . getWitnessMaxActiveNum ( ) ) ; witnessList . forEach ( key -> { byte [ ] keyAddress = key . getAddress ( ) ; ByteString address = ByteString . copyFrom ( keyAddress ) ; final AccountCapsule accountCapsule ; if ( ! this . accountStore . has ( keyAddress ) ) { accountCapsule = new AccountCapsule ( ByteString . EMPTY , address , AccountType . AssetIssue , 0L ) ; } else { accountCapsule = this . accountStore . getUnchecked ( keyAddress ) ; } accountCapsule . setIsWitness ( true ) ; this . accountStore . put ( keyAddress , accountCapsule ) ;", "setState ( 415 ) ;", "import com . rapleaf . jack . OrderCriterion ;", "for ( final SelectableFeature feature : conf . getFeatures ( ) ) { if ( feature . getSelection ( ) != Selection . SELECTED ) { falseOptionalFeaturesTest . remove ( feature . getName ( ) ) ; } }", "QuadrupedVMCStandController vmcStandController = new QuadrupedVMCStandController ( simulationDT , quadrupedRobotParameters , sdfFullRobotModel , virtualModelController , robotTimestamp , registry , yoGraphicsListRegistry ) ; QuadrupedPositionBasedCrawlController positionBasedCrawlController = new QuadrupedPositionBasedCrawlController ( simulationDT , quadrupedRobotParameters , sdfFullRobotModel , stateEstimator , inverseKinematicsCalculators , globalDataProducer , robotTimestamp , registry , yoGraphicsListRegistry , yoGraphicsListRegistryForDetachedOverhead ) ;", "@ Configuration ( proxyBeanMethods = false ) @ Import ( { ServletWebServerFactoryAutoConfiguration . class , LocalDevToolsAutoConfiguration . class , ResourceProperties . class } )", "@ SuppressWarnings ( \"unused\" ) private void cloneInputOutputObjects ( ) { }", "import org . slf4j . LoggerFactory ;", "", "DbSourceDirTree ( boolean forceUnixNewlines , String dirTreePath , String encoding ) { }", "int importance = 4 ; if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . N ) { importance = NotificationManager . IMPORTANCE_HIGH ; final String importanceString = bundle . getString ( \"importance\" ) ; if ( importanceString != null ) { switch ( importanceString . toLowerCase ( ) ) { case \"default\" : importance = NotificationManager . IMPORTANCE_DEFAULT ; break ; case \"max\" : importance = NotificationManager . IMPORTANCE_MAX ; break ; case \"high\" : importance = NotificationManager . IMPORTANCE_HIGH ; break ; case \"low\" : importance = NotificationManager . IMPORTANCE_LOW ; break ; case \"min\" : importance = NotificationManager . IMPORTANCE_MIN ; break ; case \"none\" : importance = NotificationManager . IMPORTANCE_NONE ; break ; case \"unspecified\" : importance = NotificationManager . IMPORTANCE_UNSPECIFIED ; break ; default : importance = NotificationManager . IMPORTANCE_HIGH ; } } }", "import net . minecraft . creativetab . CreativeTabs ; import net . minecraft . item . Item ; import net . minecraftforge . common . MinecraftForge ; import net . minecraftforge . fluids . FluidRegistry ; import net . minecraftforge . fml . common . Mod ; import net . minecraftforge . fml . common . SidedProxy ; import net . minecraftforge . fml . common . event . FMLInitializationEvent ; import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; import net . minecraftforge . fml . common . eventhandler . EventBus ; import net . minecraftforge . fml . common . network . NetworkRegistry ; import net . minecraftforge . fml . common . network . PacketLoggingHandler ; import net . minecraftforge . fml . common . registry . GameRegistry ; import net . minecraftforge . fml . relauncher . Side ; import net . minecraftforge . fml . relauncher . SideOnly ; import org . apache . logging . log4j . Logger ;", "public SparkSession getSparkSession ( ) { return sparkSession ; } public void setSparkSession ( SparkSession sparkSession ) { this . sparkSession = sparkSession ; } public String getNextValuesTempTableSuffix ( ) { return Integer . toString ( nextValueTempTableSuffix ++ ) ; }", "DataTransfer ( DatanodeInfo targets [ ] , ExtendedBlock b , BlockConstructionStage stage , final String clientname ) throws IOException { if ( DataTransferProtocol . LOG . isDebugEnabled ( ) ) { DataTransferProtocol . LOG . debug ( getClass ( ) . getSimpleName ( ) + \": \" + b + \" (numBytes=\" + b . getNumBytes ( ) + \")\" + \", stage=\" + stage + \", clientname=\" + clientname + \", targests=\" + Arrays . asList ( targets ) ) ; } }", ". next ( \"cuts\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"bricks-solid\" )", "", "actionsList . add ( AddContentTagAction . getInstance ( ) ) ; actionsList . addAll ( ContextMenuExtensionPoint . getActions ( ) ) ;", "", "@ Nonnull public EntityType2CollectionRequest filter ( @ Nonnull final String value ) { addFilterOption ( value ) ; return this ; }", "response = minMaxQuery ( ScoreType . SUM , 3 , 0 ) ;", "* Long running put request , service returns a 201 to the initial request with no payload", "seed = new Random ( ) . nextLong ( ) ; rootHeightMap . setSeed ( seed ) ; theme . setSeed ( seed ) ; synchronized ( tileCache ) { tileCache . clear ( ) ; tileCache . notifyAll ( ) ; }", "public static class TogglingDispenserBehaviour extends ItemDispenserBehavior { private FakePlayerEntity player ; private static Set < Block > toggleable = Sets . newHashSet ( Blocks . STONE_BUTTON , Blocks . ACACIA_BUTTON , Blocks . BIRCH_BUTTON , Blocks . DARK_OAK_BUTTON , Blocks . JUNGLE_BUTTON , Blocks . OAK_BUTTON , Blocks . SPRUCE_BUTTON , Blocks . ACACIA_DOOR , Blocks . BIRCH_DOOR , Blocks . DARK_OAK_DOOR , Blocks . JUNGLE_DOOR , Blocks . OAK_DOOR , Blocks . SPRUCE_DOOR , Blocks . ACACIA_TRAPDOOR , Blocks . BIRCH_TRAPDOOR , Blocks . DARK_OAK_TRAPDOOR , Blocks . JUNGLE_TRAPDOOR , Blocks . SPRUCE_TRAPDOOR , Blocks . ACACIA_FENCE_GATE , Blocks . BIRCH_FENCE_GATE , Blocks . OAK_FENCE_GATE , Blocks . REPEATER , Blocks . COMPARATOR , Blocks . LEVER , Blocks . DAYLIGHT_DETECTOR , Blocks . NOTE_BLOCK , Blocks . REDSTONE_ORE , Blocks . BELL ) ; @ Override protected ItemStack dispenseSilently ( BlockPointer source , ItemStack stack ) { if ( ! CarpetExtraSettings . dispensersToggleThings ) { return super . dispenseSilently ( source , stack ) ; } World world = source . getWorld ( ) ; if ( player == null ) player = new FakePlayerEntity ( world , \"toggling\" ) ; Direction direction = ( Direction ) source . getBlockState ( ) . get ( DispenserBlock . FACING ) ; BlockPos", "import alluxio . web . MasterUIWebServer ; import alluxio . wire . BlockInfo ;", "PersistentIdentifierServiceBean idServiceBean = PersistentIdentifierServiceBean . getBean ( target . getProtocol ( ) , ctxt ) ;", "private final PolicyConfig policyConfig ;", "createDefaultUsers ( ) ;", "public Void visitLP ( Concrete . PLevelExpression expr , Precedence param ) { }", "@ Override public void shouldShallowCloneOperation ( ) { final Boolean validatable = false ; final Boolean skipInvalidElements = false ; final Element testInput = new Entity . Builder ( ) . property ( \"name\" , \"value\" ) . build ( ) ; final AddElements addElements = new AddElements . Builder ( ) . validate ( validatable ) . skipInvalidElements ( skipInvalidElements ) . input ( testInput ) . option ( \"testOption\" , \"true\" ) . build ( ) ; final AddElements clone = ( AddElements ) addElements . shallowClone ( ) ; assertEquals ( validatable , clone . isValidate ( ) ) ; assertEquals ( skipInvalidElements , clone . isSkipInvalidElements ( ) ) ; assertEquals ( \"true\" , clone . getOption ( \"testOption\" ) ) ; assertEquals ( Lists . newArrayList ( testInput ) , clone . getInput ( ) ) ; }", "* @ author Andrew McGhie * @ author HaiTao Zhang * @ author Rafiullah Hamedy", "* Set dictionary value empty { \"0\" : true , \"1\" : false , \"2\" : false , \"3\" : true }", "setState ( 623 ) ;", "", "otherRouting . restoreSource ( ) , otherRouting . primaryTerm ( ) , otherRouting . primary ( ) , otherRouting . state ( ) , otherRouting . unassignedInfo ( ) ) ;", "private static final String METHOD_GET = \"GET\" ;", "@ Autowired private ItemDropService itemDropService ; @ Autowired private UserService userService ; @ Autowired private StageService stageService ; @ Autowired private CookieUtil cookieUtil ; @ Autowired private ValidatorFacade validatorFacade ; @ ApiOperation ( value = \"Submit a drop report\" , notes = \"Detailed instructions can be found at: https://developer.penguin-stats.io/docs/report-api\" ) @ PostMapping public ResponseEntity < SingleReportResponse > saveSingleReport ( @ Valid @ RequestBody SingleReportRequest singleReportRequest , HttpServletRequest request , HttpServletResponse response ) throws Exception { String userID = cookieUtil . readUserIDFromCookie ( request ) ; if ( userID == null ) { userID = userService . createNewUser ( IpUtil . getIpAddr ( request ) ) ; } try { CookieUtil . setUserIDCookie ( response , userID ) ; } catch ( UnsupportedEncodingException e ) { log . error ( \"Error in handleUserIDFromCookie: uid={}\" , userID ) ; } log . info ( \"user \" + userID + \" POST /report\\n\" + Objects . requireNonNull ( JSONUtil . convertObjectToJSONObject ( singleReportRequest ) ) . toString ( 2 ) ) ; String stageId = singleReportRequest . getStageId ( ) ; String source = singleReportRequest . getSource ( ) ; String version = singleReportRequest . getVersion ( ) ; Server server = singleReportRequest . getServer ( ) ; Long timestamp = System . currentTimeMillis ( ) ; String ip = IpUtil . getIpAddr ( request ) ; Integer times = 1 ; ValidatorContext context = new ValidatorContext ( ) . setStageId ( stageId ) . setServer ( server ) . setTimes ( times ) . setDrops ( singleReportRequest . getDrops ( ) ) . setTimestamp ( timestamp ) . setIp ( ip ) . setUserID ( userID ) ; Boolean isReliable = validatorFacade . doValid ( context", "return org . apache . xmlgraphics . java2d . color . ColorUtil . toCMYKGrayColor ( black ) ;", "boolean foundDefaulted = false ; List < Tree . TypeParameterDeclaration > tpds = tpl . getTypeParameterDeclarations ( ) ; typeParameters = new ArrayList < TypeParameter > ( tpds . size ( ) ) ; for ( Tree . TypeParameterDeclaration tp : tpds ) { }", "import org . kairosdb . core . aggregator . Aggregator ; import org . kairosdb . core . aggregator . FilterAggregator ; import org . kairosdb . plugin . Aggregator ; import org . kairosdb . plugin . GroupByAware ; import org . kairosdb . core . aggregator . RangeAggregator ; import org . kairosdb . core . aggregator . SaveAsAggregator ; import org . kairosdb . core . aggregator . TimezoneAware ; import org . kairosdb . core . aggregator . TrimAggregator ; import org . kairosdb . core . annotation . Feature ; import org . kairosdb . core . datastore . Order ; import org . kairosdb . core . datastore . QueryMetric ; import org . kairosdb . core . datastore . QueryPlugin ; import org . kairosdb . core . datastore . QueryPluginFactory ; import org . kairosdb . core . datastore . TimeUnit ; import org . kairosdb . core . groupby . GroupBy ;", "public static boolean isAdapter ( TypeWrapper clazz ) { if ( clazz == null ) { return false ; } return clazz . hasAnnotation ( Adapter . class ) ; } public static boolean isAdapter ( Class < ? > clazz ) { if ( clazz == null ) { return false ; } return hasAnnotation ( clazz , Adapter . class ) ; } public static boolean isJavascriptFunction ( TypeWrapper clazz ) { if ( clazz == null ) { return false ; } return clazz . hasAnnotation ( JavascriptFunction . class ) ; } public static TypeWrapper arrayOf ( TypeWrapper resolvedType , int arrayCount ) { if ( arrayCount == 0 ) { return resolvedType ; } if ( resolvedType . getClass ( ) == ClassWrapper . class ) { return new ClassWrapper ( Array . newInstance ( ( Class < ? > ) resolvedType . getType ( ) , new int [ arrayCount ] ) . getClass ( ) ) ; } TypeWrapper returnType = resolvedType ; for ( int i = 0 ; i < arrayCount ; ++ i ) { returnType = new GenericArrayTypeWrapper ( new GenericArrayTypeImpl ( returnType . getType ( ) ) ) ; } return returnType ; } public static Method findDeclaredMethod ( Class < ? > clazz , String name ) { for ( Method m : clazz . getDeclaredMethods ( ) ) { if ( m . getName ( ) . equals ( name ) ) { return m ; } } return null ; } public static Constructor < ? > findConstructor ( Class < ? > clazz ) { if ( m . getDeclaredConstructors ( ) ) { if ( m . getName ( ) . equals ( name ) ) { return m ; } } return null ; } public static boolean isAssignableFromType ( final Class < ? > cls , final java . lang . reflect . Type type ) { if ( type instanceof Class < ? > cls , final java . lang . reflect . Type type ) { for ( Method m : clazz . getDeclaredMethods ( ) ) { if ( m . getName", "uniqueBatch . add ( uniqueValueStrat . writeCQL ( scope , written , - 1 ) ) ;", "GalacticraftCore . packetPipeline . sendToAllAround ( new PacketSimple ( EnumSimplePacket . C_UPDATE_GEAR_SLOT , GCCoreUtil . getDimensionID ( player . world ) , new Object [ ] { PlayerUtil . getName ( player ) , packetType . ordinal ( ) , gearType . ordinal ( ) , gearID } ) , new TargetPoint ( GCCoreUtil . getDimensionID ( player . world ) , player . posX , player . posY , player . posZ , 50.0D ) ) ;", "import mcjty . lib . varia . RedstoneMode ; import mcjty . rftools . blocks . builder . BuilderConfiguration ;", "if ( ! mPrefs . alternateBackground || isEven ( ) ) { postRow . setBackgroundColor ( mPrefs . postReadBackgroundColor ) ; }", "import org . openqa . selenium . * ;", "if ( ip != null ) { localEndPoint = new KNXNetworkLinkIP ( KNXNetworkLinkIP . TUNNEL , localEndPoint , new InetSocketAddress ( ip , port ) , false , TPSettings . TP1 ) ; } else { localEndPoint = new KNXNetworkLinkFT12 ( Integer . parseInt ( port ) , new TPSettings ( true ) ) ; }", "public SmileGenerator ( ObjectWriteContext writeCtxt , IOContext ioCtxt , int streamWriteFeatures , int smileFeatures , OutputStream out , byte [ ] outputBuffer , int offset ,", "import org . safehaus . subutai . core . peer . api . PeerStatus ; import org . safehaus . subutai . core . peer . ui . PeerManagerPortalModule ;", "BITRATE_UNSET , true , null ,", "public void getAnalysisTest ( ) throws CatalogManagerException , IOException { System . out . println ( catalog . getAnalysis ( 8 ) ) ; }", "import tachyon . client . ClientContext ;", "import com . lilithsthrone . game . combat . * ;", "* Long running post request , service returns a 202 to the initial request , with 'Location' and 'Retry-After' headers , Polls return a 200 with a response body after success", "import org . saiku . olap . dto . SimpleCubeElement ; import org . saiku . olap . dto . filter . SaikuFilter ; import org . saiku . service . ISessionService ; import org . saiku . service . olap . OlapQueryService ; import org . saiku . service . util . exception . SaikuServiceException ; import com . fasterxml . jackson . annotation . JsonAutoDetect ; import com . fasterxml . jackson . databind . ObjectMapper ; import com . fasterxml . jackson . databind . type . MapType ; import com . qmino . annotation . ReturnType ; import org . apache . commons . collections . MapUtils ; import org . apache . commons . lang . StringUtils ; import org . apache . commons . lang . exception . ExceptionUtils ; import org . apache . commons . vfs . * ; import org . apache . commons . vfs . qmino . annotation . TypeFactory ; import org . codehaus . jackson . annotation . JsonAccessorType ; import org . codehaus . jackson . map . ObjectMapper ; import org . codehaus . jackson . map . type . TypeFactory ;", "private ExpressionHelper ( ) { } public static Expression createExpressionFromEnumType ( final EnumType type ) { }", "import org . springframework . boot . context . properties . EnableConfigurationProperties ; import org . springframework . cloud . autoconfigure . domain . EntityScan ; import org . springframework . cloud . openfeign . FeignClient ;", "if ( jj_3R_542 ( ) ) { jj_scanpos = xsp ; break ; }", "logger . debug ( \"The class \" + name + \" is not on the classpath\" ) ;", "* Get an array of Dictionaries of type & lt ; string , string & gt ; with value [ ]", "AnnotatorUtils . annotate ( annotator , vcfAttributes , entityTypeFactory , attributeFactory , vcfUtils ,", "private final ArchiveAnalyzer . Filter filter ; private final TypeElement objectType ;", "public Boolean getGeoLocked ( ) { return geoLocked ; } public Boolean getLocaleNameFlag ( ) { return localeNameFlag ; } public void setGeoLocked ( Boolean geoLocked ) { this . geoLocked = geoLocked ; } public void setLocaleNameFlag ( Boolean localeNameFlag ) { this . localeNameFlag = localeNameFlag ; } public Boolean getLocaleLocationFlag ( ) { return localeLocationFlag ; } public void setLocaleLocationFlag ( Boolean localeLocationFlag ) { this . localeLocationFlag = localeLocationFlag ; }", "import com . google . inject . Inject ; import com . google . inject . Injector ; import com . google . inject . Singleton ; import com . gitblit . utils . XssFilter ;", "prop . setComment ( \"If set to true on a server, players will be completely unable to create space stations.\" ) ; prop . setLanguageKey ( \"gc.configgui.disable_space_station_creation\" ) ;", "setKubernetesCluster ( cluster ) ;", "cmbDbNames2 = new ComboViewer ( container , SWT . READ_ONLY | SWT . DROP_DOWN ) ; cmbDbNames . setContentProvider ( ArrayContentProvider . getInstance ( ) ) ; cmbDbNames . setLabelProvider ( new LabelProvider ( ) { @ Override public String getText ( Object element ) { return ( ( DbInfo ) element ) . getName ( ) ; } } ) ;", "private void handleLoaderLogic ( ScheduledDownloadDisplayable displayable ) { PermissionManager permissionManager = new PermissionManager ( ) ; DownloadServiceHelper downloadServiceHelper = new DownloadServiceHelper ( AptoideDownloadManager . getInstance ( ) , permissionManager ) ; subscriptions . add ( downloadServiceHelper . getAllDownloads ( ) . flatMapIterable ( downloads -> downloads ) . filter ( download -> isCurrentScheduled ( displayable , download ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( this :: changeLoaderStatus ) ) ; } private boolean isCurrentScheduled ( ScheduledDownloadDisplayable displayable , Download download ) { return TextUtils . equals ( download . getMd5 ( ) , displayable . getPojo ( ) . getMd5 ( ) ) ; } private void changeLoaderStatus ( Download download ) { if ( download . getOverallDownloadStatus ( ) == Download . PROGRESS || download . getOverallDownloadStatus ( ) == Download . IN_QUEUE ) { if ( progressBarIsInstalling . getVisibility ( ) != View . VISIBLE ) { progressBarIsInstalling . setVisibility ( View . VISIBLE ) ; } } else { if ( progressBarIsInstalling . getVisibility ( ) == View . VISIBLE || download . getOverallDownloadStatus ( ) == Download . PAUSED ) { progressBarIsInstalling . setVisibility ( View . GONE ) ; } } }", "ResourceResponse projectResponse = resourcePost . handle ( projectPath , new QueryParams ( ) , null , newProjectBody ) ;", "@ Transactional ( readOnly = true , rollbackFor = { Throwable . class } ) public int searchCount ( final NodeCond searchCondition )", "private ComponentSystemManager systemManager ; private ChunkStore loadChunkStore ( File file ) throws IOException { FileInputStream fileIn = null ; ObjectInputStream in = null ; try { fileIn = new FileInputStream ( file ) ; in = new ObjectInputStream ( fileIn ) ; ChunkStore cache = ( ChunkStore ) in . readObject ( ) ; if ( cache instanceof ChunkStoreGZip ) { ( ( ChunkStoreGZip ) cache ) . setup ( ) ; logger . info ( \"Using old chunk store implementation without protobuf support for compatibility.\" ) ; } else if ( cache instanceof ChunkStoreProtobuf ) ( ( ChunkStoreProtobuf ) cache ) . setup ( ) ; else logger . warn ( \"Chunk store might not have been initialized: {}\" , cache . getClass ( ) . getName ( ) ) ; return cache ; } catch ( ClassNotFoundException e ) { throw new IOException ( \"Unable to load chunk cache\" , e ) ; } finally { if ( in != null ) { try { in . close ( ) ; } catch ( IOException e ) { logger . error ( \"Failed to close input stream\" , e ) ; } } if ( fileIn != null ) { try { fileIn . close ( ) ; } catch ( IOException e ) { logger . error ( \"Failed to close input stream\" , e ) ; } } } }", "public boolean shouldColorOutput ( ) { return cmd != null && ! cmd . hasOption ( NO_COLOR_OPT ) ; } public boolean shouldInvertColorOutput ( ) { return cmd != null && cmd . hasOption ( INVERT_COLOR_OPT ) ; } public boolean debugFlagSet ( ) throws ArgumentParserException { return cmd != null && cmd . hasOption ( DEBUG_OPT ) ; }", "Builder < PluginRepository > builder = ImmutableSet . builder ( ) ; builder . addAll ( advancedPluginConfiguration . getRepositories ( ) ) ; builder . addAll ( center . getRepositories ( ) ) ;", "checkImageSize ( user . getPicture ( ) ) ; return Response . ok ( userService . update ( user ) ) . build ( ) ;", "import org . apache . streamline . streams . storm . common . StormNotReachableException ;", "public final TriggerBotHack triggerBotHack = new TriggerBotHack ( ) ; public final TrajectoriesHack trajectoriesHack = new TrajectoriesHack ( ) ;", "else if ( boundaryEvent . getEventDefinitions ( ) . get ( 0 ) instanceof MessageEventDefinition ) { processDiagramCanvas . drawCatchingMessageEvent ( flowNode . getName ( ) , graphicInfo , boundaryEvent . isCancelActivity ( ) , scaleFactor ) ; } else if ( boundaryEvent . getEventDefinitions ( ) . get ( 0 ) instanceof CompensateEventDefinition ) { processDiagramCanvas . drawCatchingCompensateEvent ( graphicInfo , boundaryEvent . isCancelActivity ( ) , scaleFactor ) ; }", ". append ( PRIVATE_UID , studyId ) . append ( QueryParams . GROUP_ID . key ( ) , groupId )", "protected final PersistitAdapter adapter ; protected Index index ; protected int nIndexFields ; private Key pKey ; private Key pValue ; private PersistitKeyAppender pKeyAppender ; private PersistitKeyAppender pValueAppender ; private int pKeyFields ;", "import io . bitsquare . locale . CurrencyUtil ; import io . bitsquare . messages . locale . Res ; import io . bitsquare . messages . locale . TradeCurrency ; import io . bitsquare . messages . trade . offer . payload . Offer ; import io . bitsquare . messages . user . Preferences ;", "HashMap < String , String [ ] > vstr = new HashMap < > ( ) ; vstr . put ( stringEntry . getKey ( ) , pair ) ; testdata . put ( stringEntry . getValue ( ) [ 3 ] , vstr ) ;", "if ( assemblyConfig != null ) { String descriptor = assemblyConfig . getDescriptor ( ) ; if ( descriptor != null ) { return new String [ ] { EnvUtil . prepareAbsolutePath ( params , descriptor ) . getAbsolutePath ( ) } ; } }", "( ( animation == inAnimation ) ? \"in\" : ( ( animation == outAnimation ) ? \"out\" : \"other\" ) ) ) ; if ( inAnimation == animation ) { animationCompletionSet |= 1 ; } else if ( outAnimation == animation ) { animationCompletionSet |= 2 ; }", "if ( corruptReplica ( block , i ) ) { }", ". addAggregation ( histogram ( \"histo\" ) . field ( \"value\" ) . interval ( 1L ) . minDocCount ( 0 ) . subAggregation ( nested ( \"nested\" , \"nested\" ) ) )", "import org . concordion . api . ResultModifier ;", "private void onSynchronizeFileOperationFinish ( SynchronizeFileOperation operation , RemoteOperationResult result ) { boolean inDisplayActivity = getActivity ( ) instanceof FileDisplayActivity ; getActivity ( ) . dismissDialog ( ( inDisplayActivity ) ? FileDisplayActivity . DIALOG_SHORT_WAIT : FileDetailActivity . DIALOG_SHORT_WAIT ) ; if ( ! result . isSuccess ( ) ) { if ( result . getCode ( ) == ResultCode . SYNC_CONFLICT ) { Intent i = new Intent ( getActivity ( ) , ConflictsResolveActivity . class ) ; i . putExtra ( ConflictsResolveActivity . EXTRA_FILE , mFile ) ; i . putExtra ( ConflictsResolveActivity . EXTRA_ACCOUNT , mAccount ) ; startActivity ( i ) ; } else { Toast msg = Toast . makeText ( getActivity ( ) , R . string . sync_file_fail_msg , Toast . LENGTH_LONG ) ; msg . show ( ) ; } if ( mFile . isDown ( ) ) { setButtonsForDown ( ) ; } else { setButtonsForRemote ( ) ; } } else { if ( operation . transferWasRequested ( ) ) { mContainerActivity . onFileStateChanged ( ) ; } else { Toast msg = Toast . makeText ( getActivity ( ) , R . string . sync_file_nothing_to_do_msg , Toast . LENGTH_LONG ) ; msg . show ( ) ; if ( mFile . isDown ( ) ) { setButtonsForDown ( ) ; } else { setButtonsForRemote ( ) ; } } } }", "@ Mojo ( name = \"nar-system-generate\" , defaultPhase = LifecyclePhase . GENERATE_RESOURCES , requiresProject = true ) public class NarSystemMojo extends AbstractNarMojo { private BuildContext buildContext ; @ Override public final void narExecute ( ) throws MojoExecutionException , MojoFailureException { String packageName = null ; String narSystemName = null ; File narSystemDirectory = null ; boolean jniFound = false ; for ( final Iterator i = getLibraries ( ) . iterator ( ) ; ! jniFound && i . hasNext ( ) ; ) { final Library library = ( Library ) i . next ( ) ; if ( library . getType ( ) . equals ( Library . JNI ) || library . getType ( ) . equals ( Library . SHARED ) ) { packageName = library . getNarSystemPackage ( ) ; narSystemName = library . getNarSystemName ( ) ; narSystemDirectory = new File ( getTargetDirectory ( ) , library . getNarSystemDirectory ( ) ) ; jniFound = true ; } } if ( ! jniFound || packageName == null ) { if ( ! jniFound ) { getLog ( ) . debug ( \"NAR: not building a shared or JNI library, so not generating NarSystem class.\" ) ; } else { getLog ( ) . warn ( \"NAR: no system package specified; unable to generate NarSystem class.\" ) ; } return ; } } }", "import com . scottlogic . deg . generator . restrictions . linear . * ;", "import com . sun . appserv . server . util . Version ; import com . sun . enterprise . glassfish . bootstrap . Constants ; import com . sun . enterprise . glassfish . bootstrap . GlassFishImpl ; import com . sun . enterprise . server . logging . ODLLogFormatter ; import org . glassfish . embeddable . BootstrapProperties ; import org . glassfish . embeddable . CommandRunner ; import org . glassfish . embeddable . Deployer ; import org . glassfish . embeddable . GlassFish ; import org . glassfish . embeddable . GlassFish . Status ; import org . glassfish . embeddable . GlassFishException ; import org . glassfish . embeddable . GlassFishProperties ; import org . glassfish . embeddable . GlassFishRuntime ; import fish . payara . appserver . rest . endpoints . config . admin . ListRestEndpointsCommand ; import fish . payara . boot . runtime . BootCommand ; import fish . payara . boot . runtime . BootCommands ; import fish . payara . deployment . util . GAVConvertor ; import fish . payara . micro . BootstrapException ; import fish . payara . micro . Payara . micro . boot . AdminCommandRunner ; import fish . payara . micro . boot . PayaraMicroBoot ; import fish . payara . micro . boot . loader . OpenURLClassLoader ; import fish . payara . micro . cmd . options . RUNTIME_OPTION ; import fish . payara . micro . cmd . options . RuntimeOptions ; import fish . payara . micro . cmd . options . ValidationException ; import fish . payara . micro . data . InstanceDescriptor ; import fish . payara . nucleus . executorservice . Pay", "secureIdGenerator ( ) , molgenisGroupMemberFactory ( ) , idGenerator ( ) ) ; } @ Bean public IdGenerator idGenerator ( ) { return mock ( IdGenerator . class ) ;", "@ Named ( \"Fabric\" ) EventLogger fabricEventLogger , @ Named ( \"Flurry\" ) EventLogger flurryEventLogger , HttpKnockEventLogger knockEventLogger ) { List < String > flurryEvents = new LinkedList < > ( Arrays . asList ( InstallAnalytics . APPLICATION_INSTALL , DownloadCompleteAnalytics . PARTIAL_EVENT_NAME , DownloadCompleteAnalytics . EVENT_NAME , AppViewAnalytics . HOME_PAGE_EDITORS_CHOICE_FLURRY , AppViewAnalytics . APP_VIEW_OPEN_FROM , StoreAnalytics . STORES_TAB_OPEN , StoreAnalytics . STORES_TAB_INTERACT , StoreAnalytics . STORES_OPEN , StoreAnalytics . STORES_INTERACT , AccountAnalytics . SIGN_UP_EVENT_NAME , AccountAnalytics . LOGIN_EVENT_NAME , FirstLaunchAnalytics . FIRST_LAUNCH , AccountAnalytics . LOGIN_SIGN_UP_START_SCREEN , AccountAnalytics . CREATE_USER_PROFILE , AccountAnalytics . PROFILE_SETTINGS , AdultContentAnalytics . ADULT_CONTENT , AppViewAnalytics . DOWNGRADE_DIALOG , DeepLinkAnalytics . APP_LAUNCH , DeepLinkAnalytics . FACEBOOK_APP_LAUNCH , AppViewAnalytics . CLICK_INSTALL ) ) ; for ( CardType cardType : CardType . values ( ) ) { flurryEvents . add ( cardType . name ( ) + \"_\" + TimelineAnalytics . APPS_TIMELINE_EVENT ) ; }", "", "setState ( 445 ) ;", "import stroom . query . api . v2 . DocRef ; import stroom . refdata . offheapstore . RefDataStore ; import stroom . refdata . offheapstore . RefDataStoreProvider ; import stroom . refdata . offheapstore . RefStreamDefinition ; import stroom . pipeline . task . StreamMetaDataProvider ;", "public PageResponse getPageResponse ( ) { return pageResponse ; } public List < T > getValues ( ) { return values ; } public int size ( ) { return values . size ( ) ; } @ JsonIgnore public T getFirst ( ) { if ( values . size ( ) > 0 ) { return values . get ( 0 ) ; } else { return null ; } } @ JsonIgnore public int getPageStart ( ) { return ( int ) pageResponse . getOffset ( ) ; } @ JsonIgnore public int getPageSize ( ) { if ( pageResponse . getTotal ( ) == null ) { return getPageStart ( ) + values . size ( ) ; } return pageResponse . getTotal ( ) . intValue ( ) ; } @ JsonIgnore public boolean isExact ( ) { return pageResponse . isExact ( ) ; } public Stream < T > stream ( ) { return values . stream ( ) ; } public Stream < T > parallelStream ( ) { return values . parallelStream ( ) ; } public void forEach ( final Consumer < ? super T > action ) { values . forEach ( action ) ; } @ SuppressWarnings ( \"checkstyle:needbraces\" )", "private void test ( Expression expected , TypeCheckClassResult result ) { assertEquals ( expected , ( ( LeafElimTreeNode ) ( ( FunctionDefinition ) result . getDefinition ( \"test\" ) ) . getElimTree ( ) ) . getExpression ( ) ) ; }", "ParserRuleContext firstNameCtx = QNameParser . getFirstNameCtx ( ids ) ; throw new UnresolvedReferenceException ( \"Schema not found for \" +", "@ SuppressWarnings ( { \"unused\" , \"Convert2Lambda\" , \"ConstantConditions\" , \"Anonymous2MethodRef\" , \"UnnecessaryLocalVariable\" } )", "entityType = mock ( EntityType . class ) ; when ( entityType . getName ( ) ) . thenReturn ( ENTITY_NAME ) ; idAttr = mock ( Attribute . class ) ;", "return new RacialEffectUtil ( \"Adds an extra pair of horns.\" ) { @ Override public String applyEffect ( ) { List < AbstractHornType > hornTypesSuitableForTransformation = RacialBody . valueOfRace ( race ) . getHornTypes ( true ) ; } }", "import net . minecraft . client . gui . screen . ingame . HandledScreen ;", "Intent intentDialog = new Intent ( this , DialogActivity . class ) ; intentDialog . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; Bundle msgDialogBundle = new Bundle ( ) ; msgDialogBundle . putString ( \"msgId\" , msgId ) ; msgDialogBundle . putString ( \"senderType\" , senderType ) ; msgDialogBundle . putString ( \"msgType\" , QQ ) ; msgDialogBundle . putString ( \"msgTitle\" , msgTitle ) ; msgDialogBundle . putString ( \"msgBody\" , msgBody ) ; msgDialogBundle . putInt ( \"notifyId\" , notifyId ) ; msgDialogBundle . putString ( \"msgTime\" , getCurTime ( ) ) ; msgDialogBundle . putString ( \"qqPackgeName\" , qqPackgeName ) ; intentDialog . putExtras ( msgDialogBundle ) ; PendingIntent pendingIntentDialog = PendingIntent . getActivity ( this , notifyId , intentDialog , PendingIntent . FLAG_UPDATE_CURRENT ) ; notificationBuilder . addAction ( 0 , \"\u00c3\u00a5\u00c4\u00aa\u00c4\u00b9\u00c3\u00a8\u00c2\u00a1\u00c2\u00a8\" , pendingIntentList ) ; notificationBuilder . addAction ( 0 , \"\u00c3\u00a6\u00c2\u00b8\u00c4\u00a7\u00c3\u00a9\u00c4\u00bb\u00c2\u00a4\" , pendingIntentCancel ) ; notificationBuilder . addAction ( 0 , \"\u00c3\u00a6\u00c4\u00bc\u00c4\u00a4\u00c3\u00a5\u00c4\u00a3\u00c4\u00be\" , pendingIntentPause ) ;", "import com . google . common . UsedAt ; import com . google . common . flogger . FluentLogger ; import com . google . gerrit . common . errors . EmailException ;", "public InputAnchor ( Block block , CustomUIPane pane ) throws IOException { super ( block , pane ) ; new InputAnchorHandler ( pane . getConnectionCreationManager ( ) , this ) ; } public final Expr asExpr ( ) { if ( isConnected ( ) ) { return getConnection ( ) . get ( ) . getOutputAnchor ( ) . get ( ) . getBlock ( ) . asExpr ( ) ; } else { return new Ident ( \"undefined\" ) ; } } @ Override public Optional < Connection > createConnectionWith ( ConnectionAnchor other ) { if ( other instanceof OutputAnchor ) { return createConnectionFrom ( ( OutputAnchor ) other ) ; } else { return Optional . empty ( ) ; } } public Optional < Connection > createConnectionFrom ( OutputAnchor other ) { if ( ! isConnected ( ) ) { new Connection ( this , ( OutputAnchor ) other ) ; getPane ( ) . getChildren ( ) . add ( getConnection ( ) . get ( ) ) ; getPane ( ) . invalidate ( ) ; return getConnection ( ) ; } else { return Optional . empty ( ) ; } } @ Override public String toString ( ) { return \"InputAnchor belonging to \" + getBlock ( ) . getName ( ) ; } @ Override public boolean canConnect ( ) { return ! isConnected ( ) ; } @ Override public void disconnect ( Connection connection ) { assert connection . getConnection ( ) . get ( ) ) ; setConnection ( null ) ; }", "String litresRel = null ; NetworkCatalogItem . CatalogType catalogType = NetworkCatalogItem . CatalogType . OTHER ; for ( ATOMLink link : entry . Links ) { }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "this ( copy , copy . primaryTerm ( ) ) ; } public ShardRouting ( ShardRouting copy , long primaryTerm ) { this ( copy . index ( ) , copy . id ( ) , copy . currentNodeId ( ) , copy . relocatingNodeId ( ) , copy . restoreSource ( ) , primaryTerm , copy . primary ( ) , copy . state ( ) , copy . unassignedInfo ( ) , copy . allocationId ( ) , true , copy . getExpectedShardSize ( ) ) ;", "import javax . xml . bind . DatatypeConverter ;", "Mono < Map < String , Map < StreamMessageId , Map < K , V > > > > read ( long timeout , TimeUnit unit , StreamMessageId id , String name2 , StreamMessageId id2 , String name3 , StreamMessageId id3 ) ;", "import java . io . IOException ; import java . io . PrintStream ; import java . io . Serializable ; import java . util . * ;", "if ( jj_3R_237 ( ) )", "TransactionResult res = new TransactionResult ( TransactionResult . Code . SUCCESS , returns , logs , 0 ) ;", "import org . cometd . bayeux . server . BayeuxContext ;", "boolean checkPassed = false ; if ( item . isTU ( config . getTransactionUnitsIssuerKey ( ) ) ) { checkPassed = item . paymentCheck ( config . getTransactionUnitsIssuerKey ( ) ) ; } else { checkPassed = item . check ( ) ; } if ( item instanceof Contract ) { debug ( \"check cost: \" + ( ( Contract ) item ) . getQuantiser ( ) . getQuantaSum ( ) + \"/\" + ( ( Contract ) item ) . getQuantiser ( ) . getQuantaLimit ( ) ) ; } debug ( \"Contract limit: \" + Contract . getTestQuantaLimit ( ) ) ; if ( checkPassed ) { }", "import org . elasticsearch . index . seqno . SequenceNumbersService ; import org . elasticsearch . index . shard . DocsStats ;", "public static boolean logTransportEvent ( String preamble , String transportSpecificInfoXml , InterfaceActivityDirection msgDirection , byte buf [ ] , int offset , int byteLength , String token ) { if ( DiagLevel . getLevel ( Mod . tran ) == DetailLevel . OFF || ! token . equals ( SDL_LIB_TRACE_KEY ) ) { return false ; } }", "this . toDo_ = new ActivationStack < Conclusion > ( ) ; this . subsumers_ = new ArrayHashSet < IndexedClassExpression > ( 13 ) ;", "import org . apache . sis . internal . netcdf . IOTestCase ;", "if ( statement . getParent ( ) . getStatementType ( ) == DbObjType . TABLE ) { if ( statement instanceof PgForeignKey ) { return false ; } PgStatement newTable = getObjectFromDB ( statement . getParent ( ) , newDb ) ; if ( newTable == null ) { return true ; } }", "result . put ( SubscribeVehicleDataResponse . KEY_SPEED , TestValues . GENERAL_VEHICLEDATARESULT_LIST . get ( VehicleDataType . VEHICLEDATA_SPEED . ordinal ( ) ) . serializeJSON ( ) ) ; result . put ( SubscribeVehicleDataResponse . KEY_RPM , TestValues . GENERAL_VEHICLEDATARESULT_LIST . get ( VehicleDataType . VEHICLEDATA_RPM . ordinal ( ) ) . serializeJSON ( ) ) ; result . put ( SubscribeVehicleDataResponse . KEY_EXTERNAL_TEMPERATURE , TestValues . GENERAL_VEHICLEDATARESULT_LIST . get ( VehicleDataType . VEHICLEDATA_EXTERNTEMP . ordinal ( ) ) . serializeJSON ( ) ) ; result . put ( SubscribeVehicleDataResponse . KEY_FUEL_LEVEL , TestValues . GENERAL_VEHICLEDATARESULT_LIST . get ( VehicleDataType . VEHICLEDATA_FUELLEVEL . ordinal ( ) ) . serializeJSON ( ) ) ; result . put ( SubscribeVehicleDataResponse . KEY_PRNDL , TestValues . GENERAL_VEHICLEDATARESULT_LIST . get ( VehicleDataType . VEHICLEDATA_PRNDL . ordinal ( ) ) ; result . put ( SubscribeVehicleDataResponse . KEY_GENERAL_VEHICLEDATARESULT_LIST . get ( VehicleDataType . VEHICLEDATA_FUELLEVEL . ordinal ( ) ) . serializeJSON ( ) ) ; result . put ( SubscribeVehicleDataResponse . KEY_PRNDL . get ( VehicleDataType . VEHICLEDATA_PRNDL . ordinal ( ) ) . serializeJSON ( )", "if ( stack . isValid ( ) && stack . getItem ( ) == null ) { }", "private SpliceRuntimeContext . Side side = SpliceRuntimeContext . Side . LEFT ;", "* Get mbcs string value '\u00e5\u0137\u012c\u00e9\u00bd\u0126\u00e4\u00b8\u0124\u00e7\u012d\u013d\u00e7\u012d\u013e\u00ef\u00a7\u00b1\u00ef\u00a4\u00ac\u00ef\u00a7\u00b1\u00ef\u00a8\u012e\u00ef\u00a8\u00a9\u00cb\u012c\u00e2\u0138\u0129\u00e2\u0138\u012a\u00e3\u0122\u0140\u00e3\u0122\u00a1\u00ef\u00bf\u00a4\u00e2\u0126\u00a1\u00e3\u012a\u00b1\u00e2\u0122\u0132\u00e3\u0125\u00bc\u00ef\u00b9\u00a1\u00ef\u00b9\u00a2\u00ef\u00b9\u00ab\u00e3\u0122\u0123\u00e3\u0122\u0135\u00e2\u0127\u00b0\u00e2\u0127\u00b9\u00e2\u0134\u012a\u00e2\u0124\u00ac\u00e3\u012a\u0142\u00e3\u012a\u00a9\u00e2\u0127\u0142\u00e2\u0127\u00ab\u00ef\u00bc\u0123\u00ef\u00bf\u00a3\u00e3\u0123\u0123\u00e3\u0124\u0135\u00e3\u0124\u00a1\u00e3\u0125\u00b6\u00ce\u0133\u00ef\u00b8\u00b4\u00d0\u0132\u00d0\u00af\u00d0\u00b0\u00d1\u0131\u00c4\u0123\u00c9\u00a1\u00e3\u0126\u0127\u00e3\u0126\u00a9\u00e2\u0136\u0122\u00e2\u0137\u012d\u00ef\u00b8\u00b5\u00ef\u00b9\u0126\u00ef\u00b8\u00bb\u00ef\u00b8\u00b1\u00ef\u00b8\u00b3\u00ef\u00b8\u00b4\u00e2\u0127\u00b0\u00e2\u0127\u00b9\u00c9\u0133\u00ee\u0141\u0129\u00c9\u00a1\u00e3\u0122\u0129\u00e3\u0122\u00be\u00e2\u00bf\u00bb\u00e2\u00ba\u0123\u00ee\u00a1\u0125\u00e4\u013e\u00a3\u00ee\u00a1\u00a4\u00e2\u0124\u00ac '", "sendBeforeTextChanged ( text ) ; CharSequence oldValue = this . text ;", "public static class Builder { private CommandBus localCommandBus ; private RestOperations restOperations ; private Serializer serializer ; public Builder localCommandBus ( CommandBus localCommandBus ) { assertNonNull ( localCommandBus , \"Local CommandBus may not be null\" ) ; this . localCommandBus = localCommandBus ; return this ; } public Builder restOperations ( RestOperations restOperations ) { assertNonNull ( restOperations , \"RestOperations may not be null\" ) ; this . restOperations = restOperations ; return this ; } public Builder serializer ( Serializer serializer ) { assertNonNull ( serializer , \"Serializer may not be null\" ) ; this . serializer = serializer ; return this ; } public SpringHttpCommandBusConnector build ( ) { return new SpringHttpCommandBusConnector ( this ) ; } protected void validate ( ) { assertNonNull ( localCommandBus , \"The local CommandBus is a hard requirement and should be provided\" ) ; assertNonNull ( restOperations , \"The RestOperations is a hard requirement and should be provided\" ) ; assertNonNull ( serializer , \"The Serializer is a hard requirement and should be provided\" ) ; } }", "if ( config . isLocalMappingFile ( ) ) { this . dataset = new AutoReloadableDataset ( loader , config . getLocalMappingFilename ( ) , config . getAutoReloadMapping ( ) ) ; } else { this . dataset = new AutoReloadableDataset ( loader , null , false ) ; } if ( loader . getMapping ( ) . configuration ( ) . getUseAllOptimizations ( ) ) { }", "", "", "import io . netty . channel . ChannelHandlerContext ; import io . netty . channel . EventLoopGroup ; import io . netty . channel . nio . NioEventLoopGroup ; import io . netty . channel . socket . nio . NioSocketChannel ; import io . netty . handler . codec . http . DefaultFullHttpRequest ; import io . netty . handler . codec . http . FullHttpRequest ; import io . netty . handler . codec . http . HttpHeaders ;", "{ jj_expentries . clear ( ) ; boolean [ ] la1tokens = new boolean [ 112 ] ; if ( jj_kind >= 0 ) { la1tokens [ jj_kind ] = true ; jj_kind = - 1 ; } for ( int i = 0 ; i < 190 ; i ++ ) { if ( jj_la1 [ i ] == jj_gen ) { for ( int j = 0 ; j < 32 ; j ++ ) { if ( ( jj_la1_0 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ j ] = true ; } if ( ( jj_la1_1 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ 32 + j ] = true ; } if ( ( jj_la1_2 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ 64 + j ] = true ; } if ( ( jj_la1_3 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ 96 + j ] = true ; } } } } for ( int i = 0 ; i < 96 ; i ++ ) { jj_expentry = new int [ jj_expentries . size ( ) ] [ ] ; for ( int i = 0 ; i < jj_expentries . size ( ) ; i ++ ) { jj_expentries . get ( i ) ; } return new ParseException ( token , exptokseq , tokenImage ) ; } private int trace_indent = 0 ; private boolean trace_enabled ; final public boolean trace_enabled ( ) { return trace_enabled ; }", "log . debug ( \"Received invoice for payment with balance of 0 {} \" , invoice ) ;", "assertEquals ( \"EPSG\" , builder . properties . get ( ReferenceIdentifier . CODESPACE_KEY ) ) ; assertSame ( Citations . EPSG , builder . properties . get ( Identifier . AUTHORITY_KEY ) ) ; builder . setCodeSpace ( IOGP , \"EPSG\" ) ; assertEquals ( \"EPSG\" , builder . properties . get ( ReferenceIdentifier . CODESPACE_KEY ) ) ; assertSame ( IOGP , builder . properties . get ( Identifier . AUTHORITY_KEY ) ) ;", "static { LibraryLoader . load ( ) ; } private static final ViewFactory VIEW_FACTORY = ViewProxyFactory . getInstance ( ) ;", "import org . ranksys . core . util . tuples . Tuple2io ; import static org . ranksys . core . util . tuples . Tuples . tuple ; import org . jooq . lambda . tuple . Tuple3 ;", "* Copyright ( c ) 2000 , 2018 IBM Corporation and others . * All rights reserved . This program and the accompanying materials * are made available under the terms of the Eclipse Public License 2.0", "if ( functionViewGroup . isShown ( ) ) { functionViewGroup . clearAnimation ( ) ; functionViewGroup . startAnimation ( anim ) ; } if ( specialSymbolChooseViewGroup . isShown ( ) ) { specialSymbolChooseViewGroup . clearAnimation ( ) ; specialSymbolChooseViewGroup . startAnimation ( anim ) ; } if ( quickSymbolViewGroup . isShown ( ) ) { quickSymbolViewGroup . clearAnimation ( ) ; quickSymbolViewGroup . startAnimation ( anim ) ; } if ( prefixViewGroup . isShown ( ) ) { prefixViewGroup . clearAnimation ( ) ; prefixViewGroup . startAnimation ( anim ) ; } preEditPopup . setButtonAlpha ( autoDownAlphaTop ) ;", "final Dimension fullSize = new Dimension ( 2000 , 1000 ) ; final Info info = Info . builder ( ) . withSize ( fullSize ) . build ( ) ; final OperationList opList = new OperationList ( new Identifier ( \"cats\" ) , new Encode ( Format . JPG ) ) ; final RequestContext context = new RequestContext ( ) ; context . setOperationList ( opList , fullSize ) ; DelegateProxyService service = DelegateProxyService . getInstance ( ) ; DelegateProxy proxy = service . newDelegateProxy ( context ) ; opList . applyNonEndpointMutations ( info , proxy ) ;", "Library lib = new Library ( dependency . key ( ) , dependency . version ( ) ) ; index . addResource ( lib ) ; resourcePersister . persist ( ) ;", "prop . setComment ( \"Disable Aluminum Ore Gen on Asteroids.\" ) ; prop . setLanguageKey ( \"gc.configgui.disable_aluminum_gen_asteroids\" ) ;", "query . append ( VariationDBAdaptor . QueryParams . ID . key ( ) , queryCommandOptions . id ) ; Iterator iterator = variantDBAdaptor . nativeIterator ( query , queryOptions ) ;", "deleteSFTPFile ( srcPath . path ) ; break ; default : if ( ! new File ( readResult . filePath ) . delete ( ) ) { error = String . format ( \"Failed to delete file '%s'\" , readResult . filePath ) ; }", "private void submitStandByTask ( ) { try { int length = readyToSubmitTaskQueue . size ( ) ; for ( int i = 0 ; i < length ; i ++ ) { TaskInstance task = readyToSubmitTaskQueue . peek ( ) ; if ( task . taskCanRetry ( ) ) { TaskInstance tmpTask = processService . findTaskInstanceById ( task . getId ( ) ) ; if ( tmpTask != null && tmpTask . getState ( ) . equals ( ExecutionStatus . FORCED_SUCCESS ) ) { task . setState ( tmpTask . getState ( ) ) ; logger . info ( \"task: {} has been forced success, put it into complete task list and stop retrying\" , task . getName ( ) ) ; removeTaskFromStandbyList ( task ) ; completeTaskList . put ( task . getName ( ) , task ) ; submitPostNode ( task . getName ( ) ) ; continue ; } } DependResult dependResult = getDependResultForTask ( task ) ; if ( DependResult . SUCCESS == dependResult ) { if ( retryTaskIntervalOverTime ( task ) ) { submitTaskExec ( task ) ; removeTaskFromStandbyList ( task ) ; } } else if ( DependResult . FAILED == dependResult ) { dependFailedTask . put ( task . getName ( ) , task ) ;", "@ Override", "private final HashMap < Class < ? > , HashSet < Object > > mEventReceivers = new HashMap < Class < ? > , HashSet < Object > > ( ) ;", "import android . view . View . OnClickListener ; import android . widget . CompoundButton ; import android . widget . CompoundButton . OnCheckedChangeListener ; import android . widget . RadioButton ;", "AssertJUnit . assertEquals ( \"Number of success events\" , 1 , inEventCount ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , removeEventCount ) ; AssertJUnit . assertTrue ( \"Event arrived\" , eventArrived ) ;", "private OpenDolphinFactory openDolphinFactory ; private ControllerRepository controllerRepository ;", "Provider < DiffRootResource > diffRootResource , Provider < ModificationsRootResource > modificationsRootResource , Provider < FileHistoryRootResource > fileHistoryRootResource ) {", "public static final String SWAGGER_DOCKET_CONFIG = \"false\" ; public static final String USE_OPTIONAL = \"false\" ;", "String retString = doiDataCiteRegisterService . createIdentifierLocal ( identifier , metadata , dvObject ) ; logger . log ( Level . FINE , \"create DOI identifier retString : {0}\" , retString ) ;", "result . setUser ( ( User ) session . get ( StorePackage . eINSTANCE . getUser ( ) , input . getUserId ( ) , Query . getDefault ( ) ) ) ;", ". next ( \"cuts\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"\" ) . next ( \"bricks-solid\" )", "import java . lang . Thread . UncaughtExceptionHandler ;", "", "public DefaultPartitionManager ( List < IdentityConfiguration > configurations , EventBridge eventBridge , IdGenerator idGenerator , String partitionManagementConfigName ) { }", "Log . i ( TAG , \"CommonObserver update, key=\" + observeKey ) ; if ( observeKey . equals ( dataManager . getMessageDataManager ( ) . getObserverKey ( ) ) && ( ( ( Bundle ) data ) . getSerializable ( BaseManager . EXTRA_OBJECT ) instanceof Message ) ) { Message message = getObjFromBundle ( ( Bundle ) data ) ; if ( message . getDialogOccupant ( ) != null && message . getDialogOccupant ( ) . getDialog ( ) != null ) { updateDialog ( message . getDialogOccupant ( ) . getDialog ( ) . getDialogId ( ) ) ; } } else if ( observeKey . equals ( dataManager . getQBChatDialogDataManager ( ) ) { Log . d ( TAG , \"CommonObserver update, key=\" + observeKey ) ; if ( observeKey . equals ( dataManager . getQBChatDialogDataManager ( ) ) ) { Dialog dialog = getObjFromBundle ( ( Bundle ) data ) ; if ( dialog != null ) { updateDialog ( dialog . getDialogId ( ) ) ; } } else if ( observeKey . equals ( observeKey ) ) { updateDialogsList ( ) ; } }", "try ( Git git = new Git ( db ) ) { git . branchCreate ( ) . setName ( \"initial\" ) . call ( ) ; RevCommit second = git . commit ( ) . setMessage ( \"second commit\" ) . call ( ) ; assertEquals ( toString ( \" initial\" , \"* master\" ) , toString ( execute ( \"git branch --contains 6fd41be\" ) ) ) ; assertEquals ( \"* master\" , toString ( execute ( \"git branch --contains \" + second . name ( ) ) ) ) ; }", "OptionValues options , CompilationResult compilationResult ) { this ( codeCache , foreignCalls , frameMap , asm , dataBuilder , frameContext , options , compilationResult , EconomicMap . create ( Equivalence . DEFAULT ) ) ;", "setState ( 451 ) ; _errHandler . sync ( this ) ;", "import java . io . IOException ;", "private static PropertiesHolder propertiesHolder = CDI . current ( ) . select ( PropertiesHolder . class ) . get ( ) ; private static BlockchainConfig blockchainConfig = CDI . current ( ) . select ( BlockchainConfig . class ) . get ( ) ; private BlockchainConfigUpdater blockchainConfigUpdater ;", "protected final Map < String , FileEditor > openFileEditors ; protected final List < String > fileIds ; protected final DeckPanel deckPanel ; protected FileEditor selectedFileEditor ;", "public class BlockGenericPipe extends BlockBuildCraft implements IColorRemovable , ICustomHighlight , ICustomStateMapper , ICustomPipeConnection { public static final BuildCraftExtendedProperty < TileGenericPipe . CoreState > PIPE_CORE_STATE = BuildCraftExtendedProperty . createExtended ( \"core_state\" , TileGenericPipe . CoreState . class ) ; public static final BuildCraftExtendedProperty < Pipe < ? > > PIPE_RENDER_STATE = BuildCraftExtendedProperty . createExtended ( \"render_state\" , PipeRenderState . class ) ; public static final BuildCraftExtendedProperty < PipePluggableState > PIPE_PLUGGABLE_STATE = BuildCraftExtendedProperty . createExtended ( \"pluggable_state\" , PipePluggableState . class ) ; public static final BuildCraftExtendedProperty < Pipe > PIPE_PIPE = BuildCraftExtendedProperty . createExtended ( \"pipe_pipe\" , Pipe . class ) ; public static Map < ItemPipe , Class < ? extends Pipe < ? > > > pipes = Maps . newHashMap ( ) ; public static Map < BlockPos , Pipe < ? > > pipeRemoved = Maps . newHashMap ( ) ; private static long lastRemovedDate = - 1 ; private static final EnumFacing [ ] DIR_VALUES = EnumFacing . values ( ) ; public enum Part { Pipe , Pluggable , Wire } public static class RaytraceResult { public final Part hitPart ; public final MovingObjectPosition movingObjectPosition ; public final IdentifiableAABB < Part > boundingBox ; public final EnumFacing sideHit , partSide ; RaytraceResult ( MovingObjectPosition movingObjectPosition , IdentifiableAABB < Part > boundingBox , EnumFacing side , EnumFacing partSide ) { this . hitPart = boundingBox . identifier ; this . movingObjectPosition = movingObjectPosition ; this . boundingBox = boundingBox ; this . sideHit = side", "setState ( 289 ) ; _errHandler . sync ( this ) ;", "import org . datacleaner . database . DatabaseDriverDescriptor ; import org . datacleaner . guice . DCModule ;", "", "String txnHash ;", "FootstepDataMessage fs4 = createRelativeFootStep ( doorPose , startStep . getOppositeSide ( ) , new Point3D ( 0.36887783182356804 + offsetLeftRight , - 0.7234607322382425 , - 0 ) ,", "names = { \"--monitoring_project_id\" } , description = \"Stackdriver monitoring project id, must be the same as the project id in which the adapter is running\"", "addBefore ( list , ActionFiltersProcessor . class , new WxUserInjectProcessor ( ) ) ; addBefore ( list , ActionFiltersProcessor . class , new WxJsSdkConfigProcessor ( ) ) ;", "public ServiceCall arrayStringSsvValidAsync ( List < String > arrayQuery , final ServiceCallback < Void > serviceCallback ) { Validator . validate ( arrayQuery , serviceCallback ) ; Call < ResponseBody > call = service . arrayStringSsvValid ( this . client . getMapperAdapter ( ) . serializeList ( arrayQuery , CollectionFormat . SSV ) ) ; final ServiceCall serviceCall = new ServiceCall ( call ) ; }", "final FindStreamCriteria findDeleteStreamCriteria = new FindStreamCriteria ( ) ; for ( final Stream stream : streamList ) { if ( ( latestStreamTaskId == null || ! latestStreamTaskId . equals ( stream . getStreamTaskId ( ) ) ) && ! StreamStatus . DELETED . equals ( stream . getStatus ( ) ) ) { findDeleteStreamCriteria . obtainStreamIdSet ( ) . add ( stream ) ; } }", "import java . io . Serializable ;", "setState ( 423 ) ;", "import static com . google . inject . util . Modules . override ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ;", "WorkflowHelper . AssetResourceResolverPair getAssetFromPayload ( WorkItem item , WorkflowSession workflowSession ) ; String getExtension ( String mimetype ) ; String [ ] buildArguments ( MetaDataMap metaData ) ; List < String > getValuesFromArgs ( String name , String args [ ] ) ; double getQuality ( double base , String qualityStr ) ; final class AssetResourceResolverPair { public final Asset asset ; public final ResourceResolver resourceResolver ; public AssetResourceResolverPair ( Asset asset , ResourceResolver resourceResolver ) { this . asset = asset ; this . resourceResolver = resourceResolver ; } } Resource getPageOrAssetResource ( ResourceResolver resourceResolver , String path ) ; boolean isPathTypedPayload ( WorkflowData workflowData ) ; boolean isPathTypedPayload ( com . adobe . granite . workflow . exec . WorkflowData workflowData ) ;", "logger . info ( \"Loading OverrideActionService...\" ) ; Lookup . getDefault ( ) . lookup ( OverrideActionService . class ) ; logger . info ( \"Loading MacroService...\" ) ;", "default Observable < ChannelHandlerContext > disconnectObservable ( ) { throw new NotYetImplementedForExchangeException ( ) ; } default Observable < Throwable > reconnectFailure ( ) { throw new NotYetImplementedForExchangeException ( ) ; } default Observable < Long > messageDelay ( ) { throw new NotYetImplementedForExchangeException ( ) ; } default void resubscribeChannels ( ) { throw new NotYetImplementedForExchangeException ( ) ; }", "validateCashFlow ( errors , locale ) ;", "if ( i + 1 >= beatmap . objects . length || osu . objects [ i + 1 ] . isNewCombo ( ) )", "import java . util . Arrays ; import java . util . List ; import static org . mockito . Matchers . anyInt ;", "", "@ Override public MultiOutResult testMultiOutMethod ( ) { return new MultiOutResult ( ) ; } @ Override public void assertMessageContextActive ( ) { assertTrue ( JoynrJeeMessageContext . getInstance ( ) . isActive ( ) ) ; } @ Override public void setSubscriptionPublisher ( SubscriptionPublisher subscriptionPublisher ) { assertFalse ( JoynrJeeMessageContext . getInstance ( ) . isActive ( ) ) ; }", "case 269 : jjtn000 . expression = Expression ( ) ;", "import static org . bladerunnerjs . api . spec . utility . BRJSAssertions . * ; import static org . mockito . Mockito . * ; import static org . junit . Assert . * ;", "for ( Port p : ThingMLHelpers . allPorts ( inst . getType ( ) ) ) { }", "@ Ignore ( \"#92:under construction\" ) public static class NotWorking { @ Test public void issue92_1 ( ) { trimming ( \"1.+2*3 / 4 - 5\" ) . to ( \"-3\" ) ; } @ Test @ Ignore ( \"#92:under construction\" ) public void issue92_1 ( ) { trimming ( \"1.+2*3 / 4 - 5\" ) . to ( \"-2.5\" ) ; } @ Test @ Ignore ( \"#92:under construction\" ) public void issue92_2 ( ) { trimming ( \"1.\" ) . to ( null ) ; } @ Test @ Ignore ( \"#92:under construction\" ) public void issue92_3 ( ) { trimming ( \"1+1\" ) . to ( \"2\" ) ; } @ Test @ Ignore ( \"#92:under construction\" ) public void issue92_4 ( ) { trimming ( \"1+1+3\" ) . to ( \"2+3\" ) . to ( \"5\" ) ; } @ Test @ Ignore ( \"#92:under construction\" ) public void issue92_5 ( ) { trimming ( \"5.*5.\" ) . to ( \"25.\" ) ; } @ Test @ Ignore ( \"#92:under construction\" ) public void issue92_7 ( ) { trimming ( \"3./4\" ) . to ( \"0.75\" ) ; } @ Test @ Ignore ( \"#92:under construction\" ) public void issue92_7 ( ) { trimming ( \"3./4\" ) . to ( \"0.75\" ) ; } @ Test @ Ignore ( \"#92:3./4\" ) . to ( \"25.\" ) ; } @ Test @ Ignore ( \"#92:under construction\" ) public void issue92_7 ( ) { trimming ( \"3./4\" ) .", "import hudson . model . TaskListener ; import hudson . scm . ChangeLogParser ; import hudson . scm . NullSCM ; import hudson . scm . PollingResult ; import hudson . scm . SCM ; import hudson . scm . SCMRevisionState ; import hudson . tasks . JavadocArchiver ;", "GPTimings . PLAYER_INTERACT_INVENTORY_OPEN_EVENT . startTimingIfSync ( ) ; final Cause cause = event . getCause ( ) ; final EventContext context = cause . getContext ( ) ; final BlockSnapshot blockSnapshot = context . get ( EventContextKeys . BLOCK_HIT ) . orElse ( BlockSnapshot . NONE ) ;", "import com . cloud . storage . Storage ; import com . cloud . storage . Storage . FileSystem ; import com . cloud . storage . Storage . ImageFormat ; import com . cloud . storage . Storage . TemplateType ;", "public static DeviceIdentifier convertToDeviceIdentifierObject ( String deviceId ) { DeviceIdentifier identifier = new DeviceIdentifier ( ) ; identifier . setId ( deviceId ) ; identifier . setType ( DeviceManagementConstants . MobileDeviceTypes . MOBILE_DEVICE_TYPE_ANDROID ) ; return identifier ; }", "monitor , monitoringLevel , listener , antlrTasks ) ;", "", "import com . gentics . mesh . core . data . project . HibProject ; import com . gentics . mesh . core . rest . MeshEvent ;", "reqMigStepCheckbox . setId ( SPUIComponentIdProvider . DIST_ADD_MIGRATION_CHECK ) ;", "setState ( 772 ) ;", "@ Override public void onFailure ( LowLevelPutException e , Object keyNum , ObjectContainer container , ClientContext context ) { }", "", "SortedList < Axis . TickMark < X > > tickMarks = getXAxis ( ) . getTickMarks ( ) . sorted ( Comparator . comparing ( Axis . TickMark :: getPosition ) ) ;", "public class ScionInstance { private GenericScionServer server ; private IProject project ; private IFile loadedFile ; private JSONObject cabalDescription ; private Map < String , CabalPackage [ ] > packagesByDB ; private List < Component > components ; private CabalComponentResolver resolver ; private Component lastLoadedComponent ; private List < String > exposedModulesCache ; private Map < IFile , LoadInfo > loadInfos ; private static final ListenerList listeners = new ListenerList ( ) ; public ScionInstance ( GenericScionServer server , IProject project , CabalComponentResolver resolver ) { this . server = server ; this . project = project ; this . resolver = resolver ; this . loadedFile = null ; this . components = new LinkedList < Component > ( ) ; this . exposedModulesCache = null ; this . loadInfos = new HashMap < IFile , LoadInfo > ( ) ; } public final IProject getProject ( ) { return project ; } public static void addListener ( IScionServerEventListener listener ) { listeners . add ( listener ) ; } public static void removeListener ( IScionServerEventListener listener ) { listeners . remove ( listener ) ; } public static void notifyListeners ( ScionServerEventType evType ) { ScionServerEvent ev = new ScionServerEvent ( server , evType ) ; for ( Object listener : listeners . getListeners ( ) ) { IScionServerEventListener evListener = ( IScionServerEventListener ) listener ; evListener . processScionServerEvent ( ev ) ; } } public void setServerExecutable ( final GenericScionServer newServer ) throws ScionServerEventType . EXECUTABLE_CHANGED ) { if ( ! server . equals ( newServer ) ) { stop ( true ) ; server = newServer ( server , evType ) ; for ( Object listener : listeners . getListeners ( ) ) { IScionServerEventListener evListener . processScionServerEvent (", "import java . io . * ;", "private String getDocReference ( BaseEntity entity ) { if ( entity == null ) { return \"\" ; } return \"(\" + DocRefUtil . create ( entity ) . toString ( ) + \")\" ; }", "import uk . gov . gchq . gaffer . commonutil . CommonConstants ;", "return Utils . newSmallArrayList ( ) ;", "import org . uma . jmetal . measure . impl . CountingMeasure ; import org . uma . jmetal . measure . impl . DurationMeasure ;", "Mono < Map < String , Map < StreamMessageId , Map < K , V > > > > read ( int count , StreamMessageId id , Map < String , StreamMessageId > nameToId ) ;", "public class TestRemoteCatalogRequest", "Cursor executable = cursor ( groupScan , adapter ) ; RowBase [ ] expected = new RowBase [ ] { row ( customerRowType , 1L , \"XYZXYZ\" ) , row ( orderRowType , 11L , 1L , \"ori\" ) , row ( itemRowType , 111L , 11L ) , row ( itemRowType , 112L , 11L ) , row ( orderRowType , 12L , 1L , \"david\" ) , row ( itemRowType , 121L , 12L ) , row ( itemRowType , 122L , 12L ) , row ( customerRowType , 2L , \"ABCABC\" ) , row ( orderRowType , 21L , 2L , \"tom\" ) , row ( itemRowType , 211L , 21L ) , row ( itemRowType , 212L , 21L ) , row ( orderRowType , 22L , 2L , \"jack\" ) , row ( itemRowType , 221L , 22L ) , row ( itemRowType , 222L , 22L ) }", "", "markBlockForUpdate ( ) ;", "return new RacialEffectUtil ( Util . capitaliseSentence ( race . getName ( false ) ) + \" ears transformation.\" ) { @ Override public String applyEffect ( ) { return target . setEarType ( RacialBody . valueOfRace ( race ) . getEarType ( ) ) ; } } ;", "import org . janelia . saalfeldlab . paintera . viewer3d . ViewFrustum ; import org . janelia . saalfeldlab . util . concurrent . HashPriorityQueueBasedTaskExecutor ; import org . janelia . saalfeldlab . paintera . state . label . ConnectomicsLabelState ;", "DefaultChannel channel = new DefaultChannel ( mock ( Context . class ) , UUIDUtils . randomUUID ( ) . toString ( ) , persistence , ingestion , mAppCenterHandler ) ; Channel . Listener listener = spy ( new AbstractChannelListener ( ) ) ; channel . addListener ( listener ) ; channel . addGroup ( TEST_GROUP , 50 , BATCH_TIME_INTERVAL , MAX_PARALLEL_BATCHES , null , null ) ;", "import org . droidplanner . core . survey . Footprint ;", "private double preferredSlaveScaleFactor = 1.5 ; private double highCpuSlaveCutOff = 1.5 ; private double highMemorySlaveCutOff = 0.5 ; private Optional < Integer > expectedRacksCount = Optional . empty ( ) ;", "public Map < String , Collection < String > > getIdentifiersWithParents ( Session session ) { Criteria criteria = session . createCriteria ( FeatureOfInterest . class ) . createAlias ( FeatureOfInterest . PARENTS , \"pfoi\" , JoinType . LEFT_OUTER_JOIN ) . setProjection ( Projections . projectionList ( ) . add ( Projections . property ( FeatureOfInterest . IDENTIFIER ) ) . add ( Projections . property ( \"pfoi.\" + FeatureOfInterest . IDENTIFIER ) ) ) ; }", "import java . net . URI ; import static org . junit . jupiter . api . Assertions . * ;", "if ( settings . isShouldResize ( ) ) { final Bitmap newBitmap = ImageUtils . resize ( bitmap , settings . getWidth ( ) , settings . getHeight ( ) , settings . getPreserveAspectRatio ( ) ) ; bitmap = replaceBitmap ( bitmap , newBitmap ) ; } return bitmap ;", "menuManager . removeSwaps ( \"Fairy ring\" ) ; menuManager . removeSwaps ( \"Tree\" ) ; menuManager . removePriorityEntry ( \"Smith All\" ) ; menuManager . removePriorityEntry ( \"Smith All Sets\" ) ; menuManager . removePriorityEntry ( \"Tan All\" ) ; menuManager . removePriorityEntry ( \"Buy-plank\" , \"Sawmill operator\" ) ; menuManager . removePriorityEntry ( \"Buy All\" ) ; menuManager . removePriorityEntry ( \"Kandarin Monastery\" ) ; menuManager . removePriorityEntry ( \"Monastery Teleport\" ) ; menuManager . removePriorityEntry ( \"Teleport\" , \"Crafting cape\" ) ; menuManager . removePriorityEntry ( \"Teleport\" , \"Crafting cape(t)\" ) ; menuManager . removePriorityEntry ( \"Tele to poh\" , \"Construct. cape\" ) ; menuManager . removePriorityEntry ( \"Tele to poh\" , \"Construct. cape(t)\" ) ; menuManager . removePriorityEntry ( \"Teleport\" , \"Crafting cape(t)\" ) ; menuManager . removePriorityEntry ( \"Tele to poh\" , \"Construct. cape(t)\" ) ; menuManager . removePriorityEntry ( \"Teleport\" , \"Pickpocket\" ) ; menuManager . removePriorityEntry ( \"Spellbook\" , \"Magic cape\" ) ; menuManager . removePriorityEntry ( \"Spellbook\" , \"Magic cape(t)\" ) ; menuManager . removePriorityEntry ( \"Spellbook\" , \"Magic cape(t)\" ) ; menuManager . removePriorityEntry ( \"Spellbook\" ) ; menuManager . removePriorityEntry ( \"Pickpocket\" ) ; menuManager . removePriorityEntry (", "import net . minecraft . util . math . MathHelper ;", "static final int FIRST_REQUEST = 11 ; static final int SECOND_REQUEST = 22 ; static final int THIRD_REQUEST = 33 ; boolean onResultCalled = false ; boolean onResultWithDataCalled = false ; boolean onActivityResultWithResultCodeAndDataCalled = false ; boolean onActivityResultWithDataAndResultCodeCalled = false ; boolean onResultWithIntResultCodeCalled = false ; boolean onResultWithIntegerResultCodeCalled = false ; private static final int FORTH_REQUEST = 44 ;", "import org . apache . accumulo . core . client . Scanner ; import org . apache . accumulo . core . client . TableNotFoundException ; import org . apache . accumulo . core . conf . AccumuloConfiguration ; import org . apache . accumulo . core . conf . Property ; import org . apache . accumulo . core . data . Key ; import org . apache . accumulo . core . data . Range ; import org . apache . accumulo . core . data . Value ;", "AppViewAnalytics appViewAnalytics , StoreAnalytics storeAnalytics , AppViewNavigator appViewNavigator , AppViewManager appViewManager , AptoideAccountManager accountManager , Scheduler viewScheduler , CrashReport crashReport , PermissionManager permissionManager , PermissionService permissionService ) {", "if ( layer == null ) return false ; return true ;", "ClientRegistry . bindTileEntitySpecialRenderer ( TileQuarry . class , new RenderQuarry ( ) ) ; ClientRegistry . bindTileEntitySpecialRenderer ( TileBuilder_Neptune . class , new RenderBuilder ( ) ) ;", "", "private static WaypointType parseWaypointType ( final String input ) { final String lowerInput = StringUtils . substring ( input , 0 , 20 ) . toLowerCase ( Locale . getDefault ( ) ) ; for ( WaypointType wpType : WaypointType . values ( ) ) { if ( lowerInput . contains ( wpType . getL10n ( ) . toLowerCase ( Locale . getDefault ( ) ) ) ) { return wpType ; } if ( lowerInput . contains ( wpType . id ) ) { return wpType ; } if ( lowerInput . contains ( wpType . name ( ) . toLowerCase ( Locale . US ) ) ) { return wpType ; } } return WaypointType . WAYPOINT ; } private boolean hasIdenticalWaypoint ( final Geopoint point ) { for ( final Waypoint waypoint : waypoints ) { if ( waypoint . getCoords ( ) == point ) { return true ; } } return false ; }", "", "this . setPolytomies ( polytomies ) ; this . algorithm = new CondensedTraversalWeightCalculator ( ) ;", "import com . tur0kk . thingiverse . gui . ThingiverseDialog ;", "if ( ( referenceBinding = this . environment . askForType ( this , name , mod ) ) != null ) { }", "private AlertManager _alertMgr ; private long _msId ; private ConnectionConcierge _concierge ; @ Inject ClusterDao _clusterDao ; private Map < Long , Long > _pingMap ; protected AgentMonitor ( ) { } public AgentMonitor ( long msId , HostDao hostDao , VMInstanceDao vmDao , DataCenterDao dcDao , HostPodDao podDao , AgentManagerImpl agentMgr , AlertManager alertMgr , long pingTimeout ) { super ( \"AgentMonitor\" ) ; _msId = msId ; }", "@ Override public ExecutionPolicy getExecutionPolicy ( String name ) { throw new UnsupportedOperationException ( ) ; }", "", "", "Queue < AntlrTask < ? > > antlrTasks = new ArrayDeque < > ( 1 ) ; loadDatabase ( d , antlrTasks ) ; AntlrParser . finishAntlr ( antlrTasks ) ;", "items . add ( LocaleController . getString ( \"EditLink\" , R . string . EditLink ) ) ; icons . add ( R . drawable . baseline_edit_24 ) ;", "public String getAsyncExecutorTenantId ( ) { return asyncExecutorTenantId ; } public void setAsyncExecutorTenantId ( String asyncExecutorTenantId ) { this . asyncExecutorTenantId = asyncExecutorTenantId ; } public boolean isEnableHistoryCleaning ( ) { return enableHistoryCleaning ; } public void setEnableHistoryCleaning ( boolean enableHistoryCleaning ) { this . enableHistoryCleaning = enableHistoryCleaning ; } public String getHistoryCleaningTimeCycleConfig ( ) { return historyCleaningTimeCycleConfig ; } public void setHistoryCleaningTimeCycleConfig ( String historyCleaningTimeCycleConfig ) { this . historyCleaningTimeCycleConfig = historyCleaningTimeCycleConfig ; } public int getCleanInstancesEndedAfterNumberOfDays ( ) { return cleanInstancesEndedAfterNumberOfDays ; } public void setCleanInstancesEndedAfterNumberOfDays ( int cleanInstancesEndedAfterNumberOfDays ) { this . cleanInstancesEndedAfterNumberOfDays = cleanInstancesEndedAfterNumberOfDays ; } public HistoryCleaningManager getHistoryCleaningManager ( ) { return historyCleaningManager ; } public void setHistoryCleaningManager ( HistoryCleaningManager historyCleaningManager ) { this . historyCleaningManager = historyCleaningManager ; }", "synchronized public void setWriteAheadLoggingEnabled ( boolean enabled ) { }", "if ( serverId != null ) { final String securityServerAddress = GlobalConf . getSecurityServerAddress ( serverId ) ; if ( securityServerAddress == null ) { throw new CodedException ( X_INVALID_SECURITY_SERVER , \"Could not find security server \\\"%s\\\"\" , serverId ) ; } if ( ! hostNames . contains ( securityServerAddress ) ) { throw new CodedException ( X_INVALID_SECURITY_SERVER , \"Invalid security server \\\"%s\\\"\" , serviceProvider ) ; } hostNames = Collections . singleton ( securityServerAddress ) ; } String protocol = isSslEnabled ( ) ? \"https\" : \"http\" ; int port = getServerProxyPort ( ) ;", "for ( final Object seed : ( ( GetRDDOfElements ) operation ) . getInput ( ) ) { seeds . add ( ( EntitySeed ) seed ) ; }", "\"CREATE TABLE JS1 (\\n\" + \" ID INTEGER NOT NULL, \\n\" + \" DOC VARCHAR(8192),\\n\" + \" PRIMARY KEY(ID))\\n\" + \";\\n\" + \"CREATE PROCEDURE IdFieldProc AS\\n\" + \" SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\\n\" + \";\\n\" + \"CREATE PROCEDURE InnerFieldProc AS\\n\" + \" SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\\n\" + \";\\n\" + \"CREATE PROCEDURE NullFieldProc AS\\n\" + \" SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\\n\" + \";\\n\" + \"CREATE PROCEDURE IdArrayProc AS\\n\" + \" SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\\n\" + \";\\n\" + \"CREATE PROCEDURE IdArrayLengthProc AS\\n\" + \" SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" + \";\\n\" + \"CREATE PROCEDURE NullArrayLengthProc AS\\n\" + \" SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\\n\" + \";\\n\" + \" SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" + \";\\n\" + \";\\n\" + \" FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" + \";\\n\" + \";\\n\" + \" SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" + \";\\n\" + \";\\n\" +", "private static final int ISSUE_MENTION_SHOW_LIMIT = 1000 ;", "assertThat ( KunaOrder . builder ( ) . withOrderType ( LIMIT . name ( ) . toUpperCase ( ) ) . build ( ) . getOrderType ( ) ) . isEqualByComparingTo ( LIMIT ) ; assertThat ( KunaOrder . builder ( ) . withOrderType ( MARKET . name ( ) . toUpperCase ( ) ) . build ( ) . getOrderType ( ) ) . isEqualByComparingTo ( MARKET ) ; assertThat ( KunaOrder . builder ( ) . withOrderType ( LIMIT . name ( ) . toLowerCase ( ) ) . build ( ) . getOrderType ( ) ) . isEqualByComparingTo ( LIMIT ) ; assertThat ( KunaOrder . builder ( ) . withOrderType ( MARKET . name ( ) . toLowerCase ( ) ) . build ( ) . getOrderType ( ) ) . isEqualByComparingTo ( MARKET ) ; assertThat ( order ( ) . getOrderType ( ) ) . isEqualByComparingTo ( LIMIT ) ;", "return addFluid ( \"molten.\" + aMaterial . mName . toLowerCase ( Locale . ENGLISH ) , \"molten.autogenerated\" , \"Molten \" + aMaterial . mDefaultLocalName , aMaterial ,", "if ( ! index . origin ( ) . isRecovery ( ) ) { return false ; } else { }", "Arrays . asList ( ProjectDBAdaptor . QueryParams . ID . key ( ) , ProjectDBAdaptor . QueryParams . DATASTORES . key ( ) ) ) ; Project project = catalogManager . getProjectManager ( ) . get ( projectStr , queryOptions , sessionId ) . first ( ) ;", "@ Override protected void setUp ( ) { ThreddsServer . LIVE . assumeIsAvailable ( ) ; }", "import org . freeplane . core . util . TextUtils ; import org . freeplane . features . mode . Controller ; import org . freeplane . features . mode . ModeController ; import org . freeplane . core . util . LogUtils ;", "if ( transactionalPropertiesValue == null || ! \"insert_only\" . equalsIgnoreCase ( transactionalPropertiesValue ) ) { throw new MetaException ( \"The table must be stored using an ACID compliant format (such as ORC)\" ) ; }", "import com . google . common . collect . ImmutableList ;", "protected void createVerifyActionState ( final Flow flow ) { final var actionState = createActionState ( flow , STATE_ID_AUP_CHECK , \"acceptableUsagePolicyVerifyAction\" ) ; final var target = getRealSubmissionState ( flow ) . getTransition ( CasWebflowConstants . TRANSITION_ID_SUCCESS ) . getTargetStateId ( ) ; final TransitionSet transitionSet = actionState . getTransitionSet ( ) ; transitionSet . add ( createTransition ( CasWebflowConstants . TRANSITION_ID_SUCCESS , target ) ) ; transitionSet . add ( createTransition ( AcceptableUsagePolicyVerifyAction . EVENT_ID_MUST_ACCEPT , VIEW_ID_ACCEPTABLE_USAGE_POLICY_VIEW ) ) ; }", "new CorrelationAttributeInstance ( \"badInstances\" , fileType , case1 , dataSource1fromCase1 , null ) ; fail ( \"CorrelationAttributeInstance failed to throw exception for null path\" ) ;", "public static ContextObject createWithHash ( final SqueakImageContext image , final long hash ) { return new ContextObject ( image , hash ) ; } public static ContextObject create ( final SqueakImageContext image , final int size ) { return new ContextObject ( image , size ) ; } public static ContextObject create ( final SqueakImageContext image , final int size , final MaterializedFrame frame , final FrameMarker frameMarker ) { return new ContextObject ( image , size , frame , frameMarker ) ; } public void fillIn ( final Object [ ] pointers ) { size = pointers . length ; assert size > CONTEXT . TEMP_FRAME_START ; final CompiledMethodObject method = ( CompiledMethodObject ) pointers [ CONTEXT . METHOD ] ; final AbstractSqueakObject sender = ( AbstractSqueakObject ) pointers [ CONTEXT . SENDER_OR_NIL ] ; assert sender != null : \"sender should not be null\" ; final Object closureOrNil = pointers [ CONTEXT . CLOSURE_OR_NIL ] ; final BlockClosureObject closure ; final CompiledCodeObject code ; if ( closureOrNil == image . nil ) { closure = null ; code = method ; } else { closure = ( BlockClosureObject ) closureOrNil ; code = closure . getCompiledBlock ( method ) ; } final int endArguments = CONTEXT . RECEIVER + 1 + method . getNumArgsAndCopied ( ) ; final Object [ ] arguments = Arrays . copyOfRange ( pointers , CONTEXT . RECEIVER , endArguments ) ; final Object [ ] frameArguments = FrameAccess . newWith ( method , sender , closure , arguments ) ; CompilerDirectives . transferToInterpreterAndInvalidate ( ) ; truffleFrame = Truffle . getRuntime ( ) . createMaterializedFrame ( frameArguments , code . getFrameDescriptor ( ) ) ; FrameAccess . initializeMarker ( truffleFrame , code ) ; FrameAccess . setContext ( tr", "realm . checkIfValid ( ) ; SortDescriptor distinctDescriptor = SortDescriptor . getInstanceForDistinct ( query . getTable ( ) , fieldName ) ; return createRealmResults ( query , null , distinctDescriptor , true ) ;", "import com . b2international . commons . collections . primitive . LongCollection ; import com . b2international . commons . collections . primitive . LongIterator ; import com . b2international . commons . collections . primitive . map . LongKeyMap ; import com . b2international . commons . concurrent . equinox . ForkJoinUtils ; import com . b2international . commons . pcj . PrimitiveCollections ;", "footerLogo . setMinimumSize ( new Dimension ( 50 , 40 ) ) ;", "static final String KEY_DETAIL_VIEW = \"DETAIL_VIEW\" ; private Bundle mExtras ;", "public static final int T__151 = 151 ; public static final int T__152 = 152 ; public static final int T__153 = 153 ; public static final int T__154 = 154 ; public static final int T__155 = 155 ; public static final int T__156 = 156 ; public static final int T__157 = 157 ; public static final int T__158 = 158 ;", "import org . apache . accumulo . monitor . servlets . ReplicationServlet ; import org . apache . accumulo . monitor . servlets . ScanServlet ;", "FragmentTransaction transaction = getSupportFragmentManager ( ) . beginTransaction ( ) ; switch ( animation ) { case ANIM_NO : transaction . setCustomAnimations ( 0 , 0 ) ; break ; case ANIM_TO_LEFT : transaction . setCustomAnimations ( R . anim . frag_slide_in_from_left , R . anim . frag_slide_out_to_right ) ; break ; case ANIM_TO_RIGHT : transaction . setCustomAnimations ( R . anim . frag_slide_out_to_left , R . anim . frag_slide_in_from_right ) ; transaction . addToBackStack ( \"back\" ) ; break ; }", "if ( schemeField . type == org . apache . thrift . protocol . TType . STRUCT ) { struct . success = new Partition ( ) ; struct . success . read ( iprot ) ; }", "", "for ( end = start + 4 ; end < numPoints && ! parent . isCancelled ( ) ; ++ end ) { }", "setState ( 747 ) ;", "MinecraftForge . EVENT_BUS . register ( new VenusTickHandlerServer ( ) ) ; Biome . registerBiome ( ConfigManagerCore . biomeIDbase + 4 , GalacticraftPlanets . TEXTURE_PREFIX + BiomeVenus . venusFlat . getBiomeName ( ) , BiomeVenus . venusFlat ) ; Biome . registerBiome ( ConfigManagerCore . biomeIDbase + 5 , GalacticraftPlanets . TEXTURE_PREFIX + BiomeVenus . venusMountain . getBiomeName ( ) , BiomeVenus . venusMountain ) ; Biome . registerBiome ( ConfigManagerCore . biomeIDbase + 6 , GalacticraftPlanets . TEXTURE_PREFIX + BiomeVenus . venusValley . getBiomeName ( ) , BiomeVenus . venusValley ) ;", "setState ( 642 ) ;", "ctxt . reportBadDefinition ( _beanType , String . format ( \"Invalid Object Id definition for %s: cannot find property with name %s\" , ClassUtil . nameOf ( handledType ( ) ) , ClassUtil . name ( propName ) ) ) ;", "import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . stream . Collectors ;", "double qd = 2.0 * defaultConfigurationGain . getDoubleValue ( ) * ( privilegedConfigurations . get ( i , 0 ) - joint . getQ ( ) ) / jointSquaredRangeOfMotions . get ( i , 0 ) ; qd = MathTools . clamp ( qd , defaultMaxVelocity . getDoubleValue ( ) ) ;", "boolean sharedSourceNatSortKey ;", "AttributeMetaData attr = entityType . getAttribute ( rule . getField ( ) ) ; if ( attr != null && isJunctionTableAttribute ( attr ) )", "private List < Abstract . ReferableSourceNode > myContext ;", "exercise . setAllowOnlineEditor ( DEFAULT_ALLOW_ONLINE_EDITOR ) ; { return exercise ; } @ Before public void initTest ( ) { exercise = createEntity ( em ) ; }", "this . helper . getValidator ( ) . assertNoErrors ( agent ) ; Object feature = agent . getMembers ( ) . get ( 0 ) ;", "import static org . junit . Assert . assertEquals ; import static org . junit . Assert . * ; import java . math . BigInteger ;", "final NodeMessageHandler handler = new NodeMessageHandler ( blockProcessor , null , channelManager , null , txHandler , null ) ;", "final String entryPath = \"/\" + PathHelper . clean ( entry . getName ( ) ) ; logger . info ( \"Entry path: {}\" , entryPath ) ;", "Mask finalFrom = from ; int affected = editSession . replaceBlocks ( region , finalFrom , to ) ; actor . printInfo ( TranslatableComponent . of ( \"worldedit.replace.replaced\" , TextComponent . of ( affected ) ) ) ;", "private ColumnFamilyDefinition getCfDef ( String cf ) { List < ColumnFamilyDefinition > cfDefs = keyspaceDesc . getCfDefs ( ) ; }", "import com . kickstarter . libs . qualifiers . RequiresPresenter ; import com . kickstarter . libs . StatusBarUtils ;", "Cursor c = qb . query ( db , projection , selection , selectionArgs , groupBy , having , orderBy ) ;", "import static org . powermock . api . mockito . PowerMockito . doReturn ;", "import com . odoo . util . drawer . DrawerListener ; import com . openerp . R ;", "EventsSubscriber . Iface subscriber = new EventsSubscriber . Client ( provider ) ; subscriber . subscribeEventCreated ( \"foo\" , \"Client\" , \"response\" , Integer . toString ( port ) , ( ctx , event ) -> {", "return resURL != null ? sourceFor ( srcStr , resURL ) : null ;", "import cm . aptoide . analytics . implementation . navigation . ScreenTagHistory ; import cm . aptoide . pt . app . AppBoughtReceiver ;", "private final RuntimeEngine runtimeEngine ; private MultithreadEventLoopGroup parentGroup ; private MultithreadEventLoopGroup childGroup ;", "import uk . chromis . pos . printer . DeviceTicket ; import uk . chromis . pos . ticket . TicketType ; import uk . chromis . pos . promotion . DataLogicPromotions ; import uk . chromis . pos . promotion . PromotionSupport ;", "import org . freeplane . core . util . HtmlUtils ; import org . freeplane . core . util . TextUtils ; import org . freeplane . features . common . filter . FilterConditionEditor ; import org . freeplane . features . common . filter . FilterController ; import org . freeplane . features . common . filter . condition . ISelectableCondition ; import org . freeplane . features . common . map . NodeModel ; import org . freeplane . features . common . text . TextController . Direction ;", "import logisticspipes . proxy . MainProxy ;", "@ Override public int getDefaultFractionalDigitsForTimestamp ( ) { return 0 ; } private static Set < String > createReservedWords ( ) { return new HashSet < String > ( Arrays . asList ( \"ACCESSIBLE\" , \"ADD\" , \"ALL\" , \"ALTER\" , \"ANALYZE\" , \"AND\" , \"AS\" , \"ASC\" , \"ASENSITIVE\" , \"BEFORE\" , \"BETWEEN\" , \"BIGINT\" , \"BINARY\" , \"BLOB\" , \"BOTH\" , \"BY\" , \"CALL\" , \"CASCADE\" , \"CASE\" , \"CHANGE\" , \"CHAR\" , \"CHARACTER\" , \"CHECK\" , \"COLLATE\" , \"COLUMN\" , \"CONDITION\" , \"CONSTRAINT\" , \"CONTINUE\" , \"CONVERT\" , \"CREATE\" , \"CROSS\" , \"CURRENT_DATE\" , \"CURRENT_TIME\" , \"CURRENT_TIMESTAMP\" , \"CURRENT_USER\" , \"CURSOR\" , \"DATABASE\" , \"DATABASES\" , \"DAY_HOUR\" , \"DAY_MICROSECOND\" , \"DAY_MINUTE\" , \"DAY_SECOND\" , \"DEC\" , \"DECIMAL\" , \"DECLARE\" , \"DEFAULT\" , \"DELAYED\" , \"DELETE\" , \"DESC\" , \"DESCRIBE\" , \"DETERMINISTIC\" , \"DISTINCT\" , \"DISTINCTROW\" , \"DIV\" , \"DOUBLE\" , \"DROP\" , \"DUAL\" , \"EACH\" , \"ELSE\" , \"ELSEIF\" , \"DIV\" , \"DOUBLE\" , \"ED\" , \"ESCAPED\" , \"EXISTS\" , \"EXISTS\" , \"EXIT\" , \"EXPLAIN\" , \"FALSE\" , \"FETCH\" , \"FLOAT\" , \"DETERMINISTIC\" , \"DISTINCT\" , \"DISTINCTROW\" ,", "void testWriteReadOld ( ) { }", "import java . io . Closeable ; import java . io . IOException ; import java . io . PrintStream ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Date ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Set ; import java . util . concurrent . atomic . AtomicInteger ;", "return ! getSelectedProject ( ) . isOpenedForEditing ( ) && isGranted ( PRIVILEGE_DEPLOY_PROJECTS ) ;", "@ EntityListeners ( CswCapabilitiesInfoFieldEntityListenerManager . class ) @ SequenceGenerator ( name = CswCapabilitiesInfoField . ID_SEQ_NAME , initialValue = 100 , allocationSize = 1 )", "@ Test ( dataProvider = \"formDataProvider\" , dataProviderClass = FormDataProvider . class ) public void formInitializationTest ( JDIBase htmlElementToCheck , String expectedLocator , JDIBase expectedParent , String expectedName ) { checkInitializedElement ( ) ; softAssert . assertNotNull ( pseudoLoginFormLight ) ; softAssert . assertNotNull ( pseudoLoginForm ) ; softAssert . assertNotNull ( pseudoLoginForm ) ; softAssert . assertNotNull ( pseudoLoginFormSmart ) ; softAssert . assertNotNull ( pseudoLoginForm . userName ) ; softAssert . assertNotNull ( pseudoLoginForm . userPassword ) ; softAssert . assertNotNull ( pseudoLoginForm . loginButton ) ; softAssert . assertEquals ( pseudoLoginFormLight . locator . toString ( ) , \"\" ) ; softAssert . assertEquals ( pseudoLoginForm . locator . toString ( ) , \"\" ) ; softAssert . assertEquals ( pseudoLoginForm . locator . toString ( ) , \"css='#user-name'\" ) ; softAssert . assertEquals ( ( ( HtmlElement ) pseudoLoginForm . userPassword ) . locator . toString ( ) , \"css='#user-password'\" ) ; softAssert . assertEquals ( ( ( HtmlElement ) pseudoLoginForm . loginButton ) . locator . toString ( ) , \"css='#login-button'\" ) ; softAssert . assertEquals ( ( ( HtmlElement ) pseudoLoginForm . userName ) . locator . toString ( ) , \"css='#login-button'\" ) ; softAssert . assertEquals ( ( ( HtmlElement ) pseudoLoginForm . parent , pseudoHeader ) ; softAssert . assertEquals ( ( ( HtmlElement ) pseudoLoginForm . parent , pseudoHeader ) ; softAssert . assertEquals ( ( ( HtmlElement ) pseudoLoginForm . loginButton ) . locator . toString ( ) , \"css='#login-button'\" ) ; softAssert . assertEquals ( ( ( HtmlElement ) pseudoLoginForm . parent , pseudoHeader ) ; soft", "actor . world . sendBlockBreakProgress ( actor . getEntityId ( ) , this . pos , this . progress ) ;", "private NumberFormat currencyFormat ; private NumberFormat _getCurrencyFormat ( ) { String currencyFormatString = config . getString ( \"currency-format\" , \"#,##0.00\" ) ; String symbolLocaleString = config . getString ( \"currency-symbol-format-locale\" ) ; DecimalFormatSymbols decimalFormatSymbols ; if ( symbolLocaleString != null ) { decimalFormatSymbols = DecimalFormatSymbols . getInstance ( Locale . forLanguageTag ( symbolLocaleString ) ) ; } else { decimalFormatSymbols = DecimalFormatSymbols . getInstance ( ) ; } DecimalFormat currencyFormat = new DecimalFormat ( currencyFormatString , decimalFormatSymbols ) ; currencyFormat . setRoundingMode ( RoundingMode . FLOOR ) ; try { Field field = NumberUtil . class . getDeclaredField ( \"PRETTY_FORMAT\" ) ; field . setAccessible ( true ) ; Field modifiersField = Field . class . getDeclaredField ( \"modifiers\" ) ; modifiersField . setAccessible ( true ) ; modifiersField . setInt ( field , field . getModifiers ( ) & ~ Modifier . FINAL ) ; field . set ( null , currencyFormat ) ; modifiersField . setAccessible ( false ) ; field . setAccessible ( false ) ; } catch ( NoSuchFieldException | IllegalAccessException e ) { ess . getLogger ( ) . severe ( \"Failed to apply custom currency format: \" + e . getMessage ( ) ) ; if ( isDebug ( ) ) { e . printStackTrace ( ) ; } } return currencyFormat ; } @ Override public NumberFormat getCurrencyFormat ( ) { return this . currencyFormat ; } @ Override public boolean isTeleportToCenterLocation ( ) { return config . getBoolean ( \"teleport-to-center\" , true ) ; } private Map < Pattern , Long > commandCooldowns ; private Map < Pattern , Long > _getCommandCooldowns ( ) { return null ; } ConfigurationSection section = config . getConfigurationSection ( \"command-cooldowns\" ) ; Map < Pattern , Long > result = new LinkedHashMap <", "builder . append ( \",result=\" ) . append ( getResult ( ) . getLowercase ( ) ) ; builder . append ( \",seqNo=\" ) . append ( getSeqNo ( ) ) ; builder . append ( \",shards=\" ) . append ( Strings . toString ( getShardInfo ( ) , true ) ) ;", "if ( account . equals ( mAccount ) ) { refreshFolder ( account , mAccount . getOutboxFolderName ( ) ) ; }", "", "EventHandlerGC . generateOil ( event . getWorld ( ) , event . getRand ( ) , worldX + 15 , worldZ + 15 , false ) ;", "* Send a post request with header values \"scenario\" : \"valid\" , \"value\" : \"GREY\" or \"scenario\" : \"null\" , \"value\" : null", "import org . cratedb . action . sql . analyzer . ClusterUpdateCrateSettingsAction ; import org . cratedb . action . sql . analyzer . TransportClusterUpdateCrateSettingsAction ; import org . cratedb . service . SQLParseService ;", "assertEquals ( \"version\" , StoreProvider . V1_0 , reader . getVersion ( ) ) ; try ( final Stream < AbstractFeature > features = reader . features ( ) ) { final Iterator < AbstractFeature > it = features . iterator ( ) ; }", "public float endLoadedAmmoDistance = 1F ; public boolean gripIsOnPump = false ;", "public Picker . Builder setVideosEnabled ( final boolean enabled ) { mVideosEnabled = enabled ; return this ; } public Picker . Builder setVideoLengthLimitInMilliSeconds ( final int limit ) { mVideoLengthLimit = limit ; return this ; } public Picker . Builder setVideoThumbnailOverlayColor ( @ ColorInt final int color ) { mVideoThumbnailOverlayColor = color ; return this ; } public Picker . Builder setVideoIconTintColor ( @ ColorInt final int color ) { mVideoIconTintColor = color ; return this ; } public Picker . Builder setBackBtnInMainActivity ( final boolean backBtn ) { mBackBtnInMainActivity = backBtn ; return this ; }", "if ( defender != null && owner != defender . getOwner ( ) ) { }", "Map < String , Object > ctx = new HashMap < String , Object > ( 4 ) ; long contextId = contextIds . incrementAndGet ( ) ; ctx . put ( ID_FIELD , contextId ) ; ctx . put ( CONTEXT_FIELD , context ) ; callbacks . put ( contextId , ctx ) ; Map < String , Object > data = new HashMap < > ( 3 ) ; data . put ( ID_FIELD , contextId ) ; data . put ( PARAMETER_FIELD , parameter ) ;", "{ if ( LeanSettings . shouldUseBlackColors ( this ) ) { setTheme ( R . style . GoogleSearchLauncherThemeBlack ) ; } else { setTheme ( R . style . GoogleSearchLauncherThemeDark ) ; } } else if ( useGoogleInOrientation && supportsDarkText ) { }", "int acceptQueueSizePerThreads , int workerThreads , TachyonConf tachyonConf ) {", "final JsonWebTokenUtils jsonWebTokenUtils = mock ( JsonWebTokenUtils . class ) ; final WebResource webResource = new WebResource ( apiProvider , jsonWebTokenUtils ) ;", "", "LOG . info ( \"Found {} initial transit stops\" , accessTimes . size ( ) ) ;", "public int countZoneVlans ( long dcId , boolean onlyCountAllocated ) { SearchCriteria < Integer > sc = onlyCountAllocated ? countAllocatedZoneVlans . create ( ) : countZoneVlans . create ( ) ; sc . setParameters ( \"dc\" , dcId ) ; return customSearch ( sc , null ) . get ( 0 ) ; } public List < DataCenterVnetVO > findVnet ( long dcId , long physicalNetworkId , String vnet ) { SearchCriteria < DataCenterVnetVO > sc = VnetDcSearch . create ( ) ; sc . setParameters ( \"dc\" , dcId ) ; sc . setParameters ( \"physicalNetworkId\" , physicalNetworkId ) ; sc . setParameters ( \"vnet\" , vnet ) ; return listBy ( sc ) ; }", "import net . minecraft . item . crafting . ShapedRecipes ; import net . minecraft . util . ResourceLocation ; import net . minecraft . nbt . NBTTagCompound ; import net . minecraftforge . common . crafting . CraftingHelper ; import net . minecraftforge . fml . common . Loader ; import net . minecraftforge . registries . GameData ;", "sdkCollection . getSdk ( 16 ) , mock ( ConfigCollection . class ) ,", "private static final long serialVersionUID = 3256444690067896368L ; private static final Object [ ] NO_ARGS_ARRAY = new Object [ 0 ] ; private transient Method pingMethod ; public MysqlConnectionTester ( ) { try { this . pingMethod = com . mysql . jdbc . Connection . class . getMethod ( \"ping\" , ( Class [ ] ) null ) ; } catch ( Exception ex ) { } } public int activeCheckConnection ( Connection con ) { try { if ( this . pingMethod != null ) { if ( con instanceof com . mysql . jdbc . Connection ) { ( ( com . mysql . jdbc . Connection ) con ) . ping ( ) ; } else { C3P0ProxyConnection castCon = ( C3P0ProxyConnection ) con ; castCon . rawConnectionOperation ( this . pingMethod , C3P0ProxyConnection . RAW_CONNECTION , NO_ARGS_ARRAY ) ; } } else { Statement pingStatement = null ; try { pingStatement = con . createStatement ( ) ; pingStatement . executeQuery ( \"SELECT 1\" ) . close ( ) ; } finally { if ( pingStatement != null ) { pingStatement . close ( ) ; } } } return CONNECTION_IS_OKAY ; } catch ( Exception ex ) { return CONNECTION_IS_INVALID ; } } public int statusOnException ( Connection arg0 , Throwable throwable ) { if ( throwable instanceof CommunicationsException ) { return CONNECTION_IS_INVALID ; } if ( throwable instanceof SQLException ) { String sqlState = ( ( SQLException ) throwable ) . getSQLState ( ) ; if ( sqlState != null && sqlState . startsWith ( \"08\" ) ) { return CONNECTION_IS_INVALID ; } return CONNECTION_IS_OKAY ; } catch ( Exception ex ) { return CONNECTION_IS_INVALID ; } } } return CONNECTION_IS_OKAY ; } catch ( Exception ex ) { return CONNECTION_IS_", "private final SystemLoader loader ;", "public boolean canConnectEnergy ( EnumFacing from )", "", "new AsyncTask < Void , Void , CommandBean > ( ) { @ Override protected CommandBean doInBackground ( Void ... params ) { return deviceDb . readCommand ( commandId ) ; } @ Override protected void onPostExecute ( CommandBean command ) { args . putSerializable ( \"cmd\" , command ) ; if ( keyPassphrase != null ) { args . putString ( \"passphrase\" , keyPassphrase ) ; } runCommandDialog . setArguments ( args ) ; runCommandDialog . show ( getSupportFragmentManager ( ) , \"runCommand\" ) ; } } . execute ( ) ;", "public static boolean openFileAttachment ( final Context context , final String sourcePath , final String selectedFilePath , final String mimeTypeString ) { if ( ( Environment . MEDIA_MOUNTED . equals ( Environment . getExternalStorageState ( ) ) || ! Environment . isExternalStorageRemovable ( ) ) && hasPermission ( context , \"android.permission.WRITE_EXTERNAL_STORAGE\" ) ) { final Intent intent = new Intent ( ) ; intent . setAction ( android . content . Intent . ACTION_VIEW ) ; String extStorageDirectory = Environment . getExternalStorageDirectory ( ) . toString ( ) ; File folder = new File ( extStorageDirectory , \"Downloads\" ) ; if ( ! folder . exists ( ) ) { folder . mkdir ( ) ; } File tmpfile = new File ( folder , \"apptentive-tmp\" ) ; String tmpFilePath = tmpfile . getPath ( ) ; if ( tmpfile . exists ( ) ) { tmpfile . delete ( ) ; } if ( copyFile ( selectedFilePath , tmpFilePath ) == 0 ) { return false ; } intent . setDataAndType ( Uri . fromFile ( tmpfile ) , mimeTypeString ) ; try { context . startActivity ( intent ) ; return true ; } catch ( ActivityNotFoundException e ) { Log . e ( \"Activity not found to open attachment: \" , e ) ; } } else { Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( sourcePath ) ) ; if ( Util . canLaunchIntent ( context , browserIntent ) ) { context . startActivity ( browserIntent ) ; return true ; } } return false ; } public static int copyFile ( String from , String to ) { InputStream inStream = null ; FileOutputStream fs = null ; try { int bytesum = 0 ; int byteread ; File oldfile = new File ( from ) ; fs = new FileOutputStream ( to ) ; byte [ ] buffer = new byte [ 1444 ] ; while ( ( byteread = inStream . read (", "final Object value = find . getObjectValue ( ) ; if ( ! ( value instanceof ScriptFunction ) ) { }", "import com . wikia . webdriver . Common . ContentPatterns . PageContent ; import com . wikia . webdriver . Common . Core . Assertion ; import com . wikia . webdriver . Common . Core . Global ; import com . wikia . webdriver . Common . Logging . PageObjectLogging ; import com . wikia . webdriver . PageObjectsFactory . PageObject . BaseMonoBookPageObject ; import java . util . HashMap ; import java . util . List ;", "TripsConfig tripsConfig = new TripsConfig ( 500 , 200000 , 200000 , 900000 , false ) ;", "if ( jj_3R_298 ( ) ) jj_scanpos = xsp ;", "public Object handle ( UnitOfWork < ? extends T > unitOfWork , InterceptorChain interceptorChain ) throws Exception { }", "public SourceAssetLocation ( RootNode rootNode , Node parent , File dir , AssetLocation ... dependentAssetLocations ) { super ( rootNode , parent , dir , dependentAssetLocations ) ; registerInitializedNode ( ) ; }", "import io . zeebe . broker . exporter . record . value . VariableDocumentRecordValueImpl ;", "private void assignCreator ( DeepaMehtaObject object , long usernameId ) { facetsService . updateFacet ( object , \"dm4.accesscontrol.creator_facet\" , createCreatorModel ( usernameId ) , null , null ) ; }", "this . setRotateAngle ( rEar , 0.2792526803190927F , 1.0821041362364843F , 0.0F ) ; this . lAntler04 = new ModelRenderer ( this , 0 , 13 ) ; this . lAntler04 . setRotationPoint ( 0.0F , - 0.1F , - 2.6F ) ; this . lAntler04 . addBox ( - 0.5F , - 0.5F , - 3.1F , 1 , 1 , 3 , 0.0F ) ; this . setRotateAngle ( lAntler04 , 0.45378560551852565F , 0.22689280275926282F , 0.0F ) ; this . lAntler01 = new ModelRenderer ( this , 0 , 13 ) ; this . lAntler01 . setRotationPoint ( 1.5F , - 0.5F , - 3.9F ) ; this . lAntler01 . addBox ( - 0.5F , - 0.5F , - 2.0F , 1 , 1 , 2 , 0.0F ) ; this . setRotateAngle ( lAntler01 , 0.0F , - 0.2617993877991494F , 0.2617993877991494F ) ; this . lAntler01b = new ModelRenderer ( this , 0 , 12 ) ; this . lAntler01b . setRotationPoint ( 0.5F , - 0.5F , - 0.5F , - 2.0F , 1 , 1 , 2.0F , - 2.0F , - 2.0F , - 0.2617993877991494F , 0.2617993877991494F", "private static final long serialVersionUID = 4l ; private static Logger LOG = Logger . getLogger ( SpliceObserverInstructions . class ) ; protected GenericStorablePreparedStatement statement ; protected SpliceOperation topOperation ; private ActivationContext activationContext ; protected SchemaDescriptor defaultSchemaDescriptor ; protected String sessionUserName ; private TriggerExecutionStack triggerStack ; private TriggerExecutionStack triggerStack ; public SpliceObserverInstructions ( ) { super ( ) ; SpliceLogUtils . trace ( LOG , \"instantiated\" ) ; } public SpliceObserverInstructions ( GenericStorablePreparedStatement statement ,", "import com . fasterxml . jackson . annotation . JsonPropertyOrder ;", "", "ArrayReference otherArray = new ArrayReference ( newTestCase , type , lengths ) ; newTestCase . getStatement ( getStPosition ( ) + offset ) . setRetval ( otherArray ) ;", "", "public Integer visit ( final ModuleOpensDirective n , final Void arg ) { }", "ZkCachedDataAccessor accessor = new ZkCachedDataAccessor ( new ZkBaseDataAccessor ( zkClient ) , list ) ; System . out . println ( \"accessor1:\" + accessor ) ;", "spiceServiceListenerNotifier . notifyObserversOfRequestFailure ( request ) ; requestListenerNotifier . notifyListenersOfRequestFailure ( request , e , listeners ) ; notifyOfRequestProcessed ( request , listeners ) ;", "this . mappingIQNormalizer = mappingIQNormalizer ; this . termFactory = termFactory ;", "ILSMMergePolicyFactory mergePolicyFactory , Map < String , String > mergePolicyProperties , ILSMOperationTrackerProvider opTrackerProvider , ILSMIOOperationSchedulerProvider ioSchedulerProvider , ILSMIOOperationCallbackFactory ioOpCallbackFactory , double bloomFilterFalsePositiveRate ) { super ( virtualBufferCacheProvider , mergePolicyFactory , mergePolicyProperties , opTrackerProvider , ioSchedulerProvider , ioOpCallbackFactory , bloomFilterFalsePositiveRate ) ;", "protected ReplicationRequest ( Request request ) { }", "import com . datasalt . pangool . io . HadoopInputFormat ; import com . datasalt . pangool . io . HadoopOutputFormat ;", "public FeatureQueryHandlerQueryObject setI18N ( Locale i18n ) { this . i18n = i18n ; }", "private class QuitCommand implements ConsoleCommand { }", "final MappedBytes bytes = ( MappedBytes ) wire . bytes ( ) ; MappedBytes mappedBytes = bytes . withSizes ( chunkSize , overlapSize ) ;", "protected CacheKeyFactory newCacheKeyFactory ( ) { return new DefaultCacheKeyFactory ( ) ; }", "import java . util . ArrayList ;", "package org . jumpmind . symmetric . io ; import java . io . OutputStream ; import java . sql . Connection ; import java . sql . SQLException ; import java . sql . Statement ; import java . util . Map ; import org . apache . commons . codec . binary . Base64 ; import org . apache . commons . codec . binary . Hex ; import org . apache . commons . lang . StringEscapeUtils ; import org . apache . commons . lang . StringUtils ; import org . jumpmind . db . model . Column ; import org . jumpmind . db . model . Table ; import org . jumpmind . db . platform . DatabaseInfo ; import org . jumpmind . db . platform . IDatabasePlatform ; import org . jumpmind . db . sql . JdbcSqlTransaction ; import org . jumpmind . db . util . BinaryEncoding ; import org . jumpmind . symmetric . SymmetricException ; import org . jumpmind . symmetric . io . data . CsvData ; import org . jumpmind . symmetric . io . data . DataEventType ; import org . jumpmind . symmetric . io . data . writer . DataWriterStatisticConstants ; import org . jumpmind . symmetric . io . stage . IStagedResource ; import org . jumpmind . symmetric . io . stage . IStagingManager ; import org . springframework . jdbc . support . nativejdbc . NativeJdbcExtractor ; public class MsSqlBulkDatabaseWriter extends AbstractBulkDatabaseWriter { protected NativeJdbcExtractor jdbcExtractor ; protected int maxRowsBeforeFlush ; protected IStagingManager stagingManager ; protected IStagedResource stagedInputFile ; protected String rowTerminator = \"\\r\\n\" ; protected String fieldTerminator = \"||\" ; protected int loadedRows = 0 ; protected boolean fireTriggers ; protected String uncPath ; protected boolean needsBinaryConversion ; protected boolean needsColumnsReordered ; protected Table table = null ; protected", "setSortMode ( ) ; TypedArray ta1 = context . getTheme ( ) . obtainStyledAttributes ( new int [ ] { android . R . attr . colorLongPressedHighlight } ) ; mHighlightColor = ta1 . getColor ( 0 , 0xFF00FF ) ; ta1 . recycle ( ) ;", "log . debug ( \"Upgrade renaming table {} (ID: {}) to {}\" , MetadataTable . OLD_NAME , MetadataTable . ID , MetadataTable . NAME ) ; zoo . putPersistentData ( tables + \"/\" + MetadataTable . ID + Constants . ZTABLE_NAME , Tables . qualify ( MetadataTable . NAME ) . getSecond ( ) . getBytes ( UTF_8 ) ,", "import org . hdiv . filter . ValidatorError ; import org . hdiv . filter . RequestWrapper ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "null , new CandlepinCommonTestConfig ( ) ) ;", "JSONArray addresses = null ; try { addresses = contact . getJSONArray ( \"addresses\" ) ; if ( addresses != null ) { for ( int i = 0 ; i < addresses . length ( ) ; i ++ ) { JSONObject address = ( JSONObject ) addresses . get ( i ) ; String addressId = getJsonString ( address , \"id\" ) ; if ( addressId == null ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( ContactsContract . Data . RAW_CONTACT_ID , rawId ) ; contentValues . put ( ContactsContract . Data . MIMETYPE , ContactsContract . CommonDataKinds . StructuredPostal . CONTENT_ITEM_TYPE ) ; contentValues . put ( ContactsContract . CommonDataKinds . StructuredPostal . TYPE , getAddressType ( getJsonString ( address , \"type\" ) ) ) ; contentValues . put ( ContactsContract . CommonDataKinds . StructuredPostal . FORMATTED_ADDRESS , getJsonString ( address , \"formatted\" ) ) ; contentValues . put ( ContactsContract . CommonDataKinds . StructuredPostal . STREET , getJsonString ( address , \"streetAddress\" ) ) ; contentValues . put ( ContactsContract . CommonDataKinds . StructuredPostal . CITY , getJsonString ( address , \"locality\" ) ) ; contentValues . put ( ContactsContract . CommonDataKinds . StructuredPostal . REGION , getJsonString ( address , \"region\" ) ) ; contentValues . put ( ContactsContract . CommonDataKinds . StructuredPostal . POSTCODE , getJsonString ( address , \"postalCode\" ) ) ; contentValues . put ( ContactsContract . CommonDataKinds . StructuredPostal . REGION , getJsonString ( address , \"country\" ) ) ; contentValues . put ( ContactsContract . CommonData", "* A paging operation that includes a nextLink that has 10 pages , of which the 2 nd call fails first with 500. The client should retry and finish all 10 pages eventually .", "zones_hotkey_show_hide_key_tmp = handleKeybindEdit ( event , show_hide_hotkey_zone , 0 ) ; } } ) ;", "final String command = instanceService . buildTerminateNodeCommand ( internalIp , nodeName , CloudProvider . AWS . name ( ) ) ;", "int hashEffort = HASH_EFFORT ; String stype = null ; int mode = 0 ; boolean error = false ; Getopt g = new Getopt ( \"pkf\" , args , \"t:nuxhse:\" ) ; int c ; while ( ( c = g . getopt ( ) ) != - 1 ) { switch ( c ) { case 't' : stype = g . getOptarg ( ) ; case 'n' : case 'u' : case 'x' : case 'h' : case 's' : if ( mode == 0 ) mode = c ; else error = true ; break ; case 'e' : hashEffort = Integer . parseInt ( g . getOptarg ( ) ) ; break ; case '?' : case ':' : default : error = true ; break ; } } int remaining = args . length - g . getOptind ( ) ; int reqd = mode == 's' ? 2 : 1 ; if ( error || remaining != reqd ) { usage ( ) ; System . exit ( 1 ) ; } } System . err . println ( \" PrivateKeyFile -t sigtype filename (changes to KeyCertificate of the given sig type\" ) ; return ; }", "boolean asBoolean ( ) throws UnsupportedMessageException { if ( isForeignObject ( ) ) { CompilerDirectives . transferToInterpreter ( ) ; throw EspressoError . shouldNotReachHere ( \"Unexpected foreign object\" ) ; } }", "aliasInputStream = ResourceLoader . getResourceAsStream ( \"net/fortuna/ical4j/model/tz.alias\" ) ; ALIASES . load ( aliasInputStream ) ; } catch ( IOException ioe ) { LoggerFactory . getLogger ( TimeZoneRegistryImpl . class ) . warn (", "private BufferedReader alleleFileReader ; private BufferedReader genotypeFileReader ; private Boolean alleleEof = false ; private Boolean genotypeEof = false ; private String [ ] lastLineTranscriptVariationFields ;", "@ SuppressWarnings ( \"deprecation\" )", "import javax . annotation . Nullable ; import java . io . * ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URL ; import java . nio . channels . Channels ; import java . nio . channels . ReadableByteChannel ; import java . nio . file . Files ; import java . util . * ; import java . util . concurrent . atomic . LongAdder ;", "import net . minecraft . util . math . shapes . IBooleanFunction ; import net . minecraft . util . math . shapes . VoxelShape ; import net . minecraft . util . math . shapes . VoxelShapes ; import net . minecraft . util . math . vector . Vector3d ;", "@ Subscribe private void onPlayerDeath ( PlayerDeath playerDeath )", "readFirst ( aConn , aStmt . getSubject ( ) , kb . getDescriptionIri ( ) , null , ENGLISH ) . ifPresent ( ( stmt ) -> {", "package org . docear . plugin . bibtex . actions ; import java . awt . event . ActionEvent ; import java . net . URI ; import java . util . Collection ; import javax . swing . JComponent ; import javax . swing . JOptionPane ; import javax . swing . JTabbedPane ; import net . sf . jabref . BasePanel ; import net . sf . jabref . BibtexEntry ; import net . sf . jabref . BibtexEntryType ; import net . sf . jabref . EntryTypeDialog ; import net . sf . jabref . export . DocearSaveDatabaseAction ; import org . docear . plugin . bibtex . ReferencesController ; import org . docear . plugin . bibtex . jabref . JabRefCommons ; import org . docear . plugin . bibtex . jabref . JabrefWrapper ; import org . freeplane . core . ui . AFreeplaneAction ; import org . freeplane . core . ui . components . UITools ; import org . freeplane . core . util . LogUtils ; import org . freeplane . core . util . TextUtils ; import org . freeplane . features . link . NodeLinks ; import org . freeplane . features . map . MapModel ; import org . freeplane . features . map . NodeModel ; import org . freeplane . features . mode . Controller ; import org . freeplane . features . url . UrlManager ; public class AddNewReferenceAction extends AFreeplaneAction { private static final long serialVersionUID = 1L ; public AddNewReferenceAction ( String key ) { super ( key ) ; } public void actionPerformed ( ActionEvent e ) { Collection < NodeModel > nodes = Controller . getCurrentModeController ( ) . getMapController ( ) . getSelectedNodes ( ) ; if ( e . getActionCommand ( ) . equals ( DocearSaveDatabaseAction", "metaDataCache . put ( cacheKey , newTable ) ;", "", "import io . zeebe . exporter . api . record . Record ; import io . zeebe . exporter . api . record . RecordValue ; import io . zeebe . exporter . api . record . value . DeploymentRecordValue ; import io . zeebe . exporter . api . record . value . IncidentRecordValue ; import io . zeebe . exporter . api . record . value . JobRecordValue ; import io . zeebe . exporter . api . record . value . MessageRecordValue ; import io . zeebe . exporter . api . record . value . MessageSubscriptionRecordValue ; import io . zeebe . exporter . api . record . value . VariableRecordValue ; import io . zeebe . exporter . api . record . value . WorkflowInstanceCreationRecordValue ; import io . zeebe . exporter . api . record . value . WorkflowInstanceRecordValue ; import io . zeebe . exporter . api . record . value . WorkflowInstanceSubscriptionRecordValue ;", "if ( fieldTo != null && result2 != null )", "import android . content . ContentValues ; import android . content . Context ;", "analyser = createAnalyser ( ) ;", "public EffectSet contextualize ( GenContext ctx ) { if ( effectSet . isEmpty ( ) ) { return this ; } final Set < Effect > newSet = new HashSet < Effect > ( ) ; for ( final Effect e : effectSet ) { newSet . add ( e . adaptVariables ( ctx ) ) ; } return new EffectSet ( newSet ) ; } public boolean equalsByName ( EffectSet other ) { HashSet < String > thisEffectSet = new HashSet < String > ( ) ; for ( Effect e : effectSet ) { thisEffectSet . add ( e . getName ( ) ) ; } HashSet < String > otherEffectSet = new HashSet < String > ( ) ; for ( Effect e : other . effectSet ) { otherEffectSet . add ( e . getName ( ) ) ; } return thisEffectSet . equals ( otherEffectSet ) ; }", "switch ( openAudioMc . getPlatform ( ) ) ) { case SPIGOT : case BUNGEE : HelperMd5 . connectMsg ( openAudioMc , clientConnection , token ) ; break ; case VELOCITY : HelperVelocity . connectMsg ( openAudioMc , clientConnection , token ) ; }", "void parseJava8ErrorMessage ( ) { NoSuchMethodDescriptor descriptor = new NoSuchMethodFailureAnalyzer ( ) . getNoSuchMethodDescriptor ( \"javax.servlet.ServletContext.addServlet(Ljava/lang/String;Ljavax/servlet/Servlet;)\" + \"Ljavax/servlet/ServletRegistration$Dynamic;\" ) ; assertThat ( descriptor ) . isNotNull ( ) ; assertThat ( descriptor . getErrorMessage ( ) ) . isEqualTo ( \"javax.servlet.ServletContext.addServlet(Ljava/lang/String;Ljavax/servlet/Servlet;)\" + \"Ljavax/servlet/ServletRegistration$Dynamic;\" ) ; assertThat ( descriptor . getClassName ( ) ) . isEqualTo ( \"javax.servlet.ServletContext\" ) ; assertThat ( descriptor . getCandidateLocations ( ) ) . isNotEmpty ( ) ; assertThat ( descriptor . getActualLocation ( ) ) . asString ( ) . contains ( \"servlet-api-2.5.jar\" ) ; } @ Test void parseJava13OpenJ9ErrorMessage ( ) { NoSuchMethodDescriptor descriptor = new NoSuchMethodFailureAnalyzer ( ) . getNoSuchMethodDescriptor ( \"javax/servlet/ServletContext.addServlet(Ljava/lang/String;Ljavax/servlet/Servlet;)\" + \"Ljavax/servlet/ServletRegistration$Dynamic; (loaded from file...\" ) ; assertThat ( descriptor ) . isNotNull ( ) ; assertThat ( descriptor . getErrorMessage ( ) ) . isEqualTo ( \"javax/servlet/ServletContext.addServlet(Ljava/lang/String;Ljavax/servlet/servlet/Servlet;)\" + \"Ljavax/servlet/servlet/ServletRegistration$Dynamic; (Ljava/lang/String;Ljavax/servlet/Servlet;)\" + \"Ljavax/servlet/ServletRegistration$Dynamic; (loaded from file...\" ) ; assertThat ( descriptor ) . isNotNull ( ) ; assertThat ( descriptor . getErrorMessage ( ) ) . isEqualTo ( \"javax/servlet/servlet/", "if ( ! permissionListAlreadyDenied . isEmpty ( ) ) { if ( null != resource ) { } }", "", "import java . io . BufferedReader ; import java . io . File ; import java . io . IOException ; import java . io . InputStreamReader ; import java . net . URI ; import java . net . URL ; import java . util . Arrays ; import java . util . Dictionary ; import java . util . LinkedList ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import org . apache . commons . lang3 . StringUtils ;", "responseObject = AutoScaleVmProfileResponse . class , entityType = { IAMEntityType . AutoScaleVmProfile } , requestHasSensitiveInfo = false , responseHasSensitiveInfo = false )", "* Send x - ms - client - request - id = 9 C4D50EE - 2D 56 - 4 CD3 - 8152 - 34347D C9F2B0 in the header of the request", "ctx . getServerHandler ( ) . playerEntity . mcServer . addScheduledTask ( new Runnable ( ) { @ Override public void run ( ) { if ( ctx . getServerHandler ( ) . playerEntity . openContainer instanceof TransmutationContainer ) { TransmutationContainer container = ( ( TransmutationContainer ) ctx . getServerHandler ( ) . playerEntity . openContainer ) ; container . transmutationInventory . writeIntoOutputSlot ( pkt . slot , pkt . itemStack ) ; } } } ) ;", "setState ( 564 ) ;", "int isQqOnline = MyApplication . getInstance ( ) . getIsQqOnline ( ) ; int isWxOnline = MyApplication . getInstance ( ) . getIsWxOnline ( ) ;", "", "case 0 : if ( schemeField . type == org . apache . thrift . protocol . TType . STRING ) { struct . success = iprot . readString ( ) ; struct . setSuccessIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case 1 : if ( schemeField . type == org . apache . thrift . protocol . TType . STRUCT ) { struct . e = new TachyonTException ( ) ; struct . e . read ( iprot ) ; struct . setEIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ;", "", "@ SuppressWarnings ( \"unused\" ) public String getMatchDescription ( ) { return matchDescription ; } @ SuppressWarnings ( \"unused\" ) public List < String > getEntities ( ) { return entitiesInPackage ; }", "@ Override public void bindAdapter ( Connection adapter ) { m_ci . bindAdapter ( adapter ) ; }", "void contextLoads ( ) { ResponseEntity < String > entity = this . restTemplate . getForEntity ( \"/hello\" , String . class ) ; }", "private class XmlHelper", "private static Set < SQL > buildReallySqlList ( Distribution distribution , SQLStatement statement , List < Object > parameters ) { Iterable < DataNode > dataNodes = distribution . getDataNodes ( inParameters ) ; Map < SQL , SQL > sqlMap = new LinkedHashMap < > ( ) ; }", "public void notifyQueueIsFull ( ) { lock . lock ( ) ; try { isPaused = true ; } finally { lock . unlock ( ) ; } } public void setMaxNumInstances ( int value ) { numberInstances = value ; }", "import de . adorsys . aspsp . xs2a . spi . domain . consent . * ; import de . adorsys . aspsp . xs2a . spi . domain . consent . SpiAccountAccess ; import de . adorsys . aspsp . xs2a . spi . domain . consent . SpiConsentStatus ; import de . adorsys . aspsp . xs2a . spi . domain . consent . SpiCreateAisConsentRequest ;", "_assertNotNull ( \"r\" , r ) ; DeserializationContext ctxt = createDeserializationContext ( ) ; return _readTreeAndClose ( ctxt , _streamFactory . createParser ( ctxt , r ) ) ;", "", "unfolder . applyTMappings ( reformulationReasoner , true , excludeFromTMappings , metadata ) ;", "case NORTH : GL11 . glTranslated ( x + 0.73 , y + 0.83 , z - 0.01 ) ; break ; case SOUTH : GL11 . glTranslated ( x + 0.27 , y + 0.83 , z + 1.01 ) ; GL11 . glRotatef ( 180 , 0 , 1 , 0 ) ; break ; case WEST : GL11 . glTranslated ( x - 0.01 , y + 0.83 , z + 0.27 ) ; GL11 . glRotatef ( 90 , 0 , 1 , 0 ) ; break ; case EAST : GL11 . glTranslated ( x + 1.01 , y + 0.83 , z + 0.73 ) ; GL11 . glRotatef ( - 90 , 0 , 1 , 0 ) ; break ;", "", "public void setSaveButtonTitle ( String title ) { Preconditions . checkState ( editors . size ( ) > 0 ) ; lastEditor ( ) . setSaveButtonTitle ( title ) ; } private ToggleEditor lastEditor ( ) { return editors . get ( editors . size ( ) - 1 ) ; } @ Override public void showButtons ( boolean displayButtons ) { for ( ToggleEditor editor : editors ) { editor . showButtons ( displayButtons ) ; } } @ Override public void setTargets ( ArrayList < String > targets )", "", "sb . append ( \"success:\" ) ; if ( this . success == null ) { sb . append ( \"null\" ) ; } else { sb . append ( this . success ) ; } first = false ; if ( ! first ) sb . append ( \", \" ) ; sb . append ( \"e:\" ) ; if ( this . e == null ) { sb . append ( \"null\" ) ; } else { sb . append ( this . e ) ; } first = false ;", "sliderAMProvider . applyInitialRegistryDefinitions ( amWebURI , agentOpsURI , agentStatusURI , instanceData , serviceRecord ) ;", "private void translateNamesRadioButtonActionPerformed ( java . awt . event . ActionEvent evt ) { if ( immediateUpdates ) { UserPreferences . setDisplayTranslatedFileNames ( translateNamesRadioButton . isSelected ( ) ) ; } else { firePropertyChange ( OptionsPanelController . PROP_CHANGED , null , null ) ; } } private void timeZoneListValueChanged ( javax . swing . event . ListSelectionEvent evt ) { if ( immediateUpdates && useAnotherTimeRadioButton . isSelected ( ) ) { UserPreferences . setTimeZoneForDisplays ( timeZoneList . getSelectedValue ( ) . substring ( 11 ) . trim ( ) ) ; } else { firePropertyChange ( OptionsPanelController . PROP_CHANGED , null , null ) ; } }", "import org . semanticweb . elk . util . collections . chains . SimpleTypeBasedMatcher ; import org . semanticweb . elk . util . logging . CachedTimeThread ;", "* Whether or not the status that this tag implies is the Notable status * * @ return true if the Notable status is implied by this tag , false * otherwise .", "end . addParent ( start ) ; start . addChild ( end ) ;", "public boolean free ( TachyonURI path , boolean recursive ) throws FileDoesNotExistException , InvalidPathException , AccessControlException { }", "buttonList . add ( stateMode = GuiMultiButton . create ( 4 , w + 23 , h + 65 , 130 , tile . getStateModeController ( ) . copy ( ) ) ) ;", "private String encodeObjectToXml ( GmlConstants . NS_GML_32 , QuantityValue quantityValue ) { return CodingHelper . encodeObjectToXml ( GmlConstants . NS_GML_32 , quantityValue ) ; } else if ( ( observationType . equals ( OmConstants . OBS_TYPE_COUNT_OBSERVATION ) ) && observationValue . getValue ( ) instanceof CountValue ) { CountValue countValue = ( CountValue ) observationValue . getValue ( ) ; XmlInteger xbInteger = XmlInteger . Factory . newInstance ( XmlOptionsHelper . getInstance ( ) . getXmlOptions ( ) ) ; if ( countValue . getValue ( ) != null && countValue . getValue ( ) != Integer . MIN_VALUE ) { xbInteger . setBigIntegerValue ( new BigInteger ( countValue . getValue ( ) . toString ( ) ) ) ; } else { xbInteger . setNil ( ) ; } return xbInteger ; } else if ( ( observationType . equals ( OmConstants . OBS_TYPE_TEXT_OBSERVATION ) ) && observationValue . getValue ( ) instanceof TextValue ) { TextValue textValue = ( TextValue ) observationValue . getValue ( ) ; XmlString xbString = XmlString . Factory . newInstance ( XmlOptionsHelper . getInstance ( ) . getXmlOptions ( ) ) ; if ( textValue . getValue ( ) != null && ! textValue . getValue ( ) . isEmpty ( ) ) { xbString . setStringValue ( textValue . getValue ( ) ) ; } else { xbString . setNil ( ) ; } return xbString ; } else { xbString . setNil ( ) ; } return xbString ; } else { TextValue textValue = ( TextValue ) observationValue ) ; }", "@ Test public void createInactiveNonIsaRelationship ( ) throws Exception { createInactiveRelationship ( TEMPORAL_CONTEXT ) ; } @ Test public void createInactiveIsaRelationship ( ) throws Exception { createInactiveRelationship ( IS_A ) ; } private void createInactiveRelationship ( final String type ) { SnomedBranchingApiAssert . givenBranchWithPath ( testBranchPath ) ; final Builder < String , Object > req = ImmutableMap . builder ( ) ; final Map < String , Object > requestBody = givenRelationshipRequestBody ( DISEASE , type , FINDING_CONTEXT , MODULE_SCT_CORE , \"New relationship on MAIN\" ) ; req . putAll ( requestBody ) ; req . put ( \"active\" , false ) ; final String relationshipId = assertComponentCreated ( testBranchPath , SnomedComponentType . RELATIONSHIP , req . build ( ) ) ; assertComponentHasProperty ( testBranchPath , SnomedComponentType . RELATIONSHIP , relationshipId , \"active\" , false ) ; } private static void assertRelationshipCanBeDeleted ( final IBranchPath branchPath , final String relationshipId , final String ... segments ) { assertComponentCanBeDeleted ( branchPath , SnomedComponentType . RELATIONSHIP , relationshipId ) ; } private static void assertRelationshipCanBeUpdated ( final IBranchPath branchPath , final String relationshipId , final Map < ? , ? > requestBody ) { assertComponentCanBeUpdated ( branchPath , SnomedComponentType . RELATIONSHIP , relationshipId , requestBody ) ; } private static void assertCharacteristicType ( final IBranchPath branchPath , final String relationshipId , final CharacteristicType characteristicType ) { assertComponentHasProperty ( branchPath , SnomedComponentType . RELATIONSHIP , relationshipId , \"characteristicType\" , characteristicType . name ( ) ) ; }", "setState ( 337 ) ;", "if ( ! repositoryRoot . exists ( ) ) repositoryRoot . mkdirs ( ) ; assert repositoryRoot . exists ( ) ; largeValuesRoot = new File ( repositoryRoot , source . getLargeValuePath ( ) ) ; if ( ! largeValuesRoot . exists ( ) ) largeValuesRoot . mkdirs ( ) ; assert largeValuesRoot . exists ( ) ; File repositoryLockFile = null ; FileChannel lfc = null ; if ( source . isLockFileUsed ( ) ) { repositoryLockFile = new File ( repositoryRoot , LOCK_FILE_NAME ) ; try { if ( ! repositoryLockFile . exists ( ) ) { FileOutputStream fos = null ; fos = new FileOutputStream ( repositoryLockFile ) ; fos . write ( \"modeshape\" . getBytes ( ) ) ; fos . close ( ) ; } RandomAccessFile raf = new RandomAccessFile ( repositoryLockFile , \"rw\" ) ; lfc = raf . getChannel ( ) ; } catch ( IOException ioe ) { LOGGER . warn ( ioe , DiskConnectorI18n . couldNotCreateLockFile , source . getName ( ) ) ; } } this . lockFileChannel = lfc ;", "\" @Pure\" ,", "public static class TreeMapSerializer extends MapSerializer < TreeMap > { @ Override", "NotifyCenter . publishEvent ( ValueChangeEvent . builder ( ) . key ( URLDecoder . decode ( key , \"UTF-8\" ) ) . action ( DataOperation . DELETE ) . build ( ) ) ;", "response . redirect ( \"?testHistory\" ) ;", "prop . setComment ( \"By default, you will respawn on galacticraft dimensions if you die. If you set this to true, you will respawn back on earth.\" ) ; prop . setLanguageKey ( \"gc.configgui.force_overworld_respawn\" ) ;", "final List < ExternalHeaderIdWithExternalLineIds > headerAndLineIds = InvoiceJsonConverters . fromJson ( ImmutableList . of ( jic1 , jic2 ) ) ;", "long updateApp ( long galleryId , long projectId , String projectName , String title , String description ) ;", "import org . apache . sis . internal . jdk8 . JDK8 ;", "import com . itextpdf . kernel . pdf . tagutils . WaitingTagsManager ; import com . itextpdf . layout . Document ;", "boolean present_success = true && ( isSetSuccess ( ) ) ; list . add ( present_success ) ; if ( present_success ) list . add ( success ) ; boolean present_e = true && ( isSetE ( ) ) ; list . add ( present_e ) ; if ( present_e ) list . add ( e ) ;", "import org . eclipse . jdt . internal . core . PackageFragmentRoot ;", "", "import com . ning . billing . jaxrs . json . InvoiceJsonWithItems ; import com . ning . billing . jaxrs . json . PaymentJsonSimple ;", "public String addColumnFamily ( final ColumnFamilyDefinition cfdef ) throws HectorException { Operation < String > op = new Operation < String > ( OperationType . META_WRITE , FailoverPolicy . ON_FAIL_TRY_ALL_AVAILABLE , cfdef . getKeyspace ( ) ) {", "private ResponseHandler removeHandler ( ) { ResponseHandler handler = handlers . remove ( ) ; if ( handler == autoReadManagingHandler ) { updateAutoReadManagingHandler ( null ) ; } return handler ; } private void updateAutoReadManagingHandlerIfNeeded ( ResponseHandler handler ) { if ( handler instanceof AutoReadManagingResponseHandler ) { updateAutoReadManagingHandler ( ( AutoReadManagingResponseHandler ) handler ) ; } } private void updateAutoReadManagingHandler ( AutoReadManagingResponseHandler newHandler ) { if ( autoReadManagingHandler != null ) { autoReadManagingHandler . disableAutoReadManagement ( ) ; channel . config ( ) . setAutoRead ( true ) ; } autoReadManagingHandler = newHandler ; }", "public static abstract class CredentialsCreator { final private HashMap < AuthScope , Credentials > myCredentialsMap = new HashMap < AuthScope , Credentials > ( ) ; }", "public static void drawDownloadScrollbar ( Graphics g , float index , float total ) { UI . drawScrollbar ( g , index , total , maxDownloadsShown * infoHeight , infoBaseX , infoBaseY , infoWidth , maxDownloadsShown * infoHeight , Colors . BLACK_BG_NORMAL , Color . white , true ) ; }", "import org . killbill . billing . client . model . gen . Account ; import org . killbill . billing . client . model . gen . Invoice ; import org . killbill . billing . client . model . gen . InvoicePayment ; import org . killbill . billing . notification . plugin . api . ExtBusEventType ;", "private int n = 11 ;", "PaginatedOperationWithResultKeyRequest paginatedOperationWithResultKeyRequest ) { try { HttpResponseHandler < PaginatedOperationWithResultKeyResponse > responseHandler = protocolFactory . createResponseHandler ( new JsonOperationMetadata ( ) . withPayloadJson ( true ) . withHasStreamingSuccessResponse ( false ) , new PaginatedOperationWithResultKeyResponseUnmarshaller ( ) ) ; HttpResponseHandler < AwsServiceException > errorResponseHandler = createErrorResponseHandler ( ) ; return clientHandler . execute ( new ClientExecutionParams < PaginatedOperationWithResultKeyRequest , PaginatedOperationWithResultKeyResponse > ( ) . withMarshaller ( new PaginatedOperationWithResultKeyRequestMarshaller ( protocolFactory ) ) . withResponseHandler ( responseHandler ) . withErrorResponseHandler ( errorResponseHandler ) . withInput ( paginatedOperationWithResultKeyRequest ) ) ; } catch ( Throwable t ) { return CompletableFutures . failedFuture ( t ) ; }", "struct . success . write ( oprot ) ;", "int step ; label :", "final KsqlConfig ksqlConfig , final Supplier < SchemaRegistryClient > schemaRegistryClientFactory ,", "public void setObservationTemplate ( OmObservation observationTemplate ) { this . observationTemplate = observationTemplate ; }", "private void checkSubAccess ( INode inode , Snapshot snapshot , FsAction access", "import de . rub . nds . tlsattacker . core . state . http . HttpContext ; import de . rub . nds . tlsattacker . core . record . layer . RecordLayerFactory ; import de . rub . nds . tlsattacker . core . record . layer . RecordLayerType ;", "public static DbSource fromFile ( boolean forceUnixNewlines , String filename , String encoding ) { return new DbSourceFile ( forceUnixNewlines , filename , encoding ) ; }", "public class PrettyPrintVisitor implements ConcreteExpressionVisitor < Precedence , Void > , ConcreteLevelExpressionVisitor < Precedence , Void > , ConcreteDefinitionVisitor < Void , Void > { }", "Map < String , VertexPair < Snippet > > provider = new HashMap < > ( ) ;", "", "import org . n52 . shetland . ogc . filter . SpatialFilter ;", "import org . eclipse . ditto . services . concierge . cache . AclEnforcerCacheLoader ; import org . eclipse . ditto . services . concierge . cache . CacheFactory ; import org . eclipse . ditto . services . concierge . cache . PolicyEnforcerCacheLoader ; import org . eclipse . ditto . services . concierge . cache . ThingEnforcementIdCacheLoader ;", "Attribute parentAttr = addAttribute ( ATTR_PARENT ) . setDataType ( XREF ) . setRefEntity ( this ) ;", "private DrawerLayout mDrawerLayout ; private ActionBarDrawerToggle mDrawerToggle ; private RecyclerView mMenuRecyclerView ; ArticlesFragment mArticlesFragment ; JobsFragment mJobFragment ; FavoriteFragment mFavoriteFragment ; AboutFragment mAboutFragment ; private AuthInfo mAuthInfo ; private String uid = \"\" ; private String token = \"\" ; UserAPI userAPI = new UserAPIImpl ( ) ; private NetworkImageView user_icon_imageview ; private TextView username_tv ; private boolean is_login = false ; private Oauth2AccessToken mAccessToken ; private SsoHandler mSsoHandler ; @ Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_main ) ; setFragmentContainer ( R . id . articles_container ) ; initViews ( ) ; mArticlesFragment = new ArticlesFragment ( ) ; mArticlesFragment . setRetainInstance ( true ) ; addFragment ( mArticlesFragment ) ; } private void initWeiBo ( ) { mAuthInfo = new AuthInfo ( this , Constants . APP_KEY , Constants . REDIRECT_URL , Constants . SCOPE ) ; mSsoHandler = new SsoHandler ( ArticlesActivity . this , mAuthInfo ) ; } private void initViews ( ) { setupToolbar ( ) ; mDrawerLayout = ( DrawerLayout ) findViewById ( R . id . drawer ) ; mDrawerToggle = new ActionBarDrawerToggle ( this , mDrawerLayout , mToolbar , R . string . drawer_open , R . string . drawer_close ) ; mDrawerToggle . syncState ( ) ; mDrawerLayout . setDrawerListener ( mDrawerToggle ) ; } private void initViews ( ) ; setupToolbar ( ) ; mDrawerLayout = ( DrawerLayout ) findViewById ( R . id . user_icon_imageview ) findViewById ( R . id", "import io . sarl . lang . services . SARLGrammarAccess . ParameterElements ; import io . sarl . lang . services . SARLGrammarAccess . ActionElements ;", "private static IFeatureModel createFeatureModelFile ( IProject project ) { }", "expected . add ( DataGen . getEdge ( TestGroups . EDGE , 4L , 5L , false , ( byte ) 'a' , 0.8 , 2f , TestUtils . getTreeSet1 ( ) , 5L , ( short ) 6 , TestUtils . DATE , TestUtils . getFreqMap1 ( ) , 1 ) ) ; expected . add ( DataGen . getEdge ( TestGroups . EDGE , 4L , 5L , false , ( byte ) 'b' , 0.3 , 4f , TestUtils . getTreeSet2 ( ) , 24L , ( short ) 7 , TestUtils . DATE1 , TestUtils . getFreqMap2 ( ) , 1 ) ) ; expected . add ( DataGen . getEdge ( TestGroups . EDGE , 4L , 5L , true , ( byte ) 'b' , 1.1 , 6f , TestUtils . MERGED_TREESET , 29L , ( short ) 13 , TestUtils . DATE , TestUtils . MERGED_FREQMAP , 2 ) ) ; expected . add ( DataGen . getEdge ( TestGroups . EDGE , 9L , 10L , false , ( byte ) 'a' , 2.1 , 6f , TestUtils . MERGED_TREESET , 59L , ( short ) 13 , TestUtils . DATE , TestUtils . MERGED_FREQMAP , 2 ) ) ; expected . add ( DataGen . getEdge ( TestGroups . EDGE , 9L , 10L , false , ( byte ) 'a' , 2.8000000000000003 , 2f , TestUtils . getTreeSet1 ( ) , 5L , ( short ) 6 , TestUtils . MERGED_TREESET , 54L , ( short ) 7 , TestUtils . DATE , TestUtils . DATE , TestUtils . MERGED_FREQMAP , 2 )", "protected int checkQueuedJob ( Job job ) { Enums . ExecutionStatus status = getCurrentStatus ( job ) ; }", "try { ExportControlled . transformSocketToSSLSocket ( this ) ; this . packetSender = new SimplePacketSender ( this . mysqlOutput ) ; } catch ( IOException ioEx ) { throw SQLError . createCommunicationsException ( this . getConnection ( ) , this . getLastPacketSentTimeMs ( ) , this . getLastPacketReceivedTimeMs ( ) , ioEx , getExceptionInterceptor ( ) ) ; }", "validateCreateUserAuthenticationTable ( createUserAuthenticationTableCaptures ) ; validateUpdateGroupMembershipRecords ( createMembersTableCaptures ) ; validateUpdateAdminPrivilegeRecords ( createAdminPrincipalTableCaptures ) ; validateUpdateUsersTable ( updateUserTableCaptures , alterUserTableCaptures ) ; DBAccessor . DBColumnInfo capturedLastValidColumn = lastValidColumn . getValue ( ) ; Assert . assertEquals ( UpgradeCatalog300 . COMPONENT_LAST_STATE_COLUMN , capturedLastValidColumn . getName ( ) ) ; Assert . assertEquals ( State . UNKNOWN , capturedLastValidColumn . getDefaultValue ( ) ) ; Assert . assertEquals ( String . class , capturedLastValidColumn . getType ( ) ) ;", "public void setTo_stylesShouldBeApplyableAcrossResources ( ) throws Exception { Resources . Theme themeFromSystem = Resources . getSystem ( ) . newTheme ( ) ; themeFromSystem . applyStyle ( android . R . style . Theme_Light , true ) ; Resources . Theme themeFromApp = RuntimeEnvironment . application . getResources ( ) . newTheme ( ) ; themeFromApp . applyStyle ( android . R . style . Theme , true ) ; assertThat ( themeFromSystem . obtainStyledAttributes ( new int [ ] { android . R . attr . colorBackground } ) . getColor ( 0 , 123 ) ) . isEqualTo ( Color . WHITE ) ; assertThat ( themeFromApp . obtainStyledAttributes ( new int [ ] { android . R . attr . colorBackground } ) . getColor ( 0 , 123 ) ) . isEqualTo ( Color . BLACK ) ; themeFromApp . setTo ( themeFromSystem ) ; assertThat ( themeFromApp . obtainStyledAttributes ( new int [ ] { android . R . attr . colorBackground } ) . getColor ( 0 , 123 ) ) . isEqualTo ( Color . WHITE ) ; } @ Test public void styleResolutionShouldIgnoreThemes ( ) throws Exception { Resources . Theme themeFromSystem = resources . newTheme ( ) ; themeFromSystem . applyStyle ( android . R . style . Theme_DeviceDefault , true ) ; themeFromSystem . applyStyle ( R . style . ThemeWithSelfReferencingTextAttr , true ) ; assertThat ( themeFromSystem . obtainStyledAttributes ( new int [ ] { android . R . attr . textAppearance } ) . getResourceId ( 0 , 0 ) ) . isEqualTo ( 0 ) ; } @ Test", "public static final String LOGIN_URL = \"stormpath.web.login.uri\" ; public static final String LOGIN_NEXT_URL = \"stormpath.web.login.nextUri\" ; public static final String LOGOUT_URL = \"stormpath.web.logout.uri\" ; public static final String LOGOUT_NEXT_URL = \"stormpath.web.logout.nextUri\" ; public static final String LOGOUT_INVALIDATE_HTTP_SESSION = \"stormpath.web.logout.invalidateHttpSession\" ; public static final String FORGOT_PASSWORD_URL = \"stormpath.web.forgotPassword.uri\" ; public static final String FORGOT_PASSWORD_NEXT_URL = \"stormpath.web.forgotPassword.nextUri\" ; public static final String CHANGE_PASSWORD_URL = \"stormpath.web.changePassword.uri\" ; public static final String CHANGE_PASSWORD_NEXT_URL = \"stormpath.web.changePassword.nextUri\" ; public static final String REGISTER_URL = \"stormpath.web.register.uri\" ; public static final String REGISTER_NEXT_URL = \"stormpath.web.register.nextUri\" ; public static final String VERIFY_URL = \"stormpath.web.verifyEmail.uri\" ; public static final String VERIFY_NEXT_URL = \"stormpath.web.verifyEmail.nextUri\" ; public static final String SEND_VERIFICATION_EMAIL_URL = \"stormpath.web.sendVerificationEmail.uri\" ; public static final String VERIFY_ENABLED = \"stormpath.web.verifyEmail.enabled\" ;", "{ Server . getServer ( ) . getGameEventHandler ( ) . add ( batchEvent ) ; } else { this . batchEvent = null ; }", "import com . datatorrent . stram . plan . logical . LogicalPlan ; import com . datatorrent . stram . plan . logical . Operators ; import com . datatorrent . stram . plan . logical . LogicalPlan . OperatorMeta ; import com . google . common . collect . Maps ; import com . datatorrent . api . DAGContext ; import com . datatorrent . api . StreamingApplication ;", "public static IPositionPlacementSequence getClearingPositions ( World world , BlockPos pos , Direction incomingSide , PlayerEntity player , ItemStack stack ) { Region boundary = getClearingRegion ( pos , incomingSide , player , stack ) ; }", "LOG . warn ( \"Unable to save Burp Suite state file to working dir\" + e1 . getMessage ( ) , e1 ) ;", "private Set < String > pluginIdWhitelist ;", "@ Override public void rowsDeleted ( String tableName , Set < Object > rowKeys ) { }", "import hee . datastructure1 . * ; import hee . datastructure2 . * ;", "", "{ cleanup ( ) ; } @ Override protected void cancelled ( ) { super . cancelled ( ) ; cleanup ( ) ; }", "CheckTypeVisitor visitor = new CheckTypeVisitor . Builder ( myState , context , myErrorReporter ) . instancePool ( EmptyInstancePool . INSTANCE ) . thisClass ( enclosingClass , Reference ( thisParameter ) ) . build ( ) ;", "setState ( 573 ) ;", "user . setText ( prefs . getString ( ListFragment . PREF_USERNAME , \"\" ) ) ;", "fileIterator = fileDBAdaptor . iterator ( study . getUid ( ) , finalQuery , INCLUDE_FILE_IDS , userId ) ;", "private AbstractFeatureEntity featureOfInterest ; private PhenomenonEntity observableProperty ; private ProcedureEntity procedure ; private OfferingEntity offering ; private boolean hiddenChild ; private boolean publish = true ;", "import com . mojang . authlib . GameProfile ;", "\"@Store(type=\\\"testStoreContainingInMemoryTable\\\", @Cache(size=\\\"10\\\"))\\n\" +", "String jsonErrorText = gson . toJson ( result ) ; jsonErrorText = unescape ( jsonErrorText ) ; sb . append ( jsonErrorText ) ;", "import com . kenny . openimgur . util . SqlHelper ;", "protected List < Long > findAgentsBehindOnPing ( ) { List < Long > agentsBehind = new ArrayList < Long > ( ) ; long cutoffTime = InaccurateClock . getTimeInSeconds ( ) - _pingTimeout ; for ( Map . Entry < Long , Long > entry : _pingMap . entrySet ( ) ) { if ( entry . getValue ( ) < cutoffTime ) { agentsBehind . add ( entry . getKey ( ) ) ; } } if ( agentsBehind . size ( ) > 0 ) { s_logger . info ( \"Found the following agents behind on ping: \" + agentsBehind ) ; } return agentsBehind ; } @ Deprecated protected List < HostVO > findHostsBehindOnPing ( ) { long time = ( System . currentTimeMillis ( ) > > 10 ) - _pingTimeout ; List < HostVO > hosts = _hostDao . findLostHosts ( time ) ; if ( s_logger . isInfoEnabled ( ) ) { s_logger . info ( \"Found \" + hosts . size ( ) + \" hosts behind on ping. pingTimeout : \" + _pingTimeout + \", mark time : \" + time ) ; } for ( HostVO host : hosts ) { if ( host . getType ( ) . equals ( Host . Type . ExternalFirewall ) || host . getType ( ) . equals ( Host . Type . ExternalLoadBalancer ) || host . getType ( ) . equals ( Host . Type . TrafficMonitor ) || host . getType ( ) . equals ( Host . Type . SecondaryStorage ) ) { continue ; } if ( host . getManagementServerId ( ) == null || host . getManagementServerId ( ) == _msId ) { if ( s_logger . isInfoEnabled ( ) ) { if ( s_logger . isInfoEnabled ( ) ) { s_logger . info ( \"Asking agent mgr to investgate why host \" + host . getId ( ) + \" is behind", "public Builder setFocusSkipButtonWhenAvailable ( boolean focusSkipButtonWhenAvailable ) { this . focusSkipButtonWhenAvailable = focusSkipButtonWhenAvailable ; return this ; } public Builder setMaxMediaBitrate ( int bitrate ) { Assertions . checkArgument ( bitrate > 0 ) ; this . mediaBitrate = bitrate ; return this ; }", "", "import gov . nasa . worldwind . util . LevelSetConfig ;", "private void encryptPlainSnapshots ( ) throws Exception { s_logger . info ( \"Encrypting unencrypted snapshots.\" ) ; Set < Long > snapshotIDs = getSnapshots ( ) ; if ( snapshotIDs == null || snapshotIDs . size ( ) == 0 ) { return ; } Long [ ] snapshots = snapshotIDs . toArray ( new Long [ ] { } ) ; for ( Long snapshot : snapshots ) { String configDir = getSnapshotsDirectory ( ) ; StringBuilder sbSnapshot = new StringBuilder ( configDir ) ; sbSnapshot . append ( File . separator ) . append ( \"snapshot_\" ) . append ( snapshot ) . append ( \".xml\" ) ; String snapshotName = sbSnapshot . toString ( ) ; File fSnapshot = new File ( snapshotName ) ; if ( ! fSnapshot . exists ( ) ) { throw new KuraException ( KuraErrorCode . CONFIGURATION_SNAPSHOT_NOT_FOUND , snapshot ) ; } FileReader fr = null ; XmlComponentConfigurations xmlConfigs = null ; try { fr = new FileReader ( fSnapshot ) ; xmlConfigs = XmlUtil . unmarshal ( fr , XmlComponentConfigurations . class ) ; } finally { if ( fr != null ) { fr . close ( ) ; } } List < ComponentConfigurationImpl > configs = xmlConfigs . getConfigurations ( ) ; List < ComponentConfigurationImpl > configImpls = encryptConfigs ( configs ) ; XmlComponentConfigurations conf = new XmlComponentConfigurations ( ) ; conf . setConfigurations ( configImpls ) ; FileOutputStream fos = null ; OutputStreamWriter osw = null ; try { fos = new FileOutputStream ( fSnapshot ) ; osw = new OutputStreamWriter ( fos , \"UTF-8\" ) ; String xmlResult = XmlUtil . marshal ( conf ) ; String encryptedXML = m_cryptoService . encryptAes ( xmlResult ) ; osw . append ( encryptedXML ) ; osw . flush ( ) ; fos . flush ( ) ; conf . setConfigurations ( configImpls ) ;", "if ( uiShield . id == UIShield . COLOR_DETECTION_SHIELD . id ) return addToCreatedListAndReturn ( uiShield , new ColorDetectionFragment ( ) ) ; if ( uiShield . id == UIShield . NFC_SHIELD . id ) return addToCreatedListAndReturn ( uiShield , new NfcFragment ( ) ) ;", "import org . apache . usergrid . persistence . collection . serialization . impl . migration . EntityIdScope ; import org . apache . usergrid . persistence . core . metrics . MetricsFactory ;", "final ListProjectResourcesCriteria listProjectResourcesCriteria = domainIdRecursiveListProject . third ( ) ; _accountMgr . buildACLSearchBuilder ( searchBuilder , isRecursive , permittedDomains , permittedAccounts , permittedResources , listProjectResourcesCriteria ) ;", "DBObject old = coll . findAndModify ( PROPS_QUERY , fieldsToReturn , null , false , content , false , true ) ;", "import gaffer . user . User ; import org . hamcrest . core . IsCollectionContaining ; import org . junit . After ; import org . junit . Before ;", "mbwManager = MbwManager . getInstance ( getApplication ( ) ) ; feeItemsBuilder = new FeeItemsBuilder ( _mbwManager . getExchangeRateManager ( ) , _mbwManager . getFiatCurrency ( ) ) ;", "private ProgramProductPriceListDataProvider programPriceService ; @ Autowired private ProgramProductService service ;", "private final boolean updateActivity ; private final boolean metaActivity ; private final boolean parseAttributes ;", "globalFieldNumberMap = segmentInfos . getOrLoadGlobalFieldNumberMap ( directory ) ; docWriter = new DocumentsWriter ( config , directory , this , conf . getIndexingChain ( ) , conf . getIndexerThreadPool ( ) , globalFieldNumberMap . newFieldInfos ( SegmentCodecsBuilder . create ( codecs ) ) , bufferedDeletesStream ) ;", "", "", "Attribute idAttr = entityType . getIdAttribute ( ) ; Attribute labelAttr = entityType . getLabelAttribute ( ) ;", "public Vector3 toVector ( ) { return this ; }", "import org . gearvrf . GVRMain ; import org . gearvrf . GVRTexture ; import org . gearvrf . ZipLoader ;", "@ Test public void ignoreUnimportantViews ( ) { driver . ignoreUnimportantViews ( true ) ; boolean ignoreViews = driver . getSettings ( ) . get ( AppiumSetting . IGNORE_UNIMPORTANT_VIEWS . toString ( ) ) . getAsBoolean ( ) ; assertTrue ( ignoreViews ) ; driver . ignoreUnimportantViews ( false ) ; ignoreViews = driver . getSettings ( ) . get ( AppiumSetting . IGNORE_UNIMPORTANT_VIEWS . toString ( ) ) . getAsBoolean ( ) ; assertFalse ( ignoreViews ) ; } @ Test public void startActivityInThisAppTest ( ) { driver . startActivity ( \"io.appium.android.apis\" , \".accessibility.AccessibilityNodeProviderActivity\" , null , null ) ; String activity = driver . currentActivity ( ) ; assertTrue ( activity . contains ( \"Node\" ) ) ; } @ Test public void startActivityInAnotherAppTest ( ) { driver . startActivity ( \"com.android.contacts\" , \".ContactsListActivity\" , null , null ) ; String activity = driver . currentActivity ( ) ; assertTrue ( activity . contains ( \"Contact\" ) ) ; }", "void register ( ObjectContainer container , boolean lazyResume , boolean noTags ) throws IdentifierCollisionException { if ( persistenceType != PERSIST_CONNECTION ) client . register ( this , false , container ) ; if ( persistenceType != PERSIST_CONNECTION && ! noTags ) { FCPMessage msg = persistentTagMessage ( container ) ; client . queueClientRequestMessage ( msg , 0 , container ) ; } } private HashMap < String , Object > makeDiskDirManifest ( File dir , String prefix , boolean allowUnreadableFiles ) throws FileNotFoundException { }", "", "return new EC2Slave ( inst . getInstanceId ( ) , description , remoteFS , getSshPort ( ) , getNumExecutors ( ) , labels , initScript , remoteAdmin , rootCommandPrefix , jvmopts , stopOnTerminate , idleTerminationMinutes , inst . getPublicDnsName ( ) , inst . getPrivateDnsName ( ) , EC2Tag . fromAmazonTags ( inst . getTags ( ) ) , usePrivateDnsName ) ;", "contentPanel linkPanel = new FlowPanel ( ) ;", "new BulkItemResponse . Failure ( request . index ( ) , deleteRequest . type ( ) , deleteRequest . id ( ) , e ) ) ) ;", "if ( mtTheme . isDark ( ) ) { LafManager . getInstance ( ) . setCurrentLookAndFeel ( new DarculaLookAndFeelInfo ( ) ) ; UIManager . setLookAndFeel ( new MTLaf ( mtTheme ) ) ; } else { LafManager . getInstance ( ) . setCurrentLookAndFeel ( new IntelliJLookAndFeelInfo ( ) ) ; UIManager . setLookAndFeel ( new MTLightLaf ( mtTheme . getTheme ( ) ) ) ; }", "", "if ( MorphManager . NAME_TO_RL . containsKey ( name ) ) { name = MorphManager . NAME_TO_RL . get ( name ) . toString ( ) ; } if ( name . equals ( \"metamorph.Block\" ) ) { BlockMorph morph = new BlockMorph ( ) ; morph . fromNBT ( tag ) ; return morph ; }", "import java . util . Set ;", "import com . sk89q . worldedit . world . biome . BaseBiome ; import com . sk89q . worldedit . world . biome . Biomes ; import com . sk89q . worldedit . world . block . BlockStateHolder ; import com . sk89q . worldedit . world . registry . BiomeRegistry ;", "private List < Request > processRequestList ( List < LinkedHashMap > parameters , Map < String , ModelAttr > definitinMap ) { List < Request > requestList = new ArrayList < > ( ) ; }", "", "@ MeshTestSetting ( elasticsearch = TRACKING , inMemoryDB = false , testSize = FULL , startServer = true , clusterMode = true , monitoring = false )", "case REIMBURSEMENT_REQUEST : requestedBsqTextField = addInputTextField ( gridPane , ++ gridRow , Res . get ( \"dao.proposal.display.requestedBsq\" ) ) ;", "import org . eevolution . api . ComponentIssueCreateRequest ;", "context . destroy ( ) ;", "@ Override public void populateHeaderStructure ( String baseUri ) { if ( baseUri == null || baseUri . length ( ) == 0 ) { throw new IllegalArgumentException ( \"baseURI cannot be empty\" ) ; } if ( isClosed ) { throw new IllegalStateException ( \"Cannot add header to a closed HDT.\" ) ; } }", "private LoadingCache < AnnotationLayer , Boolean > hasLinkFeatureCache ;", "import cm . aptoide . pt . database . accessors . Accessor ; import cm . aptoide . pt . crashreports . CrashReports ;", "public ItemPhysicMod getItemPhysicMod ( ) { return itemPhysicMod ; }", "{ Optional < Server > server = serverProvider . get ( ) ; if ( server . isPresent ( ) ) { try { server . get ( ) . stop ( ) ; } catch ( Exception e ) { LOG . warn ( \"While aborting server\" , e ) ; } finally { System . exit ( 1 ) ; } } else { LOG . warn ( \"SingularityAbort called before server has fully initialized!\" ) ; System . exit ( 1 ) ; } } private void sendAbortNotification ( AbortReason abortReason ) { final String message = String . format ( \"Singularity on %s is aborting due to %s\" , hostAndPort . getHostText ( ) , abortReason ) ; sendAbortMail ( message ) ; exceptionNotifier . notify ( message ) ; } }", "@ Lob @ Type ( type = \"org.hibernate.type.TextType\" ) @ Basic ( optional = true ) @ Column ( name = \"lis_outcome_service_url\" ) private String lisOutcomeServiceUrl ; @ Basic ( optional = false ) @ Column ( name = \"reporting_status\" , length = 22 ) @ Enumerated ( EnumType . STRING ) private CandidateOutcomeReportingStatus candidateOutcomeReportingStatus ; @ Lob @ Type ( type = \"org.hibernate.type.TextType\" ) @ Basic ( optional = true ) @ Column ( name = \"lis_result_sourcedid\" ) private String lisResultSourcedid ; @ Basic ( optional = false ) @ Column ( name = \"exploded\" ) private boolean exploded ;", "TraceHelper . partitionSection ( \"ON_RESUME\" , \"superCall\" ) ; mHandler . removeCallbacks ( mLogOnDelayedResume ) ; Utilities . postAsyncCallback ( mHandler , mLogOnDelayedResume ) ;", "public LocalQueueStats createLocalQueueStats ( String name , int partitionId ) { LocalQueueStatsImpl stats = new LocalQueueStatsImpl ( ) ; QueueContainer container = containerMap . get ( name ) ; if ( container == null ) { return stats ; } Address thisAddress = nodeEngine . getClusterService ( ) . getThisAddress ( ) ; PartitionInfo info = nodeEngine . getPartitionService ( ) . getPartitionInfo ( partitionId ) ; if ( thisAddress . equals ( info . getOwner ( ) ) ) { stats . setOwnedItemCount ( container . size ( ) ) ; } else { stats . setBackupItemCount ( container . size ( ) ) ; } container . setStats ( stats ) ; stats . setOperationStats ( getOrCreateOperationsCounter ( name ) . getPublishedStats ( ) ) ; return stats ; } public QueueOperationsCounter getOrCreateOperationsCounter ( String name ) { QueueOperationsCounter operationsCounter = counterMap . get ( name ) ; if ( operationsCounter == null ) { operationsCounter = new QueueOperationsCounter ( ) ; QueueOperationsCounter counter = counterMap . putIfAbsent ( name , operationsCounter ) ; if ( counter != null ) { operationsCounter = counter ; } } return operationsCounter ; } public TransactionalQueueProxy createTransactionalObject ( Object id , Transaction transaction ) { return new TransactionalQueueProxy ( String . valueOf ( id ) , nodeEngine , this , transaction ) ; }", "checkPreferredChannel ( ) ; FtcDashboard . start ( ) ;", "assertEquals ( - 1 , StandardLogger . getBuffer ( ) . toString ( ) . indexOf ( \"SHOW VARIABLES LIKE 'tx_isolation'\" ) ) ;", "* Copyright 2012 - 2019 the original author or authors .", "import com . splicemachine . derby . ddl . DDLCoordinationFactory ; import com . splicemachine . pipeline . exception . ErrorState ; import com . splicemachine . pipeline . exception . Exceptions ; import com . splicemachine . si . api . Txn ; import com . splicemachine . si . api . TxnView ; import com . splicemachine . si . impl . TransactionLifecycle ; import com . splicemachine . stream . Stream ; import com . splicemachine . stream . StreamException ; import com . splicemachine . utils . SpliceLogUtils ;", "if ( nbt . getInteger ( \"hunger\" ) == 0 ) { }", "", "return exp ;", "for ( ExternalConnector eco : ConfigurationHelper . getExternalConnectors ( cfg ) ) { for ( Message m : eco . getPort ( ) . getReceives ( ) ) { if ( ! externalMessages . contains ( m ) ) { } } }", "import java . sql . Connection ;", "import java . util . HashMap ;", "", "if ( literal_query ) { final String snippet = LuceneQuery . getSnippet ( tcq . getQueryString ( ) , f . getId ( ) ) ; setCommonProperty ( resMap , CommonPropertyTypes . CONTEXT , snippet ) ; } toPopulate . add ( new KeyValueContent ( f . getName ( ) , resMap , ++ resID , f , highlightQueryEscaped ) ) ;", "public WholeBodyFeedbackController ( WholeBodyControlCoreToolbox coreToolbox , FeedbackControllerTemplate feedbackControllerTemplate , YoRegistry parentRegistry )", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "import com . fasterxml . jackson . annotation . JsonInclude . Include ; import com . fasterxml . jackson . core . JsonParseException ; import com . fasterxml . jackson . core . JsonParser ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . core . Version ; import com . fasterxml . jackson . databind . DeserializationContext ; import com . fasterxml . jackson . databind . JsonMappingException ; import com . fasterxml . jackson . databind . JsonNode ; import com . fasterxml . jackson . databind . ObjectMapper ; import com . fasterxml . jackson . databind . deser . std . StdDeserializer ; import com . fasterxml . jackson . databind . module . SimpleModule ; import com . fasterxml . jackson . databind . node . ObjectNode ; import com . corundumstudio . socketio . utils . ConcurrentHashSet ;", "private void shouldReturnOnlyEntitiesWhenOptionSet ( final AccumuloStore store ) throws OperationException { final GetElementsBetweenSets < Element > op = new GetElementsBetweenSets < > ( seedsA , seedsB , defaultView ) ; }", "import org . evosuite . testcase . AbstractTestChromosome ;", "final WrappedVector momentum = mask ( preconditioning . drawInitialMomentum ( ) , mask ) ;", "if ( superPeerMode ) { return ; } runOnUiThreadAndBlock ( new Runnable ( ) { public void run ( ) { if ( layoutWrapper == null ) { layoutWrapper = new AndroidImplementation . AndroidRelativeLayout ( getActivity ( ) , AndroidImplementation . AndroidPeer . this , v ) ; layoutWrapper . setBackgroundDrawable ( null ) ; v . setVisibility ( currentVisible ) ; v . setFocusable ( AndroidImplementation . AndroidPeer . this . isFocusable ( ) ) ; v . setFocusableInTouchMode ( true ) ; ArrayList < View > viewList = new ArrayList < View > ( ) ; viewList . add ( layoutWrapper ) ; v . addFocusables ( viewList , View . FOCUS_DOWN ) ; v . addFocusables ( viewList , View . FOCUS_UP ) ; v . addFocusables ( viewList , View . FOCUS_LEFT ) ; v . addFocusables ( viewList , View . FOCUS_RIGHT ) ; if ( v . isFocusable ( ) || v . isFocusableInTouchMode ( ) ) { if ( AndroidImplementation . AndroidPeer . super . hasFocus ( ) ) { AndroidImplementation . this . blockNativeFocusAll ( true ) ; blockNativeFocus ( false ) ; v . requestFocus ( ) ; } else { blockNativeFocus ( true ) ; } } }", "ProcessEngine engine = getProcessEngine ( userId ) ; RuntimeService runtimeService = engine . getRuntimeService ( ) ; IdentityService identityService = engine . getIdentityService ( ) ; String pageI = StringUtil . getString ( params . get ( \"pageIndex\" ) ) ; String rowI = StringUtil . getString ( params . get ( \"pageSize\" ) ) ; int pageIndex = 1 ; int rowNum = 10 ; if ( StringUtil . isNotEmpty ( pageI ) ) { pageIndex = Integer . valueOf ( pageI ) ; } if ( StringUtil . isNotEmpty ( rowI ) ) { rowNum = Integer . valueOf ( rowI ) ; } ProcessInstanceQuery processInstanceQuery = runtimeService . createProcessInstanceQuery ( ) ; if ( StringUtil . isNotEmpty ( processDefinitionKey ) ) processInstanceQuery . processDefinitionKey ( processDefinitionKey ) ; if ( StringUtil . isNotEmpty ( processInstanceId ) ) processInstanceQuery . processInstanceId ( processDefinitionKey ) ; if ( StringUtil . isNotEmpty ( subject ) ) processInstanceQuery . subjectLike ( processDefinitionKey ) ; if ( StringUtil . isNotEmpty ( initor ) ) processInstanceQuery . initiatorLike ( processDefinitionKey ) ; if ( processInstanceStatus != null ) { processInstanceQuery . processInstanceStatus ( processInstanceStatus ) ; } processInstanceQuery . orderByUpdateTime ( ) . desc ( ) ; List < ProcessInstance > processInstances = processInstanceQuery . listPagination ( pageIndex , rowNum ) ; FlowUtilServiceImpl flowUtil = new FlowUtilServiceImpl ( ) ; List < Map < String , Object > > instanceMaps = new ArrayList < Map < String , Object > > ( ) ; List < Map < String , Object > > instanceMaps = new ArrayList < Map < String , Object > > ( ) ; List < ProcessInstance > processInstances = processInstanceQuery . listPagination ( pageIndex , rowNum ) ; FlowUtilServiceImpl flowUtil = new FlowUtilServiceImpl ( ) ; List < Map <", "import org . junit . contrib . truth . subjects . DefaultSubject ; import org . junit . contrib . truth . subjects . IntegerSubject ;", "public int green ( final BlockVector3 position , final double radius ) { return this . green ( position , radius , false ) ; } public int green ( BlockVector3 position , double radius , boolean onlyNormalDirt )", "import org . hibernate . proxy . HibernateProxy ; import org . hibernate . internal . util . SerializationHelper ;", "", "import net . minecraft . entity . EntityLivingBase ;", "public Integer visit ( final ModuleRequiresDirective n , final Void arg ) { }", "for ( int j = col ; j < col + currentRow [ col ] . getPropertyAsInteger ( Property . COLSPAN ) ; j ++ ) { horizontalBorders . get ( row + ( hasContent ? 1 : 0 ) ) . set ( j , getCollapsedBorder ( currentRow [ col ] . getBorders ( ) [ 2 ] , borders [ 2 ] ) ) ; }", "import java . util . LinkedHashMap ; import java . util . List ;", "if ( validateDateFormat ( optionLongDisplayDateFormat . getText ( ) ) ) { }", "{ getListView ( ) . setOnCreateContextMenuListener ( this ) ; }", "import org . flowable . eventregistry . impl . keydetector . JsonPointerBasedInboundEventKeyDetector ;", "private void setPreferenceListeners ( final PreferenceManager prefMgr , boolean backup ) { if ( backup ) { prefMgr . getDefaultSharedPreferences ( this ) . registerOnSharedPreferenceChangeListener ( new SharedPreferences . OnSharedPreferenceChangeListener ( ) { public void onSharedPreferenceChanged ( SharedPreferences prefs , String key ) { BackupManagerWrapper . dataChanged ( SmsSync . this ) ; } } ) ; } }", "import org . checkerframework . framework . type . AnnotatedTypeMirror . AnnotatedUnionType ; import org . checkerframework . framework . type . AnnotatedTypeMirror . AnnotatedWildcardType ;", "GeoWaveKMeansIT . class , KDERasterResizeIT . class ,", "import japicmp . util . Optional ; import japicmp . model . JApiAnnotation ; import japicmp . model . JApiAnnotationElement ; import japicmp . model . JApiChangeStatus ; import japicmp . model . JApiClass ; import japicmp . model . JApiField ; import japicmp . model . JApiMethod ;", "import com . ning . billing . account . api . AccountUserApi ; import com . ning . billing . account . api . MockAccountUserApi ; import com . ning . billing . entitlement . api . SubscriptionApiService ; import com . ning . billing . entitlement . api . SubscriptionFactory ; import com . ning . billing . entitlement . api . billing . DefaultEntitlementBillingApi ; import com . ning . billing . entitlement . api . billing . EntitlementBillingApi ; import com . ning . billing . invoice . InvoiceDispatcher ; import com . ning . billing . invoice . dao . DefaultInvoiceDao ; import com . ning . billing . invoice . dao . InvoiceDao ; import com . ning . billing . invoice . model . DefaultInvoiceGenerator ; import com . ning . billing . invoice . model . InvoiceGenerator ; import com . ning . billing . util . callcontext . CallContextFactory ; import com . ning . billing . util . callcontext . DefaultCallContextFactory ; import com . ning . billing . util . customfield . dao . AuditedCustomFieldDao ; import com . ning . billing . util . customfield . dao . CustomFieldDao ; import com . ning . billing . util . globallocker . GlobalLocker ; import com . ning . billing . util . globallocker . MySqlGlobalLocker ; import com . ning . billing . util . tag . dao . TagDao ;", "Collection < Var > varNamesInCurrentRelationship = currentEntry . getValue ( ) . getKey ( ) . keySet ( ) ; String idsList = varNamesInCurrentRelationship . stream ( ) . map ( key -> resultLine . get ( key ) . getId ( ) . getValue ( ) ) . sorted ( ) . collect ( Collectors . joining ( \"\" ) ) ; String relationshipId = \"temp-assertion-\" + idsList ; String relationshipType = currentEntry . getValue ( ) . getValue ( ) ; boolean isInferred = inferredRelationships . containsKey ( currentEntry . getKey ( ) ) && inferredRelationships . get ( currentEntry . getKey ( ) ) ;", "final var action = super . build ( casClient , context , renew , gateway ) ;", "if ( this . saveLoot )", "import org . apache . flink . client . program . PackagedProgramUtils ; import org . apache . flink . configuration . Configuration ; import org . apache . flink . configuration . GlobalConfiguration ; import org . apache . flink . runtime . jobgraph . JobGraph ;", "spellChecker . init ( options , \"spellChecker\" , true ) ; emphasisMarker . init ( options , \"emphasisMarker\" , \"_\" ) ; strongEmphasisMarker . init ( options , \"strongEmphasisMarker\" , \"**\" ) ; bulletListMarker . init ( options , \"bulletListMarker\" , \"-\" ) ;", "private MongoClient buildMongoDbClient ( final BaseMongoDbProperties mongo ) { }", "private Collection < LTItemEntry > convertToLTItemEntries ( Collection < ItemStack > stacks ) { return stacks . stream ( ) . map ( i -> { final ItemDefinition c = itemManager . getItemDefinition ( i . getId ( ) ) ; final int id = c . getNote ( ) == - 1 ? c . getId ( ) : c . getLinkedNoteId ( ) ; final int price = itemManager . getItemPrice ( id ) ; return new LTItemEntry ( c . getName ( ) , i . getId ( ) , i . getQuantity ( ) , price ) ; } ) . collect ( Collectors . toList ( ) ) ; } private void updateConfig ( ) { this . getIgnoredItems = config . getIgnoredItems ( ) ; this . saveLoot = config . saveLoot ( ) ; this . chestLootChat = config . chestLootChat ( ) ; this . syncPanel = config . syncPanel ( ) ; this . localPersistence = config . localPersistence ( ) ; this . sortType = config . sortType ( ) ; this . whitelistEnabled = config . whitelistEnabled ( ) ; this . getWhitelist = config . getWhitelist ( ) ; this . blacklistEnabled = config . blacklistEnabled ( ) ; this . getBlacklist = config . getBlacklist ( ) ; this . sendLootValueMessages = config . sendLootValueMessages ( ) ; } private boolean isAtLMS ( ) { final int [ ] mapRegions = client . getMapRegions ( ) ; for ( int region : LAST_MAN_STANDING_REGIONS ) { if ( ArrayUtils . contains ( mapRegions , region ) ) { return true ; } } return false ; }", "public static Object getVOWithIdLockless ( Class arg , String idName , Integer id ) throws SystemException , Bug { Database db = CastorDatabaseService . getDatabase ( ) ; Object ret = null ; try { beginTransaction ( db ) ; ret = getVOWithIdLockless ( arg , idName , id , db ) ; commitTransaction ( db ) ; } catch ( Exception e ) { rollbackTransaction ( db ) ; throw new SystemException ( \"An error occurred when we tried to fetch the object \" + arg . getName ( ) + \". Reason:\" + e . getMessage ( ) , e ) ; } return ret ; } public static Object getVOWithIdLockless ( Class arg , String idName , Integer id , Database db ) throws SystemException , Bug { Object ret = null ; try { OQLQuery oql = db . getOQLQuery ( \"SELECT u FROM \" + arg . getName ( ) + \" u WHERE u.\" + idName + \" = $1 ORDER BY u.\" + idName + \" desc\" ) ; QueryResults results = oql . execute ( Database . READONLY ) ; if ( results . hasMore ( ) ) { IBaseEntity o = ( IBaseEntity ) results . next ( ) ; ret = o . getVO ( ) ; } results . close ( ) ; oql . close ( ) ; } catch ( Exception e ) { throw new SystemException ( \"An error occurred when we tried to fetch the object \" + arg . getName ( ) + \". Reason:\" + e . getMessage ( ) , e ) ; } return ret ; }", "", "final IV [ ] ivs = jst . ivs ; for ( int i = 0 ; i < ivs . length ; i ++ ) { }", "", "@ Deprecated protected Period computeHeartbeatInterval ( ) { return computeHearbeatInterval ( ) ; }", "Element pubsub = reply . getElement ( ) . addElement ( XMLConstants . PUBSUB_ELEM , JabberPubsub . NAMESPACE_URI ) ; Element items = pubsub . addElement ( XMLConstants . ITEMS_ELEM ) . addAttribute ( XMLConstants . NODE_ATTR , node ) ;", "if ( System . getProperty ( \"java.io.basetmpdir\" ) == null ) { System . setProperty ( \"java.io.basetmpdir\" , System . getProperty ( \"java.io.tmpdir\" ) ) ; } File newTmp = null , tmp = new File ( System . getProperty ( \"java.io.basetmpdir\" ) ) ;", "public void addAllExpressionRefs ( Collection < PropertyReference > refs ) { if ( expressionRefs == null ) { expressionRefs = Sets . newHashSet ( ) ; } expressionRefs . addAll ( refs ) ; } @ Override public ThemeDefImpl build ( ) { return new ThemeDefImpl ( this ) ; }", "assertThatExceptionOfType ( RuntimeException . class ) . isThrownBy ( application :: run ) ; ArgumentCaptor < RuntimeException > exceptionCaptor = ArgumentCaptor . forClass ( RuntimeException . class ) ;", "", "IEpmdListener { public static final String DEFAULT_VERSION = \"R13B\" ; public static final String [ ] SUPPORTED_MAIN_VERSIONS = new String [ ] { \"\" , \"R12B\" , \"R13B\" , \"R14A\" } ; public static final String [ ] SUPPORTED_VERSIONS = new String [ ] { \"\" , \"R12B-1\" , \"R12B-2\" , \"R12B-3\" , \"R12B-4\" , \"R12B-5\" , \"R13B\" , \"R14A\" } ; public enum BackendEvent { ADDED , REMOVED , MODULE_LOADED } public enum BackendOptions { DEBUG , AUTOSTART , TRAP_EXIT , NO_CONSOLE , INTERNAL , IDE , LOAD_ALL_NODES } private volatile ErlideBackend ideBackend ; private final Object ideBackendLock = new Object ( ) ; private final Map < IProject , Set < ErlideBackend > > executionBackends ; private final Map < String , ErlideBackend > buildBackends ; final List < IBackendListener > listeners ; private final Map < Bundle , CodeBundle > codeBundles ; private final EpmdWatcher epmdWatcher ; private final Set < ErlideBackend > allBackends ; @ SuppressWarnings ( \"synthetic-access\" ) private static final class LazyBackendManagerHolder { public static final BackendManager instance = new BackendManager ( ) ; } public static final BackendManager getDefault ( ) { return LazyBackendManagerHolder . instance ; } private BackendManager ( ) ; private final List < IBackendListener > listeners ; private final Map < Bundle , CodeBundle > codeBundles ; private final EpmdWatcher epmdWatcher ; private final Set < ErlideBackend > allBackends ; @ SuppressWarnings ( \"synthetic-access\" ) private static final class LazyBackendManagerHolder { public static final BackendManagerHolder", "r . put ( \"isVirtual\" , this . isVirtual ( ) ) ; r . put ( \"serial\" , this . getSerialNumber ( ) ) ;", "public static final TemplateConfiguration GENERAL_TEMPLATE_CONFIGURATION = new TemplateConfiguration ( ) ; public static final WindowTypeCapabilities GENERAL_WINDOW_TYPE_CAPABILITIES = new WindowTypeCapabilities ( ) ; public static final WindowCapability GENERAL_WINDOW_CAPABILITY = new WindowCapability ( ) ; public static final DisplayCapability GENERAL_DISPLAY_CAPABILITY = new DisplayCapability ( ) ; public static final SdlArtwork GENERAL_ARTWORK = new SdlArtwork ( \"sdl\" , FileType . GRAPHIC_PNG , R . drawable . ic_sdl , false ) ;", "private WaitUtil . WaitChecker getHealthyWaitChecker ( final String imageConfigDesc , final DockerAccess docker , final String containerId , final List < String > logOut ) { return new WaitUtil . WaitChecker ( ) { private boolean first = true ; @ Override public boolean check ( ) { try { final InspectedContainer container = docker . getContainer ( containerId ) ; if ( container == null ) { log . debug ( \"HealthyWaitChecker: Container %s not found\" ) ; return false ; } final String healthcheck = container . getHealthcheck ( ) ; if ( first ) { if ( healthcheck == null ) { throw new IllegalArgumentException ( \"Can not wait for healthy state of \" + imageConfigDesc + \". No HEALTHCHECK configured.\" ) ; } log . info ( \"%s: Waiting to become healthy\" , imageConfigDesc ) ; log . debug ( \"HealthyWaitChecker: Waiting for healthcheck: '%s'\" , healthcheck ) ; logOut . add ( \"on healthcheck '\" + healthcheck + \"'\" ) ; first = false ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( \"HealthyWaitChecker: Waiting on healthcheck '%s'\" , healthcheck ) ; } return container . isHealthy ( ) ; } catch ( DockerAccessException e ) { return false ; } } @ Override public void cleanUp ( ) { } } ; } private WaitUtil . WaitChecker getLogWaitChecker ( final String logPattern , final ServiceHub hub , final String containerId ) { return new WaitUtil . WaitChecker ( ) { private boolean first = true ; private LogGetHandle logHandle ; private volatile boolean detected = false ; @ Override public boolean check ( ) { return true ; } } @ Override public void cleanUp ( ) { } } ; } private WaitUtil . WaitChecker getLogWaitChecker ( final String logPattern , final ServiceHub hub , final String containerId ) { return new WaitUtil . Wait", "Listener , ResourceStateAdapter { private static final Logger s_logger = Logger . getLogger ( KvmServerDiscoverer . class ) ; private String _hostIp ; private final int _waitTime = 5 ; private String _kvmPrivateNic ; private String _kvmPublicNic ; private String _kvmGuestNic ; @ Inject HostDao _hostDao = null ; @ Inject ClusterDao _clusterDao ; @ Inject ResourceManager _resourceMgr ; @ Inject AgentManager _agentMgr ; @ Inject NetworkModel _networkMgr ; @ Inject ConfigurationDao _configDao ; @ Override public boolean processAnswers ( long agentId , long seq , Answer [ ] answers ) { return false ; } @ Override public boolean processCommands ( long agentId , long seq , Command [ ] commands ) { return false ; } @ Override public AgentControlAnswer processControlCommand ( long agentId , AgentControlCommand cmd ) { return null ; } @ Override public void processConnect ( HostVO host , StartupCommand cmd , boolean forRebalance ) { } @ Override public boolean processDisconnect ( long agentId , Status state ) { return false ; } @ Override public boolean isRecurring ( ) { return false ; } @ Override public int getTimeout ( ) { return 0 ; } @ Override public boolean processTimeout ( long agentId , long seq ) { return false ; } @ Override public Map < ? extends ServerResource , Map < String , String > > find ( long dcId , Long podId , Long clusterId , URI uri , String username , String password , List < String > hostTags ) throws DiscoveryException {", "private void resolveTracking ( ORecordOperation change , boolean onlyExecutorCase ) { boolean detectedChange = false ; List < OClassIndexManager . IndexChange > changes = new ArrayList < > ( ) ; if ( change . getRecordContainer ( ) instanceof ORecord && change . getRecord ( ) instanceof ODocument ) { detectedChange = true ; } }", "", "private AccountService accountService ; private Blockchain blockchain ; private PhasingPollService phasingPollService ; private IDexMatcherInterface dexMatcherService ;", "int M_LocatorTo_ID = Services . get ( IWarehouseBL . class ) . getDefaultLocator ( wh ) . getM_Locator_ID ( ) ; String MMPolicy = Services . get ( IProductBL . class ) . getMMPolicy ( replenish . getM_Product_ID ( ) ) ;", "Criterion filterHql = SosTemporalRestrictions . filterHql ( tf , 1 ) ; assertThat ( filterHql . toString ( ) , equalTo ( \"resultTime>:resultTime1 and resultTime<:instant1\" ) ) ;", "@ RunWith ( MockitoJUnitRunner . class )", "if ( CHECK_EFFECTIVE ) { boolean hasAny = false ; String stubPlus = stub + \".\" ; final Set < PermissionAttachmentInfo > effective = player . getEffectivePermissions ( ) ; if ( ! effective . isEmpty ( ) ) { for ( PermissionAttachmentInfo attach : effective ) { String permStr = attach . getPermission ( ) ; if ( permStr . startsWith ( stubPlus ) ) { hasAny = true ; String end = permStr . substring ( stubPlus . length ( ) ) ; if ( MathMan . isInteger ( end ) ) { int val = Integer . parseInt ( end ) ; if ( val > range ) { return val ; } if ( val > max ) { max = val ; } } } } } }", "{ { tree . removeBook ( book ) ; } }", "public Object lookup ( final String name ) throws NamingException { }", "import com . apollocurrency . aplwallet . apl . core . db . DatabaseManager ; import com . apollocurrency . aplwallet . apl . core . db . DerivedTablesRegistry ; import com . apollocurrency . aplwallet . apl . core . db . cdi . transaction . JdbiHandleFactory ; import com . apollocurrency . aplwallet . apl . core . db . cdi . transaction . JdbiTransactionalInterceptor ; import com . apollocurrency . aplwallet . apl . core . db . fulltext . FullTextConfig ; import com . apollocurrency . aplwallet . apl . core . db . fulltext . FullTextTrigger ;", "", "import org . devio . rn . splashscreen . SplashScreenReactPackage ; import com . bugsnag . BugsnagReactNative ; import com . hieuvp . fingerprint . ReactNativeFingerprintScannerPackage ;", "Map < String , Object > context = new MapMaker ( ) . makeMap ( ) ; context . put ( RetryQueryRunner . missingSegments , Lists . newArrayList ( ) ) ; Sequence res = query . run ( texasRanger , context ) ; final Sequence results ; if ( res == null ) { }", "final Object objectL = ( de . darmstadt . tu . crossing . cryptSL . Object ) ( ( PreDefinedPredicates ) lit . getCons ( ) ) . getObj ( ) . get ( 0 ) ; objectDecl = ( ObjectDecl ) objectL . eContainer ( ) ; final String typeL = objectDecl . getObjectType ( ) . getQualifiedName ( ) + ( ( objectDecl . getArray ( ) != null ) ? objectDecl . getArray ( ) : \"\" ) ;", ". delayUntil ( function ( ( organizationId , spaceId , userId ) -> requestAssociateSpaceAuditor ( this . cloudFoundryClient , spaceId , userId ) ) ) . flatMap ( function ( ( organizationId , spaceId , userId ) -> Mono . when (", "Connection tCon = dsProxy . getConnection ( ) ; tCon . getWarnings ( ) ; tCon . clearWarnings ( ) ; assertThat ( ( ( ConnectionProxy ) dsProxy . getConnection ( ) ) . getTargetConnection ( ) ) . isEqualTo ( con ) ;", "\"ionInfoMap\\\"m\\n#InitiateRebalanceNodeOnDon\" + \"orRequest\\022F\\n\\030rebalance_partition_info\\030\\001 \" + \"\\003(\\0132$.voldemort.RebalancePartitionInfoMa\" , \"p\\\"\\212\\001\\n\\034AsyncOperationStatusResponse\\022\\022\\n\\nre\" + \"quest_id\\030\\001 \\001(\\005\\022\\023\\n\\013description\\030\\002 \\001(\\t\\022\\016\\n\\006s\" + \"tatus\\030\\003 \\001(\\t\\022\\020\\n\\010complete\\030\\004 \\001(\\010\\022\\037\\n\\005error\\030\\005\" + \" \\001(\\0132\\020.voldemort.Error\\\"\\'\\n\\026TruncateEntrie\" + \"sRequest\\022\\r\\n\\005store\\030\\001 \\002(\\t\\\":\\n\\027TruncateEntri\" + \"esResponse\\022\\037\\n\\005error\\030\\001 \\001(\\0132\\020.voldemort.Er\" + \"ror\\\"*\\n\\017AddStoreRequest\\022\\037\\n\\005error\\030\\001 \\001(\\0132\\020.voldemort.Er\" + \"ror\\\"*\\n\\017AddStoreRequest\\022\\027\\n\\005error\\030\\017\\n\\005error\\030\\001 \\001(\\0132\\020.voldemort.Er\" + \"ror\\\"*\\n\\017AddStoreRequest\\022\\037\\n", "public void reselect ( ) { valueChanged ( getCurrentGroup ( ) , currentType ) ; }", "rgb = colors . getRingColor ( i , j ) ; builder . pos ( lengthStep * ( i + 1 ) , height , - halfWidth + widthStep * j ) . color ( rgb [ 0 ] , rgb [ 1 ] , rgb [ 2 ] , 255 ) . endVertex ( ) ; builder . pos ( lengthStep * i , height , - halfWidth + widthStep * j ) . color ( rgb [ 0 ] , rgb [ 1 ] , rgb [ 2 ] , 255 ) . endVertex ( ) ; builder . pos ( lengthStep * i , height , - halfWidth + widthStep * ( j + 1 ) ) . color ( rgb [ 0 ] , rgb [ 1 ] , rgb [ 2 ] , 255 ) . endVertex ( ) ; builder . pos ( lengthStep * i , 0 , - halfWidth + widthStep * ( j + 1 ) ) . color ( rgb [ 0 ] , rgb [ 1 ] , rgb [ 2 ] , 255 ) . endVertex ( ) ; builder . pos ( lengthStep * i , 0 , - halfWidth + widthStep * ( i + 1 ) , 0 , - halfWidth + widthStep * j ) . color ( rgb [ 0 ] , rgb [ 1 ] , rgb [ 2 ] , 255 ) . endVertex ( ) ; builder . pos ( lengthStep * i , 0 , - halfWidth + widthStep * j ) . color ( rgb [ 0 ] , rgb [ 1 ] , rgb [ 2 ] , 255 ) . endVertex ( ) ; builder . pos ( lengthStep * i , 0 , - halfWidth + widthStep * ( i + 1 ) , - halfWidth + widthStep * ( i + 1 ) , rgb [ 1 ] , rgb [ 1 ] , rgb [ 2 ] , 255 ) . endVertex ( ) ; builder . pos ( lengthStep * ( i + 1 ) , - halfWidth + widthStep * ( i + 1", "private static NBTBase createTagNms ( NamedBinaryTag . Type type , Object value )", "createSpaceIdAndUserId ( this . cloudFoundryClient , this . uaaClient , organizationName , spaceName , userName ) . flatMap ( function ( ( spaceId , userId ) -> Mono . when (", "assertThat ( fellowshipOfTheRing ) . extracting ( \"name\" , \"age\" ) . contains ( tuple ( \"Boromir\" , 37 ) , tuple ( \"Sam\" , 38 ) , tuple ( \"Legolas\" , 1000 ) ) ; assertThat ( fellowshipOfTheRing ) . extracting ( \"name\" , \"age\" , \"race.name\" ) . contains ( tuple ( \"Boromir\" , 37 , \"Man\" ) , tuple ( \"Sam\" , 38 , \"Hobbit\" ) , tuple ( \"Legolas\" , 1000 , \"Elf\" ) ) ; TolkienCharacter unknown = new TolkienCharacter ( \"unknown\" , 100 , null ) ; assertThat ( newArrayList ( sam , unknown ) ) . extracting ( \"name\" , \"age\" , \"race.name\" ) . contains ( tuple ( \"Sam\" , 38 , \"Hobbit\" ) , tuple ( \"unknown\" , 100 , null ) ) ;", "private GridServiceConfiguration [ ] svcCfgs ; private GridHadoopConfiguration hadoopCfg ;", "setState ( 855 ) ; match ( T__71 ) ;", "Set < ContainerEndpoint > endpoints = new LinkedHashSet < > ( ) ; ApplicationCertificate applicationCertificate ;", "setState ( 330 ) ;", "if ( fd == - 1 ) { return ; } else if ( this == bus10 ) { bus10 = null ; } else if ( this == bus11 ) { bus11 = null ; } else if ( this == bus12 ) { bus12 = null ; } else if ( this == bus13 ) { bus13 = null ; } else if ( this == bus14 ) { bus14 = null ; } else if ( this == bus15 ) { bus15 = null ; } else if ( this == bus16 ) { bus16 = null ; } else if ( this == bus17 ) { bus17 = null ; }", "private boolean isVideoCall = false ;", "static String getSqlCreateUniqueKey ( EntityType entityType , Attribute attr )", "", "defineStandaloneExampleSpecs ( ) ; defineJavaSEVersion ( ) ;", "* @ param elementSeed the element seed to get the range for * @ param operation the operation * @ param < T > the type of operation * @ return A List of Ranges that are required to return all elements that * match the parameters of the query . * @ throws RangeFactoryException if a range could not be created", "testSubject = new AsyncAnnotatedSagaManager ( resolverFactory , StubAsyncSaga . class ) ;", "ContinuousDistribution distribution = SmoothUniform . withParameters ( min , max , this . edgeSharpness ) ; final DoubleTensor dPdx = distribution . dLogProb ( value ) . get ( X ) . getValue ( ) ; final DoubleTensor density = distribution . logProb ( value ) ; final DoubleTensor dLogPdx = dPdx . divInPlace ( density ) ;", "* * @ param appWidgetProviderClass the app widget provider class * @ param widgetLayoutId id of the layout to inflate * @ param howManyToCreate number of new widgets to create", "", "public AbstractSE3TrajectoryMessage ( double trajectoryTime , Point3DReadOnly desiredPosition , QuaternionReadOnly desiredOrientation , ReferenceFrame trajectoryReferenceFrame )", "import java . util . concurrent . atomic . AtomicLong ;", "JsonObject config = config ( ) ; config . put ( \"signal\" , \"asr\" ) ; skipLogs = config ( ) . getBoolean ( \"skip-logs\" , false ) ;", "", "PaySafe ( R . drawable . thumb_paysafecard ) , PayWithPrivacy ( R . drawable . thumb_paywithprivacy ) ,", "public void createACLEntry ( DeepaMehtaObject object , Role role , Permissions permissions ) { TopicModel aclEntry = createAclEntryModel ( role , permissions ) ; facetsService . updateFacets ( object , \"dm4.accesscontrol.acl_facet\" , asList ( aclEntry ) , null , null ) ; }", "mes ( n , config ( ) . GAME_TICK * 2 , \"Gujuo offers you an awe inspiring jungle crafted Totem Pole.\" ) ;", "Engine . Index firstIndexRequest = new Engine . Index ( newUid ( Integer . toString ( i ) ) , doc , SequenceNumbersService . UNASSIGNED_SEQ_NO , Versions . MATCH_DELETED , VersionType . INTERNAL , PRIMARY , System . nanoTime ( ) , - 1 , false ) ;", "public OutputStream getOperationStreamOutput ( String name ) throws IOException { return operationQueueInstance . getOperationStreamWrite ( name , - 1 ) . getOutput ( ) ; }", "p = createProject ( other . getName ( ) , null , \"\" , \"\" , false , false , true , true ) ;", "assertThat ( sp1 . currentSubscriberCount ( ) ) . as ( \"sp1 has subscriber\" ) . isZero ( ) ;", "import net . minecraftforge . client . model . ModelLoader ; import net . minecraftforge . common . property . IExtendedBlockState ; import net . minecraftforge . fml . common . FMLCommonHandler ; import net . minecraftforge . fml . relauncher . Side ; import net . minecraftforge . fml . relauncher . SideOnly ; import net . minecraftforge . event . world . BlockEvent ;", "import android . support . v4 . app . FragmentManager ; import android . util . Log ;", "public CloseableIterable < Object > generateDomainObjectsFromElements ( ) { }", "@ Parameter ( names = { \"-f\" , \"--force\" } , description = \"force reset of the security information without prompting\" ) boolean forceResetSecurity = false ; @ Parameter ( names = \"--clear-instance-name\" , description = \"delete any existing instance name without prompting\" )", "import static org . eclipse . ceylon . compiler . js . util . TypeUtils . getConstructor ; import static org . eclipse . ceylon . compiler . js . util . TypeUtils . outputQualifiedTypename ; import static org . eclipse . ceylon . compiler . js . util . TypeUtils . printCollectedTypeArguments ; import static org . eclipse . ceylon . compiler . js . util . TypeUtils . printTypeArguments ; import static org . eclipse . ceylon . compiler . js . util . TypeUtils . typeNameOrList ; import static org . eclipse . ceylon . model . typechecker . model . ModelUtil . getContainingDeclaration ; import static org . eclipse . ceylon . model . typechecker . model . ModelUtil . isConstructor ;", "Attribute attr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( attrName ) . getMock ( ) ; when ( entityType . getAttribute ( attrName ) ) . thenReturn ( attr ) ;", "public IStrategoTerm getOutline ( EditorState editorState ) { }", "for ( InstanceIndexItem item : instanceIndex . values ( ) ) { instanceIndexItemDao . addInstanceIndexItem ( item ) ; } instanceIndexItemDao . getInstanceIndexItems ( ) . subscribe ( new Action1 < List < org . storymaker . app . db . InstanceIndexItem > > ( ) { @ Override public void call ( List < org . storymaker . app . db . InstanceIndexItem > instanceIndexItems ) { for ( org . storymaker . app . db . InstanceIndexItem item : instanceIndexItems ) { Log . d ( \"RX_DB\" , \"GOT ITEM \" + item . getId ( ) + \", TITLE: \" + item . getTitle ( ) ) ; } } } ) ;", "Assert . fail ( ex . getMessage ( ) ) ;", "", "private List < String > getColumnNames ( Number [ ] cols , long tableOid ) throws SQLException { Map < Integer , String > tableColumns = cachedColumnNamesByTableOid . get ( tableOid ) ; }", "@ Deprecated protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader ( DefaultListableBeanFactory beanFactory ) { throw new UnsupportedOperationException ( ) ; }", "public final DefaultKeywordClass getElement ( ) { return metadata ; }", "setState ( 615 ) ; ( ( TreatExprContext ) _localctx ) . main_expr = castableExpr ( ) ; setState ( 619 ) ;", "struct . db_name = iprot . readString ( ) ; struct . setDb_nameIsSet ( true ) ;", "boolean hasFailures = false ; for ( int curPartition = minPartition ; curPartition <= maxPartition ; curPartition ++ ) { try { long startTime = System . currentTimeMillis ( ) ; int reduceId = host . getPartitionId ( ) + curPartition - minPartition ; srcAttemptId = scheduler . getIdentifierForFetchedOutput ( srcAttemptId . getPathComponent ( ) , reduceId ) ; Path filename = getShuffleInputFileName ( srcAttemptId . getPathComponent ( ) , null ) ; TezIndexRecord indexRecord = getIndexRecord ( srcAttemptId . getPathComponent ( ) , reduceId ) ; mapOutput = getMapOutputForDirectDiskFetch ( srcAttemptId , filename , indexRecord ) ; long endTime = System . currentTimeMillis ( ) ; scheduler . copySucceeded ( srcAttemptId , host , indexRecord . getPartLength ( ) , indexRecord . getRawLength ( ) , ( endTime - startTime ) , mapOutput , true ) ; } catch ( IOException e ) { if ( mapOutput != null ) { mapOutput . abort ( ) ; } } }", "static boolean isMap ( @ NotNull TypeMirror type ) { String outerClassType = TypeUtils . getOuterClassType ( type ) ; return outerClassType . equals ( Map . class . getName ( ) ) || outerClassType . equals ( HashMap . class . getName ( ) ) || outerClassType . equals ( LinkedHashMap . class . getName ( ) ) ; }", "", "import cz . startnet . utils . pgdiff . schema . AbstractTable ; import cz . startnet . utils . pgdiff . schema . IRelation ;", "return Response . ok ( ReflectionUtil . getSubTypes ( Function . class ) ) . header ( GAFFER_MEDIA_TYPE_HEADER , GAFFER_MEDIA_TYPE ) . build ( ) ;", "import javax . ws . rs . GET ; import javax . ws . rs . Path ; import java . util . Collection ; import java . util . Properties ; import static ai . grakn . engine . GraknEngineConfig . FACTORY_ANALYTICS ; import static ai . grakn . engine . GraknEngineConfig . FACTORY_INTERNAL ; import static ai . grakn . util . REST . GraphConfig . COMPUTER ; import static ai . grakn . util . REST . GraphConfig . DEFAULT ; import static ai . grakn . util . REST . Request . GRAPH_CONFIG_PARAM ; import static ai . grakn . util . REST . Request . KEYSPACE ; import static ai . grakn . util . REST . Request . KEYSPACE_PARAM ; import static ai . grakn . util . REST . WebPath . System . CONFIGURATION ; import static ai . grakn . util . REST . WebPath . System . INITIALISE ; import static ai . grakn . util . REST . WebPath . System . KEYSPACES ;", "import org . redisson . misc . HashValue ;", "import static ai . grakn . engine . controller . util . Requests . mandatoryQueryParameter ; import static ai . grakn . engine . tasks . TaskSchedule . recurring ; import static ai . grakn . util . ErrorMessage . MISSING_MANDATORY_REQUEST_PARAMETERS ; import static ai . grakn . util . REST . WebPath . Tasks . GET ; import static ai . grakn . util . REST . WebPath . Tasks . STOP ; import static ai . grakn . util . REST . WebPath . Tasks . TASKS ; import static ai . grakn . util . REST . WebPath . Tasks . TASKS_BULK ; import static java . lang . Long . parseLong ; import static java . time . Instant . ofEpochMilli ; import static java . util . stream . Collectors . toList ; import ai . grakn . engine . TaskId ;", "", "private final Set < SupportedType > SUPPORTED_TYPES = ImmutableSet . < SupportedType > builder ( ) . add ( OmConstants . OBS_TYPE_TRUTH_OBSERVATION_TYPE ) . build ( ) ;", "invokerAdvisors . orderedStream ( ) . collect ( Collectors . toList ( ) ) , filters . orderedStream ( ) . collect ( Collectors . toList ( ) ) ) ;", "Map < String , String > headers = new HashMap < > ( ) ;", "jj_la1 [ 244 ] = jj_gen ;", "setState ( 670 ) ;", "import com . google . common . collect . SetMultimap ;", "protected boolean allInnerJoins ( JoinOperator op ) { return ( ( op . getJoinType ( ) == JoinType . INNER ) && ( ( op . left == null ) || allInnerJoins ( op . left ) ) && ( ( op . right == null ) || allInnerJoins ( op . right ) ) ) ; }", "if ( checkRightSpaces ( after , op . getStop ( ) , 1 ) ) { printer . error ( Rules . WHITESPACE , Messages . OPERATOR + Messages . SPACE_AFTER , ListenerUtil . getContextStartLocation ( op ) ) ; }", "import com . quickblox . ui . kit . chatmessage . adapter . listeners . QBChatMessageLinkClickListener ; import com . quickblox . ui . kit . chatmessage . adapter . utils . QBChatMessageClickMovement ; import com . quickblox . content . model . QBFile ; import com . quickblox . ui . kit . chatmessage . adapter . utils . LocationUtils ;", "BleServer . StateListener m_defaultServerStateListener ; final P_ServerManager m_serverMngr ;", "import javax . annotation . Nullable ; import org . apache . bcel . Const ;", "private void publicizeExternalIdentifier ( CommandContext ctxt ) throws CommandException { String protocol = getDataset ( ) . getProtocol ( ) ; PersistentIdentifierServiceBean idServiceBean = PersistentIdentifierServiceBean . getBean ( protocol , ctxt ) ; try { idServiceBean . publicizeIdentifier ( theDataset ) ; theDataset . setGlobalIdCreateTime ( new Date ( ) ) ; theDataset . setIdentifierRegistered ( true ) ; for ( DataFile df : theDataset . getFiles ( ) ) { logger . fine ( \"registering global id for file \" + df . getId ( ) ) ; idServiceBean . publicizeIdentifier ( df ) ; df . setGlobalIdCreateTime ( new Date ( ) ) ; df . setIdentifierRegistered ( true ) ; } } catch ( Throwable e ) { ctxt . datasets ( ) . removeDatasetLocks ( theDataset . getId ( ) , DatasetLock . Reason . pidRegister ) ; throw new CommandException ( BundleUtil . getStringFromBundle ( \"dataset.publish.error\" , idServiceBean . getProviderInformation ( ) ) , this ) ; } } }", "struct . success . write ( oprot ) ;", "import org . voltdb . utils . DBBPool . BBContainer ;", "protected boolean onError ( final Throwable exception ) { if ( super . onError ( exception ) ) { return true ; } }", "HashMap < String , Object > manifestElements , boolean wasDiskPut , FCPServer server ) throws IdentifierCollisionException , MalformedURLException {", "import com . dianping . cat . consumer . metric . model . entity . Segment ; import com . dianping . cat . consumer . productline . ProductLineConfig ;", "super ( LOCATION , aList , new Factory ( ) ) ;", "for ( final IFeature feature : featureModel . getFeatures ( ) ) { }", "@ Test @ NotYetImplemented public void test2 ( ) { ClassNode cls = getClassNode ( TestCls . class ) ; CodeWriter codeWriter = cls . getCode ( ) ; String code = codeWriter . toString ( ) ; String [ ] lines = code . split ( CodeWriter . NL ) ; }", "import org . tron . core . config . args . Args ;", "{ try { logger . debug ( \"Received hostId: \" + hostId ) ; KeyManager keyManager = securityManager . getKeyManager ( ) ; KeyIdentityDTO keyIdentityDTO = new KeyIdentityDTO ( keyManager . getKeyTrustTree ( hostId ) ) ; keyIdentityDTO . setChild ( false ) ; keyIdentityDTO . setTrustLevel ( KeyTrustLevel . Ultimate . getId ( ) ) ; keyIdentityDTO . setParentId ( keyIdentityDTO . getHostId ( ) ) ; keyIdentityDTO . setParentPublicKeyFingerprint ( keyIdentityDTO . getParentPublicKeyFingerprint ( ) ) ; resetTrustLevels ( keyIdentityDTO , keyManager ) ; return Response . ok ( JsonUtil . toJson ( keyIdentityDTO ) ) . build ( ) ; } catch ( Exception ex ) { return Response . serverError ( ) . build ( ) ; } } private void resetTrustLevels ( KeyIdentityDTO keyIdentityDTO , KeyManager keyManager ) { for ( final KeyIdentityDTO identityDTO : keyIdentityDTO . getTrusts ( ) ) { identityDTO . setChild ( true ) ; identityDTO . setTrustLevel ( keyManager . getTrustLevel ( keyIdentityDTO . getHostId ( ) , identityDTO . getIdentityId ( ) ) ) ; resetTrustLevels ( identityDTO , keyManager ) ; } }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 2 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "profile = new NicProfile ( nic , network , nic . getBroadcastUri ( ) , nic . getIsolationUri ( ) , networkRate , _networkModel . isSecurityGroupSupportedInNetwork ( network ) , _networkModel . getNetworkTag ( vmProfile . getHypervisorType ( ) , network ) ) ;", "@ Transactional ( readOnly = true ) public List < Application > getApplicationsForCommand (", "import org . apache . commons . lang3 . exception . ExceptionUtils ;", "import org . cloudfoundry . client . lib . domain . CloudServiceBinding ; import org . cloudfoundry . client . lib . domain . CloudServiceInstance ; import org . cloudfoundry . client . lib . domain . CloudServiceBroker ;", "public class TestServerSite extends TestCase { static private org . slf4j . Logger log = org . slf4j . LoggerFactory . getLogger ( TestServerSite . class ) ; }", "all . add ( C ( StateMerger . class ) ) ; all . add ( C ( BaselineCreator . class , DefaultBaselineCreator . class ) ) ; all . add ( C ( BaselineService . class , DefaultBaselineService . class ) . req ( BaselineDao . class ) ) ; all . add ( C ( BaselineConfigManager . class , BaselineConfigManager . class ) ) ; all . add ( C ( MetricBaselineReportBuilder . class ) . req ( GraphDao . class , DailyGraphDao . class , HourlyReportDao . class , DailyReportDao . class ) . req ( WeeklyReportDao . class , MonthlyReportDao . class ) . req ( com . dianping . cat . report . service . ReportService . class ) . req ( MetricConfigManager . class , ProductLineConfigManager . class ) . req ( BaselineCreator . class , BaselineService . class , BaselineConfigManager . class ) ) ; all . add ( C ( MetricAlert . class ) . req ( com . dianping . cat . report . service . ReportService . class , ServerConfigManager . class ) . req ( MetricConfigManager . class , ProductLineConfigManager . class ) . req ( BaselineCreator . class , BaselineCreator . class , BaselineService . class , BaselineConfigManager . class ) . req ( BaselineCreator . class , BaselineService . class , BaselineConfigManager . class ) ) ; all . add ( C ( MetricAlert . class ) . req ( com . dianping . cat . report . service . ReportService . class , ServerConfigManager . class ) . req ( MetricConfigManager . class , ProductLineConfigManager . class ) . req ( BaselineCreator . class , BaselineService . class , BaselineService . class", "put ( RegistrationPinV2MigrationJob . KEY , new RegistrationPinV2MigrationJob . Factory ( ) ) ; put ( StickerLaunchMigrationJob . KEY , new StickerLaunchMigrationJob . Factory ( ) ) ; put ( StickerAdditionMigrationJob . KEY , new StickerAdditionMigrationJob . Factory ( ) ) ; put ( StorageKeyRotationMigrationJob . KEY , new StorageKeyRotationMigrationJob . Factory ( ) ) ;", "", "{ return iterator ( null , query , options ) ; } DBIterator < Family > iterator ( ClientSession clientSession , Query query , QueryOptions options ) throws CatalogDBException { MongoCursor < Document > mongoCursor = getMongoCursor ( clientSession , query , options ) ; return new FamilyMongoDBIterator < > ( mongoCursor , clientSession , familyConverter , null , dbAdaptorFactory . getCatalogIndividualDBAdaptor ( ) , options ) ; }", "@ ExtendWith ( WiremockResolver . class )", "private boolean handleInlineHit ( AbstractEvent event ) { if ( ! moveMode ( mode ) || app . isRightClick ( event ) || view . getHits ( ) . isEmpty ( ) || event . isControlDown ( ) ) { lastInline = null ; } }", "public File createFileFromRestorable ( StringTokenizer tokens ) { String fileName = tokens . nextToken ( \";\" ) . substring ( 1 ) ; if ( PORTABLE_APP && fileName . startsWith ( \":\" ) && USER_DRIVE . endsWith ( \":\" ) ) { fileName = USER_DRIVE + fileName . substring ( 1 ) ; } File file = new File ( fileName ) ; return file ; } void openLastMapOnStart ( ) { if ( mapSelectedOnStart != null ) { if ( ! tryToChangeToMapView ( mapSelectedOnStart ) ) safeOpen ( mapSelectedOnStart ) ; } }", "", "try ( Scanner master = connMaster . createScanner ( masterTable , Authorizations . EMPTY ) ; Scanner peer = connPeer . createScanner ( peerTable , Authorizations . EMPTY ) ) { Iterator < Entry < Key , Value > > masterIter = master . iterator ( ) , peerIter = peer . iterator ( ) ; Entry < Key , Value > masterEntry = null , peerEntry = null ; while ( masterIter . hasNext ( ) && peerIter . hasNext ( ) ) { masterEntry = masterIter . next ( ) ; peerEntry = peerIter . next ( ) ; assertEquals ( masterEntry . getKey ( ) + \" was not equal to \" + peerEntry . getKey ( ) , 0 , masterEntry . getKey ( ) . compareTo ( peerEntry . getKey ( ) , PartialKey . ROW_COLFAM_COLQUAL_COLVIS ) ) ; assertEquals ( masterEntry . getValue ( ) , peerEntry . getValue ( ) ) ; } }", "final Ternary < Long , Boolean , ListProjectResourcesCriteria > domainIdRecursiveListProject = new Ternary < Long , Boolean , ListProjectResourcesCriteria > ( domainId , isRecursive , null ) ; _accountMgr . buildACLSearchParameters ( caller , id , accountName , null , permittedDomains , permittedAccounts , permittedResources , domainIdRecursiveListProject , listAll , false , action ) ;", "import static org . schabi . newpipe . player . helper . PlayerHelper . globalScreenOrientationLocked ;", "jj_la1 [ 231 ] = jj_gen ; break label_157 ;", "private void sleep ( ) { try { Thread . sleep ( 100 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } @ Test", "if ( request instanceof GetObservationRequest && ( ( GetObservationRequest ) request ) . hasResultFilter ( ) ) { List < DataEntity < ? > > list = new LinkedList < > ( ) ; for ( SubQueryIdentifier identifier : ResultFilterRestrictions . SubQueryIdentifier . values ( ) ) { Criteria c = getSeriesValueCriteriaFor ( request , series , null , session ) ; addChunkValuesToCriteria ( c , chunkSize , currentRow , request ) ; checkAndAddResultFilterCriterion ( c , ( GetObservationRequest ) request , identifier , session ) ; list . addAll ( c . list ( ) ) ; } return list ; } else { Criteria c = getSeriesValueCriteriaFor ( request , series , null , session ) ; addChunkValuesToCriteria ( c , chunkSize , currentRow , request ) ; return ( List < DataEntity < ? > > ) c . list ( ) ; }", "public SnapshotTriggerDefinition snapshotTriggerDefinition ( ) { return new EventCountSnapshotTriggerDefinition ( mock ( Snapshotter . class ) , 2 ) ; } @ Bean public ParameterResolverFactory customerParameterResolverFactory ( ) { return new SimpleResourceParameterResolverFactory ( singleton ( new CustomResource ( ) ) ) ; } @ Bean public EventStore eventStore ( ) { return new EmbeddedEventStore ( storageEngine ( ) ) ; } @ Bean", "return studyDBAdaptor . createGroup ( study . getUid ( ) , group ) ;", "import org . junit . jupiter . api . Test ; import reactor . core . Scannable ;", "import java . util . Collection ; import java . util . Collections ;", "if ( OreUtil . doesOreExistAndValid ( \"ingotBrass\" ) ) { ItemStack brassStack = getOre ( \"ingotBrass\" ) ; brassStack . setCount ( 4 ) ; RecipeHandler . addRecipe ( new AlloySmelterRecipe ( ingotCopper3 , \"ingotZinc\" , brassStack , 200 , 16 ) ) ; RecipeHandler . addRecipe ( new AlloySmelterRecipe ( ingotCopper3 , \"dustZinc\" , brassStack , 200 , 16 ) ) ; RecipeHandler . addRecipe ( new AlloySmelterRecipe ( dustCopper3 , \"ingotZinc\" , brassStack , 200 , 16 ) ) ; RecipeHandler . addRecipe ( new AlloySmelterRecipe ( new AlloySmelterRecipe ( dustCopper3 , \"dustZinc\" , brassStack , 200 , 16 ) ) ; RecipeHandler . addRecipe ( new AlloySmelterRecipe ( new AlloySmelterRecipe ( new AlloySmelterRecipe ( dustCopper3 , \"ingotZinc\" , brassStack , 200 , 16 ) ) ; }", "else if ( ACTION_DOWNLOAD_AND_IMPORT_KEYS . equals ( action ) || ACTION_IMPORT_KEYBASE )", "public static final int JOURNAL_VERSION = 2 ; public static final String TACHYON_CONF_SITE = \"tachyon.conf.site\" ; public static final String DEFAULT_HOME = \"/mnt/tachyon_default_home\" ; public static final String DEFAULT_DATA_FOLDER = \"/tachyon/data\" ; public static final String DEFAULT_JOURNAL_FOLDER = DEFAULT_HOME + \"/journal/\" ; public static final String [ ] DEFAULT_STORAGE_TIER_DIR_QUOTA = \"512MB,64GB,1TB\" . split ( \",\" ) ; public static final String TACHYON_HOME = \"tachyon.home\" ; public static final String WEB_RESOURCES = \"tachyon.web.resources\" ; public static final String UNDERFS_ADDRESS = \"tachyon.underfs.address\" ; public static final String UNDERFS_DATA_FOLDER = \"tachyon.data.folder\" ; public static final String UNDERFS_WORKERS_FOLDER = \"tachyon.workers.folder\" ; public static final String UNDERFS_HDFS_IMPL = \"tachyon.underfs.hdfs.impl\" ; public static final String ASYNC_ENABLED = \"tachyon.async.enabled\" ; public static final String MAX_COLUMNS = \"tachyon.max.columns\" ; public static final String IN_TEST_MODE = \"tachyon.test.mode\" ; public static final String UNDERFS_GLUSTERFS_IMPL = \"tachyon.underfs.hdfs.impl\" ; public static final String ASYNC_ENABLED = \"tachyon.async.enabled\" ; public static final String MAX_COLUMNS = \"tachyon.max.columns\" ; public static", "import com . aptana . editor . common . scripting . snippets . ExpandSnippetVerifyKeyListener ; import com . aptana . editor . common . preferences . IPreferenceConstants ;", "MethodSignature signature = ( MethodSignature ) pjp . getSignature ( ) ; if ( metrics != null ) metrics . counter ( MetricType . REPOSITORY , calculatePointcut ( pjp . toShortString ( ) ) ) . increment ( ) ;", "saveMessageToCache ( chatMessage , chatMessage . getSenderId ( ) , chatMessage . getSenderId ( ) , null ) ;", "import androidx . annotation . Nullable ; import androidx . appcompat . app . AppCompatActivity ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ;", "net = new NetStreamReceiver ( \"localhost\" , 2002 , debug ) ;", "", "private RestResponse < Job > bwa ( ) throws ClientException { ObjectMap params = new AlignmentWebService . BwaRunParams (", "import lsfusion . base . RawFileData ;", "this . entityTypeFactory = entityTypeFactory ; this . attributeFactory = attributeFactory ;", "import java . io . UnsupportedEncodingException ;", "capiBehavior = new ElasticSearchCAPIBehavior ( client , logger , bucketUUIDCache , pluginSettings ) ; couchbaseBehavior = new ElasticSearchCouchbaseBehavior ( client , logger , bucketUUIDCache , pluginSettings ) ;", "import java . io . InputStream ; import com . ullink . slack . simpleslackapi . blocks . Block ;", "public int parsePermissions ( String permission ) { permission = permission . toLowerCase ( Locale . US ) ; }", "Integer [ ] colNumbers = ( Integer [ ] ) res . getArray ( \"col_numbers\" ) . getArray ( ) ; String [ ] colNames = ( String [ ] ) res . getArray ( \"col_names\" ) . getArray ( ) ; Long [ ] colTypeIds = ( Long [ ] ) res . getArray ( \"col_type_ids\" ) . getArray ( ) ; String [ ] colTypeName = ( String [ ] ) res . getArray ( \"col_type_name\" ) . getArray ( ) ; String [ ] colDefaults = ( String [ ] ) res . getArray ( \"col_defaults\" ) . getArray ( ) ; String [ ] colComments = ( String [ ] ) res . getArray ( \"col_comments\" ) . getArray ( ) ; Boolean [ ] colNotNull = ( Boolean [ ] ) res . getArray ( \"col_notnull\" ) . getArray ( ) ; Integer [ ] colStatictics = ( Integer [ ] ) res . getArray ( \"col_statictics\" ) . getArray ( ) ; Boolean [ ] colIsLocal = ( Boolean [ ] ) res . getArray ( \"col_local\" ) . getArray ( ) ; Long [ ] colCollation = ( Long [ ] ) res . getArray ( \"col_collation\" ) . getArray ( ) ; Long [ ] colTypCollation = ( Long [ ] ) res . getArray ( \"col_typcollation\" ) . getArray ( ) ; String [ ] colCollationName = ( String [ ] ) res . getArray ( \"col_collationname\" ) . getArray ( ) ; String [ ] colCollationSchema = ( String [ ] ) res . getArray ( \"col_collationnspname\" ) . getArray ( ) ; Integer [ ] ) res . getArray ( \"col_local\" ) . getArray ( ) ; Long [ ] ) res . getArray ( \"col_typcollation\" ) . getArray ( ) ;", "", "private static final String ATTR_NAME = \"android:name\" ; private static final String ATTR_AUTHORITIES = \"android:authorities\" ; private static final String ATTR_APPLICATION_ICON = \"android:icon\" ; private static final String ATTR_APPLICATION_LABEL = \"android:label\" ; private static final String ATTR_APPLICATION_THEME = \"android:theme\" ;", "public void recordComponentsCannotHaveModifiers ( RecordComponent comp ) { if ( ! this . options . enablePreviewFeatures ) return ; String [ ] arguments = new String [ ] { new String ( comp . name ) } ; this . handle ( IProblem . RecordComponentsCannotHaveModifiers , arguments , arguments , comp . sourceStart , comp . sourceEnd ) ; } public void recordIllegalParameterNameInCanonicalConstructor ( RecordComponentBinding comp , Argument arg ) { if ( ! this . options . enablePreviewFeatures ) return ; this . handle ( IProblem . RecordIllegalParameterNameInCanonicalConstructor , new String [ ] { new String ( arg . name ) , new String ( comp . name ) } , new String [ ] { new String ( arg . name ) , new String ( comp . name ) } , arg . sourceStart , arg . sourceEnd ) ; } public void recordIllegalExplicitFinalFieldAssignInCompactConstructor ( FieldBinding field , FieldReference fieldRef ) { if ( ! this . options . enablePreviewFeatures ) return ; String [ ] arguments = new String [ ] { new String ( field . name ) } ; this . handle ( IProblem . RecordIllegalExplicitFinalFieldAssignInCompactConstructor , arguments , arguments , fieldRef . sourceStart , fieldRef . sourceEnd ) ; } private void sealedMissingModifier ( int problem , SourceTypeBinding type , TypeDeclaration typeDecl , TypeBinding superTypeBinding ) { if ( ! this . options . enablePreviewFeatures ) return ; String name = new String ( type . sourceName ( ) ) ; String superTypeFullName = new String ( type . sourceName ( ) ) ; String superTypeFullName = new String ( superTypeBinding . readableName ( ) ) ; String superTypeShortName = new String ( superTypeBinding . shortReadableName ( ) ; if ( superTypeShortName . equals ( name ) ) superTypeShortName = superTypeFullName ; this . handle ( problem , new String [ ] { if ( ! this . options . enablePreviewFeatures )", "colibriConference . updateSourcesInfo ( participant . getSSRCsCopy ( ) ,", "super ( \"current_transformer\" , ( ) -> EnergyMeterTileEntity . TYPE , DUMMY , FACING , BlockStateProperties . WATERLOGGED ) ;", "import micdoodle8 . mods . galacticraft . core . energy . tile . TileBaseUniversalElectrical ; import micdoodle8 . mods . galacticraft . core . items . ItemBlockDesc ;", "SharedPreferences sharedPrefs = AppSettings . getSharedPreferences ( this ) ; int currentAccount = AppSettings . getInstance ( this ) . widgetAccountNum ;", "import org . elasticsearch . index . seqno . LocalCheckpointService ;", "* Put an dictionary of complex type with values { \"0\" : { \"integer\" : 1 , \"string\" : \"2\" } , \"1\" : { \"integer\" : 3 , \"string\" : \"4\" } , \"2\" : { \"integer\" : 5 , \"string\" : \"6\" } }", ". isNotEqualTo ( Solvers . PRINCESS ) ; testBasicProverTimeoutInt ( ( ) -> context . newProverEnvironment ( ) ) ; } @ Test public void testProverTimeoutBv ( ) throws SolverException , InterruptedException { requireBitvectors ( ) ; TruthJUnit . assume ( ) . withMessage ( solverToUse ( ) + \" does not support interruption\" ) . that ( solverToUse ( ) ) . isNotEqualTo ( Solvers . PRINCESS ) ; testBasicProverTimeoutBv ( ( ) -> context . newProverEnvironment ( ) ) ;", "domainMap . put ( \"createDomainPyScript\" , \"integration-tests/src/test/resources/domain-home-on-pv/create-domain-auto-custom-sit-config.py\" ) ; domainMap . put ( \"voyagerWebPort\" , new Integer ( \"30312\" ) ) ;", "public CompoundFileDirectory openCompoundInput ( String name , IOContext context ) throws IOException { FileEntry fileEntry = this . entries . get ( IndexFileNames . stripSegmentName ( name ) ) ; if ( fileEntry == null ) { throw new FileNotFoundException ( \"file \" + name + \" does not exists in this CFS\" ) ; } return new NestedCompoundFileDirectory ( name , bufferSize , fileEntry . offset , fileEntry . length ) ; }", "import org . apache . commons . io . filefilter . FileFilterUtils ; import org . apache . commons . io . filefilter . IOFileFilter ; import org . eclipse . egit . github . core . Repository ; import org . eclipse . jgit . api . errors . GitAPIException ;", "latestMilestoneTracker . getLatestMilestoneHash ( ) , latestMilestoneTracker . getLatestMilestoneIndex ( ) , snapshotProvider . getLatestSnapshot ( ) . getHash ( ) , snapshotProvider . getLatestSnapshot ( ) . getIndex ( ) ,", "@ Override public Object removeAttribute ( String name ) { }", "import javax . annotation . Resource ; import javax . annotation . PreDestroy ;", "doc . add ( new Table ( UnitValue . createPercentArray ( 1 ) ) . useAllAvailableWidth ( ) . addCell ( \"Hello\" ) . setBorder ( new SolidBorder ( ColorConstants . ORANGE , 5 ) ) ) ;", "@ Override public DocValues docValues ( String field ) throws IOException { return core . fields . docValues ( field ) ; } @ Override protected void readerFinished ( ) { }", "if ( et . getTypeConstructor ( ) ) { et . addError ( \"type constructor may not occur as extended type\" ) ; } else { ProducedType type = et . getTypeModel ( ) ; if ( type != null ) { TypeDeclaration etd = et . getDeclarationModel ( ) ; if ( etd != null && ! ( etd instanceof UnknownType ) ) { if ( etd instanceof Constructor ) { type = type . getExtendedType ( ) ; etd = etd . getExtendedTypeDeclaration ( ) ; } if ( etd == td ) { } else if ( etd instanceof TypeParameter ) { et . addError ( \"directly extends a type parameter: '\" + type . getDeclaration ( ) . getName ( unit ) + \"'\" ) ; } else if ( etd instanceof Interface ) { et . addError ( \"extends an interface: '\" + type . getDeclaration ( ) . getName ( unit ) + \"'\" ) ; } else if ( etd instanceof TypeAlias ) { et . addError ( \"extends a type alias: '\" + type . getDeclaration ( ) . getName ( unit ) + \"'\" ) ; } else { td . setExtendedType ( type ) ; } } } }", "@ ConditionalOnMissingBean ( value = ErrorController . class , search = SearchStrategy . CURRENT ) public BasicErrorController basicErrorController ( ErrorAttributes errorAttributes , ObjectProvider < ErrorViewResolver > errorViewResolvers ) { return new BasicErrorController ( errorAttributes , this . serverProperties . getError ( ) , errorViewResolvers . orderedStream ( ) . collect ( Collectors . toList ( ) ) ) ; }", "public List < String > addTabCompletionOptions ( ICommandSender sender , String [ ] args , BlockPos pos )", "public get_table_objects_by_name_req_result ( GetTablesResult success ,", "DateCalculator dateCalculator , TimelineAnalytics timelineAnalytics , SocialRepository socialRepository , SpannableFactory spannableFactory , StoreCredentialsProvider storeCredentialsProvider ) {", "import com . stratio . meta . common . result . QueryStatus ; import com . stratio . streaming . api . IStratioStreamingAPI ;", "private Socket createSSLSocket ( String host , int port ) throws IOException { SSLSocket socket = null ; SSLSocketFactory factory = null ; try {", "else if ( root_ == FAT_ARROW_EXPRESSION ) { result_ = fatArrowExpression ( builder_ , 0 ) ; } else if ( root_ == FINAL_META ) { result_ = finalMeta ( builder_ , 0 ) ; }", "import java . io . File ; import java . util . Collections ;", "import javax . ws . rs . ApplicationPath ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event not arrived\" , callback . isEventArrived ( ) ) ;", "", "import io . apicurio . hub . api . bitbucket . BitbucketException ; import io . apicurio . hub . api . bitbucket . IBitbucketSourceConnector ;", "throw SQLError . createSQLException ( Messages . getString ( \"Statement.0\" ) , SQLError . SQL_STATE_CONNECTION_NOT_OPEN , null ) ;", "tab . put ( \"description\" , props . containsKey ( i + \".description\" ) ? ( String ) props . get ( i + \".description\" ) : \"\" ) ;", "import de . ovgu . featureide . fm . core . io . manager . IFileManager ;", "public static int getCompletionPrefixLength ( @ NotNull CompletionParameters completionParameters , @ NotNull Document document ) { TextRange range = completionParameters . getPosition ( ) . getTextRange ( ) ; if ( range != null ) { int offset = range . getStartOffset ( ) ; int lineNumber = document . getLineNumber ( offset ) ; return offset - document . getLineStartOffset ( lineNumber ) ; } return 0 ; } public static void performCompletion ( @ NotNull final String path , @ Nullable final String fileContent , final int line , final int column , @ NotNull final CompletionCallback completionCallback ) { }", "public DatalogProgram unfold ( DatalogProgram programAfterRewriting ) { return unfolder . unfold ( programAfterRewriting , \"ans1\" , QuestConstants . BUP , true ) ; } public MetadataForQueryOptimization getMetadataForQueryOptimization ( ) { return metadataForQueryOptimization ; } public ImmutableList < Predicate > getExtensionalPredicates ( ) { return unfolder . getExtensionalPredicates ( ) ; } public void addSameAsMapping ( List < CQIE > unfoldingProgram ) throws OBDAException { MappingSameAs msa = new MappingSameAs ( unfoldingProgram ) ; dataPropertiesAndClassesMapped = msa . getDataPropertiesAndClassesWithSameAs ( ) ; objectPropertiesMapped = msa . getObjectPropertiesWithSameAs ( ) ; } public Set < Predicate > getSameAsDataPredicatesAndClasses ( ) { return dataPropertiesAndClassesMapped ; } public Set < Predicate > getSameAsObjectPredicates ( ) { return objectPropertiesMapped ; }", "delete = new Engine . Delete ( \"test\" , \"1\" , newUid ( \"1\" ) , delete . seqNo ( ) , 3L", "final var principal = createPrincipal ( ) ; final OAuthRegisteredService service = addRegisteredService ( ) ; final var code = addCode ( principal , service ) ;", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "TransactionResult result = exec . execute ( tx , as . track ( ) , ds . track ( ) , bh ) ; assertFalse ( result . getCode ( ) . isSuccess ( ) ) ; assertEquals ( INSUFFICIENT_LOCKED , result . code ) ;", "", "import com . itextpdf . io . LogMessageConstant ; import com . itextpdf . io . font . PdfEncodings ;", "private static void createReplImportTasks ( CreateTableDesc tblDesc , List < AddPartitionDesc > partitionDescs , boolean isPartSpecSet , ReplicationSpec replicationSpec , boolean waitOnCreateDb , Table table , URI fromURI , FileSystem fs , Warehouse wh , EximUtil . SemanticAnalyzerWrapperContext x , Long mmWriteId , boolean isSourceMm )", "", "new NetInfoPackage ( ) , new RNCameraPackage ( ) ,", "private Dialog createTermsOfServiceDialog ( boolean hideButtons ) { AlertDialog tosDialog ; LayoutInflater inflater = parentActivity . getLayoutInflater ( ) ; View view = inflater . inflate ( layout . tos_view , null ) ; String apologyText = parentActivity . getString ( string . language_apology_text ) ; Spanned formattedApologyText = Html . fromHtml ( apologyText ) ; TextView apologyTextView = ( TextView ) view . findViewById ( R . id . language_apology_box_text ) ; apologyTextView . setText ( formattedApologyText , TextView . BufferType . SPANNABLE ) ; String whatsNewText = String . format ( parentActivity . getString ( string . whats_new_text ) , getVersionName ( ) ) ; Spanned formattedWhatsNewText = Html . fromHtml ( whatsNewText ) ; TextView whatsNewTextView = ( TextView ) view . findViewById ( R . id . whats_new_box_text ) ; whatsNewTextView . setText ( formattedWhatsNewText , TextView . BufferType . SPANNABLE ) ; String eulaText = String . format ( parentActivity . getString ( R . string . eula_text ) , getVersionName ( ) ) ; Spanned formattedEulaText = Html . fromHtml ( eulaText ) ; TextView whatsNewTextView = ( TextView ) view . findViewById ( R . id . eula_box_text ) ; eulaTextView . setText ( formattedEulaText , TextView . BufferType . SPANNABLE ) ; if ( ! hideButtons ) { tosDialog = new Builder ( parentActivity ) . setTitle ( string . menu_tos ) . setView ( view ) . setNegativeButton ( string . dialog_accept , new DialogInterface . OnClickListener ( ) { public void onClick ( DialogInterface dialog , int whichButton", "IngestMessage msg = IngestMessage . createErrorMessage ( messageId ++ , EmailParserModuleFactory . getModuleName ( ) , EmailParserModuleFactory . getModuleName ( ) , NbBundle . getMessage ( this . getClass ( ) , \"ThunderbirdMboxFileIngestModule.processPst.errMsg.outOfDiskSpace\" , abstractFile . getName ( ) ) ) ;", "@ Disabled public void vndrParserTest ( ) { }", "import com . microsoft . identity . client . helper . BrokerHelperActivity ; import com . microsoft . identity . client . exception . MsalServiceException ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "public class BulkMinusOne extends BulkImportTest { private static final Value negOne = new Value ( \"-1\" . getBytes ( StandardCharsets . UTF_8 ) ) ; }", "kb_hucit . setMaxResults ( maxResults ) ; rootConcepts = new HashSet < String > ( ) ; rootConcepts . add ( \"http://www.w3.org/2000/01/rdf-schema#Class\" ) ; kbList . add ( new TestConfiguration ( \"http://nlp.dainst.org:8888/sparql\" , kb_hucit ,", "Iterator < ? > it = ( ( Result ) response . getEntity ( ) ) . getContent ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { Object object = it . next ( ) ; Map < String , Object > keyValue = new ConcurrentHashMap < > ( ) ; for ( Field field : object . getClass ( ) . getDeclaredFields ( ) ) { if ( searchFields . contains ( field . getName ( ) ) ) { Field actualField = targetClass . getDeclaredField ( field . getName ( ) ) ; } } }", "import de . ovgu . featureide . fm . core . ModelMarkerHandler ; import de . ovgu . featureide . fm . core . base . IFeatureModel ; import de . ovgu . featureide . fm . core . base . event . FeatureIDEEvent ; import de . ovgu . featureide . fm . core . base . event . IEventListener ; import de . ovgu . featureide . fm . core . base . event . PropertyConstants ; import de . ovgu . featureide . fm . core . conf . ConfigurationFG ; import de . ovgu . featureide . fm . core . conf . IFeatureGraph ;", "public double getCutOffTime ( ) { return time [ time . length - 1 ] ; } public boolean isAvailable ( ) { return available ; }", "import org . eclipse . ditto . model . query . model . criteria . Predicate ; import org . eclipse . ditto . model . query . model . expression . FieldExpressionUtil ; import org . eclipse . ditto . model . query . model . expression . visitors . FieldExpressionVisitor ;", "import com . google . common . util . concurrent . ThreadFactoryBuilder ; import scala . actors . threadpool . Arrays ;", "if ( \"jta\" . equals ( impl ) ) { if ( ! transactionFactory ( ) . compatibleWithJtaSynchronization ( ) ) LOG . autoFlushWillNotWork ( ) ; }", "_put ( componentFamily , rendererType , renderer ) ;", "import net . sourceforge . subsonic . service . MediaFileService ; import net . sourceforge . subsonic . service . RatingService ;", "public final String toString ( final int limit , final int colLimit ) { return Serialization . toString ( this , limit , colLimit , true ) ; } public static final DataFrame < Object > readXls ( final String file ) throws IOException { return Serialization . readXls ( file ) ; } public static final DataFrame < Object > readXls ( final InputStream input ) throws IOException { return Serialization . readXls ( input ) ; } public final void writeXls ( final String file ) throws IOException { Serialization . writeXls ( this , new FileOutputStream ( file ) ) ; } public final void writeXls ( final OutputStream output ) throws IOException { Serialization . writeXls ( this , output ) ; }", "public SampleLimitedScrollArea ( ) { sCentralParkBoundingBox = new BoundingBox ( 40.796788 ,", "public void testCorrelationIdInErrorResponse ( ) throws IllegalArgumentException , IllegalAccessException , InvocationTargetException , ClassNotFoundException , NoSuchMethodException , InstantiationException { HashMap < String , String > response = new HashMap < String , String > ( ) ; Object request = createAuthenticationRequest ( \"http://login.windows.net\" , \"resource\" , \"client\" , \"redirect\" , \"loginhint\" ) ; Object oauth = createOAuthInstance ( request ) ; Method m = ReflectionUtils . getTestMethod ( oauth , \"processUIResponseParams\" , HashMap . class ) ; UUID correlationIdExpected = UUID . randomUUID ( ) ; response . put ( AuthenticationConstants . AAD . CORRELATION_ID , correlationIdExpected . toString ( ) ) ; response . put ( AuthenticationConstants . OAuth2 . ERROR , \"errorCodeHere\" ) ; response . put ( AuthenticationConstants . OAuth2 . ERROR_DESCRIPTION , \"errorDescription\" ) ; AuthenticationResult result = ( AuthenticationResult ) m . invoke ( null , response ) ; assertEquals ( \"Failed status\" , AuthenticationStatus . Failed , result . getStatus ( ) ) ; assertEquals ( \"Same error\" , \"errorCodeHere\" , result . getErrorCode ( ) ) ; assertEquals ( \"Same error description\" , \"errorDescription\" , result . getErrorDescription ( ) ) ; assertEquals ( \"Same error description\" , \"errorDescription\" , result . getErrorDescription ( ) ) ; assertEquals ( \"Same error description\" , \"errorDescription\" , result . getErrorDescription ( ) ) ; assertEquals ( \"Failed status\" , AuthenticationStatus . Failed , result . getStatus ( ) ) ; assertEquals ( \"Same error\" , \"errorCodeHere\" , result . getErrorCode ( ) ) ; assertEquals ( \"Same error description\" , \"errorDescription\" , result . getErrorDescription ( ) ) ; assertEquals ( \"Same error description\" , \"errorDescription\" , result . getErrorDescription ( ) ) ; assertEquals ( \"Same errorDescription\" , result . getErrorDescription (", "import org . opencb . opencga . storage . core . variant . adaptors . VariantQueryUtils ;", "", "volatile Status mStatus = Status . NOT_CONNECTED ; private EventSource mEventSource ;", "setState ( 339 ) ;", "@ Override public final Text getTxtName ( ) { }", "import com . synopsys . integration . detectable . detectable . Requirements ; import com . synopsys . integration . detectable . ExecutableTarget ;", "if ( hasLoadedRelations ( query ) ) { SortedSet < Entry > results = relationCache . subSet ( StaticBufferEntry . of ( query . getSliceStart ( ) , null ) , StaticBufferEntry . of ( query . getSliceEnd ( ) , null ) ) ; }", "", "public class BlockPlainPipe extends BlockBuildCraftBase { public BlockPlainPipe ( ) { super ( Material . glass , null , false ) ; minX = CoreConstants . PIPE_MIN_POS ; minY = 0 ; minZ = CoreConstants . PIPE_MIN_POS ; maxX = CoreConstants . PIPE_MAX_POS ; maxY = 1 ; maxZ = CoreConstants . PIPE_MAX_POS ; } @ Override public boolean isOpaqueCube ( ) { return false ; } @ Override public boolean isNormalCube ( ) { return false ; } @ SuppressWarnings ( { \"unchecked\" , \"rawtypes\" } ) @ Override public void getSubBlocks ( Item item , CreativeTabs tab , List list ) { list . add ( new ItemStack ( this ) ) ; } @ Override public Item getItemDropped ( IBlockState state , Random random , int j ) { return null ; } @ Override public List < ItemStack > getDrops ( IBlockAccess world , BlockPos pos , IBlockState state , int fortune ) { return Collections . emptyList ( ) ; } @ Override public boolean isLadder ( IBlockAccess world , BlockPos pos , EntityLivingBase entity ) { return true ; } @ Override public AxisAlignedBB getBox ( IBlockAccess world , BlockPos pos , IBlockState state ) { return new AxisAlignedBB ( minX , minY , minZ , maxX , maxY , maxZ ) ; } }", "", "", "import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . ObjectInputStream ; import java . io . ObjectOutputStream ; import java . io . Serializable ; import java . util . HashMap ; import java . util . Map ; import static com . xtremelabs . robolectric . Robolectric . shadowOf ;", "* If the specified documentName does not refer to an existing document attached to the process instance that contains the activity . * @ throws org . bonitasoft . engine . session . InvalidSessionException * Generic exception thrown if API Session is invalid , e . g session has expired .", "OpenCGAResult < File > queryResult = fileDBAdaptor . get ( study . getUid ( ) , finalQuery , options , userId ) ; auditManager . auditSearch ( userId , AuditRecord . Resource . FILE , study . getId ( ) , study . getUuid ( ) , auditParams , new AuditRecord . Status ( AuditRecord . Status . Result . SUCCESS ) ) ;", "private final EventBusWithFilters m_eventBus ;", "protected static void exit ( int exitCode ) { System . exit ( exitCode ) ; } public Integer launchFitNesse ( Arguments arguments ) throws Exception { configureLogging ( arguments . hasVerboseLogging ( ) ) ; }", "@ TruffleBoundary private static void plantMethodMemberName ( StaticObject memberName , Symbol < Signature > sig , Klass defKlass , Klass callerKlass , Symbol < Name > name , Field flagField , int refKind , Meta meta ) { Method target = defKlass . lookupMethod ( name , sig , callerKlass ) ; }", "public static org . bonitasoft . engine . operation . Operation createOperation ( final Operation operation ) { return createOperation ( operation , createLeftOperand ( operation . getLeftOperand ( ) ) ) ; } public static org . bonitasoft . engine . operation . Operation createOperation ( final Operation operation , LeftOperand leftOperand ) { final OperationBuilder builder = new OperationBuilder ( ) ; builder . createNewInstance ( ) ; builder . setType ( getEngineOperator ( operation ) ) ; builder . setOperator ( operation . getOperator ( ) . getExpression ( ) ) ; final EList < String > operatorInputTypes = operation . getOperator ( ) . getInputTypes ( ) ; if ( ! operatorInputTypes . isEmpty ( ) ) { builder . setOperatorInputType ( operatorInputTypes . get ( 0 ) ) ; } builder . setRightOperand ( createExpression ( operation . getRightOperand ( ) ) ) ; builder . setLeftOperand ( leftOperand ) ; return builder . done ( ) ; } public static OperatorType getEngineOperator ( final Operation operation ) { String type = operation . getOperator ( ) . getType ( ) ; return getEngineOperator ( type ) ; } public static OperatorType getEngineOperator ( String type ) { if ( OperatorType . DOCUMENT_CREATE_UPDATE . name ( ) . equals ( type ) ) { return OperatorType . ASSIGNMENT ; } if ( OperatorType . STRING_INDEX . name ( ) . equals ( type ) ) { return OperatorType . ASSIGNMENT ; } if ( ExpressionConstants . CREATE_BUSINESS_DATA_OPERATOR . equals ( type ) ) { return OperatorType . ASSIGNMENT ; } if ( ExpressionConstants . BUSINESS_DATA_JAVA_SETTER_OPERATOR . equals ( type ) ) { return OperatorType . JAVA_METHOD ; } if ( ExpressionConstants . ATTACH_EXISTING_BUSINESS_DATA . equals ( type ) ) { return OperatorType . ASSIGNMENT ; } if (", "import org . joda . time . DateTime ; import org . joda . time . DateTimeFieldType ; import org . joda . time . LocalDate ; import org . joda . time . LocalTime ;", "", "Installed installed = new Installed ( packageInfo , packageManager ) ; installManager . onAppInstalled ( installed ) . subscribe ( ( ) -> { } , throwable -> CrashReport . getInstance ( ) . log ( throwable ) ) ; installAnalytics . sendInstalledEvent ( packageName ) ;", "super ( REQUEST_STATUS , new ParameterList ( ) , new Factory ( ) ) ;", "Queue < AntlrTask < ? > > antlrTasks = new ArrayDeque < > ( 1 ) ; loadDatabase ( d , antlrTasks ) ; AntlrParser . finishAntlr ( antlrTasks ) ;", "protected final Group grpPackage = new Group ( composite , SWT . NONE ) ; grpPackage . setText ( \"Package\" ) ; grpPackage . setLayoutData ( new GridData ( SWT . FILL , SWT . CENTER , true , false ) ) ; grpPackage . setLayout ( new GridLayout ( 5 , false ) ) ; Label lblEndpoint = new Label ( grpPackage , SWT . NONE ) ; lblEndpoint . setText ( \"Name:\" ) ; lblEndpoint . setLayoutData ( new GridData ( SWT . BEGINNING , SWT . CENTER , false , false , 1 , 0 ) ) ; cmbPackageNames = new Combo ( grpPackage , SWT . BORDER | SWT . READ_ONLY ) ; cmbPackageNames . setLayoutData ( new GridData ( SWT . BEGINNING , SWT . CENTER , true , false , 4 , 0 ) ) ; cmbPackageNames . addSelectionListener ( new SelectionListener ( ) { @ Override public void widgetDefaultSelected ( SelectionEvent e ) { getComponentWizardPage ( ) . validateUserInput ( ) ; } @ Override public void widgetSelected ( SelectionEvent e ) { widgetDefaultSelected ( e ) ; } } ) ; } protected final", "* Test explicitly required string . Please put a header 'headerParameter' = & gt ; null and the client library should throw before the request is sent .", "this . clinicalInterpretationManager = new ClinicalInterpretationManager ( catalogManager , StorageEngineFactory . get ( storageConfiguration ) , Paths . get ( openCgaHome + \"/analysis/resources/roleInCancer.txt\" ) , Paths . get ( openCgaHome + \"/analysis/resources/\" ) ) ;", "SingularityMesosSchedulerDelegator ( SingularitySchedulerLock lock , SingularityExceptionNotifier exceptionNotifier , SingularityMesosScheduler scheduler , SingularityStartup startup , SingularityLeaderCacheCoordinator leaderCacheCoordinator , SingularityAbort abort ) { }", "prop = getConfig ( Constants . CONFIG_CATEGORY_WORLDGEN , \"Oil Generation Factor\" , 1.8 ) ; prop . setComment ( \"Increasing this will increase amount of oil that will generate in each chunk.\" ) ;", "import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . time . ZoneOffset ; import java . time . ZonedDateTime ; import java . time . format . DateTimeFormatter ; import java . time . temporal . ChronoUnit ; import java . time . temporal . TemporalUnit ;", "private final PrincessBride princessBride ; private final Buffy buffy ; private final Relationships relationships ; private final Nation nation ;", "foundNext = filter . accept ( this ) ;", "importProvidedPage ( \"bonita-layout-page.zip\" ) ; importProvidedPage ( \"bonita-theme-page.zip\" ) ; importProvidedPage ( \"step-autogenerated-form.zip\" ) ; importProvidedPage ( \"process-autogenerated-form.zip\" ) ;", "import org . hibernate . ConnectionReleaseMode ; import org . hibernate . HibernateException ; import org . hibernate . HibernateLogger ; import org . hibernate . JDBCException ; import org . hibernate . engine . jdbc . spi . ConnectionObserver ; import org . hibernate . engine . jdbc . spi . JdbcResourceRegistry ; import org . hibernate . engine . jdbc . spi . JdbcServices ; import org . hibernate . engine . jdbc . spi . LogicalConnectionImplementor ; import org . hibernate . jdbc . BorrowedConnectionProxy ; import org . hibernate . stat . StatisticsImplementor ; import org . jboss . logging . Logger ;", "careplanResource . setIntent ( CarePlanIntent . ORDER ) ;", "", "import org . springframework . util . StringUtils ; import static org . hamcrest . Matchers . contains ; import static org . assertj . core . api . Assertions . assertThat ;", "@ Type ( name = \"Consumer\" , value = ConsumerEncoding . class ) , @ Type ( name = \"LocalMultiwayConsumer\" , value = LocalMultiwayConsumerEncoding . class ) , @ Type ( name = \"MultiGroupByAggregate\" , value = MultiGroupByAggregateEncoding . class ) ,", "import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ;", "public void expire ( final LocalDateTime onOrBefore ) { final var results = storage . asMap ( )", "private boolean isStripeSatisfyPredicate ( StripeStatistics stripeStatistics , SearchArgument sarg , int [ ] filterColumns ) { if ( sarg != null && filterColumns != null ) { List < PredicateLeaf > predLeaves = sarg . getLeaves ( ) ; TruthValue [ ] truthValues = new TruthValue [ predLeaves . size ( ) ] ; for ( int pred = 0 ; pred < truthValues . length ; pred ++ ) { if ( filterColumns [ pred ] != - 1 ) { ColumnStatistics stats = stripeStatistics . getColumnStatistics ( ) [ filterColumns [ pred ] + 1 ] ; Object minValue = getMin ( stats ) ; Object maxValue = getMax ( stats ) ; truthValues [ pred ] = RecordReaderImpl . evaluatePredicateRange ( predLeaves . get ( pred ) , minValue , maxValue ) ; } } return sarg . evaluate ( truthValues ) . isNeeded ( ) ; } return true ; } private Object getMax ( ColumnStatistics index ) { if ( index instanceof IntegerColumnStatistics ) { return ( ( IntegerColumnStatistics ) index ) . getMaximum ( ) ; } else if ( index instanceof DoubleColumnStatistics ) { return ( ( DoubleColumnStatistics ) index ) . getMaximum ( ) ; } else if ( index instanceof StringColumnStatistics ) { return ( ( StringColumnStatistics ) index ) . getMaximum ( ) ; } else if ( index instanceof DateColumnStatistics ) { return ( ( DateColumnStatistics ) index ) . getMaximum ( ) ; } else { return null ; } } private Object getMin ( ColumnStatistics index ) { if ( index instanceof IntegerColumnStatistics ) { return ( ( IntegerColumnStatistics ) index ) . getMinimum ( ) ; } else if ( index instanceof DoubleColumnStatistics ) { return ( ( DoubleColumnStatistics ) index ) . getMinimum ( ) ; } else if ( index instanceof DateColumnStatistics ) { return ( ( DateColumnStatistics ) index ) . getMinimum ( ) ; } else if ( index instanceof Date", "GT_ModHandler . addCraftingRecipe ( ItemList . Cover_SolarPanel_8V . get ( 1 ) , GT_ModHandler . RecipeBits . NOT_REMOVABLE | GT_ModHandler . RecipeBits . REVERSIBLE , new Object [ ] { \"SSS\" , \"STS\" , \"SSS\" , 'S' , ItemList . Cover_SolarPanel , 'T' , OrePrefixes . circuit . get ( Materials . Advanced ) } ) ;", "ClassUtil . getTypeDescription ( type ) , periodName ) ; return null ;", "JCModifiers mods = treeMaker . Modifiers ( node . getExplicitModifierFlags ( ) , toList ( JCAnnotation . class , node . annotations ( ) ) ) ; Comment javadoc = null ; if ( node . getParent ( ) instanceof JavadocContainer ) { javadoc = ( ( JavadocContainer ) node . getParent ( ) ) . getJavadoc ( ) ; } else if ( node . getParent ( ) instanceof VariableDefinition && node . getParent ( ) . getParent ( ) instanceof JavadocContainer ) { javadoc = ( ( JavadocContainer ) node . getParent ( ) . getParent ( ) ) . getJavadoc ( ) ; } if ( javadoc != null && DEPRECATED_DETECTOR . matcher ( javadoc . getContent ( ) ) . matches ( ) ) mods . flags |= Flags . DEPRECATED ; return set ( node , mods ) ;", "import org . bladerunnerjs . model . BRJSTestModelFactory ; import org . bladerunnerjs . model . TemplateGroup ;", "import com . ning . billing . catalog . api . Currency ; import com . ning . billing . util . ChangeType ; import com . ning . billing . util . audit . dao . AuditSqlDao ;", "private void init ( ) { OpenFoodFactsManager . getInstance ( ) . start ( ) ; if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ) { getWindow ( ) . setEnterTransition ( null ) ; } initToolbar ( ) ; initSearchBar ( ) ; } private void initToolbar ( ) { setSupportActionBar ( toolbar ) ; if ( getSupportActionBar ( ) != null ) { getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; getSupportActionBar ( ) . setDisplayShowHomeEnabled ( true ) ; getSupportActionBar ( ) . setHomeButtonEnabled ( true ) ; } } private void initSearchBar ( ) { if ( toolbarSearch != null ) { toolbarSearch . inflateMenu ( R . menu . search ) ; Menu menu = toolbarSearch . getMenu ( ) ; searchMenuItem = menu . findItem ( R . id . action_search_view ) ; toolbarSearch . setNavigationOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View view ) { toggleSearchBar ( false ) ; } } ) ; if ( searchMenuItem != null ) { searchView = ( SearchView ) MenuItemCompat . getActionView ( searchMenuItem ) ; SearchView . SearchAutoComplete searchAutoComplete = searchView . findViewById ( android . support . v7 . appcompat . R . id . search_src_text ) ; SearchManager searchManager = ( SearchManager ) getSystemService ( SEARCH_SERVICE ) ; searchView . setSearchableInfo ( searchManager . getSearchableInfo ( getComponentName ( ) ) ) ; searchView . setOnQueryTextListener ( new SearchView . OnQueryTextListener ( ) { @ Override public boolean onQueryTextChange ( String newText ) ; } return true ; } } ) ; searchView . findViewById ( android . support . v7 . appcompat . R . id . search", "this . flowIntoBlock ( this . level . getBlock ( this . getX ( ) + 1 , this . getY ( ) , this . getZ ( ) ) , adjacentDecay ) ;", "void verifyLowerCamelCase ( String constructType , ParserRuleContext ctx ) { String constructName = ctx . getText ( ) ; if ( ! CharFormatUtil . isLowerCamelCase ( constructName ) ) { Location location = new Location ( ctx . getStart ( ) . getLine ( ) , ctx . getStart ( ) . getCharPositionInLine ( ) + 1 ) ; this . printer . error ( constructType + Messages . LOWER_CAMEL_CASE , location ) ; } } void verifyMultipleImports ( ImportDeclarationContext ctx ) { int lineNum = ctx . getStart ( ) . getLine ( ) ; if ( importLineNumbers . contains ( lineNum ) ) { Location location = new Location ( lineNum ) ; this . printer . warn ( Messages . IMPORTS + Messages . MULTIPLE_IMPORTS , location ) ; } else { importLineNumbers . add ( lineNum ) ; } } void walkListener ( ParseTreeWalker walker , ParserRuleContext tree , SwiftBaseListener listener ) { walker . walk ( listener , tree ) ; }", "super ( object , location , StampFactory . forNodeIntrinsic ( ) , ( GuardingNode ) guard , WriteBarrierType . NONE , false ) ;", "private void processParseResults ( Index index , IFileStore file , IParseNode ast )", "if ( isKeyAtIndex ( key , index ) ) { }", "assertNotNull ( \"should have a table map.\" , stats . tableMap ) ; assertTrue ( \"root table should exist in \" + stats . tableMap . keySet ( ) , stats . tableMap . keySet ( ) . contains ( RootTable . ID . canonicalID ( ) ) ) ; assertTrue ( \"meta table should exist in \" + stats . tableMap . keySet ( ) , stats . tableMap . keySet ( ) . contains ( MetadataTable . ID . canonicalID ( ) ) ) ; assertTrue ( \"our test table should exist in \" + stats . tableMap . keySet ( ) ,", "public LANGUAGE_SDKLocationValidator getSDKLocationValidator ( ) { return new GoSDKLocationValidator ( ) ; }", "private long downTime ; private long eventTime ; private int pointerCount = 1 ;", "\"@Store(type=\\\"testStoreContainingInMemoryTable\\\", @Cache(size=\\\"10\\\"))\\n\" +", "@ Override public boolean gotoEntry ( Document document ) { return gotoEntry ( ( Object ) document ) ; } @ Override public boolean gotoEntry ( ViewEntry entry ) { return gotoEntry ( ( Object ) entry ) ; }", "final var p = chain . resolve ( CoreAuthenticationTestUtils . getCredentialsWithSameUsernameAndPassword ( ) , Optional . of ( CoreAuthenticationTestUtils . getPrincipal ( CoreAuthenticationTestUtils . CONST_USERNAME , Collections . singletonMap ( ATTR_1 , \"value\" ) ) ) , Optional . of ( new SimpleTestUsernamePasswordAuthenticationHandler ( ) ) ) ;", "void testGeneralInsert ( ) { try ( SqlSession sqlSession = sqlSessionFactory . openSession ( ) ) { AnimalDataMapper mapper = sqlSession . getMapper ( AnimalDataMapper . class ) ; GeneralInsertStatementProvider insertStatement = insertInto ( animalData ) . set ( id ) . equalTo ( 101 ) . set ( animalName ) . equalToStringConstant ( \"Fred\" ) . set ( brainWeight ) . equalToConstant ( \"2.2\" ) . set ( bodyWeight ) . equalTo ( 4.5 ) . build ( ) . render ( RenderingStrategies . MYBATIS3 ) ; String expected = \"insert into AnimalData (id, animal_name, brain_weight, body_weight) \" + \"values (#{parameters.p1,jdbcType=INTEGER}, 'Fred', 2.2, #{parameters.p2,jdbcType=DOUBLE})\" ; assertThat ( insertStatement . getInsertStatement ( ) ) . isEqualTo ( expected ) ; assertThat ( insertStatement . getParameters ( ) . size ( ) ) . isEqualTo ( 2 ) ; assertThat ( insertStatement . getParameters ( ) . get ( \"p1\" ) ) . isEqualTo ( 101 ) ; assertThat ( insertStatement . getParameters ( ) . get ( \"p2\" ) ) . isEqualTo ( 4.5 ) ; int rows = mapper . generalInsert ( insertStatement ) ; assertThat ( rows ) . isEqualTo ( 1 ) ; } } @ Test void testUpdateWithSelect ( ) { }", "import buildcraft . transport . tile . TileFilteredBuffer ; import buildcraft . transport . tile . TilePipeHolder ;", "pref = ( ( BaseApplication ) Application ) getApplicationContext ( ) . getApplicationComponent ( ) . inject ( this ) ; pref = context . getSharedPreferences ( PREF_NAME , Context . MODE_PRIVATE ) ;", "private void initJavaSubtitle ( ) { VersionSetting versionSetting = lastVersionSetting ; if ( versionSetting == null ) return ; Task . ofResult ( versionSetting :: getJavaVersion ) . thenVoid ( Schedulers . javafx ( ) , javaVersion -> javaItem . setSubtitle ( Optional . ofNullable ( javaVersion ) . map ( JavaVersion :: getBinary ) . map ( Path :: toString ) . orElse ( \"Invalid Java Path\" ) ) ) . start ( ) ; }", "EventTriggerAdapter ( Context context , @ NonNull List < EventTrigger > eventTriggers , IResourceManager resourceManager , EventTriggerClickListener eventTriggerClickListener ) { }", "import com . orientechnologies . orient . core . Orient ; import com . orientechnologies . orient . core . config . OGlobalConfiguration ; import com . orientechnologies . orient . core . id . ORID ; import com . orientechnologies . orient . core . record . ORecordInternal ;", "if ( fname . startsWith ( \"eth\" ) || fname . startsWith ( \"bond\" ) || fname . startsWith ( \"team\" ) || fname . startsWith ( \"vlan\" ) || fname . startsWith ( \"vx\" ) || fname . startsWith ( \"em\" ) || fname . matches ( \"^p\\\\d+p\\\\d+.*\" ) || fname . startsWith ( \"ens\" ) || fname . startsWith ( \"eno\" ) || fname . startsWith ( \"enp\" ) || fname . startsWith ( \"enx\" ) ) { }", "Captions . NOT_VALID_NUMBER . send ( player , \"(1, \" + unsorted . size ( ) + \")\" ) ; return CompletableFuture . completedFuture ( false ) ;", "EntityTypeFactory entityTypeFactory , AttributeFactory attrMetaFactory )", "", "public final class Constants { public static final boolean TEST = BuildConfig . APPLICATION_ID . contains ( \"_test\" ) ; public static final NetworkParameters NETWORK_PARAMETERS = TEST ? TestNet3Params . get ( ) : MainNetParams . get ( ) ; public static final Context CONTEXT = new Context ( NETWORK_PARAMETERS ) ; public final static class Files { private static final String FILENAME_NETWORK_SUFFIX = NETWORK_PARAMETERS . getId ( ) . equals ( NetworkParameters . ID_MAINNET ) ? \"\" : \"-testnet\" ; public static final String WALLET_FILENAME_PROTOBUF = \"wallet-protobuf\" + FILENAME_NETWORK_SUFFIX ; public static final long WALLET_AUTOSAVE_DELAY_MS = 5 * DateUtils . SECOND_IN_MILLIS ; public static final String WALLET_KEY_BACKUP_BASE58 = \"key-backup-base58\" + FILENAME_NETWORK_SUFFIX ; public static final String WALLET_KEY_BACKUP_PROTOBUF = \"key-backup-protobuf\" + FILENAME_NETWORK_SUFFIX ; } }", "for ( Iterator < ListenerInfo > it = _listenerInfos . iterator ( ) ; it . hasNext ( ) ; ) { final ListenerInfo inf = it . next ( ) ; }", "", "public String getNCJavaParams ( ) { return accessor . getProperty ( EXTERNAL_NC_JAVA_OPTS_KEY , EXTERNAL_NC_JAVA_OPTS_DEFAULT , PropertyInterpreters . getStringPropertyInterpreter ( ) ) ; } public String getCCJavaParams ( ) { return accessor . getProperty ( EXTERNAL_CC_JAVA_OPTS_KEY , EXTERNAL_CC_JAVA_OPTS_DEFAULT , PropertyInterpreters . getStringPropertyInterpreter ( ) ) ; } public int getMaxWaitClusterActive ( ) { return accessor . getProperty ( EXTERNAL_MAX_WAIT_FOR_ACTIVE_CLUSTER , EXTERNAL_MAX_WAIT_FOR_ACTIVE_CLUSTER_DEFAULT , PropertyInterpreters . getIntegerPropertyInterpreter ( ) ) ; }", "", "public Boolean getIsMultiColumn ( ) { return isMultiColumn == null ? false : isMultiColumn ; } public void setIsMultiColumn ( Boolean isMultiColumn ) { this . isMultiColumn = isMultiColumn ; } public boolean isTabsPresent ( ) { return isTabsPresent ; } public void setTabsPresent ( boolean isTabsPresent ) { this . isTabsPresent = isTabsPresent ; }", "actions . add ( AddContentTagAction . getInstance ( ) ) ; actions . addAll ( ContextMenuExtensionPoint . getActions ( ) ) ;", "APIResponse < JsonObject > response = DataManager . getEventStats ( activity , eventKey ) ; JsonObject stats = response . getData ( ) ; ArrayList < Map . Entry < String , JsonElement > >", "UsageEventUtils . publishUsageEvent ( EventTypes . EVENT_VM_DESTROY , vm . getAccountId ( ) , vm . getDataCenterId ( ) , vm . getId ( ) , vm . getHostName ( ) , vm . getServiceOfferingId ( ) , vm . getTemplateId ( ) , vm . getHypervisorType ( ) . toString ( ) , VirtualMachine . class . getName ( ) , vm . getUuid ( ) ) ;", "AuthTask task = new AuthTask ( ) ; task . execute ( this . getApplicationContext ( ) ) ;", "* @ version < em > $Date : 2014 - 02 - 15 $ < / em >", "if ( slaveMode ) { command ( \"git-receive-pack\" ) . to ( NotSupportedInSlaveModeFailureCommand . class ) ; command ( \"gerrit-receive-pack\" ) . to ( NotSupportedInSlaveModeFailureCommand . class ) ; command ( git , \"receive-pack\" ) . to ( NotSupportedInSlaveModeFailureCommand . class ) ; command ( gerrit , \"test-submit\" ) . to ( NotSupportedInSlaveModeFailureCommand . class ) ; } else { if ( sshEnabled ( ) ) { command ( \"git-receive-pack\" ) . to ( Commands . key ( git , \"receive-pack\" ) ) ; command ( \"gerrit-receive-pack\" ) . to ( Commands . key ( git , \"receive-pack\" ) ) ; command ( git , \"receive-pack\" ) . to ( Commands . key ( gerrit , \"receive-pack\" ) ) ; } }", "namesystem . getBlockManager ( ) . processIncrementalBlockReport ( nodeReg , poolId , receivedAndDeletedBlocks [ 0 ] . getBlocks ( ) ) ;", "} catch ( final TicketException e ) { return newEvent ( ERROR , e ) ;", "createOutputNode ( props , true , new KsqlJsonTopicSerDe ( ) ) ;", "private List < Task > startWorkflow ( Workflow workflow ) throws TerminateWorkflowException { final WorkflowDef workflowDef = workflow . getWorkflowDefinition ( ) ; }", "", "public void SpecialVideos_001_Provider_qaart_518 ( ) { YoutubeVideo video = YoutubeVideoProvider . getLatestVideoForQuery ( \"review\" ) ; }", "", "DbHelper . requestTransaction ( ) ; if ( role == null ) profile = dao . create ( username , password ) ; else profile = dao . create ( username , password , role ) ; ORID userRid = ( ( ODocument ) profile . field ( \"user\" ) ) . getIdentity ( ) ; ORole friendRole = RoleDao . createFriendRole ( username ) ; friendRole . getDocument ( ) . field ( RoleService . FIELD_ASSIGNABLE , true ) ; friendRole . getDocument ( ) . field ( RoleService . FIELD_MODIFIABLE , false ) ; friendRole . getDocument ( ) . field ( RoleService . FIELD_INTERNAL , true ) ; friendRole . getDocument ( ) . field ( RoleService . FIELD_DESCRIPTION , \"These are friends of \" + username ) ; if ( nonAppUserAttributes != null ) { ODocument attrObj = new ODocument ( dao . USER_ATTRIBUTES_CLASS ) ; try { attrObj . fromJSON ( nonAppUserAttributes . toString ( ) ) ; } catch ( OSerializationException e ) { throw new OSerializationException ( dao . ATTRIBUTES_VISIBLE_BY_ANONYMOUS_USER + \" is not a valid JSON object\" , e ) ; } }", "public void setSplitUsers ( boolean splitUsers ) { this . splitUsers = splitUsers ; }", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "Attribute attr = attrMetaFactory . create ( ) . setName ( attrName ) . setDataType ( STRING ) ; entityType . addAttribute ( attr ) ;", "when ( stepExecution . getSlackService ( anyString ( ) , anyString ( ) , anyString ( ) , anyBoolean ( ) , anyString ( ) ) ) . thenReturn ( slackServiceMock ) ;", "import io . subutai . common . environment . Environment ;", "return ( ( bitField0_ & 0x00100000 ) == 0x00100000 ) ;", "private void doAddStemTable ( ) { String filename = ObjectExchange . etl . getFilename ( ) ; switch ( event . getActionCommand ( ) ) { case ACTION_SAVE : doSave ( ( filename == null || ! filename . toLowerCase ( ) . endsWith ( \".json.gz\" ) ) ? chooseSavePath ( FILE_FILTER_GZ ) : filename ) ; break ; case ACTION_SAVE_AS : doSave ( chooseSavePath ( FILE_FILTER_GZ , FILE_FILTER_JSON ) ) ; break ; case ACTION_OPEN_ETL_SPECS : doOpenSpecs ( chooseOpenPath ( FILE_FILTER_GZ , FILE_FILTER_JSON ) ) ; break ; case ACTION_OPEN_SCAN_REPORT : doOpenScanReport ( chooseOpenPath ( FILE_FILTER_XLSX ) ) ; break ; case ACTION_GENERATE_ETL_WORD_DOCUMENT : filename = filename . replaceAll ( \"\\\\..*$\" , \".docx\" ) ; doGenerateEtlWordDoc ( chooseSavePath ( filename , FILE_FILTER_DOCX ) ) ; break ; case ACTION_GENERATE_ETL_HTML_DOCUMENT : doGenerateEtlHtmlDoc ( chooseSaveDirectory ( ) ) ; break ; case ACTION_GENERATE_ETL_MD_DOCUMENT : doGenerateEtlMdDoc ( chooseSaveDirectory ( ) ) ; break ; case ACTION_GENERATE_TEST_FRAMEWORK : doGenerateTestFramework ( chooseSavePath ( \"TestFramework.R\" , FILE_FILTER_R ) ) ; break ; case ACTION_GENERATE_GENERATE_SOURCE_FIELD_LIST : doGenerateSourceFields ( chooseSavePath ( \"source_field_list.csv\" , FILE_FILTER_GENERATE_TABLE_MAPPING_LIST : doGenerateTableMappings ( chooseSavePath ( \"table_mapping_list.csv\" , FILE_FILTER_GENERATE_GENER", "protected static final class GetTempSpace extends MasterToSlaveFileCallable < DiskSpace > { }", "", "public RestGetSettingsAction ( Settings settings , RestController controller , Client client , IndexScopedSettings indexScopedSettings ) { super ( settings , client ) ; this . indexScopedSettings = indexScopedSettings ; }", "import org . apache . hadoop . fs . permission . AclEntry ;", "import org . eclipse . che . api . core . jsonrpc . commons . RequestTransmitter ;", "case IINC : assert adviceType == AdviceType . BEFORE ; generateIInc ( ) ; break ;", "return Bln . get ( signature . validate ( valContext ) ) ; } catch ( final XMLSignatureException | SAXException | ParserConfigurationException | IOException e ) {", "import java . util . ArrayList ; import java . text . ParseException ; import java . util . Calendar ;", "import com . marginallyclever . robotOverlord . communications . AbstractConnectionManager ; import com . marginallyclever . robotOverlord . communications . SerialConnectionManager ; import com . marginallyclever . robotOverlord . actions . ActionAbout ; import com . marginallyclever . robotOverlord . actions . ActionAddEntity ; import com . marginallyclever . robotOverlord . actions . ActionCheckForUpdate ; import com . marginallyclever . robotOverlord . actions . ActionLoad ; import com . marginallyclever . robotOverlord . actions . ActionNew ; import com . marginallyclever . robotOverlord . actions . ActionQuit ; import com . marginallyclever . robotOverlord . actions . ActionRedo ; import com . marginallyclever . robotOverlord . actions . ActionSaveAs ; import com . marginallyclever . robotOverlord . actions . ActionUndo ;", "ModEntities . initMobs ( ) ;", "", "while ( this . results . next ( ) ) { }", "addMessage ( formatChangeUrl ( canonicalWebUrl , u . notes . getChange ( ) , u . newCommit . getShortMessage ( ) , edit ) ) ;", "TwoFactorAuthTestData td = new TwoFactorAuthTestData ( ) ; doReturn ( td . ENTITY1 ) . when ( targetFileRepository ) . get ( td . ACC_1 . getId ( ) ) ;", "else if ( command . equals ( \"exit\" ) ) { continuePrompt = false ; } else if ( command . startsWith ( \"e\" ) ) { }", "private boolean isActionURL ( ) { ConcurrentMap < String , String [ ] > parameters = new ConcurrentHashMap < String , String [ ] > ( Executions . getCurrent ( ) . getParameterMap ( ) ) ; String action = \"\" ; if ( parameters != null ) { String [ ] strs = parameters . get ( \"Action\" ) ; if ( strs != null && strs . length == 1 && strs [ 0 ] != null ) action = strs [ 0 ] ; } return ! Util . isEmpty ( action ) ; } @ Override public void setClientInfo ( ClientInfo clientInfo ) { super . setClientInfo ( clientInfo ) ; if ( clientInfo . tablet ) { if ( homeTab != null && homeTab . getAttribute ( HOME_TAB_RENDER_ATTR ) != null ) { dashboardController . updateLayout ( clientInfo ) ; updateSideLayout ( ) ; } } } private void updateSideLayout ( ) { if ( westPopup != null && westPopup . getChildren ( ) . size ( ) > 1 ) setSidePopupWidth ( westPopup ) ; if ( eastPopup != null && eastPopup . getChildren ( ) . size ( ) > 1 ) setSidePopupWidth ( eastPopup ) ; }", "import com . forgeessentials . core . misc . Translator ; import com . forgeessentials . util . CommandParserArgs ;", "", "@ Override public ConfigBuilder create ( InputStream configData , ArgonOptions options , String ... filenames ) { }", "int nBytesLeft = dcs . getMaxMsglength ( ) - udhLength ;", "showPlaybackProgress ( state . getProgressTime ( ) , info . getDuration ( ) * 1000 ) ;", "private final SocketAddress mSocketAddress ;", "fail ( \"Should not pass\" ) ; } catch ( MismatchedInputException e ) { verifyException ( e , \"Cannot deserialize value of type \" ) ; verifyException ( e , \"from Object value\" ) ;", "writeDelimiter = config . getJob ( ) . getContent ( ) . get ( 0 ) . getWriter ( ) . getParameter ( ) . getStringVal ( \"writeDelimiter\" , \"|\" ) ; batchInterval = config . getJob ( ) . getContent ( ) . get ( 0 ) . getWriter ( ) . getParameter ( ) . getIntVal ( \"batchInterval\" , 20 ) ; List column = config . getJob ( ) . getContent ( ) . get ( 0 ) . getWriter ( ) . getParameter ( ) . getColumn ( ) ; metaColumns = MetaColumn . getMetaColumns ( column ) ;", "", "", "Observable < Void > o = Observable . from ( new CollectionIoEvent < Id > ( collectionScope , entityId ) ) . map ( markStart ) . doOnNext ( markCommit ) . map ( new Func1 < CollectionIoEvent < MvccEntity > , Void > ( ) { @ Override public Void call ( final CollectionIoEvent < MvccEntity > mvccEntityCollectionIoEvent ) { MvccEntity entity = mvccEntityCollectionIoEvent . getEvent ( ) ; Task < Void > task = entityDeletedFactory . getTask ( collectionScope , entity . getId ( ) , entity . getVersion ( ) ) ; taskExecutor . submit ( task ) ; return null ; } } ) ; return o ;", "@ XmlJavaTypeAdapter ( SV_CouplingType . class ) @ XmlElement ( name = \"couplingType\" ) @ UML ( identifier = \"couplingType\" , obligation = CONDITIONAL , specification = ISO_19115 ) public CodeList < ? > getCouplingType ( ) { }", "import io . reactivex . annotations . NonNull ;", "", "CompiledPlan bestChildPlan = assembler . getBestCostPlan ( parsedChildStmt , true ) ; partitioning = assembler . getPartition ( ) ;", "public boolean isPrivate ( ) throws IOException { return getRepository ( ) . isPrivate ( ) ; }", "import mekanism . common . content . boiler . SynchronizedBoilerData ; import mekanism . common . block . states . BlockStateBasic ; import mekanism . common . block . states . BlockStateBasic . BasicBlock ; import mekanism . common . block . states . BlockStateBasic . BasicBlockType ;", "for ( IndexingOperationListener listener : listeners ) { try { listener . postIndex ( index , ex ) ; } catch ( Throwable t ) { logger . warn ( \"postIndex listener [{}] failed\" , t , listener ) ; } } totalStats . indexFailed . inc ( ) ; typeStats ( index . type ( ) ) . indexFailed . inc ( ) ;", "if ( ( database instanceof OracleDatabase ) && ( statement . getConstraintName ( ) != null ) ) { nullableString += ! statement . isValidate ( ) ? \" ENABLE NOVALIDATE \" : \"\" ; }", "this . agreementJson = agreementJson ;", "m_inventory . set ( slot , stack ) ; markDirty ( ) ; updateBlockState ( ) ;", "userVmResponse . setAccountName ( acct . getAccountName ( ) ) ; userVmResponse . setDomainId ( Long . toString ( acct . getDomainId ( ) ) ) ; userVmResponse . setDomainName ( ApiDBUtils . findDomainById ( acct . getDomainId ( ) ) . getName ( ) ) ;", "for ( DynamicDataInstance dynamicdatainstance : sampler . getSampleIterator ( 3 , 2 ) ) { System . out . println ( \"\\nSequence ID\" + dynamicdatainstance . getSequenceID ( ) ) ; System . out . println ( \"\\nTime ID\" + dynamicdatainstance . getTimeID ( ) ) ; }", "public void setup ( ) throws Exception { testFixture . setup ( ) ; }", "import org . fedoraproject . candlepin . model . ProductAttributeCurator ; import org . fedoraproject . candlepin . model . CertificateSerial ;", "for ( OnTestSamplingRunnable each : testSamplingRnnables ) { try { each . sampling ( singleConsole , perfTest , perfTestService , intervalStatistics , cumulativeStatistics ) ; } catch ( Exception e ) { LOG . error ( \"While running plugin the following error occurs\" ) ; LOG . error ( \"Details : \" , e ) ; } } perfTestService . getAndPutAgentsInfo ( perfTest . getRegion ( ) , perfTest . getPort ( ) ) ; perfTestService . getAndPutStatistics ( perfTest . getRegion ( ) , perfTest . getPort ( ) ) ;", "public void setPIDParameters ( int which , PIDParameters pp , int toolIndex ) { int offset = ( which == 0 ) ? PIDOffsets . PID_EXTRUDER : PIDOffsets . PID_HBP ; writeToToolEEPROM ( offset + PIDOffsets . P_TERM_OFFSET , floatToLE ( pp . p ) , toolIndex ) ; writeToToolEEPROM ( offset + PIDOffsets . I_TERM_OFFSET , floatToLE ( pp . i ) , toolIndex ) ; writeToToolEEPROM ( offset + PIDOffsets . D_TERM_OFFSET , floatToLE ( pp . d ) , toolIndex ) ; }", "gApi . changes ( ) . id ( changeId ) . get ( ALL_REVISIONS , CURRENT_COMMIT , CURRENT_REVISION ) ; assertThat ( changeInfo . revisions ) . hasSize ( 2 ) ;", "public void onDetach ( ) { super . onDetach ( ) ; mBookmarkList . setAdapter ( null ) ; }", "fragment . setArgs ( startPath , mode , allowMultiple , allowCreateDir , allowExistingFile , singleClick ) ;", "ROS2Tools . createCallbackSubscriptionTypeNamed ( ros2Node , FootstepStatusMessage . class , ROS2Tools . getControllerOutputTopic ( robotName ) , s -> messager . submitMessage ( FootstepPlannerMessagerAPI . FootstepStatusMessage , s . takeNextData ( ) ) ) ;", "setState ( 456 ) ;", "for ( CrosslinkCommittee committee : crosslink_committees ) { if ( committee . getShard ( ) == attestation_data . getShard ( ) ) { crosslink_committee = committee ; } }", "if ( ! parameters . getBoolean ( \"bootstrapping\" ) ) { if ( algorithm != null ) { initialGraph = algorithm . search ( dataSet , parameters ) ; } edu . cmu . tetrad . search . PcAll search = new edu . cmu . tetrad . search . PcAll ( test . getTest ( dataSet , parameters ) , initialGraph ) ; search . setDepth ( parameters . getInt ( \"depth\" ) ) ; search . setKnowledge ( knowledge ) ; search . setFasRule ( PcAll . FasRule . FAS_STABLE ) ; search . setColliderDiscovery ( edu . cmu . tetrad . search . PcAll . ColliderDiscovery . FAS_SEPSETS ) ; search . setConflictRule ( PcAll . ConflictRule . PRIORITY ) ; search . setVerbose ( parameters . getBoolean ( \"verbose\" ) ) ; return search . search ( ) ; } else { PcStable pcStable = new PcStable ( test , algorithm ) ; pcStable . setKnowledge ( knowledge ) ; if ( initialGraph != null ) { pcStable . setInitialGraph ( initialGraph ) ; } DataSet data = ( DataSet ) dataSet ; GeneralBootstrapTest search = new GeneralBootstrapTest ( data , pcStable , parameters . getInt ( \"bootstrapSampleSize\" ) ) ; BootstrapEdgeEnsemble edgeEnsemble = BootstrapEdgeEnsemble . Highest ; switch ( parameters . getInt ( \"bootstrapEnsemble\" , 1 ) ) { case 0 : edgeEnsemble = BootstrapEdgeEnsemble . Preserved ; break ; case 1 : edgeEnsemble = BootstrapEdgeEnsemble . Highest ; break ; case 2 : edgeEnsemble = BootstrapEdgeEnsemble . Majority ; } search . setEdgeEnsemble ( parameters ) ; search . setParameters ( parameters ) ; search . setVerbose ( parameters . getInt ( \"verbose\" ) ) ; } search . set", "public Observable < NotifyEventResponse > notifyEventObservable ( DefaultBlockParameter startBlock , DefaultBlockParameter endBlock ) { EthFilter filter = new EthFilter ( startBlock , endBlock , getContractAddress ( ) ) ; filter . addSingleTopic ( EventEncoder . encode ( NOTIFY_EVENT ) ) ; return notifyEventObservable ( filter ) ; }", "assertCompileRejected ( lang , script , scriptType , scriptContext ) ;", "import crazypants . enderio . gui . MultiIconButtonEIO ; import crazypants . enderio . gui . TextFieldEIO ; import crazypants . enderio . gui . ToggleButtonEIO ; import crazypants . enderio . gui . TooltipAddera ; import crazypants . enderio . gui . VScrollbarEIO ;", "final MessageHash customPayloadHash = new MessageHash ( payloadDigest . digest ( payload . getCipherText ( ) ) ) ;", "_assertNotNull ( \"src\" , src ) ; DefaultDeserializationContext ctxt = createDeserializationContext ( src ) ; return _bindAndCloseAsTree ( ctxt , _considerFilter ( _parserFactory . createParser ( ctxt , src ) , false ) ) ;", "private String defaultEncoding ;", "import com . mitchellbosecke . pebble . template . EvaluationContextImpl ;", "", "", "GlStateManager . pushMatrix ( ) ; GlStateManager . enableCull ( ) ; GlStateManager . enableBlendProfile ( Profile . TRANSPARENT_MODEL ) ; GL11 . glTranslated ( 0 , 22 * 0.0625F , 0 ) ; GL11 . glScalef ( 1F , - 1F , - 1F ) ; GL11 . glRotatef ( ( player . renderYawOffset - player . prevRenderYawOffset ) * event . getPartialRenderTick ( ) + player . renderYawOffset , 0 , 1 , 0 ) ; GL11 . glEnable ( GL11 . GL_CULL_FACE ) ; GL11 . glBlendFunc ( GL11 . GL_SRC_ALPHA , GL11 . GL_ONE_MINUS_SRC_ALPHA ) ; GL11 . glEnable ( GL11 . GL_BLEND ) ;", "Logger logger = LoggerFactory . getLogger ( \"my-jul-logger\" ) ;", "* * @ author < a href = \"mailto:c.hollmann@52north.org\" > Carsten Hollmann < / a >", "void updateRestartForNewPod ( ) { getExplicitRestartServers ( ) . remove ( weblogicServerName ) ; Step create = factory . create ( ) . createPodAsync ( namespace , pod , new ResponseStep < V1Pod > ( ManagedPodStep . this ) { @ Override public NextAction onFailure ( Packet packet , ApiException e , int statusCode , Map < String , List < String > > responseHeaders ) { if ( statusCode == CallBuilder . NOT_FOUND ) { return onSuccess ( packet , null , statusCode , responseHeaders ) ; } return super . onFailure ( packet , e , statusCode , responseHeaders ) ; } @ Override public NextAction onSuccess ( Packet packet , V1Pod result , int statusCode , Map < String , List < String > > responseHeaders ) { if ( statusCode == CallBuilder . NOT_FOUND ) { return onSuccess ( packet , null , statusCode , responseHeaders ) ; } return super . onFailure ( packet , e , statusCode , responseHeaders ) ; } @ Override public NextAction onSuccess ( Packet packet , V1Pod result , int statusCode , Map < String , List < String > > responseHeaders ) { } @ Override public NextAction onSuccess ( Packet packet , V1Pod result , int statusCode , Map < String , List < String > > responseHeaders ) {", "String [ ] authNames = new String [ ] { } ; String response = apiClient . invokeAPI ( path , \"POST\" , queryParams , postBody , headerParams , formParams , contentType , authNames ) ;", "import org . apache . camel . idea . util . CamelService ; import org . apache . camel . idea . util . IdeaUtils ;", "String gradleCommand = gradleInspectorOptions . getGradleBuildCommand ( ) . orElse ( \"\" ) ; return gradleInspectorExtractor . extract ( environment . getDirectory ( ) , gradleExe , gradleCommand , gradleInspectorOptions . getproxyInfo ( ) , gradleInspector , extractionEnvironment . getOutputDirectory ( ) ) ;", "case T__73 :", "import java . util . ArrayList ;", "acc . originalSchedule , acc . createStandingInstructionAtDisbursement , acc . paidInAdvance ) ;", "addSupportedImageFormats ( conf ) ;", "return createInput ( inputName , value , sensitive , required , privateInput ) ;", "", "Map < TypeSignature , List < TypeSignature > > incompleteTopLevelTypeReferences , DataverseName typeDataverse , SourceLocation sourceLoc ) throws AlgebricksException {", "import com . akiban . ais . model . * ; import static com . akiban . sql . optimizer . rule . BranchJoiner_CBO . * ; import com . akiban . sql . optimizer . rule . costmodel . CostModel ; import com . akiban . sql . optimizer . rule . costmodel . TableRowCounts ;", "import rtg . config . agriculturalrevolution . ConfigAR ; import rtg . config . betteragriculture . ConfigBA ;", "parse ( ) ; return this . getNamePart ( NamePartKey . OrgUnit1 ) ;", "\"\\3\u00c3\u0132\u00c2\u00b0\u00c3\u0143\u00c4\u00bd\u00c4\u00b3\u00c3\u00a8\u00c4\u00aa\u00c4\u00a8\u00c3\u00aa\u00c2\u00b4\u00c5\u0125\u00c3\u00a4\u00c4\u00b2\u00c4\u00b9\u00c3\u00aa\u00c2\u00bb\u00c2\u00b1\u00c3\u00a8\u00c2\u00b6\u00c4\u00a2\u00c3\u00aa\u00c2\u00ab\u00c4\u00bf\\2\u00c3\u0124\u00c4\u00a3\u00c3\u0133\u00c3\u0132\u00c2\u00ac\\b\\1\\4\" + \"\\2\\t\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\\7\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\" + \"\\4\\13\\t\\13\\4\\f\\t\\f\\4\\r\\t\\r\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\" + \"\\t\\22\\4\\23\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\4\\27\\t\\27\\4\\30\\t\\30\\4\\31\" + \"\\t\\31\\4\\32\\t\\32\\4\\33\\t\\33\\4\\34\\t\\34\\4\\35\\t\\35\\4\\36\\t\\36\\4\\37\\t\\37\\4\\t\" + \" \\4\\32\\t\\32\\4\\33\\t\\33\\4\\34\\4\\35\\t\\35\\4\\36\\t\\35\\4\\36\\t\\36\\4\\37\\4\\t\\32\\33\\t\\33\\4\\34\\t\\34\\4\\35\\t\\35\\4\\36\\", "public Publisher < Integer > addAll ( Collection < ? extends V > c ) { if ( c . isEmpty ( ) ) { return Mono . just ( 0 ) ; } long score = 92233720368547758L - System . currentTimeMillis ( ) ; List < Object > params = new ArrayList < Object > ( c . size ( ) * 2 + 1 ) ; params . add ( instance . getName ( ) ) ; for ( V value : c ) { ByteBuf objectState = ( ( RedissonSetCache ) instance ) . encode ( value ) ; params . add ( score ) ; params . add ( objectState ) ; } return commandExecutor . writeReactive ( instance . getName ( ) , instance . getCodec ( ) , RedisCommands . ZADD_RAW , params . toArray ( ) ) ; } public Publisher < Integer", "import static org . junit . Assume . assumeTrue ;", "protected Size size ;", "{ final RadioReleasingEmitterWrapper < T > emitterWrapper = new RadioReleasingEmitterWrapper < > ( emitter , radioReleaseInterface ) ; operationObservable . doOnTerminate ( clearNativeCallbackReferenceAction ( ) ) . subscribe ( emitterWrapper ) ; } private Action0 clearNativeCallbackReferenceAction ( ) { return new Action0 ( ) { @ Override public void call ( ) { gattCallback . setNativeCallback ( null ) ; } } ; }", "* @ param name the attribute name . * @ param value the new value for the given attribute ( may be { @ code null } ) . * @ throws IllegalArgumentException if the given name is not an attribute or association name of this feature .", "", "{ stringLengthRange = new Range < > ( Constants . MIN_STRING_LENGTH , Constants . MAX_STRING_LENGTH ) ; collectionSizeRange = new Range < > ( Constants . MIN_COLLECTION_SIZE , Constants . MAX_COLLECTION_SIZE ) ; } public void setCollectionSizeRange ( final int minCollectionSize , final int maxCollectionSize ) { this . collectionSizeRange = new Range < > ( minCollectionSize , maxCollectionSize ) ; }", "", "disableVanillaTickWarp = CarpetSettings . getBool ( \"disableVanillaTickWarp\" ) ; ridingPlayerUpdateFix = CarpetSettings . getBool ( \"ridingPlayerUpdateFix\" ) ;", "*", "private final static IngestServices ingestServices = IngestServices . getInstance ( ) ; private final static Logger logger = ingestServices . getLogger ( SQLiteReader . class . getName ( ) ) ;", "modules . add ( new ClusterModule ( this . settings , clusterService ) ) ; modules . add ( new IndicesModule ( namedWriteableRegistry ) ) ;", "public synchronized void addAllResults ( @ Nonnull PPResult < ? > [ ] result ) { if ( result == null ) return ; }", "prop = getConfig ( Constants . CONFIG_CATEGORY_WORLDGEN , \"Enable Silicon Ore Gen\" , true ) ; prop . setComment ( \"If this is enabled, silicon ore will generate on the overworld.\" ) ;", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "public Void visitData ( Abstract . DataDefinition def , Scope parentScope ) { ExpressionResolveNameVisitor exprVisitor = new ExpressionResolveNameVisitor ( myNsProviders , parentScope , myContext , myNameResolver , myResolveListener ) ; }", "private Step removeDomainPresenceInfo ( ) { return new Step ( ) { @ Override public NextAction apply ( Packet packet ) { DomainPresenceInfoManager . remove ( domainUID ) ; return doNext ( packet ) ; } } ; } static void cancelDomainStatusUpdating ( DomainPresenceInfo info ) { ScheduledFuture < ? > statusUpdater = info . getStatusUpdater ( ) . getAndSet ( null ) ; if ( statusUpdater != null ) { statusUpdater . cancel ( true ) ; } }", "public void step ( Program program ) throws ContractValidateException { }", "@ Test ( groups = \"mercury_lightbox_moveImageWhileZoomed\" ) @ InBrowser ( browser = BrowserType . CHROME_ANDROID ) public void mercury_lightbox_moveImageWhileZoomed ( ) { }", "private final KeyService keyService ; private final StateChangeActionHelper stateChangeActionHelper ; private final TokenService tokenService ; private final ClientService clientService ; private final CertificateAuthorityService certificateAuthorityService ; private final KeyService keyService ; private final DnFieldHelper dnFieldHelper ;", "userTweetReader . setTestLines ( userTweetReader . getBookmarks ( ) . subList ( trainSize , userTweetReader . getBookmarks ( ) . size ( ) ) ) ; PredictionFileWriter writer = new PredictionFileWriter ( userTweetReader , predictionValues ) ; return userTweetReader ;", "else if ( component . equals ( new ComponentName ( FileDisplayActivity . this , FileUploadService . class ) ) ) { }", "this . dnsDomain = dnsDomain ; this . nameserver = nameserver ; this . nameserverAddress = nameserverAddress ; this . maxUserPublicAddresses = maxUserPublicAddresses ; this . systemReservedPublicAddresses = systemReservedPublicAddresses ; this . doDynamicPublicAddresses = doDynamicPublicAddresses ;", "import org . cometd . bayeux . server . BayeuxContext ;", "super ( name , Block . Properties . create ( Material . IRON ) . sound ( SoundType . METAL ) . hardnessAndResistance ( 3.0F , 15.0F ) . notSolid ( ) ,", "public Object getExtraCtrl ( ) { return new ExtraCtrl ( ) ; } protected class ExtraCtrl extends Textbox . ExtraCtrl implements Blockable { public boolean shallBlock ( AuRequest request ) { final String cmd = request . getCommand ( ) ; if ( Events . ON_OPEN . equals ( cmd ) ) return false ; return ! Components . isRealVisible ( Combobox . this ) || isDisabled ( ) || ( isReadonly ( ) && Events . ON_CHANGING . equals ( cmd ) ) ; } }", "final int defaultPort = encrypted ? DEFAULT_WINRM_PORT : DEFAULT_WINRM_UNENCRYPTED_PORT ; return resolveIntProperty ( WINRM_PORT , defaultPort , getNode ( ) , getFrameworkProject ( ) , getFramework ( ) ) ;", "public class IndexMetaData implements Diffable < IndexMetaData > , FromXContentBuilder < IndexMetaData > , ToXContent { }", "Objects . equals ( pingConfig , that . pingConfig ) && Objects . equals ( connectionIdsRetrievalConfig , that . connectionIdsRetrievalConfig ) &&", "private void check ( TokenType expectedTokenType , TokenType tokenType ) { if ( tokenType != expectedTokenType ) { throw new TagExpressionException ( \"Syntax error. Expected %s\" , tokenType . toString ( ) . toLowerCase ( ) ) ; } }", "private void handleRelay ( final SimpleChannelInboundHandler < Message > handler , final FutureResponse futureResponse , << << < / mnt / batch / tasks / workitems / adfv2 - General_1 / job - 1 / 4e752 bfa - de61 - 41d 3 - bad2 - 15740ed 8 a990 / wd / . temp / athenacommon / a3755370 - fd75 - 4e7d - 8f c1 - 02234 91 c727f . java final Message message , final ChannelCreator channelCreator , final int idleTCPSeconds , final int connectTimeoutMillis , final PeerConnection peerConnection , final TimeoutFactory timeoutHandler ) { FutureDone < PeerSocketAddress > futurePing = pingFirst ( message . recipient ( ) . peerSocketAddresses ( ) ) ;", "public int providerCount ( ) { List < String > uuids = new ArrayList < String > ( ) ; for ( Encounter enc : encounters ) { if ( enc . provider != null ) { uuids . add ( enc . provider . uuid ) ; } } Set < String > uniqueUuids = new HashSet < String > ( uuids ) ; return uniqueUuids . size ( ) ; }", "import de . fraunhofer . aisec . cpg . graph . declarations . ConstructorDeclaration ; import de . fraunhofer . aisec . cpg . graph . declarations . Declaration ; import de . fraunhofer . aisec . cpg . graph . declarations . FieldDeclaration ; import de . fraunhofer . aisec . cpg . graph . declarations . FunctionDeclaration ; import de . fraunhofer . aisec . cpg . graph . declarations . MethodDeclaration ; import de . fraunhofer . aisec . cpg . graph . declarations . NamespaceDeclaration ; import de . fraunhofer . aisec . cpg . graph . declarations . ValueDeclaration ; import de . fraunhofer . aisec . cpg . graph . declarations . RecordDeclaration ; import de . fraunhofer . aisec . cpg . graph . declarations . VariableDeclaration ; import de . fraunhofer . aisec . cpg . graph . statements . CompoundStatement ;", "String sourceObjectName = sourceObjectInfo . getObjectName ( ) ; destinationObjectName = destinationObjectInfo . getObjectName ( ) ;", "return new Event ( Event . Type . MODIFIED , Event . Target . CONSUMER , newConsumer . getName ( ) , principal , newConsumer . getOwner ( ) . getId ( ) , newConsumer . getId ( ) , newConsumer . getId ( ) , null , newEntityJson , null , null ) ;", "addImages = ( MorphingButton ) root . findViewById ( R . id . addImages ) ; createPdf = ( MorphingButton ) root . findViewById ( R . id . pdfcreate ) ; openPdf = ( MorphingButton ) root . findViewById ( R . id . pdfOpen ) ;", "protected AstModVisitor ( CGNode n , Collection < PointerKey > result , AstHeapModel h , PointerAnalysis < InstanceKey > pa ) { }", "Logger . d ( LOG , \"new dcim:\\n\" + returnedMedia . asJson ( ) . toString ( ) ) ; if ( ! returnedMedia . dcimList . isEmpty ( ) ) { }", "import java . util . Arrays ; import java . util . EnumSet ; import java . util . HashMap ; import java . util . Map ; import java . util . Collection ;", "public class ItemOpenComputers extends ItemMultiple implements Item , EnvironmentAware , HostAware , UpgradeRenderer , IItemWithDocumentation { }", "if ( event instanceof ShardMonitorEvent ) { if ( MantaroBot . getInstance ( ) . getShardedMantaro ( ) . getShards ( ) [ shardId ] . getEventManager ( ) . getLastJDAEventTimeDiff ( ) > 30000 ) return ; }", "private String mac ; @ Parameter ( name = ApiConstants . ALLOCATION_STATE , type = CommandType . STRING , description = \"Allocation state of this Host for allocation of new resources\" ) private String allocationState ;", "private Inventory dummyInventory = new SimpleInventory ( 9 , \"Items to keep stocked\" , 127 ) ;", "@ Schema ( description = \"Healthcheck HTTP method - GET or POST, GET by default\" ) public Optional < HealthcheckMethod > getMethod ( ) { return method ; } @ ApiModelProperty ( required = false , value = \"Consider the task unhealthy/failed if the app has not started responding to healthchecks in this amount of time\" )", "String level = alert . getLevel ( ) ; List < AlertChannel > channels = m_policyManager . queryChannels ( type , group , level ) ; for ( AlertChannel channel : channels ) { String title = \"[\u00c3\u00a5\u00c4\u00b3\u00c4\u00ac\u00c3\u00a8\u00c5\u0125\u00c2\u00a6\u00c3\u00a6\u00c4\u00a3\u00c2\u00a2\u00c3\u00a5\u00c2\u00a4\u00c4\u00af] [\" + group + \" \" + alert . getMetric ( ) + \"]\" ; String content = \"[\u00c3\u00a5\u00c4\u00b3\u00c4\u00ac\u00c3\u00a8\u00c5\u0125\u00c2\u00a6\u00c3\u00a5\u00c2\u00b7\u00c2\u00b2\u00c3\u00a6\u00c4\u00a3\u00c2\u00a2\u00c3\u00a5\u00c2\u00a4\u00c4\u00af]\" ; List < String > receivers = m_contactorManager . queryReceivers ( group , channel , type , alert . toString ( ) ) ; AlertMessageEntity message = new AlertMessageEntity ( group , title , type , content , receivers ) ; if ( m_senderManager . sendAlert ( channel , message ) ) { result = true ; } } return result ;", "", "public TInputSetBuilder nextInputPicksWith ( TInstanceNormalizer nextNormalizer ) { this . nextNormalizer = nextNormalizer ; return this ; } public void setExact ( int pos , boolean exact ) { if ( exact ) { exactsBuilder . set ( pos , true ) ; } } private void setExacts ( int [ ] positions ) { if ( exact ) { for ( int pos : positions ) { setExact ( pos , true ) ; } } } public InputSetFlags exactInputs ( ) { return exactsBuilder . get ( ) ; }", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import javax . servlet . http . HttpServletRequest ; import java . sql . Date ; import java . util . ArrayList ; import java . util . List ; import java . util . Locale ; import java . util . ResourceBundle ;", "if ( lastMessage != null && alert && ! inGracePeriod ( lastChat ) )", "import com . cloud . hypervisor . kvm . resource . LibvirtVMDef . DiskDef . diskProtocol ; import com . cloud . hypervisor . kvm . resource . LibvirtVMDef . DiskDef . diskCacheMode ;", "_neighbors = GibbsNeighbors . create ( this ) ;", "void filterWithCustomName ( ) throws IOException { AnnotatedBeanDefinition definition = createBeanDefinition ( CustomNameFilter . class ) ; this . handler . handle ( definition , this . registry ) ; }", "import phylonet . tree . model . TMutableNode ;", "private HttpEntity toApacheHttpEntity ( RequestTemplate requestTemplate ) throws IOException { }", "public void resumeShouldAllowToExecuteWork ( ) throws SBonitaException { }", "addRequestedStateTransition ( requestedState , false , jointSpaceHandControlState , userControlModeState ) ; addRequestedStateTransition ( requestedState , false , userControlModeState , taskSpacePositionControlState ) ; addRequestedStateTransition ( requestedState , false , userControlModeState , jointSpaceHandControlState ) ;", "import org . sufficientlysecure . keychain . keyimport . ParcelableHkpKeyserver ;", "private org . slf4j . Logger log = org . slf4j . LoggerFactory . getLogger ( \"featureCollectionScan\" ) ; protected String accept ;", "protected boolean requestExceedsMaxBodySize ( final Request request ) { return request . getOptions ( ) . hasSize1 ( ) && request . getOptions ( ) . getSize1 ( ) > getMaxResourceBodySize ( request ) ; } private int getMaxResourceBodySize ( final Message message ) { int maxPayloadSize = message . getMaxResourceBodySize ( ) ; if ( maxPayloadSize == 0 ) { maxPayloadSize = maxResourceBodySize ; } return maxPayloadSize ; }", "trustedCertSource . setSummary ( new TLValidationJobSummary ( new ArrayList < LOTLInfo > ( ) , new TrustServiceProvider ( ) ) ) ; TrustProperties trustProperties = new TrustProperties ( ) ; TrustServiceProvider trustServiceProvider = new TrustServiceProvider ( ) ; TrustServiceStatusAndInformationExtensionsBuilder builder = new TrustServiceStatusAndInformationExtensionsBuilder ( ) ; builder . setStatus ( \"bla\" , new TrustServiceProvider ( ) , new TimeDependentValues < > ( ) ) ; builder . setType ( \"bla\" ) ; builder . setStartDate ( new Date ( ) ) ; TrustServiceStatusAndInformationExtensions serviceStatus = new TrustServiceStatusAndInformationExtensions ( builder ) ; Iterable < TrustServiceStatusAndInformationExtensions > srcList = Arrays . < TrustServiceStatusAndInformationExtensions > asList ( serviceStatus ) ; TimeDependentValues < TrustServiceStatusAndInformationExtensions > status = new TimeDependentValues < TrustServiceStatusAndInformationExtensions > ( srcList ) ; TrustProperties trustService = new TrustProperties ( ) ; hashMap . put ( rootToken , trustProperties ) ) ; trustedCertSource . setTrustPropertiesByCertificates ( hashMap ) ;", "Collection . saveBook ( book , true ) ; myBooks . remove ( book . getId ( ) ) ; removeFromTree ( LibraryTree . ROOT_FOUND , book ) ; removeFromTree ( LibraryTree . ROOT_BY_TITLE , book ) ; removeFromTree ( LibraryTree . ROOT_BY_SERIES , book ) ; removeFromTree ( LibraryTree . ROOT_BY_TAG , book ) ;", "public boolean isSchemasEnabled ( ) { return schemasEnabled ; }", "private Map < BooleanArray , DisplayInteger > displayLists = new HashMap < BooleanArray , DisplayInteger > ( ) ;", "properties = tester . configRoundTrip ( new JobPropertyStep ( properties ) ) . getProperties ( ) ; assertEquals ( 1 , properties . size ( ) ) ; assertEquals ( ParametersDefinitionProperty . class , properties . get ( 0 ) . getClass ( ) ) ; ParametersDefinitionProperty pdp = ( ParametersDefinitionProperty ) properties . get ( 0 ) ;", "@ Test public void getAllPsd2Support ( ) { HttpStatus expectedStatusCode = HttpStatus . OK ; ResponseEntity < Boolean > actualResponse = aspspProfileController . getAllPsd2Support ( ) ; assertThat ( actualResponse . getStatusCode ( ) ) . isEqualTo ( expectedStatusCode ) ; assertThat ( actualResponse . getBody ( ) ) . isEqualTo ( ALL_PSD_2_SUPPORT ) ; } @ Test public void getBankOfferedConsentSupport ( ) { HttpStatus expectedStatusCode = HttpStatus . OK ; ResponseEntity < Boolean > actualResponse = aspspProfileController . getBankOfferedConsentSupport ( ) ; assertThat ( actualResponse . getStatusCode ( ) ) . isEqualTo ( expectedStatusCode ) ; assertThat ( actualResponse . getBody ( ) ) . isEqualTo ( BANK_OFFERED_CONSENT_SUPPORT ) ; }", "private Result validateJoinClause ( TableMetadata tableFrom , TableMetadata tableJoin ) { Result result = QueryResult . createSuccessQueryResult ( ) ; if ( joinInc ) { SelectorIdentifier leftField = join . getLeftField ( ) ; SelectorIdentifier rightField = join . getRightField ( ) ; boolean streamingLeft = false ; boolean batchLeft = false ; if ( leftField . getTable ( ) . equalsIgnoreCase ( streamingMetadata . getTableName ( ) ) ) { if ( streamingMetadata . getColumn ( leftField . getField ( ) ) == null ) { result = Result . createValidationErrorResult ( \"Ephemeral table '\" + streamingMetadata . getTableName ( ) + \"' doesn't contain the field '\" + leftField . getField ( ) + \"'.\" ) ; } else { streamingLeft = true ; } } else if ( leftField . getTable ( ) . equalsIgnoreCase ( tableMetadataJoin . getName ( ) ) ) { if ( tableMetadataJoin . getColumn ( leftField . getField ( ) ) == null ) { result = Result . createValidationErrorResult ( \"Table '\" + tableMetadataJoin . getName ( ) + \"' doesn't contain the field '\" + leftField . getField ( ) + \"'.\" ) ; } else { batchLeft = true ; } } else { result = Result . createValidationErrorResult ( \"Table '\" + leftField . getTable ( ) + \"' doesn't match any of the incoming tables.\" ) ; } if ( ! result . hasError ( ) ) { if ( streamingLeft ) { if ( tableMetadataJoin . getName ( ) + \"' doesn't contain the field '\" + leftField . getField ( ) + \"' doesn't contain the field '\" + leftField . getField ( ) + \"' doesn't contain the field '\" + leftField . getField ( ) + \"' doesn't contain the field '\" + leftField . getTable ( ) + \"' doesn't contain any of the incoming tables.\" ) ; } else { result = Result . createValidationErrorResult ( \"Table '\" + tableMetadataJoin . getName ( ) +", "import org . junit . runner . rules . RuleChain ; import org . jvnet . hudson . test . JenkinsRule ; import org . jvnet . hudson . test . recipes . LocalData ; import org . kohsuke . github . GHContent ; import org . kohsuke . github . GHDeployKey ; import org . kohsuke . github . GHEvent ; import org . kohsuke . github . GHHook ; import org . kohsuke . github . GHMyself ; import org . kohsuke . github . GHRef ; import org . kohsuke . github . GHRepository ; import org . kohsuke . github . GHUser ; import org . kohsuke . github . GitHub ;", "public Integer getRepaymentFrequencyNthDayType ( ) { return this . repaymentFrequencyNthDayType ; } public void setRepaymentFrequencyNthDayType ( Integer repaymentFrequencyNthDayType ) { this . repaymentFrequencyNthDayType = repaymentFrequencyNthDayType ; } public Integer getRepaymentFrequencyDayOfWeekType ( ) { return this . repaymentFrequencyDayOfWeekType ; } public void setRepaymentFrequencyDayOfWeekType ( Integer repaymentFrequencyDayOfWeekType ) { this . repaymentFrequencyDayOfWeekType = repaymentFrequencyDayOfWeekType ; } public String getAccountNumber ( ) { return this . accountNumber ; } public Client getClient ( ) { return this . client ; } public Collection < LoanCharge > getLoanCharges ( LocalDate dueDate ) { Collection < LoanCharge > loanCharges = new ArrayList < > ( ) ; for ( LoanCharge loanCharge : charges ) { if ( ( loanCharge . getDueLocalDate ( ) != null ) && loanCharge . getDueLocalDate ( ) . equals ( dueDate ) ) { loanCharges . add ( loanCharge ) ; } } return loanCharges ; } public Integer getRepaymentFrequencyNthDayType ( ) { return this . repaymentFrequencyNthDayType ( ) { return this . repaymentFrequencyNthDayType ; } public void setRepaymentFrequencyNthDayType ( ) { return this . repaymentFrequencyNthDayType ) { this . repaymentFrequencyNthDayType ) { this . repaymentFrequencyNthDayType = repaymentFrequencyNthDayType ; } public void setRepaymentFrequencyNthDayType ( Integer repaymentFrequencyNthDayType ) { this . repaymentFrequencyNthDayType ) { this . repaymentFrequencyNthDayType = repaymentFrequencyNthDayType ; } public Integer getRepaymentFrequencyNthDayType ( ) { this . repaymentFrequency", "", "", "* Copyright 2019 VMware , Inc .", "import stroom . refdata . store . MapDefinition ; import stroom . refdata . store . RefDataStore ; import stroom . refdata . store . RefDataStoreProvider ; import stroom . refdata . store . RefDataValue ; import stroom . refdata . store . RefStreamDefinition ; import stroom . refdata . store . StringValue ; import stroom . streamstore . shared . StreamTypeNames ;", "private void testPredicate ( ) throws Exception { SqlParser parser = new SqlParser ( ) ; String sql = \"select a from b where c = 'd'\" ; Statement statement = parser . createStatement ( sql ) ; SQLHandler . SQLVisitor sqlVistor = new SQLHandler . SQLVisitor ( new StringBuilder ( ) ) ; sqlVistor . process ( statement , new Integer ( 0 ) ) ; assert ( sqlVistor . query . equals ( \"(c:\\\"d\\\")\" ) ) ; parser = new SqlParser ( ) ; sql = \"select a from b where (c = 'd')\" ; statement = parser . createStatement ( sql ) ; sqlVistor = new SQLHandler . SQLVisitor ( new StringBuilder ( ) ) ; sqlVistor . process ( statement , new Integer ( 0 ) ) ; assert ( sqlVistor . query . equals ( \"(c:\\\"d\\\")\" ) ) ; parser = new SqlParser ( ) ; sql = \"select a from b where ('CcC' = 'D')\" ; statement = parser . createStatement ( sql ) ; sqlVistor = new SQLHandler . SQLVisitor ( new StringBuilder ( ) ) ; sqlVistor . process ( statement , new Integer ( 0 ) ) ; assert ( sqlVistor . query . equals ( \"(CcC:\\\"D\\\")\" ) ) ; parser = new SqlParser ( ) ; sql = \"select a from b where ((c = 'd') AND (l = 'z'))\" ; statement = parser . createStatement ( sql ) ; sqlVistor = new SQLHandler . SQLVisitor ( new StringBuilder ( ) ) ; sqlVistor . process ( statement , new Integer ( 0 ) ) ; assert ( sqlVistor . query . equals ( \"(CcC:\\\"D\\\")\" ) ) ; parser = new SqlParser ( ) ; sql = \"select a from b where ((c = '", "return getAllAsync ( keys , null , false , subjId , deserializePortable , filter ) . get ( ) ;", "", "protected @ LayoutRes int layout ( @ NonNull final SectionRow sectionRow ) { }", "import android . support . v4 . view . GravityCompat ; import android . support . v4 . widget . DrawerLayout ;", "public boolean isFloorStock ( ) { final String whereClause = I_PP_Order_BOMLine . COLUMNNAME_PP_Order_BOMLine_ID + \"=?\" + \" AND \" + I_PP_Order_BOMLine . COLUMNNAME_IssueMethod + \"=?\" ; final boolean isFloorStock = new Query ( getCtx ( ) , I_PP_Order_BOMLine . Table_Name , whereClause , get_TrxName ( ) ) . setOnlyActiveRecords ( true ) . setParameters ( new Object [ ] { getPP_Order_BOMLine_ID ( ) , X_PP_Order_BOMLine . ISSUEMETHOD_FloorStock } ) . match ( ) ; return isFloorStock ; } private static void setIsSubcontracting ( final I_PP_Cost_Collector cc , int PP_Order_Node_ID ) { final Properties ctx = InterfaceWrapperHelper . getCtx ( cc ) ; final String trxName = InterfaceWrapperHelper . getTrxName ( cc ) ; final MPPOrderNode ppOrderNode = MPPOrderNode . get ( ctx , PP_Order_Node_ID , trxName ) ; final boolean subcontracting = ppOrderNode . isSubcontracting ( ) ; cc . setIsSubcontracting ( subcontracting ) ; } }", "ShardRouting test_3 = ShardRouting . newUnassigned ( indexMetaData . getIndex ( ) , 3 , null , 1 , true , new UnassignedInfo ( UnassignedInfo . Reason . INDEX_CREATED , \"foo\" ) ) ;", "in = dir . openInput ( IndexFileNames . segmentFileName ( segment , \"\" + codecId , VariableGapTermsIndexWriter . TERMS_INDEX_EXTENSION ) ) ; this . segment = segment ;", "import org . jboss . as . remoting . RemotingHttpUpgradeService ; import org . jboss . as . remoting . RemotingServices ; import org . jboss . as . controller . ReloadRequiredRemoveStepHandler ;", "import net . minecraft . util . ChatComponentText ; import net . minecraft . util . EnumFacing ; import net . minecraft . util . IChatComponent ; import cofh . api . energy . IEnergyHandler ; import cpw . mods . fml . common . Optional . Interface ; import cpw . mods . fml . common . Optional . InterfaceList ; import cpw . mods . fml . common . Optional . Method ;", "void overrideDataSourceAndFallbackToEmbeddedProperties ( ) { this . contextRunner . withUserConfiguration ( EmbeddedDataSourceConfiguration . class ) . withPropertyValues ( \"spring.liquibase.url:jdbc:hsqldb:mem:liquibase\" ) . run ( assertLiquibase ( ( liquibase ) -> { DataSource dataSource = liquibase . getDataSource ( ) ; assertThat ( ( ( HikariDataSource ) dataSource ) . isClosed ( ) ) . isTrue ( ) ; assertThat ( ( ( HikariDataSource ) dataSource ) . getUsername ( ) ) . isEqualTo ( \"sa\" ) ; assertThat ( ( ( HikariDataSource ) dataSource ) . getPassword ( ) ) . isEqualTo ( \"\" ) ; } ) ) ; } @ Test void overrideUserAndFallbackToEmbeddedProperties ( ) { this . contextRunner . withUserConfiguration ( EmbeddedDataSourceConfiguration . class ) . withPropertyValues ( \"spring.liquibase.user:sa\" ) . run ( assertLiquibase ( ( liquibase ) -> { DataSource dataSource = liquibase . getDataSource ( ) ; assertThat ( ( ( HikariDataSource ) dataSource ) . isClosed ( ) ) . isTrue ( ) ; assertThat ( ( ( HikariDataSource ) dataSource ) . getJdbcUrl ( ) ) . startsWith ( \"jdbc:h2:mem:\" ) ; } ) ) ; } @ Test public void overrideTestRollbackOnUpdate ( ) { }", "writer . write ( MAIN , concept ( INGREDIENT1 ) . parents ( SUBSTANCEL ) . statedParents ( SUBSTANCEL ) . build ( ) , concept ( INGREDIENT2 ) . parents ( SUBSTANCEL ) . statedParents ( SUBSTANCEL ) . build ( ) , concept ( ABACAVIR_TABLET ) . parents ( DRUG_ROOTL ) . statedParents ( DRUG_ROOTL ) . build ( ) , concept ( PANADOL_TABLET ) . parents ( DRUG_ROOTL ) . statedParents ( DRUG_ROOTL ) . build ( ) ) ; if ( isAxiom ( ) ) { writer . put ( nextStorageKey ( ) , classAxioms ( PANADOL_TABLET , HAS_ACTIVE_INGREDIENT , INGREDIENT1 , 1 , HAS_BOSS , INGREDIENT2 , 1 , HAS_TRADE_NAME , INGREDIENT1 , 1 ) . build ( ) ) ; writer . put ( nextStorageKey ( ) , classAxioms ( TRIPHASIL_TABLET , HAS_BOSS , INGREDIENT1 , 1 , HAS_TRADE_NAME , INGREDIENT1 , 1 ) . build ( ) ) ; }", "public static final String FACEBOOK_MESSENGER_PROFILE_URL = \"me/messenger_profile?access_token=\" ;", "* Updates the view associated to the activity after the finish of an operation trying to * remove a file . *", "Integer subID = frame . getInteger ( Protocol . ACKEV_SUBID ) ;", "jj_la1 [ 234 ] = jj_gen ; break label_159 ;", "import org . broadleafcommerce . openadmin . server . security . extension . AdminSecurityServiceExtensionManager ; import org . broadleafcommerce . openadmin . server . security . event . AdminForgotPasswordEvent ; import org . broadleafcommerce . openadmin . server . security . event . AdminForgotUsernameEvent ;", "paramValueTextField = addInputTextField ( gridPane , ++ gridRow , Res . get ( \"dao.proposal.display.paramValue\" ) ) ;", "public BottomUp_Minimization ( IntVar obj ) { super ( new IntVar [ ] { obj } ) ; this . obj = obj ; firstCall = true ; pool = new PoolManager < FastDecision > ( ) ; obj . getSolver ( ) . getSearchLoop ( ) . restartAfterEachSolution ( true ) ; obj . getSolver ( ) . getSearchLoop ( ) . getLimitsBox ( ) . setSolutionLimit ( 2 ) ; }", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "if ( provFactory != null ) { prov = provFactory . createCurrencyConverter ( type ) ; }", "import java . util . List ; import java . util . Optional ; import javax . validation . Valid ; import javax . validation . constraints . NotNull ;", "public static int waitForProcess ( String command , long timeout ) { long timeoutNs = timeout * 1000000l ; long startTime = System . nanoTime ( ) ; int pid = - 1 ; while ( ( System . nanoTime ( ) - startTime ) < timeoutNs && pid < 0 ) { pid = Utils . findProcessByCommand ( command ) ; } return pid ; } public static String readFileToString ( File file ) throws IOException { InputStream in = null ; byte [ ] bytes = null ; try { in = new FileInputStream ( file ) ; bytes = new byte [ ( int ) file . length ( ) ] ; int len = bytes . length ; int total = 0 ; while ( total < len ) { int result = in . read ( bytes , total , len - total ) ; if ( result == - 1 ) { break ; } total += result ; } } finally { if ( in != null ) { in . close ( ) ; } } return new String ( bytes ) ; } public static void writeStringToFile ( File file , String string ) throws IOException { BufferedOutputStream os = null ; try { os = new BufferedOutputStream ( new FileOutputStream ( file ) ) ; os . write ( string . getBytes ( ) ) ; os . flush ( ) ; } finally { if ( os != null ) { os . close ( ) ; } } }", "final long edge1Time = System . currentTimeMillis ( ) ; final long edge2Time = edge1Time + 1 ; final long maxVersion = edge2Time ; Edge edge1 = createEdge ( sourceId , \"test\" , targetId1 , edge1Time ) ;", "if ( entityFrequencyMap != null ) { aCandidatesFullText . forEach ( l -> { String key = l . getIRI ( ) ; if ( aKB . getFtsIri ( ) . toString ( ) . equals ( \"bif:contains\" ) ) { key = key . replace ( \"http://www.wikidata.org/entity/\" , \"\" ) ; if ( entityFrequencyMap . get ( key ) != null ) { l . setFrequency ( entityFrequencyMap . get ( key ) ) ; } } } ) ; }", "Verifier v = new DistractorlessVerifier ( test . getTrainingInstances ( ) , test . getTestInstances ( ) , 0.17 , false ) ; v . verify ( ) ; System . out . println ( v . getResultString ( ) ) ; System . out . println ( test . getStatString ( ) ) ;", "private boolean validateNotEmpty ( String givenValue , boolean allIsWell , StringBuilder buf , String errorMessage ) { }", "jj_la1 [ 199 ] = jj_gen ; break label_136 ;", "import net . minecraft . util . ResourceLocation ; import net . minecraft . tileentity . TileEntity ;", "* Get an array of Dictionaries of type & lt ; string , string & gt ; with value [ { '1' : 'one' , '2' : 'two' , '3' : 'three' } , { } , { '7' : 'seven' , '8' : 'eight' , '9' : 'nine' } ]", "listenersHolder . getPreparedListeners ( ) . reset ( ) ;", "Insulet_Omnipod ( \"Insulet Omnipod\" , \"Insulet\" , \"Omnipod\" , 0.05d , null , new DoseSettings ( 0.05d , 30 , 8 * 60 , 0.05d ) ,", "otherRouting . primaryTerm ( ) , otherRouting . primary ( ) , otherRouting . state ( ) , otherRouting . unassignedInfo ( ) ) ;", "+ tableName ( ) + joinClause ( ) . map ( w -> ONE_SPACE + w ) . orElse ( EMPTY_STRING )", "private Conflict checkDetachedReferences ( Multimap < CDOID , Pair < EStructuralFeature , CDOID > > newRevisionIdToFeatureIdMap , CDOID id ) { for ( Entry < CDOID , Collection < Pair < EStructuralFeature , CDOID > > entry : newRevisionIdToFeatureIdMap . asMap ( ) . entrySet ( ) ) { for ( Pair < EStructuralFeature , CDOID > featureAndId : entry . getValue ( ) ) { if ( featureAndId . getB ( ) . equals ( id ) ) { if ( isRebase ) { return new AddedInTargetAndDetachedInSourceConflict ( id , entry . getKey ( ) , featureAndId . getA ( ) . getName ( ) ) ; } } } } }", "bind ( URI . class ) . annotatedWith ( Names . named ( \"ServerUri\" ) ) . toInstance ( configuration . getGraylog2ServerUri ( ) ) ; bind ( URI . class ) . annotatedWith ( Names . named ( \"OurRadioUri\" ) ) . toInstance ( configuration . getRestTransportUri ( ) ) ; bind ( InputCache . class ) . to ( BasicCache . class ) . in ( Scopes . SINGLETON ) ;", "private final static int show_pinned = 25 ; private final static int translate = 101 ; private final static int share_key = 28 ; private final static int save_to = 25 ;", "public boolean isSpectator ( EntityPlayerMP player ) { return noClipList . contains ( player ) ; } @ Override public void setNoClip ( EntityPlayerMP player , boolean noClip ) { if ( noClip ) { if ( ! noClipList . contains ( player ) ) noClipList . add ( player ) ; } else { noClipList . remove ( player ) ; } }", "Ambiguity result = new Ambiguity ( KSorts . K , new ArrayList < Term > ( ) ) ; for ( StateReturn stateReturn : s . getNtCall ( new NonTerminalCall . Key ( nt , position ) ) . exitStateReturns ) { }", "import com . actionbarsherlock . view . Menu ; import com . actionbarsherlock . view . MenuInflater ; import com . actionbarsherlock . view . MenuItem ;", "FetchV2Request req = parser . parseFetchRequest ( pckIn ) ; currentRequest = req ;", "if ( valeur != null && valeur . length > 0 ) { for ( String c : valeur ) { } }", "", "", "@ FindBy ( how = How . ID , using = \"0-backlog\" ) WebElement columnBacklog ;", "Date eventDate = executionDate != null ? executionDate : dueDate ; validateAttributeOptionComboDate ( aoc , eventDate ) ; if ( event . getAssignedUser ( ) != null ) { if ( programStageInstance . getProgramStage ( ) . isEnableUserAssignment ( ) ) { programStageInstance . setAssignedUser ( assignedUser ) ; } }", "", "TypeFactory typeFactory , TermFactory termFactory , IntermediateQueryFactory iqFactory , IQConverter iqConverter , IntermediateQueryFactory iqFactory , AtomFactory atomFactory , UnionFlattener unionFlattener , ImmutabilityTools immutabilityTools , PushDownBooleanExpressionOptimizer pushDownExpressionOptimizer , OptimizerFactory optimizerFactory , PushUpBooleanExpressionOptimizer pullUpExpressionOptimizer ) {", "import com . openerp . support . OEUser ; import com . openerp . util . HTMLHelper ;", "import de . schildbach . wallet_test . R ;", "public void resetToGlobal ( TranslationUnitDeclaration declaration ) { }", "@ UML ( identifier = \"metadataProfile\" , obligation = OPTIONAL , specification = ISO_19115 )", "for ( Properties . Criterion pc : Properties . CRITERION ) CoverageAnalysis . analyzeCoverage ( best , pc ) ;", "setState ( 562 ) ;", "", "public void testPseudonymizeIndexDetailedData ( ) { CaseDataDto caze = createCase ( user1 , rdcf1 ) ; ContactDto contact1 = createContact ( user2 , caze , rdcf2 ) ; ContactDto contact2 = creator . createContact ( user1 . toReference ( ) , null , createPerson ( ) . toReference ( ) , caze , new Date ( ) , new Date ( ) , Disease . CORONAVIRUS , rdcf2 ) ; List < ContactIndexDetailedDto > indexList = getContactFacade ( ) . getIndexDetailedList ( new ContactCriteria ( ) , null , null , Collections . emptyList ( ) ) ; ContactIndexDetailedDto index1 = indexList . stream ( ) . filter ( c -> c . getUuid ( ) . equals ( contact1 . getUuid ( ) ) ) . findFirst ( ) . get ( ) ; assertThat ( index1 . getFirstName ( ) , is ( \"James\" ) ) ; assertThat ( index1 . getLastName ( ) , is ( \"Smith\" ) ) ; assertThat ( index1 . getCaze ( ) . getFirstName ( ) , is ( isEmptyString ( ) ) ) ; assertThat ( index1 . getCaze ( ) . getLastName ( ) , is ( isEmptyString ( ) ) ) ; assertThat ( index1 . getReportingUser ( ) . getUuid ( ) , is ( user2 . getUuid ( ) ) ) ; ContactIndexDetailedDto index2 = indexList . stream ( ) . filter ( c -> c . getUuid ( ) . equals ( contact2 . getUuid ( ) ) ) . findFirst ( ) . get ( ) ; assertThat ( index1 . getCaze ( ) . getFirstName ( ) , is ( isEmptyString ( ) ) ; assertThat ( index1 . getReportingUser ( ) . getUuid ( )", "import it . unibz . inf . ontop . io . PrefixManager ;", "Map < String , QueryParser < ? > > queryParsers = new HashMap < > ( ) ; for ( QueryParser < ? > queryParser : injectedQueryParsers ) { }", "setState ( 427 ) ; _errHandler . sync ( this ) ;", "request . setExtra ( \"req_1\" ) ;", "final SavingsAccountTransactionDTO transactionDTO = new SavingsAccountTransactionDTO ( fmt , activationDate , minRequiredOpeningBalance . getAmount ( ) , existingTransactionIds , existingReversedTransactionIds , null ) ;", "import com . intellij . psi . util . InheritanceUtil ;", "return TServerUtils . startTServer ( result , processor , this . getClass ( ) . getSimpleName ( ) , \"GC Monitor Service\" , 2 , conf . getCount ( Property . GENERAL_SIMPLETIMER_THREADPOOL_SIZE ) , 1000 , maxMessageSize , SslConnectionParams . forServer ( config ) , 0 ) . address ;", "public class TransactionManager extends BaseTransaction ; private Context context ; private VeritransRestAPI veritransPaymentAPI ; private MerchantRestAPI merchantPaymentAPI ; private boolean isSDKLogEnabled = false ; private MixpanelAnalytics", "{ if ( name . equals ( XML . LOCALE ) ) return locale ; if ( name . equals ( XML . TIMEZONE ) ) return timezone ; if ( name . equals ( XML . SCHEMAS ) ) return schemas ; if ( name . equals ( XML . GML_VERSION ) ) return versionGML ; if ( name . equals ( XML . RESOLVER ) ) return resolver ; if ( name . equals ( XML . CONVERTER ) ) return converter ; if ( name . equals ( XML . WARNING_LISTENER ) ) return warningListener ; if ( name . equals ( XML . STRING_SUBSTITUTES ) ) { } }", "public void testCharNotParsedIssue718 ( ) throws JSQLParserException { assertSqlCanBeParsedAndDeparsed ( \"SELECT a FROM x WHERE a LIKE '%' + char(9) + '%'\" ) ; } @ Test public void testTrueFalseLiteral ( ) throws JSQLParserException { assertSqlCanBeParsedAndDeparsed ( \"SELECT * FROM tbl WHERE true OR clm1 = 3\" ) ; } @ Test", "CreatorCandidate . construct ( config , ctor , creatorParams . get ( ctor ) ) , ctxt . getConfig ( ) . getConstructorDetector ( ) ) ;", "setState ( 641 ) ;", "import org . opengis . referencing . ReferenceIdentifier ; import org . opengis . metadata . citation . Citation ;", "if ( ThingMLHelpers . allStateMachines ( inst . getType ( ) ) != null ) { if ( StateHelper . allMessageHandlers ( ThingMLHelpers . allStateMachines ( inst . getType ( ) ) . get ( 0 ) ) != null ) { if ( StateHelper . allMessageHandlers ( ThingMLHelpers . allStateMachines ( inst . getType ( ) ) . get ( 0 ) ) . get ( p ) != null ) { if ( StateHelper . allMessageHandlers ( ThingMLHelpers . allStateMachines ( inst . getType ( ) ) . get ( 0 ) ) . get ( p ) . containsKey ( m ) ) { builder . append ( i + \"] = (void*) &\" + inst . getType ( ) . getName ( ) + \"_handle_\" + p . getName ( ) + \"_\" + m . getName ( ) + \";\\n\" ) ; } } } }", "", "import io . cloudslang . score . events . ScoreEvent ; import io . cloudslang . score . lang . ExecutionRuntimeServices ; import io . cloudslang . lang . entities . LoopStatement ; import io . cloudslang . lang . entities . ResultNavigation ; import io . cloudslang . lang . entities . bindings . Input ; import io . cloudslang . lang . runtime . bindings . InputsBinding ; import io . cloudslang . lang . runtime . bindings . ScriptEvaluator ; import io . cloudslang . lang . runtime . env . Context ; import io . cloudslang . lang . runtime . env . ParentFlowData ; import io . cloudslang . lang . runtime . env . RunEnvironment ;", "prop . setComment ( \"If this is true, the player will parachute onto the Moon instead - use only in debug situations.\" ) ; prop . setLanguageKey ( \"gc.configgui.disable_lander\" ) ;", "AccountUserApi accountUserApi = BrainDeadProxyFactory . createBrainDeadProxyFor ( AccountUserApi . class ) ; bind ( AccountUserApi . class ) . toInstance ( accountUserApi ) ; EntitlementUserApi entitlementUserApi = BrainDeadProxyFactory . createBrainDeadProxyFor ( EntitlementUserApi . class ) ; bind ( EntitlementUserApi . class ) . toInstance ( entitlementUserApi ) ;", "int statusCode = PDataType . INTEGER . getCodec ( ) . decodeInt ( statusKV . getValueArray ( ) , statusKV . getValueOffset ( ) , SortOrder . getDefault ( ) ) ;", "import static org . fest . assertions . Assertions . assertThat ; import java . util . Set ;", "import unknowndomain . engine . client . EngineClient ; import unknowndomain . engine . client . event . game . RendererRegisterEvent ;", "import mpicbg . imglib . type . numeric . integer . ShortType ; import mpicbg . imglib . type . numeric . real . FloatType ; import mpicbg . imglib . algorithm . roi . StructuringElement ; import vib . PointList ;", "import webhook . teamcity . auth . UsernamePasswordAuthenticator ; import webhook . teamcity . auth . UsernamePasswordAuthenticatorFactory ; import webhook . teamcity . auth . WebHookAuthConfig ; import webhook . teamcity . auth . WebHookAuthenticatorProvider ; import webhook . teamcity . settings . WebHookConfig ;", "return true ;", "start_button . clearAnimation ( ) ; start_button . setBackground ( buttonColor ) ; start_button . setText ( \"Start Broadcast\" ) ; logMessage ( \"Broadcasting Stop Successfully\" ) ; break ;", "", "public void onActivityResult ( int requestCode , int resultCode , Intent data ) { IntentResult scanResult = IntentIntegrator . parseActivityResult ( requestCode , resultCode , data ) ; NightscoutPreferences prefs = new AndroidPreferences ( getApplicationContext ( ) ) ; if ( scanResult != null && scanResult . getContents ( ) != null ) { NSBarcodeConfig barcode = new NSBarcodeConfig ( scanResult . getContents ( ) , prefs ) ; if ( barcode . hasMongoConfig ( ) ) { prefs . setMongoUploadEnabled ( true ) ; prefs . setMongoClientUri ( barcode . getMongoUri ( ) . get ( ) ) ; prefs . setMongoCollection ( barcode . getMongoCollection ( ) . get ( ) ) ; prefs . setMongoDeviceStatusCollection ( barcode . getMongoDeviceStatusCollection ( ) . get ( ) ) ; } else { prefs . setMongoUploadEnabled ( false ) ; } if ( barcode . hasApiConfig ( ) ) { prefs . setRestApiEnabled ( true ) ; prefs . setRestApiBaseUris ( barcode . getApiUris ( ) ) ; } else { prefs . setRestApiEnabled ( false ) ; } } }", "public boolean isHeredocEnd ( String text ) { return heredocLexingState . isNextHeredocMarker ( text ) ; } @ Override public boolean isHeredocEvaluating ( ) { return heredocLexingState . isExpectingEvaluatingHeredoc ( ) ; } @ Override public void pushExpectedHeredocMarker ( CharSequence expectedHeredocMarker ) { this . heredocLexingState . pushHeredocMarker ( expectedHeredocMarker . toString ( ) ) ; } @ Override public void popHeredocMarker ( CharSequence marker ) { heredocLexingState . popHeredocMarker ( marker . toString ( ) ) ; } @ Override public boolean isHeredocMarkersEmpty ( ) { return heredocLexingState . isEmpty ( ) ; } @ Override", "public void delete ( Stream < Entity > entities )", "import static dan200 . computercraft . client . gui . FixedWidthFontRenderer . * ;", "VMIllegalException , ZksnarkException , BadBlockException {", "final boolean containsBMS = bmsfiles . isEmpty ( ) ; if ( containsBMS ) { BMSFolderThread task = new BMSFolderThread ( conn , bmsfiles , records , updateFolder , txt , updatetime , previewpath , tags , info ) ; }", "", "for ( int z = MathHelper . floor_double ( this . posZ ) - 1 ; z <= MathHelper . floor_double ( this . posZ ) + 1 ; z ++ ) { for ( int y = yMin ; y <= yMax ; y ++ ) { BlockPos pos = new BlockPos ( x , y , z ) ; TileEntity tile = this . worldObj . getTileEntity ( pos ) ; } }", "fieldWriter . flush ( consumer , state ) ; TermsHashPerField perField = fieldWriter . termsHashPerField ; assert termsHash == null || termsHash == perField . termsHash ; termsHash = perField . termsHash ; int numPostings = perField . bytesHash . size ( ) ; perField . reset ( ) ; perField . shrinkHash ( numPostings ) ; fieldWriter . reset ( ) ;", "import org . apache . http . client . methods . HttpGet ; import org . apache . http . client . methods . HttpPost ; import org . apache . http . entity . ContentType ; import org . apache . http . entity . StringEntity ; import org . apache . http . util . EntityUtils ;", "", "public CurrencyConverter getCurrencyConverter ( ) { return converter ; } public Interval getActualInterval ( ) { return new Interval ( dates [ 0 ] . getTime ( ) , dates [ dates . length - 1 ] . getTime ( ) ) ; }", "import java . beans . FeatureDescriptor ;", "if ( policy . isAllowed ( IAuthorizationPolicy . READ_REPOSITORY_CONTENT_ACTION ) && policy . isAllowed ( IAuthorizationPolicy . CREATE_REPOSITORY_CONTENT_ACTION ) && policy . isAllowed ( IAuthorizationPolicy . MANAGE_SCHEDULING ) ) { }", "private final PingConfig pingConfig ; private final ConnectionIdsRetrievalConfig connectionIdsRetrievalConfig ;", "super . handleUnmatchedCloseElementEnd ( buffer , nameOffset , nameLen , line + this . lineOffset , col + this . colOffset ) ;", "* * @ param serializedBlob String blob to deserialize", "setState ( 335 ) ;", "@ ApiOperation ( value = \"Gets elements by seed from the graph\" , response = Element . class , responseContainer = \"List\" ) CloseableIterable < Element > getElementsBySeed ( final GetElementsBySeed < ElementSeed , Element > operation ) ;", "fileDataResult = fileDBAdaptor . get ( study . getUid ( ) , query , options , userId ) ; fileDataResult . getEvents ( ) . add ( new Event ( Event . Type . WARNING , path , \"Folder already existed\" ) ) ;", "import java . util . HashSet ; import java . util . List ;", "setState ( 588 ) ;", "@ API ( help = \"Do Classification or regression\" , filter = myClassFilter . class ) public boolean classification = false ; class myClassFilter extends DoClassBoolean { super . init ( ) ; super . registered ( ) ; Argument c = find ( \"ignored_cols_by_name\" ) ; Argument r = find ( \"response\" ) ; int ci = _arguments . indexOf ( c ) ; int ri = _arguments . indexOf ( r ) ; _arguments . set ( ri , c ) ; _arguments . set ( ci , r ) ; } @ Override protected void logStart ( ) { super . logStart ( ) ; if ( response == null ) { Log . info ( \" response: null\" ) ; } else { String arg = input ( \"response\" ) ; assert arg != null ; Log . info ( \" response: \" + arg ) ; } } @ Override protected void init ( ) { super ( \"source\" ) ; } }", "verify ( subscriptionManager , times ( 1 ) ) . registerMulticastSubscription ( eq ( fromParticipantId ) , ( Set < DiscoveryEntryWithMetaInfo > ) argThat ( contains ( toDiscoveryEntry ) ) ,", "import java . util . stream . Collectors ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicInteger ;", "{ simResetBtn . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( android . view . View view ) { ClientPrefs cPrefs = ClientPrefs . getInstance ( mRootView . getContext ( ) ) ; cPrefs . clearSimulationStart ( ) ; Context btnCtx = simResetBtn . getContext ( ) ; Toast . makeText ( btnCtx , btnCtx . getText ( R . string . reset_simulation_start ) , Toast . LENGTH_SHORT ) . show ( ) ; } } ) ; } private void onToggleSimulation ( boolean isChecked ) { Prefs . getInstance ( mRootView . getContext ( ) ) . setSimulateStumble ( isChecked ) ; } private void setupLocationChangeSpinners ( ) { final ClientPrefs cPrefs = ClientPrefs . getInstance ( mRootView . getContext ( ) ) ; }", "public PlotRepresentation ( MetricNode metricNode , FlowPanel zoomPanel , SimplePlot simplePlot , final LegendTree legendTree , String xLabelString ) { }", "public String getAuthenticator ( ) ; public String getAuthorizer ( ) ; public String getTargetKSName ( ) ; public String getTargetCFName ( ) ; public boolean doesCassandraStartManually ( ) ; public int getNumTokens ( ) ;", "router . get ( \"/v2.0/:tenantId/events/getEvents\" , new HttpEventsQueryHandler ( ( EventsIO ) ModuleLoader . getInstance ( EventsIO . class , CoreConfig . EVENTS_MODULES ) ) ) ;", "NewsModule . getNewsHeadline ( this , mNewsListener ) ; CalendarModule . getCalendarEvents ( this , mCalendarListener ) ;", "PIMItem pimItem = null ; if ( ( item < 0 ) || ( ( pimItem = mPIMItems . get ( item ) ) == null ) ) { throw new BigPhatError ( \"Invalid PIM item handle\" ) ; } pimItem . close ( ) ; return MA_PIM_ERR_NONE ;", "", "import com . smartdevicelink . SdlConnection . SdlSession2 ;", "this . serviceName = serviceName ;", "import java . io . File ; import java . io . IOException ;", "public abstract class BaseSecondaryIndexDataStore implements", "setState ( 256 ) ; _errHandler . sync ( this ) ;", "import lombok . Getter ; import com . apollocurrency . aplwallet . apl . exchange . transaction . DEX ; import com . apollocurrency . aplwallet . apl . util . annotation . FeeMarker ; import com . apollocurrency . aplwallet . apl . util . annotation . TransactionFee ;", "private LuanKeyboard mLuanKeyboard ; private GL10 gl ; private boolean bOnCreateDone = false ; private boolean bInitDone = false ;", "} catch ( Exception e ) { e . printStackTrace ( ) ; try { owner . error ( ) . put ( operationContext ) ; } catch ( InterruptedException errorEx ) { errorEx . printStackTrace ( ) ; } throw e ; } finally { owner . release ( ) ; releaseExecutor ( operationContext . operation . getName ( ) , stopwatch . elapsed ( MICROSECONDS ) , stallUSecs , exitCode ) ;", "* * @ param ac Annotated class to introspect * * @ return Root name to use , if any ; { @ code null } if not", "@ Override public EReportingNetwork getNetwork ( ) { return network ; } @ Override public HasNetwork setNetwork ( EReportingNetwork network ) { this . network = network ; return this ; } @ Override public boolean isSetNetwork ( ) { return getNetwork ( ) != null ; } @ Override public EReportingStation getStation ( ) { return station ; } @ Override public HasStation setStation ( EReportingStation station ) { this . station = station ; return this ; } @ Override public boolean isSetStation ( ) { return getStation ( ) != null ; }", "import org . pac4j . core . exception . HttpAction ; import org . pac4j . oauth . credentials . OAuth10Credentials ;", "import static javax . servlet . http . HttpServletResponse . SC_INTERNAL_SERVER_ERROR ; import static org . apache . commons . lang3 . exception . ExceptionUtils . getStackTrace ;", "import static org . ta4j . core . TATestsUtils . assertDecimalEquals ;", "if ( isNotEmpty ( appGroup ) ) { appConfigContent = dynamicConfiguration . getProperties ( isNotEmpty ( configCenter . getAppConfigFile ( ) ) ? configCenter . getAppConfigFile ( ) : configCenter . getConfigFile ( ) ,", "} catch ( InsufficientBtcException e ) { new Toaster ( getActivity ( ) ) . toast ( R . string . insufficient_funds , false ) ;", "NotificationBundleProcessor_ProcessFromFCMIntentService ( blankActivity , bundle , null ) ; readableDb = OneSignalPackagePrivateHelper . OneSignal_getSQLiteDatabase ( RuntimeEnvironment . application ) ;", "* Long running delete request , service returns a 204 to the initial request , indicating success .", "private int mStartPos = 0 ; private Handler mHandler ; private Runnable runnable = new Runnable ( ) { @ Override public void run ( ) { try { int position = getCurrentPosition ( ) ; if ( position != 0 && mPlayheadUpdateListener != null && isPlaying ( ) ) mPlayheadUpdateListener . onPlayheadUpdated ( position ) ; } catch ( IllegalStateException e ) { e . printStackTrace ( ) ; } mHandler . postDelayed ( this , PLAYHEAD_UPDATE_INTERVAL ) ; } } ;", "Importer i = new Importer ( null , null , null , null , null , null , null , null , pki , config , null , null , null , i18n , null ) ;", "private void addLineFilters ( Map < String , List < Long > > parsedLineFilters , String key , List < Long > lines ) { if ( parsedLineFilters . containsKey ( key ) ) { parsedLineFilters . get ( key ) . addAll ( lines ) ; } else { parsedLineFilters . put ( key , lines ) ; } } RuntimeOptions withConverters ( List < XStreamConverter > converters ) { this . converters . addAll ( converters ) ; return this ; }", "if ( caze != null ) { handleExternalJournalPerson ( dto ) ; } caze = fillOrBuildEntity ( dto , caze , checkChangeDate ) ;", "if ( jj_3R_1012 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_1013 ( ) ) return true ; }", "Log . w ( TAG , \"received some data!\" ) ; PowerManager powerManager = ( PowerManager ) getSystemService ( POWER_SERVICE ) ; PowerManager . WakeLock wakeLock = powerManager . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , \"ReceivedReading\" ) ; wakeLock . acquire ( ) ;", "GT_ModHandler . addCraftingRecipe ( ItemList . Cover_SolarPanel_EV . get ( 1 ) , GT_ModHandler . RecipeBits . NOT_REMOVABLE | GT_ModHandler . RecipeBits . REVERSIBLE , new Object [ ] { \" S \" , \"STS\" , \" S \" , 'S' , ItemList . Cover_SolarPanel_HV , 'T' , ItemList . Transformer_EV_HV } ) ;", "* Long running post request , service returns a 202 to the initial request , without a location header .", "switchSocketAddress = new InetSocketAddress ( Inet4Address . getByName ( \"127.0.1.1\" ) , 32768 ) ; speakerSocketAddress = new InetSocketAddress ( Inet4Address . getByName ( \"127.0.1.254\" ) , 6653 ) ; switchSocketAddress . getAddress ( ) . getHostName ( ) ;", "sagaManagerStatus , errorHandler ) )", "_subtypeResolver , _mixIns , rootNames , _configOverrides , _coercionConfigs ) ;", "", "import static com . google . common . collect . Iterables . getOnlyElement ; import static com . google . common . collect . Maps . newHashMap ;", "int polled = 0 ;", "import net . sourceforge . pmd . RuleSet . RuleSetBuilder ;", "import co . cask . coopr . shell . command . GetProviderTypeCommand ; import co . cask . coopr . shell . command . GetProvisionerCommand ;", "import org . elasticsearch . index . reindex . BulkByScrollResponse ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "protected static MeasurementPluginManager measurementPluginManager = null ;", "VolumeChooserEnvironment chooserEnv = new VolumeChooserEnvironment ( RootTable . ID ) ; String newPath = fs . choose ( chooserEnv , ServerConstants . getBaseUris ( ) ) + Constants . HDFS_TABLES_DIR + Path . SEPARATOR + RootTable . ID ;", ". addObject ( \"pageSize\" , paginationService . getPageSizeForCurrentUser ( ) )", "import org . bonitasoft . engine . core . process . instance . model . archive . SAProcessInstance ; import org . bonitasoft . engine . core . process . instance . model . event . trigger . STimerEventTriggerInstance ; import org . bonitasoft . engine . core . process . instance . model . SUserTaskInstance ;", "public void enabledUpdateEntity ( ) { if ( inv . isEmpty ( ) ) return ; }", "worldObj . getGameRules ( ) . setOrCreateGameRule ( \"doMobLoot\" , \"true\" ) ; setIdleTicks ( 20 ) ;", "protected Fragment findChildFragmentByIdOrTag ( int id ) { Fragment frag = this . getChildFragmentManager ( ) . findFragmentById ( id ) ; if ( null != frag ) return frag ; frag = this . getChildFragmentManager ( ) . findFragmentByTag ( Integer . toString ( id ) ) ; return frag ; } protected class BackendStatusTask extends AsyncTask < Void , Void , Status > { @ Override protected org . mythtv . services . api . status . Status doInBackground ( Void ... params ) { Log . i ( TAG , \"BackendStatusTask.doInBackground : enter\" ) ; LocationProfile mLocationProfile = mLocationProfileDaoHelper . findConnectedProfile ( getActivity ( ) ) ; ETagInfo etag = ETagInfo . createEmptyETag ( ) ; ResponseEntity < org . mythtv . services . api . status . Status > status = mMythtvServiceHelper . getMythServicesApi ( mLocationProfile ) . statusOperations ( ) . getStatus ( etag ) ; if ( status . getStatusCode ( ) == HttpStatus . OK ) { Log . i ( TAG , \"BackendStatusTask.doInBackground : exit\" ) ; return status . getBody ( ) ; } Log . i ( TAG , \"BackendStatusTask.doInBackground : exit, status not returned\" ) ; return null ; } @ Override protected void onPostExecute ( org . mythtv . services . api . status . Status result ) { Log . i ( TAG , \"BackendStatusTask.onPostExecute : enter\" ) ; super . onPostExecute ( result ) ; if ( null != result ) { mStatus = result ; } Log . i ( TAG , \"BackendStatusTask.onPostExecute : exit\" ) ; } Log . i ( TAG , \"BackendStatusTask.onPostExecute : exit\" ) ; } Log . i ( TAG , \"BackendStatusTask.onPostExecute : exit\" ) ; } @", "dependency . addEvidence ( EvidenceType . PRODUCT , name , \"Project\" , group , Confidence . HIGH ) ; dependency . addEvidence ( EvidenceType . VENDOR , name , \"Project\" , group , Confidence . HIGH ) ; dependency . setName ( group ) ;", "import com . pivovarit . function . ThrowingRunnable ; import org . junit . jupiter . api . Test ;", "SearchQueueBatch batch = node . createIndexBatch ( STORE_ACTION ) ;", "", "", "Context . set ( Context . standaloneContext ( ) ) ; processor = new CoffeeScriptProcessor ( ) ;", "{ \"R_sslProtocolPropertyDescription\" , \"SSL protocol label from TLS, TLSv1, TLSv1.1 & TLSv1.2. The default is TLS.\" } , { \"R_invalidSSLProtocol\" , \"SSL Protocol {0} label is not valid. Only TLS, TLSv1, TLSv1.1 & TLSv1.2 are supported.\" } , { \"R_SQLVariantSupport\" , \"SQL_VARIANT datatype is not supported in pre-SQL 2008 version.\" } , { \"R_invalidProbbytes\" , \"SQL_VARIANT: invalid probBytes for {0} type.\" } , { \"R_invalidStringValue\" , \"SQL_VARIANT does not support string values more than 8000 length.\" } , { \"R_invalidValueForTVPWithSQLVariant\" , \"Inserting null value with column type sql_variant in TVP is not supported.\" } ,", "public int winner ( ) { int unitcounts [ ] = new int [ players . size ( ) ] ; for ( Unit u : units ) { if ( u . getPlayer ( ) >= 0 ) unitcounts [ u . getPlayer ( ) ] ++ ; } int winner = - 1 ; for ( int i = 0 ; i < unitcounts . length ; i ++ ) { if ( unitcounts [ i ] > 0 ) { if ( winner == - 1 ) { winner = i ; } else { return - 1 ; } } } }", "private List < Expression > completeArgs ( List < ArgumentExpression > args , int numberOfArgs , int numberOfSubstArgs ) { List < Expression > args2 = new ArrayList < > ( numberOfArgs ) ; for ( int i = numberOfArgs - numberOfSubstArgs ; i < numberOfArgs - args . size ( ) ; ++ i ) { args2 . add ( Index ( i ) ) ; } for ( int i = args . size ( ) - Math . min ( numberOfSubstArgs , args . size ( ) ) ; i < args . size ( ) ; ++ i ) { args2 . add ( args . get ( i ) ) ; } return args2 ; }", "private Map < String , String > helps = null ; public void setHelps ( Map < String , String > helps ) { this . helps = helps ; } public String getHelpUrl ( String isoCode ) { String url = null ; if ( this . helps != null ) { url = helps . get ( isoCode ) ; } return url ; }", "case 1 : if ( schemeField . type == org . apache . thrift . protocol . TType . STRUCT ) { struct . e = new TachyonTException ( ) ; struct . e . read ( iprot ) ; struct . setEIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ; case 2 : if ( schemeField . type == org . apache . thrift . protocol . TType . STRUCT ) { struct . ioe = new ThriftIOException ( ) ; struct . ioe . read ( iprot ) ; struct . setIoeIsSet ( true ) ; } else { org . apache . thrift . protocol . TProtocolUtil . skip ( iprot , schemeField . type ) ; } break ;", "import cm . aptoide . pt . crashreports . CrashReports ; import cm . aptoide . pt . dataprovider . util . CommentType ; import cm . aptoide . pt . logger . Logger ;", "{ if ( ! handleResult ( createIndexEntryAsDocument ( keyValue , r . getIdentity ( ) ) ) ) break ; } else { }", "Eddy eddy = setupEddy ( null , \"dummy.java\" ,", "boolean truncate1_14Books ( ) ; boolean isLeftHandedHandling ( ) ;", "public static final StringId AttributesFactory_0_WAS_NOT_AN_EXISTING_DIRECTORY = new StringId ( 1068 , \"\\\"{0}\\\" was not an existing directory.\" ) ; public static final StringId AttributesFactory_ADDCACHELISTENER_PARAMETER_WAS_NULL = new StringId ( 1069 , \"addCacheListener parameter was null\" ) ; public static final StringId AttributesFactory_AN_EVICTION_CONTROLLER_WITH_LOCAL_DESTROY_EVICTION_ACTION_IS_INCOMPATIBLE_WITH_DISTRIBUTED_REPLICATION = new StringId ( 1070 , \"An Eviction Controller with local destroy eviction action is incompatible with distributed replication\" ) ; public static final StringId AttributesFactory_CAN_NOT_SET_DIFFERENT_CACHE_LOADER_IN_REGIONATTRIBUTES_AND_PARTITIONATTRIBUTES = new StringId ( 1071 , \"Can not set different cache loader in RegionAttributes and PartitionAttributes.\" ) ; public static final StringId AttributesFactory_CONCURRENCYLEVEL_MUST_BE_0 = new StringId ( 1072 , \"concurrencyLevel must be > 0\" ) ; public static final StringId AttributesFactory_DATAPOLICY_MUST_NOT_BE_NULL = new StringId ( 1073 , \"dataPolicy must not be null\" ) ; public static final StringId AttributesFactory_DATA_POLICIES_OTHER_THAN_0_ARE_NOT_ALLOWED_IN_PARTITIONED_REGIONS = new StringId ( 1074 , \"Data policies other than {0} are not allowed in partitioned regions.\" ) ; public static final StringId AttributesFactory_DATA_POLICIES_OTHER_NOT_NOT_NOT_BE_NULL = new StringId ( 1074 , \"Data policies other than {0} are not allowed in partitioned regions.\" ) ; public static final StringId Attributes", "private PromotionSupport m_promotionSupport = null ;", "setState ( 771 ) ;", "log . debug ( \"Discord spectate game: {}\" , spectateSecret ) ; eventBus . post ( DiscordSpectateGame . class , new DiscordSpectateGame ( spectateSecret ) ) ;", "taskManager . exec ( new StreamUploadTask ( ServerTask . INTERNAL_PROCESSING_USER_TOKEN , \"test.dat\" , file , DocRefUtil . create ( feed ) , DocRefUtil . create ( StreamType . RAW_EVENTS ) , null , \"Tom:One\\nJames:Two\\n\" ) ) ;", "import org . apache . sis . util . iso . DefaultNameFactory ;", "* Get byte array value [ hex ( AB , AC , AD ) , null ] with the first item base64 encoded", "import com . jcabi . github . Releases ; import com . jcabi . github . Repo ; import com . jcabi . github . RepoCommit ;", "", "for ( Registrable registry : registries . values ( ) ) { registry . clear ( ) ; } registries . clear ( ) ; context = null ; Manager . resetProtocols ( ) ;", "import org . objectweb . asm . tree . LabelNode ; import org . objectweb . asm . tree . LdcInsnNode ;", "import com . vaadin . v7 . ui . * ;", "", "loadTable ( fromURI , table , replicationSpec . isReplace ( ) , new Path ( fromURI ) , replicationSpec , x , mmWriteId , isSourceMm ) ;", "updatePromotions ( \"promotion.removeline\" , i ) ; visorTicketLine ( null ) ; printPartialTotals ( ) ; stateToZero ( ) ;", "@ Override public int getDirectMethodCount ( ) { return directMethodCount ; } @ Override public int getVirtualMethodCount ( ) { return virtualMethodCount ; } @ Override public int getStaticFieldCount ( ) { return staticFieldCount ; } @ Override public int getInstanceFieldCount ( ) { return instanceFieldCount ; } public int getSize ( ) { int size = 8 * 4 ; size += TypeIdItem . ITEM_SIZE ; int interfacesLength = getInterfaces ( ) . size ( ) ; if ( interfacesLength > 0 ) { size += 4 ; size += interfacesLength * 2 ; } AnnotationsDirectory directory = getAnnotationsDirectory ( ) ; if ( ! AnnotationsDirectory . EMPTY . equals ( directory ) ) { size += 4 * 4 ; Set < ? extends DexBackedAnnotation > classAnnotations = directory . getClassAnnotations ( ) ; if ( ! classAnnotations . isEmpty ( ) ) { size += 4 ; size += classAnnotations . size ( ) * 4 ; } } int staticInitialValuesOffset = dexFile . readSmallUint ( classDefOffset + ClassDefItem . STATIC_VALUES_OFFSET ) ; if ( staticInitialValuesOffset != 0 ) { DexReader reader = dexFile . readerAt ( staticInitialValuesOffset ) ; size += reader . peekSmallUleb128Size ( ) ; } int classDataOffset = dexFile . readSmallUint ( classDefOffset + ClassDefItem . CLASS_DATA_OFFSET ) ; if ( classDataOffset > 0 ) { DexReader reader = dexFile . readerAt ( classDataOffset ) ; size += reader . peekSmallUleb128Size ( ) ; } int classDataOffset = dexFile . readSmallUint ( classDefOffset + ClassDefItem . CLASS_DATA_OFFSET ) ; if ( classDataOffset > 0 ) { DexReader reader = dexFile . readSmallUint ( classDefOffset ) ; if ( classDataOffset ) ;", "} catch ( ClientServicesException e ) { throw new ClientServicesException ( e ) ;", "setState ( 353 ) ;", "rowsSupplier . forget ( ) ; ViewChangesCollector . getCurrentOrAutoflush ( ) . collectFullyChanged ( this ) ;", "} catch ( TskCoreException ex ) { logger . log ( Level . SEVERE , \"Error getting ImageGalleryController.\" , ex ) ;", "import org . molgenis . data . meta . model . Attribute ; import org . molgenis . data . meta . model . AttributeFactory ; import org . molgenis . data . meta . model . EntityType ; import org . molgenis . data . meta . model . EntityTypeFactory ;", "{ if ( BCLib . DEV ) { powerTester = BlockBCBase_Neptune . register ( new BlockPowerConsumerTester ( Material . IRON , \"block.power_tester\" ) ) ; } TileBC_Neptune . registerTile ( BCLib . DEV ) { event . getRegistry ( ) . register ( new ItemBlockDecorated ( DECORATED ) ) ; } } @ SubscribeEvent public static void registerVariants ( ModelRegistryEvent event ) { RegistryHelper . registerVariants ( ENGINE , SPRING , DECORATED , MARKER_VOLUME , MARKER_PATH ) ; }", "ShufflingService shufflingService , TransactionTypeFactory transactionTypeFactory , GeneratorService generatorService", "list . getContents ( ) . add ( IntBuiltin . kAppOf ( bodyIdx ) ) ; rule = new Rule ( new KApp ( BOUNDING_PREDICATE , list ) , BoolBuiltin . TRUE , definitionHelper ) ;", "import com . aptana . core . IScopeReference ; import com . aptana . core . util . CollectionsUtil ;", "", "import mchorse . blockbuster . core . transformers . SimpleReloadableResourceManagerTransformer ;", "", "import javax . swing . InputMap ; import javax . swing . JOptionPane ; import javax . swing . KeyStroke ; import javax . swing . SwingUtilities ; import javax . swing . ToolTipManager ; import javax . swing . UIManager ; import javax . swing . text . DefaultEditorKit ;", "", "private String tenant ;", "", "if ( packageName . equalsIgnoreCase ( \"default\" ) || DrawableUtils . isIconsPackAdaptive ( iconsPackPackageName ) ) { if ( ! packageName . equals ( mSystemPack . getPackPackageName ( ) ) ) mSystemPack = new SystemIconPack ( packageName ) ; }", "long txFee = _mbwManager . getColuManager ( ) . getColuTransactionFee ( feePerKb ) ; long fundingAmountToSend = txFee + getAmountForColuTxOutputs ( ) ;", "isInputInAntlrParser = true ;", "flush ( ) ;", "import java . util . HashMap ; import java . util . HashSet ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ;", "", "public void insertClaimedHistory ( @ Bind ( \"owner\" ) String owner , @ Bind ( \"claimedDate\" ) Date claimedDate , @ Bind ( \"notificationId\" ) String notificationId ) ;", "UpdateCheckpointsContext ctx = new UpdateCheckpointsContext ( clock ) ; for ( PTOperator oper : cs . container . getOperators ( ) ) { updateRecoveryCheckpoints ( oper , ctx ) ; }", "} ) ; return ; } TLObject req ; TLRPC . InputPeer peer = MessagesController . getInstance ( UserConfig . selectedAccount ) . getInputPeer ( ( int ) dialog_id ) ; if ( messageId != 0 ) { TLRPC . TL_messages_report request = new TLRPC . TL_messages_report ( ) ; request . peer = peer ; request . id . add ( messageId ) ; request . message = \"\" ; if ( i == 0 ) { request . reason = new TLRPC . TL_inputReportReasonSpam ( ) ; } else if ( i == 1 ) { request . reason = new TLRPC . TL_inputReportReasonViolence ( ) ; } else if ( i == 2 ) { request . reason = new TLRPC . TL_inputReportReasonChildAbuse ( ) ; } else if ( i == 3 ) { request . reason = new TLRPC . TL_inputReportReasonPornography ( ) ; return Unit . INSTANCE ;", "final Properties schemaRegistryProps = new Properties ( ) ;", "BillingEvent event1 = new DefaultBillingEvent ( subscription , effectiveDate1 , plan , phase1 , fixedPrice . getPrice ( currency ) , null , currency , BillingPeriod . MONTHLY , 1 , BillingModeType . IN_ADVANCE , \"testEvent1\" , 1L , SubscriptionTransitionType . CREATE ) ;", "LayoutOptionData . Visibility . ADVANCED , \"de.cau.cs.kieler.priority\"", "public OCLContext ( OCLPlatform platform , long id , List < OCLTargetDevice > devices ) { }", "private String [ ] stopWords = null ;", "\"'idiv'\" , \"'mod'\" , \"'!'\" , \"'['\" , \"']'\" , \"'.'\" , \"'$$'\" , \"'?'\" , \"'{|'\" , \"'|}'\" , \"'item'\" , \"'object'\" , \"'array'\" , \"'boolean'\" , \"'atomic'\" , \"'string'\" , \"'integer'\" , \"'decimal'\" , \"'double'\" , \"'for'\" , \"'let'\" , \"'where'\" , \"'group'\" , \"'by'\" , \"'order'\" , \"'return'\" , \"'if'\" , \"'in'\" , \"'as'\" , \"'at'\" , \"'allowing'\" , \"'empty'\" , \"'count'\" , \"'stable'\" , \"'ascending'\" , \"'descending'\" , \"'some'\" , \"'every'\" , \"'satisfies'\" , \"'collation'\" , \"'greatest'\" , \"'least'\" , \"'switch'\" , \"'case'\" , \"'try'\" , \"'catch'\" , \"'default'\" , \"'then'\" , \"'else'\" , \"'typeswitch'\" , \"'or'\" , \"'and'\" , \"'not'\" , \"'to'\" , \"'instance'\" , \"'of'\" , \"'treat'\" , \"'cast'\" , \"'castable'\" , \"'version'\" , \"'jsoniq'\" , \"'json-item'\" , null , \"'null'\"", "else if ( item . getItem ( ) == ModItems . upgradeStorage || item . getItem ( ) == ModItems . upgradeStatus || item . getItem ( ) == ModItems . upgradeVoid || item . getItem ( ) == ModItems . upgradeCreative || item . getItem ( ) == ModItems . upgradeRedstone ) { if ( ! tileDrawers . addUpgrade ( item ) && ! world . isRemote ) { } }", "", "private void prepareResources ( ) throws Throwable { if ( stop ) return ; Throwable throwable = flowStep . prepareResources ( ) ; if ( throwable != null ) throw throwable ; internalCleanup ( ) ; }", "synchronized ( this ) { final SearchResultsTree found = ( SearchResultsTree ) getFirstLevelTree ( LibraryTree . ROOT_FOUND ) ; if ( found != null && book . matches ( found . getPattern ( ) ) ) { found . getBookWithAuthorsSubTree ( book ) ; } }", "jj_la1 [ 238 ] = jj_gen ; break label_163 ;", "return new TransactionResult ( success ? Code . SUCCESS : Code . FAILURE , returns , logs , gasUsed ) ;", "mSession . getRoomsApiClient ( ) . getLatestRoomMessages ( mRoomId , new MXApiClient . SimpleApiCallback < TokensChunkResponse < Event > > ( ) {", ", new NamedNode ( NAMESPACES . XSD + \"integer\" ) ) ) ; mdStore . addTriple ( rdfDataset , new NamedNode ( NAMESPACES . VOID + \"distinctSubjects\" ) ,", "private final AsyncGlobalCheckpointTask globalCheckpointTask ; private final ScriptService scriptService ; private final IndicesQueriesRegistry queryRegistry ; private final ClusterService clusterService ; private final Client client ;", "if ( elementType == OPEN_QUOTE && parentType == STRING_LITERAL_EXPRESSION && superParentType == VAR_INIT ) { if ( node . getText ( ) . length ( ) < 3 ) { return Indent . getContinuationIndent ( ) ; } } if ( parentType == TYPE_LIST && elementType == TYPE ) { return Indent . getContinuationIndent ( ) ; }", "* Get byte array value [ hex ( FF FF FF FA ) , hex ( 01 02 03 ) , hex ( 25 , 29 , 43 ) ] with each item encoded in base64", "void defaultFilterConfiguration ( ) throws IOException { AnnotatedBeanDefinition definition = createBeanDefinition ( DefaultConfigurationFilter . class ) ; this . handler . handle ( definition , this . registry ) ; }", "final ConfigKeyPair keypair = new FilesystemKeyPair ( null , null , null ) ; final KeyConfiguration keyConfig = new KeyConfiguration ( null , null , singletonList ( keypair ) , null , null , null ) ;", "private final RuleIndex ruleIndex ; private final KRunState . Counter counter ; private final Map < ConstrainedTerm , Set < Rule > > subject2DisabledRules = new HashMap < > ( ) ; private FastRuleMatcher theFastMatcher ; private final RuleIndex ruleIndex ; private final KRunState . Counter counter ; public static final Stopwatch matchStopwatch = Stopwatch . createUnstarted ( ) ;", "import org . junit . jupiter . api . AfterAll ; import org . junit . jupiter . api . BeforeAll ; import org . junit . jupiter . api . Test ; import org . junit . jupiter . api . extension . ExtendWith ;", "mes ( n , config ( ) . GAME_TICK * 2 , \"The shapeless spirit seems to crackle with energy.\" ) ;", "@ XmlElement ( name = \"operationName\" , required = true ) @ UML ( identifier = \"operationName\" , obligation = MANDATORY , specification = ISO_19115 )", "package com . tagtraum . perf . gcviewer . imp ; import java . io . IOException ; import java . io . InputStream ; import java . io . UnsupportedEncodingException ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ; import java . util . logging . Level ; import com . tagtraum . perf . gcviewer . model . AbstractGCEvent ; import com . tagtraum . perf . gcviewer . model . GCEvent ; import com . tagtraum . perf . gcviewer . model . GCModel ; import com . tagtraum . perf . gcviewer . model . GCResource ; import com . tagtraum . perf . gcviewer . util . ParseInformation ; public class DataReaderSun1_3_1 extends AbstractDataReaderSun implements DataReader { private int count ; public DataReaderSun1_3_1 ( GCResource gcResource , InputStream in , GcLogType gcLogType ) throws UnsupportedEncodingException { super ( gcResource , in , gcLogType ) ; } public GCModel read ( ) throws IOException { if ( getLogger ( ) . isLoggable ( Level . INFO ) ) getLogger ( ) . info ( \"Reading Sun 1.3.1 format...\" ) ; try { count = 0 ; GCModel model = new GCModel ( ) ; model . setFormat ( GCModel . Format . SUN_VERBOSE_GC ) ; List < StringBuilder > lineStack = new ArrayList < StringBuilder > ( ) ; int i ; StringBuilder line = null ; while ( ( i = in . read ( ) ) != - 1 ) { char c = ( char ) i ; if ( c == '[' ) { if ( line != null ) lineStack . add ( line ) ; line = new StringBuilder ( 64 ) ; } else if ( c == ']' ) { try { model . add ( parseLine ( line . toString ( ) , null ) ) ; } catch ( ParseException e ) {", "public Dune dune ( ) { return dune ; } public Nation nation ( ) { return nation ; }", "* Send x - ms - client - request - id = 9 C4D50EE - 2D 56 - 4 CD3 - 8152 - 34347D C9F2B0 in the header of the request", "case REVIEW_COMMENT : return ReviewComment . find . byId ( longId ) . asResource ( ) ; case ORGANIZATION : resource = Organization . find . byId ( longId ) . asResource ( ) ; break ;", "import com . google . common . base . Strings ; import com . google . common . base . Preconditions ;", "setState ( 858 ) ; match ( T__74 ) ;", "import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . Reader ; import java . util . Collection ;", "if ( txContext . isTransactionActiveOnThread ( ) ) { TransactionState txState = null ; try { txState = getState ( ) ; } catch ( STransactionException e ) { e . printStackTrace ( ) ; } String message = \"We do not support nested calls to the transaction service. Current state is: \" + txState + \". \" ; if ( logger . isLoggable ( getClass ( ) , TechnicalLogSeverity . TRACE ) ) { message += \"Last begin made by: \" + txLastBegin . get ( ) ; } throw new STransactionCreationException ( message ) ; }", "this . subscriptionType = subscriptionType ; this . additionalTypes = additionalTypes ; typeMap = new SchemaUtil ( ) . allTypes ( this , additionalTypes ) ;", "JwtUserPayloadView . Builder builder = new JwtUserPayloadView . Builder ( ) ; JwtUserPayloadView payload = builder . withPublicClaims ( userId , actions , networkIds , deviceTypeIds ) . buildPayload ( ) ;", "", "@ Override public void requestWasRemoved ( ObjectContainer container ) { }", "@ Order ( 69 ) @ ExportEntity ( EventDto . class ) @ ExportProperty ( EventDto . EVENT_TITLE )", "int idx = - 1 ; for ( StripeInformation stripe : stripes ) { idx ++ ; if ( sarg != null && ! isStripeSatisfyPredicate ( stripeStats . get ( idx ) , sarg , filterColumns ) ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( \"Eliminating ORC stripe-\" + idx + \" of file '\" + file . getPath ( ) + \"' as it did not satisfy predicate condition.\" ) ; } if ( currentOffset != - 1 ) { createSplit ( currentOffset , currentLength ) ; currentOffset = - 1 ; } continue ; } }", "", "", "UserContext . registerContext ( User . UID_SYSTEM , null , null , Account . ACCOUNT_ID_SYSTEM , null , null , true ) ; sb . insert ( 0 , \"(userId=\" + User . UID_SYSTEM + \" accountId=\" + Account . ACCOUNT_ID_SYSTEM + \" sessionId=\" + null + \") \" ) ; String responseText = handleRequest ( parameterMap , true , responseType , sb ) ;", "private static void expandVert ( LocalSession session , Actor actor , World world ) throws IncompleteRegionException { Region region = session . getSelection ( world ) ; }", "setState ( 406 ) ;", "import net . frakbot . FWeather . FWeatherWidgetProvider ; import com . google . analytics . tracking . android . EasyTracker ;", "import com . sk89q . worldedit . function . mask . * ;", "System . out . println ( catalog . setFileStatus ( \"jcoll\" , \"1000G\" , \"ph1\" , \"/data/file.bam\" , File . READY ) ) ; try { System . out . println ( catalog . setFileStatus ( \"jcoll\" , \"1000G\" , \"ph1\" , \"/data/noExists\" , File . READY ) ) ; fail ( \"Expected \\\"FileId not found\\\" exception\" ) ; } catch ( CatalogManagerException e ) { System . out . println ( e ) ; }", "import com . microsoft . tooling . msservices . serviceexplorer . listener . ActionBasicable ; import rx . Single ; import java . util . Objects ; import java . util . function . Consumer ;", "final MessageProperties messageProperties = createMessageProperties ( null ) ; final TenantSecurityToken securityToken = new TenantSecurityToken ( TENANT , \"123\" , FileResource . createFileResourceBySha1 ( \"12345\" ) ) ;", "import org . springframework . http . server . reactive . ServerHttpRequest ; import org . springframework . http . server . reactive . ServerHttpResponse ;", "inflater . inflate ( R . menu . main_menu , menu ) ;", "@ Nonnull public TimeOffCollectionRequest expand ( @ Nonnull final String value ) { addExpandOption ( value ) ; return this ; }", "initializeSoot ( path , SootMethodRepresentationParser . v ( ) . parseClassNames ( entryPoints , false ) . keySet ( ) , sourcesSinks ) ;", "public class GuiBase extends GuiContainer implements uk . co . qmunity . lib . client . gui . widget . IWidgetListener , INEIGuiHandler { protected static final int COLOR_TEXT = 4210752 ; private final List < IGuiWidget > widgets = new ArrayList < IGuiWidget > ( ) ; }", "this . shapeModel = shapeModel ;", "ForkJoinTask . invokeAll ( settingsService . getAllMusicFolders ( ) . parallelStream ( ) . map ( musicFolder -> ForkJoinTask . adapt ( ( ) -> scanFile ( mediaFileService . getMediaFile ( musicFolder . getPath ( ) , false ) , musicFolder , statistics , albumCount , artists , albums , genres , false ) ) ) . collect ( Collectors . toList ( ) ) ) ;", "setState ( 592 ) ;", "private boolean mShouldBindStetho ; public TBAAndroid ( ) { super ( ) ; mShouldBindStetho = true ; } private HttpModule mHttpModule ; private GceModule mGceModule ; private ImgurModule mImgurModule ;", "", "import org . adempiere . exceptions . DBException ;", "@ Order ( 73 ) @ ExportEntity ( LocationDto . class ) @ ExportProperty ( { EventDto . EVENT_LOCATION , LocationDto . COMMUNITY } )", ". add ( Modifier . class , new RedundantModifier ( ) ) . add ( EnhancedForStatement . class , new EnhancedForParameterRenameToCent ( ) , null )", "import org . molgenis . data . support . AbstractCrudRepository ;", "final String inexistentTransactionName = StreamSegmentNameUtils . getTransactionNameFromId ( segmentName , UUID . randomUUID ( ) ) ;", "actions . add ( new ActionButton ( ACTION . ALT_COIN , getString ( R . string . exchange_altcoins_to_btc ) ) ) ; scrollTo = addMyDfs ( actions , scrollTo ) ; addApex ( actions ) ; addFio ( actions ) ;", ". req ( BucketManager . class ) . req ( MessageConsumer . class , RealtimeConsumer . ID ) ) ;", "final SarosSession sarosSession = new SarosSession ( sessionID , preferences . getFavoriteColorID ( ) , sarosContext ) ;", "import com . o3dr . services . android . lib . drone . action . CameraActions ; import com . o3dr . services . android . lib . coordinate . LatLongAlt ;", "try ( Stream < AbstractFeature > features = reader . features ( false ) ) { final Iterator < AbstractFeature > it = features . iterator ( ) ; }", "List < Attribute > sourceAttributes = generateAlgorithmRequest . getSourceAttributes ( ) . stream ( ) . map ( name -> sourceEntityType . getAttribute ( name ) ) . collect ( Collectors . toList ( ) ) ;", "table = new Table ( UnitValue . createPercentArray ( 3 ) ) . useAllAvailableWidth ( ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . GREEN , 1 ) ) ) . addCell ( new Cell ( 1 , 2 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . YELLOW , 3 ) ) ) . addCell ( new Cell ( 2 , 1 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . RED , 5 ) ) ) . addCell ( new Cell ( 2 , 1 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . GRAY , 7 ) ) ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . BLUE , 12 ) ) ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . CYAN , 1 ) ) ) ; table . setBorder ( new SolidBorder ( ColorConstants . GREEN , 2 ) ) ;", "} else {", "put ( \"digicertassuredidrootca\" , \"3E:90:99:B5:01:5E:8F:48:6C:00:BC:EA:9D:11:1E:E7:21:FA:BA:35:5A:89:BC:F1:DF:69:56:1E:3D:C6:32:5C\" ) ; put ( \"affirmtrustcommercial\" , \"03:76:AB:1D:54:C5:F9:80:3C:E4:B2:E2:01:A0:EE:7E:EF:7B:57:B6:36:E8:A9:3C:9B:8D:48:60:C9:6F:5F:A7\" ) ; put ( \"t-telesecglobalrootclass3\" , \"FD:73:DA:D3:1C:64:4F:F1:B4:B2:E2:01:A0:EE:7E:EF:7B:57:B6:36:E8:A9:3C:9B:8D:48:60:C9:6F:5F:5F:A7\" ) ; put ( \"t-telesecglobalrootclass3\" , \"FD:73:DA:D3:1C:64:4F:F:F:F:F:F:F:A:9:9:7E:81:9:7E:81:5:1C:39:78:DA:96:71:0B:9:7E:54:5:1C:62:08:84:E0:1C:62", "public Object3D getBaseObject3D ( ) { if ( mBaseObjects . length == 1 ) return mBaseObjects [ 0 ] ; }", "public void validateMissing ( Currency currency , Transaction transaction , Set < CurrencyType > validators ) throws AplException . NotValidException { log . trace ( \"CLAIMABLE 2 [{}]: \\ncurrency={}, \\n{}, \\n{}\" , transaction . getECBlockHeight ( ) , currency , transaction , validators ) ; if ( transaction . getType ( ) . getSpec ( ) == MS_RESERVE_CLAIM ) { } }", "import org . hibernate . Query ;", "", "public void suicide ( DataWord obtainerAddress ) throws ContractValidateException { }", "package com . tagtraum . perf . gcviewer . imp ; import java . io . IOException ; import java . io . InputStream ; import java . io . UnsupportedEncodingException ; import java . util . logging . Level ; import com . tagtraum . perf . gcviewer . model . AbstractGCEvent ; import com . tagtraum . perf . gcviewer . model . GCEvent ; import com . tagtraum . perf . gcviewer . model . GCModel ; import com . tagtraum . perf . gcviewer . model . GCResource ; import com . tagtraum . perf . gcviewer . util . NumberParser ; public class DataReaderIBM1_3_0 extends AbstractDataReader { public DataReaderIBM1_3_0 ( GCResource gcResource , InputStream in ) throws UnsupportedEncodingException { super ( gcResource , in ) ; } public GCModel read ( ) throws IOException { if ( getLogger ( ) . isLoggable ( Level . INFO ) ) getLogger ( ) . info ( \"Reading IBM 1.3.0 format...\" ) ; try { GCModel model = new GCModel ( ) ; model . setFormat ( GCModel . Format . IBM_VERBOSE_GC ) ; int state = 0 ; String line = null ; AbstractGCEvent < GCEvent > lastEvent = new GCEvent ( ) ; GCEvent event = null ; while ( ( line = in . readLine ( ) ) != null ) { String trimmedLine = line . trim ( ) ; if ( ( ! trimmedLine . equals ( \"\" ) ) && ( ! trimmedLine . startsWith ( \"<GC: \" ) ) && ( ! trimmedLine . startsWith ( GCModel . Format . IBM_VERBOSE_GC ) ; int state = 0 ; String line = null ; AbstractGCEvent < GCEvent > lastEvent = new GCEvent ( ) ; GCEvent event = null ; while ( ( line = in . readLine ( ) ) != null ) { String trimmed", "private void config ( ) { log . info ( \"Tablet server starting on {}\" , context . getHostname ( ) ) ; majorCompactorThread = new Daemon ( new LoggingRunnable ( log , new MajorCompactor ( getConfiguration ( ) ) ) ) ; }", "@ Test public void testSegmentedLogging ( ) throws Exception { deploy ( \"logging\" ) ; save ( ProcessConfiguration . builder ( ) . build ( ) ) ; RunnerConfiguration runnerCfg = RunnerConfiguration . builder ( ) . logging ( LoggingConfiguration . builder ( ) . segmentedLogDir ( segmentedLogDir . toAbsolutePath ( ) . toString ( ) ) . build ( ) ) . build ( ) ; byte [ ] log = run ( runnerCfg ) ; assertLog ( log , \".*this goes directly into the stdout.*\" ) ; List < Path > paths = Files . list ( segmentedLogDir ) . collect ( Collectors . toList ( ) ) ; assertNotEquals ( 0 , paths . size ( ) ) ; } @ Test public void testInitiator ( ) throws Exception { deploy ( \"initiator\" ) ; Map < String , Object > initiator = new HashMap < > ( ) ; initiator . put ( \"username\" , \"test\" ) ; initiator . put ( \"displayName\" , \"Test User\" ) ; save ( ProcessConfiguration . builder ( ) . initiator ( initiator ) . putArguments ( \"name\" , \"${initiator.displayName}\" ) . build ( ) ) ; byte [ ] log = start ( ) ; assertLog ( log , \".*Test User.*\" ) ; }", "@ Import ( CommonJdbcMessagingConfiguration . class ) @ Import ( SqlDialectConfiguration . class )", "", "private final F processorFactory_ ;", "import static io . netty . handler . codec . http . HttpVersion . HTTP_1_1 ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . net . Inet4Address ; import java . net . InetAddress ; import java . net . InetSocketAddress ; import java . net . NetworkInterface ; import java . util . Enumeration ; import java . util . List ; import java . util . concurrent . Callable ; import io . netty . handler . codec . http . * ; import org . eclipse . iofog . element . Element ; import org . eclipse . iofog . element . ElementManager ; import org . eclipse . iofog . utils . configuration . Configuration ; import org . eclipse . iofog . utils . logging . LoggingService ;", "meshMQPushConsumer . subscribe ( topic ) ;", "try ( Stream < AbstractFeature > features = reader . features ( false ) ) { final Iterator < AbstractFeature > it = features . iterator ( ) ; }", "private void insertDegreeSymbolIfNeeded ( ) { AutoCompleteTextFieldW tc = getTextComponent ( ) ; String text = tc . getText ( ) ; for ( int i = 0 ; i < text . length ( ) ; i ++ ) { if ( ! StringUtil . isDigit ( text . charAt ( i ) ) ) { return ; } } int caretPos = tc . getCaretPosition ( ) ; tc . setText ( tc . getText ( ) + Unicode . DEGREE_STRING ) ; tc . setCaretPosition ( caretPos ) ; }", "else if ( exampleRequested . equals ( \"null\" ) ) { requestedObject = null ; } else if ( exampleRequested . equals ( \"password_requirements\" ) ) { requestedObject = getPasswordRequirementsExample ( ) ; } else if ( exampleRequested . equals ( \"password_requirement_list\" ) ) { requestedObject = getPasswordRequirementListExample ( ) ; } else if ( exampleRequested . equals ( \"plugin_metadata_map\" ) ) { }", "public static boolean cancelPotentialWork ( OCFile file , ImageView imageView ) { final ThumbnailGenerationTask bitmapWorkerTask = getBitmapWorkerTask ( imageView ) ; if ( bitmapWorkerTask != null ) { final OCFile bitmapData = bitmapWorkerTask . file ; if ( bitmapData == null || bitmapData != file ) { bitmapWorkerTask . cancel ( true ) ; } else { return false ; } } return true ; } private static ThumbnailGenerationTask getBitmapWorkerTask ( ImageView imageView ) { if ( imageView != null ) { final Drawable drawable = imageView . getDrawable ( ) ; if ( drawable instanceof AsyncDrawable ) { final AsyncDrawable asyncDrawable = ( AsyncDrawable ) drawable ; return asyncDrawable . getBitmapWorkerTask ( ) ; } } return null ; } private String getFolderSizeHuman ( String path ) { File dir = new File ( path ) ; if ( dir . exists ( ) ) { long bytes = getFolderSize ( dir ) ; if ( bytes < 1024 ) return bytes + \" B\" ; int exp = ( int ) ( Math . log ( bytes ) / Math . log ( 1024 ) ) ; String pre = ( \"KMGTPE\" ) . charAt ( exp - 1 ) + \"\" ; return String . format ( \"%.1f %sB\" , bytes / Math . pow ( 1024 , exp ) , pre ) ; } return \"0 B\" ; } private long getFolderSize ( File dir ) { if ( dir . exists ( ) ) { long result = 0 ; File [ ] fileList = dir . listFiles ( ) ; for ( int i = 0 ; i < fileList . length ; i ++ ) { if ( fileList [ i ] . isDirectory ( ) ) { result += getFolderSize ( fileList [ i ] ) ; } else { result += fileList [ i ] . length ( ) ; } else { result += fileList [ i ] . length ( ) ; } } return", "public abstract void removeShutdownHook ( ShutdownHook hook ) ; public String getOldGenName ( ) { return ( oldMemPool != null ? oldMemPool . getName ( ) : \"n/a\" ) ; }", "if ( ! element . isEmpty ( ) && count < values . length ) { ObjectConverter < ? super String , ? > converter = converters [ count ] ; if ( converter instanceof ForFeature ) { converter = ( ( ForFeature ) converter ) . converter ; } try { values [ count ] = converter . apply ( element ) ; } catch ( UnconvertibleObjectException e ) { throw new IllegalArgumentException ( Errors . format ( Errors . Keys . CanNotAssign_2 , attributeNames [ count ] , element ) , e ) ; } }", "@ Deprecated public ListSubversionTagsParameterDefinition ( String name , String tagsDir , String tagsFilter , String defaultValue , String maxTags , boolean reverseByDate , boolean reverseByName , String uuid , String credentialsId ) { }", "package org . bonitasoft . engine . core . process . instance . event . impl ; import org . bonitasoft . engine . core . process . instance . api . event . EventInstanceRepository ; import org . bonitasoft . engine . core . process . instance . api . event . EventInstanceService ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . SEventInstanceCreationException ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . SEventInstanceReadException ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . trigger . SEventTriggerInstanceCreationException ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . trigger . SEventTriggerInstanceDeletionException ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . trigger . trigger . SEventTriggerInstanceModificationException ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . trigger . SEventTriggerInstanceNotFoundException ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . trigger . SEventTriggerInstanceReadException ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . trigger . SEventTriggerInstanceReadException ; import org . bonitasoft . engine . core . process . core . process . core . process . instance . api . exceptions . event . trigger . SEventTriggerInstanceNotFoundException ; import org . bonitasoft . engine . core . process . instance . api . exceptions . event . trigger . SEventTriggerInstanceReadException ; import org . bonitas", "public static class persistFile < I extends AsyncIface > extends org . apache . thrift . AsyncProcessFunction < I , persistFile_args , Void > { public persistFile ( ) { super ( \"persistFile\" ) ; } public persistFile_args getEmptyArgsInstance ( ) { return new persistFile_args ( ) ; } public AsyncMethodCallback < Void > getResultHandler ( final AsyncFrameBuffer fb , final int seqid ) { final org . apache . thrift . AsyncProcessFunction fcall = this ; return new AsyncMethodCallback < Void > ( ) { public void onComplete ( Void o ) { persistFile_result result = new persistFile_result ( ) ; try { fcall . sendResponse ( fb , result , org . apache . thrift . protocol . TMessageType . REPLY , seqid ) ; return ; } catch ( Exception e ) { LOGGER . error ( \"Exception writing to internal frame buffer\" , e ) ; } fb . close ( ) ; } public void onError ( Exception e ) { byte msgType = org . apache . thrift . protocol . TMessageType . REPLY ; org . apache . thrift . TBase msg ; persistFile_result result = new persistFile_result ( ) ; if ( e instanceof FileDoesNotExistException ) { result . eP = ( FileDoesNotExistException ) e ; result . setEPIsSet ( true ) ; msg = result ; } else if ( e instanceof SuspectedFileSizeException ) { result . eS = ( SuspectedFileSizeException ) e ; result . setESIsSet ( true ) ; msg = result ; } else if ( e instanceof FailedToCheckpointException ) { result . eF = ( FailedToCheckpointException ) e ; result . setEIsSet ( true ) ; msg = result ; } else if ( e instanceof FailedToCheckpointException ) { result . setEFIsSet ( true ) ; msg = result ; } else if ( e instanceof BlockInfoException", "", "if ( itemToAdd . getDef ( player . getWorld ( ) ) . isStackable ( ) || itemToAdd . getItemStatus ( ) . getNoted ( ) ) { for ( int index = 0 ; index < list . size ( ) ; index ++ ) { Item existingStack = list . get ( index ) ; if ( itemToAdd . equals ( existingStack ) && existingStack . getAmount ( ) < Integer . MAX_VALUE ) { existingStack . setAmount ( existingStack . getAmount ( ) + itemToAdd . getAmount ( ) ) ; if ( sendInventory ) ActionSender . sendInventoryUpdateItem ( player , index ) ; player . getWorld ( ) . getServer ( ) . getDatabase ( ) . itemUpdate ( existingStack ) ; return ; } } }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "import org . apache . mesos . v1 . Protos ; import org . apache . mesos . v1 . Protos . Offer ; import org . apache . mesos . v1 . Protos . Offer . Operation ; import org . apache . mesos . v1 . Protos . Offer . Operation . Launch ; import org . apache . mesos . v1 . Protos . Offer . Operation . Type ; import org . apache . mesos . v1 . Protos . Resource ; import org . apache . mesos . v1 . Protos . TaskInfo ;", "List < ClientPresentationModel > changes = dolphin . findAllPresentationModelsByType ( DolphinConstants . LIST_ADD ) ;", "if ( message . command ( ) == RPC . Commands . DIRECT_DATA . getNr ( ) && message . recipient ( ) . isRelayed ( ) && message . sender ( ) . isRelayed ( ) ) { try { channelCreators = prepareHolePunch ( futureResponse , message ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } final List < SocketAddress > socketAddresses = new ArrayList < SocketAddress > ( ) ; for ( ChannelCreator cc : channelCreators ) { cc . bindHole ( ) ; socketAddresses . add ( cc . currentSocketAddress ( ) ) ; cachedChannelCreators . put ( message . messageId ( ) , cc ) ; } initHolePunch ( createSocketInfoMessage ( message , socketAddresses ) , channelCreator , idleUDPSeconds , futureResponse , broadcast , message , handler ) ; return ; } else { channelCreators = null ; }", "RuleState locRule = new RuleState ( prd . getSort ( ) + \"-R\" , nt , new AddLocationRule ( ) ) ; previous . next . add ( locRule ) ; previous = locRule ; previous . next . add ( nt . exitState ) ; return null ;", "private void notifyMessageReceived ( QBChatMessage chatMessage , Friend friend ) { Intent intent = new Intent ( QBServiceConsts . GOT_CHAT_MESSAGE ) ; String messageBody = getMessageBody ( chatMessage ) ; String extraChatMessage = \"\" ; String fullname = friend . getFullname ( ) ; if ( TextUtils . isEmpty ( messageBody ) ) { extraChatMessage = context . getResources ( ) . getString ( R . string . file_was_attached ) ; } else { extraChatMessage = messageBody ; } intent . putExtra ( QBServiceConsts . EXTRA_CHAT_MESSAGE , extraChatMessage ) ; intent . putExtra ( QBServiceConsts . EXTRA_SENDER_CHAT_MESSAGE , fullname ) ; LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( intent ) ; } private String getAttachUrlIfExists ( QBChatMessage chatMessage ) { String attachURL = Consts . EMPTY_STRING ; if ( TextUtils . isEmpty ( chatMessage . getBody ( ) ) ) { attachURL = getAttachUrlFromQBChatMessage ( chatMessage ) ; } return attachURL ; } private class PrivateChatMessageListener implements QBMessageListener < QBPrivateChat > { @ Override public void processMessage ( QBPrivateChat privateChat , QBChatMessage chatMessage ) { Friend friend = DatabaseManager . getFriendById ( context , chatMessage . getSenderId ( ) ) ; String attachURL = getAttachUrlIfExists ( chatMessage ) ; saveMessageToCache ( new ChatMessageCache ( chatMessage . getBody ( ) , chatMessage . getSenderId ( ) , friend . getId ( ) , attachURL ) ) ; notifyMessageReceived ( chatMessage , friend ) ; } private class RoomChatMessageListener < QBChat > { @ Override public void processMessage ( QBChat roomChat , QBChatMessage chatMessage ) { saveMessageToCache ( chatMessage . getBody", "import org . molgenis . data . meta . model . AttributeFactory ; import org . molgenis . data . meta . model . EntityType ; import org . molgenis . data . meta . model . EntityTypeFactory ;", "public void onPauseStateChanged ( @ Nullable GridDrPauseReason pauseReason ) { drSndMetrics . onPauseStateChanged ( pauseReason ) ; if ( delegate != null ) delegate . onPauseStateChanged ( pauseReason ) ; }", "missionProxy . removeSelection ( missionProxy . selection ) ;", "* Long running put request , service returns a 201 to the initial request with no payload", "public static boolean isInferenceCyclic ( final ClassInference inference , final IndexedContextRoot inferenceTargetRoot ,", "import net . minecraft . util . SoundCategory ;", "public static class BitSetSerializer extends Serializer < BitSet > { @ Override", "import java . io . IOException ; import java . nio . file . Paths ; import org . quartz . SchedulerException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import com . codenvy . cdec . im . InstallationManagerApplication ;", "import com . rapidftr . controllers . ChildHistoryController ; import com . rapidftr . controllers . ContactInformationController ; import com . rapidftr . controllers . HomeController ; import com . rapidftr . controllers . LoginController ; import com . rapidftr . controllers . ManageChildController ; import com . rapidftr . controllers . ResetDeviceController ; import com . rapidftr . controllers . SearchChildController ; import com . rapidftr . controllers . SyncController ; import com . rapidftr . controllers . ViewChildController ; import com . rapidftr . controllers . ViewChildPhotoController ; import com . rapidftr . controllers . ViewChildrenController ;", "addMenuItem ( helpMenu , ACTION_HELP ) ;", "fileListBox = new ListBoxInput ( false , false ) ; updateListBox ( ) ;", "import org . apache . usergrid . persistence . index . migration . IndexDataVersions ;", "protected LocalDate calculatePlanSellOutDate ( Product product , int expectStock ) { int totalUsageStock = stockService . usableStockTotal ( product ) ; int lockedStock = mainOrderService . sumProductNum ( product ) ; LocalDateTime todayOffsetTime = mainOrderService . getTodayOffsetTime ( ) ; int todayStock = mainOrderService . sumProductNum ( product , todayOffsetTime , null , null ) ; int diffDay = ( totalUsageStock - lockedStock + todayStock ) / ( expectStock + todayStock ) ; int realStock = ( totalUsageStock - lockedStock + todayStock ) / diffDay - todayStock ; if ( realStock == expectStock ) { return todayOffsetTime . plusDays ( diffDay - 1 ) . toLocalDate ( ) ; } else { return null ; } } protected Tag newRandomTag ( ) throws IOException { return newRandomTag ( TagType . SEARCH ) ; } protected Tag newRandomTag ( TagType tagType ) throws IOException { Tag tag = new Tag ( ) ; tag . setName ( RandomStringUtils . randomAlphabetic ( 10 ) + \"\u00c3\u00a6\u00c5\u0124\u00c4\u00a9\u00c3\u00a7\u00c5\u0125\u00c2\u00be\" ) ; tag . setIcon ( newRandomImagePath ( ) ) ; tag . setType ( tagType ) ; return tagRepository . saveAndFlush ( tag ) ; } }", "universe . accept ( this , new Precedence ( Concrete . Expression . PREC ) ) ;", "", "import micdoodle8 . mods . galacticraft . core . blocks . BlockFallenMeteor ; import micdoodle8 . mods . galacticraft . core . blocks . BlockOxygenDetector ;", "throw new AppException ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , \"something went wrong when adding the example jar to the project\" ) ;", "private SyncProcessor syncProcessor ;", "", "private AnnotationElements validateAnnotations ( AnnotationElementsHolder extractedModel ) throws ProcessingException , Exception { }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "import org . loklak . api . server . push . FossasiaPushServlet ; import org . loklak . api . server . ImportProfileServlet ; import org . loklak . api . server . push . OpenWifiMapPushServlet ; import org . loklak . api . server . push . NodelistPushServlet ; import org . loklak . api . server . push . FreifunkNodePushServlet ; import org . loklak . api . server . push . NetmonPushServlet ;", "startAnimationToWorkspaceFromOverlay ( toWorkspaceState , mLauncher . getWidgetsButton ( ) , widgetsView , widgetsView . getContentView ( ) , widgetsView . getRevealView ( ) , null , animated , onCompleteRunnable , cb ) ;", "private void removeJumpAttributes ( InsnNode [ ] insnArr ) { for ( InsnNode insn : insnArr ) { if ( insn != null && insn . contains ( AType . JUMP ) ) { insn . remove ( AType . JUMP ) ; } } } private void removeUnreachableBlocks ( MethodNode mth ) { Set < BlockNode > toRemove = new LinkedHashSet < > ( ) ; for ( BlockNode block : mth . getBasicBlocks ( ) ) { if ( block . getPredecessors ( ) . isEmpty ( ) && block != mth . getEnterBlock ( ) ) { toRemove . add ( block ) ; collectSuccessors ( block , toRemove ) ; } } if ( ! toRemove . isEmpty ( ) ) { mth . getBasicBlocks ( ) . removeIf ( toRemove :: contains ) ; int insnsCount = toRemove . stream ( ) . mapToInt ( block -> block . getInstructions ( ) . size ( ) ) . sum ( ) ; mth . addAttr ( AType . COMMENTS , \"JADX INFO: unreachable blocks removed: \" + toRemove . size ( ) + \", instructions: \" + insnsCount ) ; } } private void collectSuccessors ( BlockNode startBlock , Set < BlockNode > toRemove ) { Deque < BlockNode > stack = new ArrayDeque < > ( ) ; stack . add ( startBlock ) ; while ( ! stack . isEmpty ( ) ) { BlockNode block = stack . pop ( ) ; if ( ! toRemove . contains ( block ) ) { for ( BlockNode successor : block . getSuccessors ( ) ) { if ( toRemove . containsAll ( successor . getPredecessors ( ) ) ) { stack . push ( successor ) ; } } toRemove . add ( block ) ; } } private void collectSuccessors ( BlockNode block , Set < BlockNode > toRemove ) { Deque < BlockNode > toRemove ) { Deque < Block", "@ Reference ( cardinality = ReferenceCardinality . MANDATORY )", "if ( code . isLetterKey ( ) || code . isDigitKey ( ) || code == KeyCode . SPACE || code == KeyCode . BACK_SPACE ) { if ( event . getSource ( ) instanceof PrefixSelectionComboBox ) { if ( code == KeyCode . BACK_SPACE && ! ( ( PrefixSelectionComboBox ) event . getSource ( ) ) . isBackSpaceAllowed ( ) ) { return ; } } String letter = code . getChar ( ) ; }", ". req ( BucketManager . class ) . req ( MessageConsumer . class , RealtimeConsumer . ID ) ) ;", "if ( getCampaign ( ) . getCampaignOptions ( ) . logMarriageNameChange ( ) ) { if ( ! spouse . getSurname ( ) . equals ( spouseSurname ) ) { PersonalLogger . marriageNameChange ( spouse , this , getCampaign ( ) . getDate ( ) ) ; } if ( ! getSurname ( ) . equals ( surname ) ) { PersonalLogger . marriageNameChange ( this , spouse , getCampaign ( ) . getDate ( ) ) ; } } setSpouse ( spouse . getId ( ) ) ; spouse . setSpouseId ( getId ( ) ) ;", "private CacheKeyFactory cacheKeyFactory ; private MetaDataFactory metaDataFactory ;", "import org . fedoraproject . candlepin . model . ConsumerTypeCurator ;", "throw SQLError . createSQLException ( Messages . getString ( \"ResultSet.Invalid_value_for_getLong()_-____211\" ) + val + Messages . getString ( \"ResultSet.___in_column__212\" ) + ( columnIndexZeroBased + 1 ) , SQLError . SQL_STATE_ILLEGAL_ARGUMENT , getExceptionInterceptor ( ) ) ;", "LOG . trace ( \"Given property is single complex value\" ) ; writeAllProperties ( data , type ) ;", "CallbackData callbackData = gson . fromJson ( gElement . getElement ( ) . getValue ( ) , CallbackData . class ) ;", "public String getUserId ( ) { return userId ; } public void setUserId ( String userId ) { this . userId = userId ; } public Encryptor getEncryptor ( ) { return encryptor ; } public void setEncryptor ( Encryptor encryptor ) { this . encryptor = encryptor ; }", "private void stopTimer ( ) { this . endTimer = System . currentTimeMillis ( ) ; } @ Test", "public static class WikipediaAdj implements Preset { public Aggregator < ? , ? > aggregator ( ) { return new Numbers . Count < Object > ( ) ; } public Renderer renderer ( ) { return new ParallelRenderer ( RENDER_POOL ) ; } public Glyphset < ? , ? > glyphset ( ) { return WIKIPEDIA ; } public Transfer < ? , ? > transfer ( ) { return new WrappedTransfer . RedWhiteLog ( ) . op ( ) ; } public String name ( ) { return \"Wikipedia Adjacency (BFS Error layout): HDAlpha\" ; } public String toString ( ) { return fullName ( this ) ; } public boolean init ( Presets panel ) { return glyphset ( ) != null ; } } public static class USCensusPopMinAlpha implements Preset { }", "Map < String , Param < ? > > params = getParams ( element ) ; AnnotationUtils . assignFieldParams ( loaded , params ) ; loaded = decorate ( loaded , element ) ;", "import org . jboss . as . controller . RunningMode ;", "Single < Token [ ] > addERC20 ( Wallet wallet , Token [ ] tokens ) ;", "@ SuppressWarnings ( \"rawtypes\" ) @ Override public void updated ( Dictionary properties ) throws ConfigurationException { expireSeconds = UrlSigningServiceOsgiUtil . getUpdatedSigningExpiration ( properties , this . getClass ( ) . getSimpleName ( ) ) ; signWithClientIP = UrlSigningServiceOsgiUtil . getUpdatedSignWithClientIP ( properties , this . getClass ( ) . getSimpleName ( ) ) ; }", "if ( site . getAcceptStatCode ( ) . contains ( statusCode ) ) { Page page = handleResponse ( request , site . getCharset ( ) , httpResponse , task ) ; page . setHeaders ( httpResponse . getAllHeaders ( ) ) ; }", "@ ExportTarget ( caseExportTypes = { CaseExportType . CASE_SURVEILLANCE , CaseExportType . CASE_MANAGEMENT } ) @ ExportProperty ( value = QUARANTINE_INFORMATION , combined = true ) @ ExportGroup ( ExportGroupType . ADDITIONAL ) public QuarantineType getQuarantine ( ) { return quarantine ; } @ Order ( 34 ) @ ExportTarget ( exportTypes = { CaseExportType . CASE_SURVEILLANCE , CaseExportType . CASE_MANAGEMENT } ) @ ExportProperty ( value = QUARANTINE_INFORMATION , combined = true ) @ ExportGroup ( ExportGroupType . ADDITIONAL ) public Date getQuarantineFrom ( ) { return quarantineFrom ; } @ Order ( 35 ) @ ExportTarget ( exportTypes = { CaseExportType . CASE_SURVEILLANCE , CaseExportType . CASE_MANAGEMENT } ) @ ExportProperty ( value = QUARANTINE_INFORMATION , combined = true ) @ ExportGroup ( ExportGroupType . ADDITIONAL ) public Date getQuarantineTo ( ) { return quarantineTo ; } @ Order ( 36 ) @ ExportTarget ( exportTypes = { CaseExportType . CASE_SURVEILLANCE } )", "Log . e ( TAG , \"Inline file reading error: Exception \" + exception ) ;", "@ ObjectHolder ( ModCyclic . MODID + \":storage_bag\" ) public static ContainerType < StorageBagContainer > storage_bag ; @ ObjectHolder ( ModCyclic . MODID + \":crafting_bag\" ) public static ContainerType < CraftingBagContainer > crafting_bag ; @ ObjectHolder ( ModCyclic . MODID + \":crafting_stick\" ) public static ContainerType < CraftingStickContainer > crafting_stick ; @ ObjectHolder ( ModCyclic . MODID + \":workbench\" ) public static ContainerType < ContainerWorkbench > workbench ;", "public static class FieldIncrementScriptPlugin extends Plugin implements ScriptPlugin { @ Override public ScriptEngineService getScriptEngineService ( Settings settings ) { return new FieldIncrementScriptEngine ( ) ; } }", "Attribute sourceCodeAttribute = attrMetaFactory . create ( ) . setName ( \"code\" ) . setDataType ( INT ) ; Attribute sourceLabelAttribute = attrMetaFactory . create ( ) . setName ( \"label\" ) ; sourceRefEntityType . addAttribute ( sourceCodeAttribute , ROLE_ID ) ; sourceRefEntityType . addAttribute ( sourceLabelAttribute , ROLE_LABEL ) ; return sourceRefEntityType ;", "throws NotFoundException , BadFormatException , ExecutionException , InterruptedException { NetworkServiceRecord networkServiceRecord = getNetworkServiceRecordInAnyState ( id , projectId ) ; }", "import java . io . IOException ; import java . net . URISyntaxException ; import java . time . LocalDateTime ;", "public void viewConfigurationChanged ( ) { }", "import android . widget . CheckBox ; import android . widget . CompoundButton ; import android . widget . DatePicker ; import android . widget . LinearLayout ; import android . widget . TableLayout ; import android . widget . TableRow ; import android . widget . TextView ;", "final SnapshotConfig snapshotConfig = policyConfig . getSnapshotConfig ( ) ; if ( lastSequenceNr ( ) - lastSnapshotSequenceNr ) >= snapshotConfig . getThreshold ( ) ) { takeSnapshot ( \"snapshot threshold is reached\" ) ; }", "public TemporalPartialWorldGenerator ( Model model , Collection queryTemplates ) { this . model = model ; currentPartialWorld = new DefaultPartialWorld ( ) ; queryInstantiator = new TemporalQueriesInstantiator ( model , queryTemplates ) ; } public void moveOn ( ) { moveOn ( ++ lastTimeStep ) ; } public void moveOn ( int t ) { moveOn ( queryInstantiator . getQueries ( lastTimeStep = t ) ) ; } public void moveOn ( Collection queries ) { for ( Iterator it = queries . iterator ( ) ; it . hasNext ( ) ; ) { ArgSpecQuery query = ( ArgSpecQuery ) it . next ( ) ; BLOGUtil . ensureDetAndSupported ( query . getVariable ( ) , currentPartialWorld ) ; } latestQueries = queries ; if ( afterMove != null ) afterMove . evaluate ( latestQueries ) ; uninstantiatePreviousTimeslices ( currentPartialWorld ) ; BLOGUtil . removeAllDerivedVars ( currentPartialWorld ) ; } public Collection getLatestQueries ( ) { return latestQueries ; } public String getTemplateOf ( ArgSpecQuery query ) { return ( String ) queryInstantiator . getTemplateOf ( query ) ; } protected Model model ; public Model getModel ( ) { return model ; } public static int findLargestTimestepIndex ( PartialWorld world ) { int largest = - 1 ; Iterator timestepIndexIt = DBLOGUtil . getTimestepIndicesIterator ( world ) ; while ( timestepIndexIt . hasNext ( ) ) { Integer timestepIndex = ( Integer ) timestepIndexIt . next ( ) ; if ( timestepIndex . intValue ( ) > largest ) largest = timestepIndex . intValue ( ) ; } return largest ; } public static void uninstantiatePreviousTimeslices ( PartialWorld world ) { int largestTimestepIndex = findLargestTimestepIndex ( PartialWorld world ) { int largest = - 1 ; Iterator timestepIndexIt = DBLOGUtil .", "final String response = createResource ( \"whois/geolocation?ipkey=10.0.0.0\" ) . request ( MediaType . APPLICATION_JSON )", "final T mu ) {", "jj_la1 [ 232 ] = jj_gen ;", "", "public void set ( double t0 , double tFinal , FramePoint3D z0 , FramePoint3D zf )", "List < Forecast > forecasts = database . forecastDao ( ) . getForecastsByCityId ( currentWeatherDataList . getCity_id ( ) ) ; List < WeekForecast > weekforecasts = database . getWeekForecastsByCityId ( currentWeatherDataList . getCity_id ( ) ) ;", "Assert . fail ( ex . getMessage ( ) ) ;", "private Map < String , GenericRow > readNormalResults ( String resultTopic , Schema resultSchema , int expectedNumMessages ) { return topicConsumer . readResults ( resultTopic , resultSchema , expectedNumMessages , new StringDeserializer ( ) ) ; }", "package us . ihmc . humanoidBehaviors . behaviors . diagnostic ; import java . util . ArrayList ; import java . util . Random ; import javax . vecmath . AxisAngle4d ; import javax . vecmath . Point3d ; import javax . vecmath . Quat4d ; import javax . vecmath . Vector3d ; import org . apache . commons . lang3 . StringUtils ; import org . ejml . data . DenseMatrix64F ; import us . ihmc . SdfLoader . models . FullHumanoidRobotModel ; import us . ihmc . SdfLoader . partNames . LimbName ; import us . ihmc . commonWalkingControlModules . configurations . WalkingControllerParameters ; import us . ihmc . commonWalkingControlModules . highLevelHumanoidControl . factories . HumanoidArmPose ; import us . ihmc . graphics3DAdapter . graphics . appearances . YoAppearance ; import us . ihmc . humanoidBehaviors . behaviors . BehaviorInterface ; import us . ihmc . humanoidBehaviors . behaviors . TurnInPlaceBehavior ; import us . ihmc . humanoidBehaviors . behaviors . WalkToLocationBehavior ; import us . ihmc . humanoidBehaviors . behaviors . midLevel . GraspCylinderBehavior ; import us . ihmc . humanoidBehaviors . behaviors . midLevel . RotateHandAboutAxisBehavior ; import us . ihmc . humanoidBehaviors . behaviors . primitives . ChestOrientationBehavior ; import us . ihmc . humanoidBehaviors . behaviors . primitives . ChestOrientationBehavior ; import us . ihmc . humanoidBehaviors . behaviors . primitives . ChestOrientationBehavior ; import us . ihmc . humanoidBehaviors . behaviors . primitives . ChestOrientationBehavior ; import us . ihmc . humanoidBehaviors . behaviors . behaviors . primitives . ChestOrientationBehavior ; import us . ihmc . humanoidBehaviors . behaviors", "public ViewEntry getEntryByKey ( final Vector keys ) { return getEntryByKey ( ( Object ) keys , false ) ; }", "@ Timed ( name = \"all-groups.post\" ) @ ExceptionMetered private ClientResponse getClientResponse ( ObjectNode response ) { logger . debug ( \"calling {} {}\" , group . getCallbackUrl ( ) , group . getName ( ) ) ; return client . resource ( group . getCallbackUrl ( ) ) . type ( MediaType . APPLICATION_JSON_TYPE ) . post ( ClientResponse . class , response . toString ( ) ) ; } public void exit ( boolean delete ) { deleteOnExit . set ( delete ) ; }", "", "import java . util . Set ;", "import com . github . oxo42 . stateless4j . OutVar ; import com . github . oxo42 . stateless4j . delegates . FuncBoolean ;", "SkinImage judgeline = new SkinImage ( new TextureRegion [ ] { new TextureRegion ( st , 16 , 0 , 8 , 8 ) } , 0 ) ; judgeline . setOffsetYReferenceID ( BMSPlayer . OFFSET_LIFT ) ; setDestination ( judgeline , 0 , 210 , 137 , 390 , 6 , 0 , 255 , 255 , 255 , 255 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; add ( judgeline ) ; line = new SkinImage ( new TextureRegion [ ] { new TextureRegion ( st , 16 , 0 , 8 , 8 ) } , 0 ) ; judgeline . setOffsetYReferenceID ( BMSPlayer . OFFSET_LIFT ) ; setDestination ( line , 0 , 680 , 137 , 390 , 6 , 0 , 255 , 255 , 255 , 255 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; add ( line ) ;", "onPacketFinish ( msg ) ; notifyPutFileStreamResponse ( msg ) ;", "PATH = null ; UFS = null ;", "ResponseEntity < Void > addPet ( @ ApiParam ( value = \"Pet object that needs to be added to the store\" , required = true ) @ Valid @ RequestBody Pet body , @ RequestHeader ( value = \"Accept\" , required = false ) String accept ) throws Exception ;", "SolrParams sParams = mapParams ( CommonParams . QT , \"/sql\" , \"stmt\" , \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" + \"min(a_f), max(a_f), avg(a_f) from collection1\" ) ;", ". flatMap ( organizationId -> Mono . when ( createUserId ( this . cloudFoundryClient , this . uaaClient , organizationId , userName ) ,", "System . out . println ( \"Doing shutdown\" ) ; super . tearDown ( ) ; m_sites . clear ( ) ; m_mboxes . clear ( ) ; m_voltdb . shutdown ( null ) ;", "import android . os . Handler ; import android . support . v4 . app . Fragment ; import android . support . v4 . app . FragmentActivity ; import android . support . v4 . app . FragmentManager ; import android . support . v4 . app . FragmentTransaction ;", "if ( ! exprResult . type . isInstance ( ErrorExpression . class ) ) { myErrorReporter . report ( new TypeMismatchError ( text ( \"A sigma type\" ) , termDoc ( exprResult . type ) , expr1 ) ) ; }", "@ Override public boolean supportsPartitioning ( ) { return true ; } @ Override public List < Map < String , String > > getPartitions ( Connection connection ) { List < Map < String , String > > result = new ArrayList < > ( ) ; try ( Statement statement = connection . createStatement ( ) ) { ResultSet resultSet = statement . executeQuery ( \"with pg_partitioned_table as (select \\n\" + \" p.partrelid,\\n\" + \" p.partstrat as partitionType,\\n\" + \" p.partnatts,\\n\" + \" string_agg(a.attname, ',' order by a.attnum) \\\"partitionExpression1\\\",\\n\" + \" pg_get_expr(p.partexprs, p.partrelid) \\\"partitionExpression2\\\"\\n\" + \"from \\n\" + \"(select \\n\" + \"\\tpartrelid,\\n\" + \" partstrat,\\n\" + \" partnatts,\\n\" + \" unnest(partattrs) partattrs,\\n\" + \" partexprs\\n\" + \"from \\n\" + \"\\tpg_catalog.pg_partitioned_table\\n\" + \") p left join\\n\" + \"\\tpg_catalog.pg_attribute a on partrelid = a.attrelid and p.partattrs = a.attnum\\n\" + \"group by \\n\" + \"\\t1,2,3,5\\n\" + \")\\n\" + \"SELECT\\n\" + \"\\tn.nspname as schema,\\n\" + \"\\t(i.inhparent::regclass)::text as parent,\\n\" + \"\\t(cl.oid::regclass)::text as child,\\n\" + \" p.relrelid and p.partattrs = a.attnum\\n\" + \"\\t1,2", "@ Nonnull public TimeOffCollectionRequest select ( @ Nonnull final String value ) { addSelectOption ( value ) ; return this ; }", "meta . addDependency ( \"javax.annotation\" , \"javax.annotation-api\" , \"1.3.2\" ) ;", "createSpaceIdAndUserId ( this . cloudFoundryClient , this . uaaClient , organizationName , spaceName , userName ) . delayUntil ( function ( ( spaceId , userId ) -> this . cloudFoundryClient . spaces ( )", "constrainCoPPointToSupportPolygon ( copPointToPlan , copPointName ) ;", "tcParameters . put ( \"countries\" , countries ) ; StringBuilder query = new StringBuilder ( \"SELECT tec.*, app.system FROM testcase tec \" ) ; if ( withLabelOrBattery ) { query . append ( \"LEFT OUTER JOIN application app ON app.application = tec.application \" ) . append ( \"INNER JOIN testcasecountry tcc ON tcc.Test = tec.Test and tcc.TestCase = tec.TestCase \" ) . append ( \"LEFT JOIN testbatterycontent tbc ON tbc.Test = tec.Test and tbc.TestCase = tec.TestCase \" ) . append ( \"LEFT JOIN campaigncontent cpc ON cpc.testbattery = tbc.testbattery \" ) . append ( \"LEFT JOIN testcaselabel tel ON tec.test = tel.test AND tec.testcase = tel.testcase \" ) . append ( \"LEFT JOIN campaignlabel cpl ON cpl.labelId = tel.labelId \" ) . append ( \"WHERE ((cpc.campaign = ?) OR (cpl.campaign = ?) )\" ) ; } else { query . append ( \"LEFT OUTER JOIN application app ON app.application = tec.application \" ) }", "if ( ( ( bitField0_ & 0x00000800 ) == 0x00000800 ) ) { output . writeUInt32 ( 16 , mergeTime_ ) ; } unknownFields . writeTo ( output ) ;", "> > > dff36e31160cde38cde88529386e8d04be716bc2", "", "GCResource gcResource = new GCResource ( \"byteArray\" ) ; gcResource . getLogger ( ) . addHandler ( handler ) ;", "R record = createRecord ( key , value , expiryTime , completionId ) ;", "", "bind ( EntityCollectionManagerFactory . class ) . to ( EntityCollectionManagerFactoryImpl . class ) . to ( GuicyFigModule . class ) ;", "import com . jetbrains . jetpad . vclang . term . context . binding . Variable ; import com . jetbrains . jetpad . vclang . term . context . binding . inference . InferenceVariable ;", "boolean checkMin = plot . getNonTimeAxisSubsequentMinSetting ( ) == NonTimeAxisSubsequentBoundsSetting . FIXED || plot . getNonTimeAxisSubsequentMinSetting ( ) == NonTimeAxisSubsequentBoundsSetting . SEMI_FIXED || plot . getNonTimeAxis ( ) . isPinned ( ) || plot . plotAbstraction . getTimeAxisUserPin ( ) . isPinned ( ) || plot . plotAbstraction . getTimeAxis ( ) . isPinned ( ) || plot . plotAbstraction . getTimeAxis ( ) . isZoomed ( ) ; if ( checkMin && ( value <= plot . getCurrentNonTime ( ) || nonTimeValueWithin1PixelOfLimit ( value , plot . nonTimeAxisMinPhysicalValue ) ) && atTime >= plot . getCurrentTimeAxisMinAsLong ( ) && atTime <= plot . getCurrentTimeAxisMaxAsLong ( ) ) { if ( nonTimeMinAlarm != LimitAlarmState . ALARM_OPENED_BY_USER ) { } }", "@ ConditionalOnProperty ( name = { \"spring.sleuth.http.enabled\" , \"spring.sleuth.web.enabled\" } , havingValue = \"true\" , matchIfMissing = true ) @ ConditionalOnBean ( Tracing . class ) @ ConditionalOnClass ( HttpTracing . class ) @ AutoConfigureAfter ( TraceAutoConfiguration . class ) @ Import ( TraceWebAutoConfiguration . class )", "public List < SelectItem > getStandaloneSpecs ( ) { return standaloneSpecs ; } public List < String > getSelectedStandaloneSpecs ( ) { return selectedStandaloneSpecs ; } public void setSelectedStandaloneSpecs ( List < String > selectedStandaloneSpecs ) { this . selectedStandaloneSpecs = selectedStandaloneSpecs ; } public List < SelectItem > getJavaSEItems ( ) { return javaSEItems ; }", "private static final Logger logger = LoggerFactory . getLogger ( SpnegoAuthenticator . class ) ; private byte [ ] sessionKey ;", "", "@ Test public void buildThingSearchCommandTopicPath ( ) { final TopicPath expected = ImmutableTopicPath . of ( \"_\" , \"_\" , TopicPath . Group . THINGS , TopicPath . Channel . TWIN , TopicPath . Criterion . SEARCH , TopicPath . SearchAction . SUBSCRIBE ) ; final TopicPath actual = ProtocolFactory . newTopicPathBuilderFromNamespace ( \"_\" ) . things ( ) . twin ( ) . search ( ) . subscribe ( ) . build ( ) ; final String expectedTopicPathString = \"_/_/things/twin/search/subscribe\" ; assertThat ( actual ) . isEqualTo ( expected ) ; assertThat ( actual . getPath ( ) ) . isEqualTo ( expectedTopicPathString ) ; } @ Test public void buildPolicyModifyCommandTopicPath ( ) { final TopicPath expected = ImmutableTopicPath . of ( \"org.eclipse.ditto.test\" , \"myPolicy\" , TopicPath . Group . POLICIES , TopicPath . Channel . NONE , TopicPath . Criterion . COMMANDS , TopicPath . Action . MODIFY ) ; final TopicPath actual = ProtocolFactory . newTopicPathBuilder ( PolicyId . of ( \"org.eclipse.ditto.test\" , \"myPolicy\" ) ) . commands ( ) . modify ( ) . build ( ) ; final String expectedTopicPathString = \"org.eclipse.ditto.test/myPolicy/policies/commands/modify\" ; assertThat ( actual ) . isEqualTo ( expected ) ; assertThat ( actual . getPath ( ) ) . modify ( ) . build ( ) ; final String expectedTopicPathString = \"org.eclipse.ditto.test/myPolicy/policies/commands/modify\" ; assertThat ( actual ) . isEqualTo ( ) . build ( ) ; final String expectedTopicPathString = \"org.eclipse.ditto.test/myPolicy/", "private final Collection < String > messages = new ConcurrentLinkedQueue < > ( ) ;", "GT_ModHandler . addCraftingRecipe ( ItemList . Cover_SolarPanel_ZPM . get ( 1 ) , GT_ModHandler . RecipeBits . NOT_REMOVABLE | GT_ModHandler . RecipeBits . REVERSIBLE , new Object [ ] { \" S \" , \"STS\" , \" S \" , 'S' , ItemList . Cover_SolarPanel_LuV , 'T' , ItemList . Transformer_ZPM_LuV } ) ;", "import com . cloud . storage . Storage ;", "long waitTime = System . nanoTime ( ) - waitStartTime ; return waitTime - executeUSecs ;", "markBlockForUpdate ( ) ;", "", "", "BDDMockito . given ( beanFactory . getBean ( TraceWebAutoConfiguration . SkipPatternProvider . class ) ) . willThrow ( new NoSuchBeanDefinitionException ( \"foo\" ) ) ;", "public List < InputAnchor > getAllInputs ( ) { return ImmutableList . of ( ) ; } @ Override public List < OutputAnchor > getAllOutputs ( ) { return ImmutableList . of ( this . fun ) ; }", "@ SuppressWarnings ( { \"unchecked\" , \"rawtypes\" } ) protected Collection < KVDocument > readDocuments ( MetaDatabase metaDatabase , MetaCollection metaCollection , DocPartResults < ResultSet > docPartResultSets ) { R2DTranslator r2dTranslator = new R2DBackedTranslator ( new R2DBackendTranslatorImpl ( databaseInterface , metaDatabase , metaCollection ) ) ; Collection < KVDocument > readedDocuments = r2dTranslator . translate ( docPartResultSets ) ; return readedDocuments ; } protected List < Integer > writeCollectionData ( DSLContext dsl , CollectionData collectionData ) { Iterator < DocPartData > docPartDataIterator = StreamSupport . stream ( collectionData . spliterator ( ) , false ) . iterator ( ) ; List < Integer > generatedDids = new ArrayList < > ( ) ; while ( docPartDataIterator . hasNext ( ) ) { DocPartData docPartData = docPartDataIterator . next ( ) ; if ( docPartData . getMetaDocPart ( ) . getTableRef ( ) . isRoot ( ) ) { docPartData . forEach ( docPartRow -> { generatedDids . add ( docPartRow . getDid ( ) ) ; } ) ; } databaseInterface . insertDocPartData ( dsl , schema . databaseSchemaName , docPartData ) ; } return generatedDids ; } protected CollectionData writeDocumentMeta ( MutableMetaSnapshot mutableSnapshot , DSLContext dsl , KVDocument document ) throws Exception { CollectionData collectionData = readDataFromDocument ( schema . databaseName , schema . collectionName , document , mutableSnapshot ) ; mutableSnapshot . streamMetaDatabases ( ) . forEachOrdered ( metaDatabase -> { metaDatabase . streamMetaCollections ( ) . sorted ( TableRefComparator . MetaDocPart . ASC ) . forEachOrdered ( metaDocPartObject -> { MetaDocPart metaDocPart = ( MetaDocPart ) metaDocPartObject ; List < Field < ? > >", "import com . google . common . collect . Lists ; import com . google . common . collect . Maps ;", "List < Task > getTasks ( @ NotEmpty ( message = \"TaskType cannot be null or empty.\" ) String taskType , String startKey , Integer count ) ;", "import static org . easymock . EasyMock . anyBoolean ; import io . confluent . kafka . schemaregistry . client . rest . RestService ; import io . confluent . kafka . schemaregistry . client . rest . entities . SchemaString ; import io . confluent . kafka . schemaregistry . client . rest . entities . requests . ModeGetResponse ; import io . confluent . kafka . schemaregistry . client . rest . entities . requests . ModeUpdateRequest ; import static io . confluent . kafka . schemaregistry . client . rest . RestService . DEFAULT_REQUEST_PROPERTIES ;", "jj_la1 [ 206 ] = jj_gen ; break label_140 ;", "import android . view . View ; import android . view . ViewGroup ;", "snapTo = options . getOrDefault ( \"snap\" , optional . get ( \"snap\" ) ) . getString ( ) . toLowerCase ( Locale . ROOT ) ; snapX = snapTo . contains ( \"x\" ) ; snapY = snapTo . contains ( \"y\" ) ; snapZ = snapTo . contains ( \"z\" ) ;", "import java . util . TreeMap ; import java . util . Map ;", "@ Override public Set < String > getAttributeNames ( ) { }", "if ( TextUtils . isEmpty ( currentInfo . getSubChannelUrl ( ) ) ) { if ( ! TextUtils . isEmpty ( currentInfo . getUploaderUrl ( ) ) ) { openChannel ( currentInfo . getUploaderUrl ( ) , currentInfo . getUploaderName ( ) ) ; } if ( DEBUG ) { Log . i ( TAG , \"Can't open sub-channel because we got no channel URL\" ) ; } } else { openChannel ( currentInfo . getSubChannelUrl ( ) , currentInfo . getSubChannelName ( ) ) ; }", "import de . metas . util . Services ;", "import io . realm . RealmObjectSchema ; import io . realm . RealmSchema ;", "prop . setComment ( \"WorldProvider ID for Overworld Space Stations (advanced: do not change unless you have conflicts)\" ) ; prop . setLanguageKey ( \"gc.configgui.id_dimension_overworld_orbit\" ) . setRequiresMcRestart ( true ) ;", "public void blockReceived ( DatanodeID nodeID , String poolId ,", "public List < String > getTabCompletionOptions ( MinecraftServer server , ICommandSender sender , String [ ] args , BlockPos pos )", "register ( TESaplingTFC . class , \"sapling\" ) ; register ( TEChestTFC . class , \"chest\" ) ; register ( TEWorldItem . class , \"world_item\" ) ; register ( TETorchTFC . class , \"torch\" ) ; register ( TEPitKiln . class , \"pit_kiln\" ) ; register ( TELogPile . class , \"log_pile\" ) ; register ( TEIngotPile . class , \"ingot_pile\" ) ; register ( TEFirePit . class , \"fire_pit\" ) ; TileEntity . register ( TEToolRack . ID . toString ( ) , TEToolRack . class ) ;", "{ this . axonFrameworkVersionResolver = builder . axonFrameworkVersionResolver ; this . requestStreamFactory = builder . requestStreamFactory ; this . instructionAckSource = builder . instructionAckSource ; onOutboundInstruction ( NODE_NOTIFICATION , ( instruction , stream ) -> logger . debug ( \"Received: {}\" , instruction . getNodeNotification ( ) ) ) ; handlers . register ( ACK , ( instruction , stream ) -> { if ( isUnsupportedInstructionErrorAck ( instruction . getAck ( ) ) ) { logger . warn ( \"Unsupported instruction sent to the server. {}\" , instruction . getAck ( ) ) ; } else { logger . trace ( \"Received instruction ack {}.\" , instruction . getAck ( ) ) ; } } ) ; } private boolean isUnsupportedInstructionErrorAck ( InstructionAck instructionResult ) { return instructionResult . hasError ( ) && instructionResult . getError ( ) . getErrorCode ( ) . equals ( ErrorCode . UNSUPPORTED_INSTRUCTION . errorCode ( ) ) ; }", "private final Timer parseTime ;", "import bibliothek . gui . dock . station . support . PlaceholderStrategy ; import bibliothek . gui . dock . station . toolbar . Position ; import bibliothek . gui . dock . station . toolbar . ToolbarDockStationFactory ;", "public void testSimpleQueries ( ) { database . beginTransactionNonExclusive ( ) ; try { String sql = \"SELECT CHANGES()\" ; insertBasicTestModel ( ) ; assertEquals ( 1 , database . simpleQueryForLong ( sql , null ) ) ; assertEquals ( \"1\" , database . simpleQueryForString ( sql , null ) ) ; database . setTransactionSuccessful ( ) ; } finally { database . endTransaction ( ) ; } } public void testConcurrencyStressTest ( ) { int numThreads = 20 ; final AtomicReference < Exception > exception = new AtomicReference < Exception > ( ) ; List < Thread > workers = new ArrayList < Thread > ( ) ; for ( int i = 0 ; i < numThreads ; i ++ ) { Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { concurrencyStressTest ( exception ) ; } } ) ; t . start ( ) ; workers . add ( t ) ; } for ( Thread t : workers ) { try { t . join ( ) ; } catch ( Exception e ) { exception . set ( e ) ; } } assertNull ( exception . get ( ) ) ; } private void concurrencyStressTest ( AtomicReference < Exception > exception ) { try { Random r = new Random ( ) ; int numOperations = 100 ; Thing t = new Thing ( ) ; for ( int i = 0 ; i < numOperations ; i ++ ) { int rand = r . nextInt ( 10 ) ; if ( rand == 0 ) { database . close ( ) ; } catch ( Exception e ) { exception . set ( e ) ; } } assertNull ( exception . get ( ) ) ; } private void concurrencyStressTest ( AtomicReference < Exception > exception ) { try { Random r = new Random ( ) ; int numOperations = 100 ; Thing t = new Thing ( ) ; for ( int i = 0 ; i < numOperations ;", "protected void silentPut ( final K key , final V value ) throws StoreAccessException { }", "synchronized boolean anyChanges ( ) { return numDocsInRAM . get ( ) != 0 || anyDeletions ( ) ; }", "private boolean jj_3R_807 ( ) { if ( jj_scan_token ( IF ) ) return true ; if ( jj_scan_token ( NOT ) ) return true ; if ( jj_scan_token ( EXISTS ) ) return true ; return false ; } private boolean jj_3R_236 ( ) { if ( jj_3R_157 ( ) ) return true ; }", "protected Block2BlockwiseStatus clearBlock2Status ( KeyUri key , Block2BlockwiseStatus status ) { int size ; Block2BlockwiseStatus removedTracker ; }", "UserWorkflowService userService3 = clientFactory . create ( \"bellini\" , ADMIN_PWD ) . getService ( UserWorkflowService . class ) ;", "public void setOffering ( OfferingEntity offering ) { }", "boolean ignoreKey = config . getBoolean ( ElasticsearchSinkConnectorConfig . KEY_IGNORE_CONFIG ) ; boolean ignoreSchema = config . getBoolean ( ElasticsearchSinkConnectorConfig . SCHEMA_IGNORE_CONFIG ) ; boolean useCompactMapEntries = config . getBoolean ( ElasticsearchSinkConnectorConfig . COMPACT_MAP_ENTRIES_CONFIG ) ; Map < String , String > topicToIndexMap = parseMapConfig ( config . getList ( ElasticsearchSinkConnectorConfig . TOPIC_INDEX_MAP_CONFIG ) ) ; Set < String > topicIgnoreKey = new HashSet < > ( config . getList ( ElasticsearchSinkConnectorConfig . TOPIC_KEY_IGNORE_CONFIG ) ) ; Set < String > topicIgnoreSchema = new HashSet < > ( config . getList ( ElasticsearchSinkConnectorConfig . TOPIC_SCHEMA_IGNORE_CONFIG ) ) ; long flushTimeoutMs = config . getLong ( ElasticsearchSinkConnectorConfig . FLUSH_TIMEOUT_MS_CONFIG ) ; int maxBufferedRecords = config . getInt ( ElasticsearchSinkConnectorConfig . MAX_BUFFERED_RECORDS_CONFIG ) ; int batchSize = config . getInt ( ElasticsearchSinkConnectorConfig . BATCH_SIZE_CONFIG ) ; long lingerMs = config . getLong ( ElasticsearchSinkConnectorConfig . LINGER_MS_CONFIG ) ; int maxInFlightRequests = config . getInt ( ElasticsearchSinkConnectorConfig . MAX_IN_FLIGHT_REQUESTS_CONFIG ) ; long retryBackoffMs = config . getLong ( ElasticsearchSinkConnectorConfig . RETRY_BACKOFF_MS_CONFIG ) ; int maxRetry = config . getInt ( ElasticsearchSinkConnectorConfig . MAX_RETRIES_CONFIG ) ; boolean dropInvalidMessage = config . getBoolean ( ElasticsearchSinkConnectorConfig . MAX_RETRIES_CONFIG ) ; int maxInFlightRequests = config . getInt ( ElasticsearchSinkConnectorConfig . MAX_IN_FLIGHT_REQUESTS_CONFIG ) ; int maxInFlightRequests = config . getInt ( ElasticsearchSinkConnector", "Hee_Q2146 . run ( ) ;", "private String passwordProtection ; private List < PdfRevision > documentRevisions ;", "NewsDatabase . INSTANCE . initialize ( this ) ; NewsSyncUtils . startNewsUpdateRepeating ( this ) ; PackageRemovedReceiver . register ( getApplicationContext ( ) ) ;", "if ( modelingConfiguration . getPropertiesDirect ( ) ) { if ( this . ontologyManager . isConnectedByDirectProperty ( sourceUri , targetUri ) ) { } }", "if ( ! profiles . isEmpty ( ) ) { this . logger . debug ( \"Profiles already activated, '\" + profiles", "@ javax . jdo . annotations . NotPersistent @ lombok . Getter ( AccessLevel . NONE ) @ lombok . Setter ( AccessLevel . NONE )", "private byte [ ] columnBlockBiomeArray ;", "import java . security . SignatureException ;", "return _hreq != null ? _hreq . getQueryString ( ) : _attrs . get ( Attributes . INCLUDE_QUERY_STRING ) ;", "import com . dotmarketing . business . APILocator ; import com . dotmarketing . exception . DotDataException ; import com . dotmarketing . exception . DotSecurityException ; import com . dotmarketing . portlets . rules . conditionlet . Conditionlet ; import com . dotmarketing . portlets . rules . conditionlet . ConditionletInputValue ; import com . dotmarketing . util . Logger ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . util . Collection ;", "* therefore , the disabling is remembered when offers come in later . Disabled hosts are not used for allocating * resources to tasks . * * @ param hostname name of the host to disable", "lines . add ( ChatColor . GOLD + helpMessagesService . getMessage ( HelpMessageKey . COMMANDS ) + \":\" ) ; String parentCommandPath = String . join ( \" \" , parentLabels ) ;", "public T getItem ( int position ) { return mItems . get ( position ) ; }", "CaseDbConnection connection = connections . getConnection ( ) ; s = connection . createStatement ( ) ; rs = connection . executeQuery ( s , \"SELECT * FROM tsk_files WHERE \" + \" md5 = '\" + md5Hash + \"' \" + \"AND size > 0\" ) ;", "", "public void setManualAlignment ( )", "DFSTestUtil . waitCorruptReplicas ( fs , cluster . getNamesystem ( ) , file1 , block , numCorruptReplicas ) ;", "public static boolean isJpegFileHeader ( AbstractFile file ) { if ( file . getSize ( ) < 100 ) { return false ; } byte [ ] fileHeaderBuffer = new byte [ 2 ] ; int bytesRead ; try { bytesRead = file . read ( fileHeaderBuffer , 0 , 2 ) ; } catch ( TskCoreException ex ) { return false ; } if ( bytesRead != 2 ) { return false ; } if ( ( ( int ) ( fileHeaderBuffer [ 0 ] & 0xff ) == 0xff ) && ( ( int ) ( fileHeaderBuffer [ 1 ] & 0xff ) == 0xd8 ) ) { return true ; } return false ; }", "import com . epam . jdi . uitests . web . selenium . elements . complex . ComboBox ; import com . epam . jdi . uitests . web . selenium . elements . complex . CheckList ; import com . epam . jdi . uitests . web . selenium . elements . complex . DropList ;", "import static org . junit . Assert . * ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Date ; import java . util . List ; import org . junit . Ignore ; import org . junit . Test ; import com . microsoft . windowsazure . services . core . ServiceException ; import com . microsoft . windowsazure . services . media . models . AccessPolicyInfo ; import com . microsoft . windowsazure . services . media . models . AccessPolicyPermission ; import com . microsoft . windowsazure . services . media . models . AssetInfo ; import com . microsoft . windowsazure . services . media . models . AssetState ; import com . microsoft . windowsazure . services . media . models . CreateAccessPolicyOptions ; import com . microsoft . windowsazure . services . media . models . CreateAssetOptions ; import com . microsoft . windowsazure . services . media . models . CreateLocatorOptions ; import com . microsoft . windowsazure . services . media . models . EncryptionOption ; import com . windowsazure . services . media . models . ListAssetsOptions ; import com . microsoft . windowsazure . services . media . models . ListLocatorsResult ; import com . microsoft . windowsazure . services . media . models . ListMediaProcessorsOptions ; import com . microsoft . windowsazure . services . media . models . ListMediaProcessorsResult ; import com . microsoft . windowsazure . services . media . models . LocatorInfo ; import com . microsoft . windowsazure . services . media . models . LocatorType ; import com . microsoft . windowsazure . services . media . models . UpdateAssetOptions ; import com . microsoft . windowsazure . services . media . models . LocatorInfo ; import com . microsoft . windowsazure . services . media . models . LocatorType ; import com . microsoft . windowsazure .", "", "private static final int TRANSACTION_LIFETIME = 0 ; private static final boolean BANK_OFFERED_CONSENT_SUPPORT = false ;", "import java . io . File ; import java . io . IOException ; import java . util . * ; import java . util . concurrent . ExecutorService ; import java . util . concurrent . Executors ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import static org . junit . Assert . * ; import static voldemort . utils . Ec2RemoteTestUtils . createInstances ; import static voldemort . utils . Ec2RemoteTestUtils . destroyInstances ; import static voldemort . utils . RemoteTestUtils . cleanupCluster ; import static voldemort . utils . RemoteTestUtils . deploy ; import static voldemort . utils . RemoteTestUtils . generateClusterDescriptor ; import static voldemort . utils . RemoteTestUtils . startClusterAsync ; import static voldemort . utils . RemoteTestUtils . stopClusterQuiet ; import static voldemort . utils . RemoteTestUtils . stopCluster ; import static voldemort . utils . RemoteTestUtils . toHostNames ;", "import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . List ; import java . util . Map ; import java . util . UUID ;", "private Lazy < ICesiumInterpolatableValuePropertyWriter < Motion1 < Cartesian > > > m_asCartesianVelocity ; private Lazy < ICesiumValuePropertyWriter < Reference > > m_asReference ;", "import org . opentripplanner . routing . error . VertexNotFoundException ; import org . opentripplanner . routing . request . RoutingRequest ; import org . opentripplanner . routing . request . RoutingValidationException ;", "import org . eclipse . jgit . api . errors . TransportException ; import org . eclipse . jgit . api . errors . InvalidRemoteException ; import org . eclipse . jgit . api . errors . NotMergedException ; import org . eclipse . jgit . lib . ObjectId ;", "import com . itextpdf . kernel . colors . ColorConstants ;", "load ( FilterRegistrationOtherConfiguration . class , \"spring.resources.chain.enabled:true\" ) ; Map < String , FilterRegistrationBean > beans = this . context . getBeansOfType ( FilterRegistrationBean . class ) ;", "{ m_abtestModel = abtest . toString ( ) ; break ; }", "selectedMotor . getBurnoutMass ( ) ) ) ; caseInfoLabel . setText ( selectedMotor . getCaseInfo ( ) ) ; propInfoLabel . setText ( selectedMotor . getPropellantInfo ( ) ) ; compatibleCasesLabel . setText ( StringUtils . join ( \",\" , selectedMotor . getCompatibleCases ( ) ) ) ; dataPointsLabel . setText ( \"\" + ( selectedMotor . getSampleSize ( ) - 1 ) ) ;", "import static org . hamcrest . CoreMatchers . equalTo ; import static org . apache . dubbo . rpc . protocol . rest . Constants . EXTENSION_KEY ;", "if ( failedSites . contains ( entry . getValue ( ) . m_sourceHSId ) ) { VoltDB . crashLocalVoltDB ( \"Node fault during recovery of Site \" + m_HSId + \" resulted in source Site \" + entry . getValue ( ) . m_sourceHSId + \" becoming unavailable. Failing recovering node.\" , false , null ) ; }", "", "private boolean suppressDownloadMessage = false ; private int maxMessageSize = 0 ;", "String storeValueName = storeValue . getClass ( ) . getName ( ) ; if ( storeValueName . endsWith ( OCL_FP_BINARY_NODE ) || storeValueName . endsWith ( PTX_FP_BINARY_NODE ) ) { }", "import io . subutai . core . hubmanager . impl . processor . port_map . ContainerPortMapProcessor ;", "import gov . hhs . fha . nhinc . common . nhinccommon . AssertionType ; import gov . hhs . fha . nhinc . entitypatientdiscoverysecured . EntityPatientDiscoverySecuredPortType ; import gov . hhs . fha . nhinc . messaging . server . BaseService ; import gov . hhs . fha . nhinc . aspect . OutboundMessageEvent ; import gov . hhs . fha . nhinc . patientdiscovery . aspect . PRPAIN201305UV02ArgTransformer ; import gov . hhs . fha . nhinc . patientdiscovery . aspect . RespondingGatewayPRPAIN201306UV02Builder ;", "@ RolesAllowed ( \"Environment-Management|A|Write\" )", "protected void checkResultFilterExtension ( OwsServiceRequest request ) throws CodedException { if ( request . hasExtension ( ResultFilterConstants . RESULT_FILTER ) ) { } }", ". append ( StudyDBAdaptor . QueryParams . UID . key ( ) , study . getUid ( ) ) . append ( StudyDBAdaptor . QueryParams . GROUP_ID . key ( ) , groupId ) ;", "import javax . inject . Inject ; import javax . inject . Singleton ; import java . util . HashMap ;", "", "private UnitOfWork < EventMessage < ? > > unitOfWork ; private final ErrorHandler errorHandler ;", "this . downloadFactory = downloadFactory ; this . timelineAnalytics = timelineAnalytics ;", "return updateReceiptHelper ( mOldReceipt , mTrip , mName , mCategory , mDate , mComment , mPrice , mTax , mExpensable , mCurrency , mFullpage , mPaymentMethod , mExtra_edittext_1 , mExtra_edittext_2 , mExtra_edittext_3 ) ;", "", "for ( Network net : vimInstance . getNetworks ( ) ) if ( vnfdConnectionPoint . getVirtual_link_reference ( ) . equals ( net . getName ( ) ) ) networks . add ( net . getExtId ( ) ) ;", "import uk . gov . gchq . gaffer . core . exception . GafferRuntimeException ; import uk . gov . gchq . gaffer . core . exception . Status ;", "@ UML ( identifier = \"resourceReference\" , obligation = OPTIONAL , specification = ISO_19115 )", "this . opacity ) ;", "jj_la1 [ 193 ] = jj_gen ; break label_132 ;", "File valuesXml = new File ( resDir , \"values/values.xml\" ) ; try { removeStringValue ( valuesXml , \"config_channel\" ) ; removeStringValue ( valuesXml , \"ttid\" ) ; removeStringValue ( valuesXml , \"config_channel\" ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; }", "import com . actionbarsherlock . app . SherlockFragment ; import com . battlelancer . seriesguide . R ;", "", "import java . util . HashMap ; import java . util . Map ; import me . lordsaad . wizardry . gui . book . MainIndex ;", "public static PoijiOptionsBuilder settings ( int skip ) { if ( skip < 0 ) { throw new PoijiException ( \"Skip index must be greater than or equal to 0\" ) ; } return new PoijiOptionsBuilder ( skip ) . setCasting ( casting ) ; }", "", "", "setState ( 728 ) ;", "_assertNotNull ( \"src\" , src ) ; DefaultDeserializationContext ctxt = createDeserializationContext ( ) ; return ( T ) _bindAndClose ( ctxt , _considerFilter ( _parserFactory . createParser ( ctxt , src ) , false ) ) ;", "protected Time createPhenomenonTime ( TemporalReferencedObservation abstractValue ) { final DateTime phenStartTime = new DateTime ( abstractValue . getPhenomenonTimeStart ( ) , DateTimeZone . UTC ) ; DateTime phenEndTime ; if ( abstractValue . getPhenomenonTimeEnd ( ) != null ) { phenEndTime = new DateTime ( abstractValue . getPhenomenonTimeEnd ( ) , DateTimeZone . UTC ) ; } else { phenEndTime = phenStartTime ; } return createTime ( phenStartTime , phenEndTime ) ; }", "import org . jongo . util . ErrorObject ; import org . jongo . model . LinkedFriend ;", "import static com . enderio . core . common . util . OreDictionaryHelper . * ; import static crazypants . enderio . EnderIO . itemBasicCapacitor ; import static crazypants . enderio . material . Alloy . * ; import static crazypants . enderio . material . Material . * ; import static crazypants . util . OreDictionaryHelper . * ; import static crazypants . util . RecipeUtil . * ;", "static final okhttp3 . MediaType MEDIA_TYPE_STRING = MediaType . parse ( \"text/plain\" ) ; private static final String SHOW_DATABASE_COMMAND_ENCODED = Query . encode ( \"SHOW DATABASES\" ) ; private final InetAddress hostAddress ; private final String username ; private final String password ; private final Retrofit retrofit ; private final InfluxDBService influxDBService ; private BatchProcessor batchProcessor ; private final AtomicBoolean batchEnabled = new AtomicBoolean ( false ) ; private final AtomicLong writeCount = new AtomicLong ( ) ; private final AtomicLong unBatchedCount = new AtomicLong ( ) ; private final AtomicLong batchedCount = new AtomicLong ( ) ; private volatile DatagramSocket datagramSocket ; private final HttpLoggingInterceptor loggingInterceptor ; private final GzipRequestInterceptor gzipRequestInterceptor ; private LogLevel logLevel = LogLevel . NONE ; private String database ; private String retentionPolicy = \"autogen\" ; private ConsistencyLevel consistency = ConsistencyLevel . ONE ; private JsonAdapter < QueryResult > adapter ; public InfluxDBImpl ( final String url , final String username , final String password , final OkHttpClient . Builder client ) { super ( ) ; Moshi moshi = new Moshi . Builder ( ) . build ( ) ; this . hostAddress = parseHostAddress ( url ) ; this . username = username ; this . password = password ; this . loggingInterceptor = new HttpLoggingInterceptor ( ) ; this . gzipRequestInterceptor = new GzipRequestInterceptor ( ) ; this . retrofit = new Retrofit . Builder ( ) . client ( client . addInterceptor ( loggingInterceptor ) . addInterceptor ( gzipRequestInterceptor ) . build ( ) ) { super ( ) ; Moshi moshi . Builder ( ) ; this . hostAddress ( url ) ; this . username = username ; this . password = password ; this . loggingInterceptor = new HttpLoggingInterceptor ( ) ;", "CompositeIndexType cIndex = ( CompositeIndexType ) index ; IndexRecords updateRecords = indexMatches ( vertex , cIndex , updateType == IndexUpdate . Type . DELETE , p . getPropertyKey ( ) , new RecordEntry ( p ) ) ;", "@ Nonnull public DirectoryObjectCollectionReferenceRequest select ( @ Nonnull final String value ) { addSelectOption ( value ) ; return this ; }", "public ConglomerateDescriptor getBaseConglomerateDescriptor ( ) { return getTableColumnDescriptor ( ) == null ? null : getTableColumnDescriptor ( ) . getBaseConglomerateDescriptor ( ) ; }", "", "import java . sql . Time ; import java . text . SimpleDateFormat ; import java . net . IDN ;", "ConnectionHelperTest . mConnectionHelper = new ConnectionHelper ( ) ; String logtag = \"ExecuteNativeTests\" ;", "import org . biojava . nbio . structure . chem . ChemCompGroupFactory ; import org . biojava . nbio . structure . chem . DownloadChemCompProvider ; import org . junit . Ignore ;", "sample . forEach ( state -> { final double deltaT = state . getDate ( ) . durationFrom ( date ) ; if ( isOrbitDefined ( ) ) { orbits . add ( state . getOrbit ( ) ) ; } else { absPvas . add ( state . getAbsPVA ( ) ) ; } attitudes . add ( state . getAttitude ( ) ) ; massInterpolator . addSamplePoint ( deltaT , new double [ ] { state . getMass ( ) } ) ; for ( final Map . Entry < String , HermiteInterpolator > entry : additionalInterpolators . entrySet ( ) ) { entry . getValue ( ) . addSamplePoint ( deltaT , state . getAdditionalState ( entry . getKey ( ) ) ) ; } } ) ;", "import io . improbable . keanu . vertices . ConstantVertex ; import io . improbable . keanu . vertices . LogProbGraph ; import io . improbable . keanu . vertices . LogProbGraphContract ; import io . improbable . keanu . vertices . LogProbGraphValueFeeder ; import io . improbable . keanu . vertices . dbl . DoubleVertex ;", "ImmutableSetMultimap . Builder < EntityType , SemanticTag < Attribute , LabeledResource , LabeledResource > > attrTagBuilder = ImmutableSetMultimap", "bw = connector . createBatchWriter ( \"test_ingest\" , new BatchWriterConfig ( ) ) ; connector . securityOperations ( ) . changeUserAuthorizations ( rootCredentials . user , AUTHS ) ;", "import org . voltcore . logging . VoltLogger ; import org . voltcore . utils . DBBPool . BBContainer ; import org . voltcore . utils . Pair ;", "", "if ( ! trm . getSort ( definitionHelper ) . equals ( KSorts . K ) && ! trm . getSort ( definitionHelper ) . equals ( KSorts . KITEM ) && ! trm . getSort ( definitionHelper ) . equals ( KSorts . KRESULT ) ) { if ( ! definitionHelper . isSubsortedEq ( maxSort , trm . getSort ( definitionHelper ) ) ) { KException kex = new KException ( ExceptionType . ERROR , KExceptionGroup . CRITICAL , \"type error: unexpected term '\" + trm + \"' of sort '\" + trm . getSort ( ) + \"', expected sort '\" + maxSort + \"'.\" , trm . getFilename ( ) , trm . getLocation ( ) ) ; } }", "import io . gravitee . am . service . http . WebClientBuilder ;", "jj_la1 [ 182 ] = jj_gen ; break label_121 ;", "private RelationID createAlias ( String predicateName , String suffix , Collection < RelationID > usedAliases ) { String safePredicateName = predicateName . replace ( '.' , '_' ) . replace ( ':' , '_' ) . replace ( '/' , '_' ) . replace ( ' ' , '_' ) ; String alias = sqladapter . nameView ( VIEW_PREFIX , safePredicateName , suffix , usedAliases ) ; return idFactory . createRelationID ( null , alias ) ; }", "", "import cm . aptoide . pt . v8engine . view . store . StoreTabFragmentChooser ; import cm . aptoide . pt . v8engine . view . store . home . HomeFragment ; import cm . aptoide . pt . v8engine . view . wizard . WizardFragment ; import com . jakewharton . rxrelay . PublishRelay ; import java . io . UnsupportedEncodingException ; import java . net . URLDecoder ; import java . util . ArrayList ;", "public void addInformation ( ItemStack stack , @ Nullable World world , List < String > tooltip , ITooltipFlag advanced ) { if ( GuiScreen . isShiftKeyDown ( ) ) { tooltip . add ( Translator . translateToLocal ( \"tile.for.ffarm.tooltip\" ) ) ; if ( stack . getTagCompound ( ) == null ) { return ; } EnumFarmBlockTexture texture = EnumFarmBlockTexture . getFromCompound ( stack . getTagCompound ( ) ) ; tooltip . add ( Translator . translateToLocal ( \"tile.for.ffarm.material.tooltip\" ) + texture . getFormatting ( ) + TextFormatting . ITALIC + \" \" + texture . getName ( ) ) ; } else { ItemTooltipUtil . addShiftInformation ( stack , player , tooltip , advanced ) ; } }", "import de . fraunhofer . aisec . cpg . frontends . java . JavaLanguageFrontend ; import de . fraunhofer . aisec . cpg . graph . type . * ; import de . fraunhofer . aisec . cpg . helpers . Util ;", "public static double get ( MetricKey < ASTMethodOrConstructorDeclaration > key , ASTAnyTypeDeclaration node , ResultOption option ) { }", "ApplicationManager . registerApplication ( new ResourceLocation ( Reference . MOD_ID , \"text_area\" ) , ApplicationTextArea . class ) ; ApplicationManager . registerApplication ( new ResourceLocation ( Reference . MOD_ID , \"test\" ) , ApplicationTest . class ) ;", "public EventTypeValidator getValidator ( final String name ) throws ExecutionException { return validatorCache . get ( name ) ; } public void created ( final String name ) throws Exception { try { final String path = getZNodePath ( name ) ; zkClient . create ( ) . creatingParentsIfNeeded ( ) . withMode ( CreateMode . PERSISTENT ) . forPath ( path , new byte [ 0 ] ) ; } catch ( KeeperException . NodeExistsException e ) { } }", "* statistic on a page . It will be reset after calling * { @ code writePageHeaderAndDataIntoBuff ( ) }", "import com . scottlogic . deg . generator . walker . CartesianProductDecisionTreeWalker ; import org . junit . Assert ;", "", "routingParametersType = GraphQLObjectType . newObject ( ) . name ( \"RoutingParameters\" ) . description ( \"The default parameters used in travel searches.\" ) . field ( GraphQLFieldDefinition . newFieldDefinition ( ) . name ( \"walkSpeed\" ) . description ( \"Max walk speed along streets, in meters per second\" ) . type ( Scalars . GraphQLFloat ) . dataFetcher ( environment -> ( ( RoutingRequest ) environment . getSource ( ) ) . walkSpeed ) . build ( ) ) . field ( GraphQLFieldDefinition . newFieldDefinition ( ) . name ( \"bikeSpeed\" ) . description ( \"Max bike speed along streets, in meters per second\" ) . type ( Scalars . GraphQLFloat ) . dataFetcher ( environment -> ( ( RoutingRequest ) environment . getSource ( ) ) . bikeSpeed ) . build ( ) ) . field ( GraphQLFieldDefinition . newFieldDefinition ( ) . name ( \"carSpeed\" ) . description ( \"Max car speed along streets, in meters per second\" ) . type ( Scalars . GraphQLFloat ) . dataFetcher ( environment -> ( ( RoutingRequest ) environment . getSource ( ) ) . carSpeed ) . build ( ) ) . field ( GraphQLFieldDefinition . newFieldDefinition ( ) . name ( \"maxWalkDistance\" ) . description ( \"The maximum distance (in meters) the user is willing to walk for access/egress legs.\" ) . type ( Scalars . GraphQLFloat ) . dataFetcher ( environment -> ( ( RoutingRequest ) environment . getSource ( ) ) . maxWalkDistance ) . build ( ) ) . field ( GraphQLFieldDefinition . newFieldDefinition ( ) . name ( \"maxTransferWalkDistance\" ) . description ( \"The maximum distance (in meters) the user is willing to walk for transfer legs.\" ) . type ( Scalars . GraphQLFloat ) . dataFetcher ( environment -> ( ( RoutingRequest ) environment . maxTransferWalkDistance )", "protected String getCssClass ( final String name ) { var computedCssClass = \"fa fa-lock\" ; }", "return \"VideoJSONImpl{\" + \"id='\" + id + '\\'' + \", from=\" + from + \", tags=\" + tags + \", name='\" + name + '\\'' + \", description='\" + description + '\\'' + \", picture=\" + picture + \", embedHtml='\" + embedHtml + '\\'' + \", format=\" + format + \", icon=\" + icon + \", source=\" + source + \", createdTime=\" + createdTime + \", updatedTime=\" + updatedTime + \", comments=\" + comments + \", link=\" + link + '}' ;", "import ai . labs . models . Context ; import ai . labs . memory . IMemoryItemConverter ;", "boolean ignoreWAChats = false ; HashMap < String , String > ufdrPathToUfedId = new HashMap < > ( ) ;", "", "import javax . enterprise . inject . Produces ;", "import de . metas . product . IProductDAO ; import de . metas . product . ProductId ; import de . metas . util . Check ;", "private static final int [ ] MAX_SUPPORTED_VERSION = { 1 , 2 } ;", "( ( ViewGroup ) realView ) . addView ( child , - 1 , params ) ; addedChild ( child ) ;", "import org . apache . tools . zip . ZipEntry ; import org . apache . tools . zip . ZipFile ; import org . jenkinsci . remoting . RoleChecker ; import org . jenkinsci . remoting . RoleSensitive ;", "public String getWidgetClass ( ) { return getDefinition ( ) . getDefaultWidgetClass ( ) ; } public List getCriticalPath ( ) { return context . getCriticalPath ( ) ; } public void updateCompletion ( String progressType ) { getTaskList ( ) . updateCompletion ( progressType ) ; }", "setState ( 350 ) ;", "ObjectMapper mapper = jsonMapperBuilder ( ) . activateDefaultTypingAsProperty ( NoCheckSubTypeValidator . instance , DefaultTyping . OBJECT_AND_NON_CONCRETE ,", "setState ( 884 ) ;", "@ Override public ObjectAdapter realTargetAdapter ( final ObjectAdapter targetAdapter ) { return targetAdapter ; }", "import net . minecraft . util . Identifier ; import net . minecraft . util . registry . Registry ; import net . minecraft . util . registry . RegistryKey ;", "return singleRunner . run ( context", "", "return ( TemporalReferencedLegacyObservation ) getValueCriteriaFor ( request , procedure , observableProperty , featureOfInterest , temporalFilterCriterion , ExtendedIndeterminateTime . latest , session ) . uniqueResult ( ) ;", "Utils . toggleRoot ( ( ( CompoundButton ) toggle ) . isChecked ( ) ) ; new updateUI ( ) . execute ( ) ; } ) ; autoRootToggle . setOnClickListener ( toggle -> { ToggleAutoRoot ( autoRootToggle . isChecked ( ) ) ; new updateUI ( ) . execute ( ) ;", "Integer testCancelID = ( ( Alert ) msg ) . getCancelID ( ) ; Image alertIcon = ( ( Alert ) msg ) . getAlertIcon ( ) ;", "return Response . ok ( ReflectionUtil . getSubTypes ( Predicate . class ) ) . header ( GAFFER_MEDIA_TYPE_HEADER , GAFFER_MEDIA_TYPE ) . build ( ) ;", "@ Timed public Response modifyDatastreams ( @ PathParam ( \"path\" ) final List < PathSegment > pathList , @ QueryParam ( \"delete\" )", "import com . fasterxml . jackson . databind . DeserializationContext ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import com . fasterxml . jackson . databind . deser . std . StdDeserializer ; import com . fasterxml . jackson . databind . jsontype . TypeSerializer ; import com . fasterxml . jackson . databind . ser . std . StdSerializer ;", "import org . nutz . json . impl . JsonEntityFieldMakerImpl ;", "* Send a post request with header values \"scenario\" : \"positive\" , \"value\" : 0.07 or \"scenario\" : \"negative\" , \"value\" : - 3.0", "public static final Pattern NEW_PATCHSET = Pattern . compile ( \"^\" + REFS_CHANGES + \"(?:[0-9][0-9]/)?([1-9][0-9]*)(?:/[1-9][0-9]*)?$\" ) ;", "if ( jj_3R_955 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_956 ( ) ) return true ; }", "import org . teavm . dom . typedarrays . ArrayBuffer ; import org . teavm . dom . typedarrays . Int8Array ; import org . teavm . jso . JSConstructor ;", "if ( settings . isAllowEditing ( ) && ! isEdited ) { editImage ( call , bitmap , fileToSavePath , u , bitmapOutputStream ) ; return ; }", "default : owner . sendMessage ( \"Nothing interesting happens\" ) ; } owner . sendStat ( 16 ) ; } private void handleBalanceOnEvent ( ) { switch ( object . getID ( ) ) { case 614 : if ( owner . getX ( ) == 601 ) { if ( owner . getY ( ) == 3557 ) { owner . sendMessage ( \"You balance on the slippery ledge\" ) ; if ( agilityFormulae ( 1 ) ) { owner . teleport ( 601 , 3563 , false ) ; owner . sendMessage ( \"and walk across.\" ) ; owner . increaseXP ( 16 , 90 ) ; } else { owner . teleport ( 597 , 3535 , false ) ; int damage = ( int ) ( owner . getCurStat ( 3 ) * 0.9 ) ; owner . setLastDamage ( damage ) ; owner . setCurStat ( 3 , owner . getCurStat ( 3 ) - damage ) ; owner . sendStat ( 3 ) ; owner . sendMessage ( \" and fall into the pit below!\" ) ; owner . informOfModifiedHits ( owner ) ; } } else if ( owner . getY ( ) == 3563 ) { owner . sendMessage ( \"You balance on the slippery log\" ) ; if ( agilityFormulae ( 1 ) ) { owner . teleport ( 598 , 458 , false ) ; owner . sendMessage ( \"and walk across.\" ) ; } else { int damage = ( int ) ( owner . getCurStat ( 3 ) - damage ) ; owner . sendStat ( 3 ) ; owner . sendStat ( 3 ) ; owner . sendStat ( 3 ) ; owner . sendMessage ( \"and fall into the pit below!\" ) ; owner . informOfModifiedHits ( owner ) ; owner . sendMessage ( \"and walk across\" ) ; owner . increaseXP ( 16 ,", "", "import com . cloud . network . dao . NetworkDetailsDao ;", "private void handleDeadMansSwitchMessage ( JsonNode message ) { try { String cancelTime = message . get ( \"cancelTime\" ) . asText ( ) ; if ( cancelTime . equals ( \"0\" ) ) { LOG . info ( \"Dead man's switch disabled\" ) ; dmsDisposable . dispose ( ) ; dmsDisposable = null ; dmsCancelTime = 0 ; } else { SimpleDateFormat sdf = new SimpleDateFormat ( BitmexMarketDataEvent . BITMEX_TIMESTAMP_FORMAT ) ; sdf . setTimeZone ( TimeZone . getTimeZone ( ZoneOffset . UTC ) ) ; long now = sdf . parse ( message . get ( \"now\" ) . asText ( ) ) . getTime ( ) ; dmsCancelTime = sdf . parse ( cancelTime ) . getTime ( ) ; } } catch ( ParseException e ) { LOG . error ( \"Error parsing deadman's confirmation \" ) ; } return ; }", "mode . updateTimeAccumulator ( getTime ( ) , startTime ) ;", "import org . eclipse . che . ide . util . browser . BrowserUtils ; import static org . eclipse . che . ide . part . perspectives . project . ProjectPerspective . PROJECT_PERSPECTIVE_ID ;", "import org . apache . cayenne . CayenneException ;", "restRequest . getMetricsTracker ( ) . injectMetrics ( adminMetrics . postBlobMetrics ) ;", "", "", "if ( struct . success != null ) { oprot . writeFieldBegin ( SUCCESS_FIELD_DESC ) ; oprot . writeString ( struct . success ) ; oprot . writeFieldEnd ( ) ; } if ( struct . e != null ) { oprot . writeFieldBegin ( E_FIELD_DESC ) ; struct . e . write ( oprot ) ; oprot . writeFieldEnd ( ) ; }", "import org . zanata . page . projectversion . VersionLanguagesPage ; import org . zanata . page . projectversion . versionsettings . VersionDocumentsTab ;", "final List < AbstractSMappedDocument > allDocumentOfTheList = documentHelper . getAllDocumentOfTheList ( processInstanceId , documentName ) ;", "import org . apache . sling . xss . XSSAPI ; import com . day . cq . wcm . api . WCMMode ;", "deleting ( tmp ) . delete ( ) ;", "setScene ( new Scene ( mainPane ) ) ; if ( QueleaProperties . get ( ) . getUseDarkTheme ( ) ) { scene . getStylesheets ( ) . add ( \"org/modena_dark.css\" ) ; } setScene ( scene ) ;", "{ return this . getFieldManager ( true ) ; } @ Override public FieldManager getFieldManager ( boolean cleanFieldManager ) { if ( fieldManager == null ) { fieldManager = new FieldManager ( entityConfiguration , getStandardEntityManager ( ) ) ; } return fieldManager ; }", "Mono < Void > add ( StreamMessageId id , K key , V value , int trimLen , boolean trimStrict ) ;", "if ( index . equalsIgnoreCase ( \"fuseticks\" ) ) { tnt . setFuseTicks ( Static . getInt32 ( specArray . get ( index , t ) , t ) ) ; }", "private ShareDialogFactory shareDialogFactory ; private PublishSubject < ShareEvent > sharePostPublishSubject ; private PublishRelay < View > loginPrompt ;", "import net . minecraft . util . ActionResult ; import net . minecraft . util . ActionResultType ; import net . minecraft . util . Direction ; import net . minecraft . util . Direction . Axis ; import net . minecraft . util . Hand ; import net . minecraft . util . math . BlockPos ; import net . minecraft . util . math . BlockRayTraceResult ; import net . minecraft . util . math . Vec3i ; import net . minecraft . util . text . ITextComponent ; import net . minecraft . util . text . StringTextComponent ; import net . minecraft . util . text . TextFormatting ; import net . minecraft . util . text . TranslationTextComponent ;", "public void handledPacketReceived ( SdlPacket packet ) { byte [ ] remainingBytes = processReceivedBytes ( receivedBytes , receivedBytesLength ) ; while ( remainingBytes != null ) { remainingBytes = processReceivedBytes ( remainingBytes , remainingBytes . length ) ; } } private byte [ ] processReceivedBytes ( byte [ ] receivedBytes , int receivedBytesLength ) { int receivedBytesReadPos = 0 ; }", "", "private void renderFaces ( Tessellator tessellator , final BufferBuilder buffer ,", "String fd = String . valueOf ( HelperFunctions . parseLong ( eventData . get ( AuditEventReader . ARG0 ) , - 1L ) ) ; FileDescriptor closedFileDescriptor = processManager . removeFd ( pid , fd ) ;", "return promoteNumeric ( from0 , from1 , true ) ;", "graphicState . setPattern ( this . getPattern ( ) ) ; graphicState . setRenderingMode ( this . getRenderingMode ( ) ) ; graphicState . setFont ( this . getFont ( ) ) ;", "public void createSchema ( Create_schema_statementContext ctx ) { String name = ctx . name . getText ( ) ; if ( name != null ) { fillObjDefinition ( null , name , DbObjType . SCHEMA , ctx . name . getStart ( ) . getStartIndex ( ) , 0 , ctx . name . getStart ( ) . getLine ( ) ) ; } }", "@ ContextConfiguration ( locations = { \"/WEB-INF/applicationContext.xml\" } , loader = MockTdsContextLoader . class ) @ Category ( NeedsContentRoot . class )", "customizers . add ( new NamingStrategiesHibernatePropertiesCustomizer ( physicalNamingStrategy , implicitNamingStrategy ) ) ;", "import com . metamx . druid . concurrent . Execs ; import com . metamx . druid . guice . ManageLifecycle ; import com . metamx . druid . partition . PartitionChunk ;", "String isoPath = null ; VirtualMachineTemplate template = _templateDao . findById ( vm . getIsoId ( ) ) ; if ( template == null || template . getFormat ( ) != ImageFormat . ISO ) { throw new CloudRuntimeException ( \"Can not find ISO in vm_template table for id \" + vm . getIsoId ( ) ) ; } Pair < String , String > isoPathPair = _storageMgr . getAbsoluteIsoPath ( template . getId ( ) , vm . getDataCenterIdToDeployIn ( ) ) ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "if ( _transportConfig . getTransportType ( ) . equals ( TransportType . MULTIPLEX ) ) { this . sdlSession = new SdlSession2 ( _interfaceBroker , ( MultiplexTransportConfig ) _transportConfig ) ; } else { this . sdlSession = SdlSession . createSession ( _wiproVersion , _interfaceBroker , _transportConfig ) ; }", "Set < String > preferred = Arrays . stream ( StringUtils . split ( preferredVolumes , ',' ) ) . map ( String :: trim ) . collect ( Collectors . toSet ( ) ) ; if ( preferred . isEmpty ( ) ) { String msg = \"No volumes could be parsed from '\" + property + \"', which had a value of '\" + preferredVolumes + \"'\" ; throw new VolumeChooserException ( msg ) ; } Set < String > optionsList = Arrays . stream ( options ) . collect ( Collectors . toSet ( ) ) ; if ( ! preferred . stream ( ) . allMatch ( optionsList :: contains ) ) { String msg = \"Some volumes in \" + preferred + \" are not valid volumes from \" + optionsList ; throw new VolumeChooserException ( msg ) ; }", "TimePageLink pageLink = createTimePageLink ( pageSize , page , textSearch , sortProperty , sortOrder , startTime , endTime ) ; List < ActionType > actionTypes = parseActionTypesStr ( actionTypesStr ) ; return checkNotNull ( auditLogService . findAuditLogsByTenantIdAndEntityId ( tenantId , EntityIdFactory . getByTypeAndId ( strEntityType , strEntityId ) , actionTypes , pageLink ) ) ;", "import org . hl7 . fhir . r4 . model . ImagingStudy . ImagingStudyStatus ;", "private Thread rendererThread ; protected int targetFps ; protected int width , height ; protected Graphics graphics ; protected JFrame frame ; protected BufferedImage image ; protected boolean dying = false ; protected static final int DECODER_BUFFER_SIZE = 92 * 1024 ; protected ByteBuffer decoderBuffer ; public static final int WAIT_CEILING_MS = 8 ; private static final int REFERENCE_PIXEL = 0x01020304 ; public void setup ( int width , int height , int redrawRate , Object renderTarget , int drFlags ) { this . targetFps = redrawRate ; this . width = width ; this . height = height ; int avcFlags = AvcDecoder . BILINEAR_FILTERING | AvcDecoder . LOW_LATENCY_DECODE ; int threadCount = 1 ; GraphicsConfiguration graphicsConfiguration = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) . getDefaultScreenDevice ( ) . getDefaultConfiguration ( ) ; BufferedImage optimalImage = graphicsConfiguration . createCompatibleImage ( width , height , Transparency . OPAQUE ) ; ColorModel optimalCm = optimalImage . getColorModel ( ) ; int redIndex = optimalCm . getRed ( REFERENCE_PIXEL ) ; int greenIndex = optimalCm . getGreen ( REFERENCE_PIXEL ) ; int blueIndex = optimalCm . getBlue ( REFERENCE_PIXEL ) ; if ( optimalCm . hasAlpha ( ) ) { int alphaIndex = optimalCm . getAlpha ( REFERENCE_PIXEL ) ; if ( optimalCm . hasAlpha ( ) ; if ( optimalCm . hasAlpha ( ) ) { int alphaIndex = optimalCm . getAlpha ( REFERENCE_PIXEL ) ; if ( optimalCm . getAlpha ( REFERENCE_PIXEL ) ; if ( optimalCm . getAlpha ( REFERENCE_PIXEL ) ; if ( optimalCm . hasAlpha ( ) ) { int alphaIndex = optimalCm . get", "import android . content . Intent ; import android . media . MediaScannerConnection ;", "WikiPage testPage = WikiPageUtil . addPage ( root , PathParser . parse ( \"TestPage\" ) , \"!define TEST_SYSTEM {system}\\n\" + \"!define TEST_RUNNER {runner}\\n\" ) ; String testSystemName = TestSystem . getDescriptor ( testPage , false ) . getTestSystemName ( ) ;", "* Get a copy of the current stack that is being displayed *", "import com . actionbarsherlock . app . ActionBar ; import com . battlelancer . seriesguide . beta . R ;", "import java . io . PrintWriter ; import java . io . StringWriter ;", "Log . info ( \">>> Running testLocalCopyWrapperWithSaveAndLcwClose\" ) ; MyHandler listener = new MyHandler ( ) ;", "final String name = p . currentName ( ) ;", "import android . text . TextUtils ;", "@ RequestMapping ( value = \"/productProgramCategoryTree/{programId}\" , method = GET , headers = BaseController . ACCEPT_JSON ) public ResponseEntity < OpenLmisResponse > getProductCategoryProductByProgramId ( @ PathVariable ( \"programId\" ) int programId ) { List < ProductCategoryProductTree > categoryProductTree = reportLookupService . getProductCategoryProductByProgramId ( programId ) ; return OpenLmisResponse . response ( \"productCategoryTree\" , categoryProductTree ) ; } @ RequestMapping ( value = \"/yearSchedulePeriod\" , method = GET , headers = BaseController . ACCEPT_JSON ) public ResponseEntity < OpenLmisResponse > getScheduleYearPeriod ( ) { List < YearSchedulePeriodTree > yearSchedulePeriodTree = reportLookupService . getYearSchedulePeriodTree ( ) ; return OpenLmisResponse . response ( \"yearSchedulePeriod\" , yearSchedulePeriodTree ) ; } @ RequestMapping ( value = \"/OrderFillRateSummary/program/{programId}/period/{periodId}/schedule/{scheduleId}/facilityTypeId/{facilityTypeId}/zone/{zoneId}/status/{status}/orderFillRateSummary\" , method = GET , headers = BaseController . ACCEPT_JSON ) public ResponseEntity < OpenLmisResponse > getOrderFillRateSummaryData ( @ PathVariable ( \"programId\" ) Long programId , @ PathVariable ( \"periodId\" ) Long periodId , @ PathVariable ( \"scheduleId\" ) Long scheduleId , @ PathVariable ( \"facilityTypeId\" ) Long facilityTypeId , @ PathVariable ( \"zoneId\" ) Long zoneId , @ PathVariable ( \"status\" ) String status , HttpServletRequest request ) { List < OrderFillRateSummaryReport > orderFillRateReportSummaryList = reportLookupService . getOrderFillRateSummary ( programId , periodId , scheduleId , facilityTypeId , loggedInUserId ( request ) , zoneId , status ) ; return OpenLmisResponse . response (", "OpenCGAResult < File > nameDataResult = fileDBAdaptor . get ( studyUid , queryCopy , queryOptions , user ) ; if ( nameDataResult . getNumResults ( ) > 1 ) { }", "private class DataTransfer implements Runnable { final DatanodeInfo [ ] targets ; final ExtendedBlock b ; final BlockConstructionStage stage ; final private DatanodeRegistration bpReg ; final String clientname ; }", "import org . springframework . cloud . sleuth . baggage . TraceBaggageConfiguration ; import org . springframework . cloud . sleuth . log . SleuthLogAutoConfiguration ;", "ResponseEntity < List < Pet > > findPetsByTags ( @ NotNull @ ApiParam ( value = \"Tags to filter by\" , required = true ) @ RequestParam ( value = \"tags\" , required = true ) List < String > tags , @ RequestHeader ( value = \"Accept\" , required = false ) String accept ) throws Exception ;", "", "CheckTypeVisitor visitor = new CheckTypeVisitor . Builder ( myState , context , myErrorReporter ) . instancePool ( EmptyInstancePool . INSTANCE ) . build ( ) ;", "", "private String GenerateRDF ( InputStream dataStream , String r2rmlURI , String dataType , boolean refreshR2RML ) throws KarmaException , JSONException , IOException { initialization ( ) ; }", "TestShardRouting . newShardRouting ( initShard . index ( ) , initShard . id ( ) , initShard . currentNodeId ( ) , initShard . relocatingNodeId ( ) , initShard . primaryTerm ( ) , initShard . primary ( ) , ShardRoutingState . INITIALIZING , initShard . allocationId ( ) ) ) , false ) ;", "import static com . jetbrains . jetpad . vclang . term . definition . BaseDefinition . Helper . toNamespaceMember ; import static com . jetbrains . jetpad . vclang . term . context . param . DependentLink . Helper . toSubstitution ;", "@ Inject @ ConfigDir ( sharedRoot = false ) private Path configPath ; public static final String CONFIG_HEADER = \"3.0.0\\n\"", "externalFileHintLabel . setText ( Bundle . CompareSnapshotsHelper_InvalidFileMsg ( ) ) ;", "import net . minecraft . client . renderer . Rectangle2d ; import net . minecraft . client . renderer . BufferBuilder ;", "* Patch true Boolean value in request returns 302. This request should not be automatically redirected , but should return the received 302 to the caller for evaluation", "List < Long > resultsTwo = runQueries ( QueryFactory . createSPARQLs_two_concepts_opt ( Settings . dbType ) ) ;", "int columnIdx = addMetaDataHeaders ( baseSheet , ! separateSheetsForRepeatableGroups ) ;", "final File createdFile = app . get ( File . class , newFileUuid ) ; String type = createdFile . getType ( ) ; boolean isImage = createdFile instanceof Image ; boolean isThumbnail = isImage && ( ( Image ) createdFile ) . isThumbnail ( ) ;", "@ Overwrite public static void handlePostChangeDimensionEvent ( EntityPlayerMP playerIn , WorldServer fromWorld , WorldServer toWorld ) { net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . firePlayerChangedDimensionEvent ( playerIn , fromWorld . provider . getDimension ( ) , toWorld . provider . getDimension ( ) ) ; } @ Overwrite public static boolean canDoLightning ( WorldProvider provider , net . minecraft . world . chunk . Chunk chunk ) { return provider . canDoLightning ( chunk ) ; } @ Overwrite public static boolean canDoRainSnowIce ( WorldProvider provider , net . minecraft . world . chunk . Chunk chunk ) { return provider . canDoRainSnowIce ( chunk ) ; }", "", "prop . setComment ( \"Should normally be true. If you set this to false, in a modpack with other mods with the same metals, players may be able to craft advanced GC items without travelling to Moon, Mars, Asteroids etc.\" ) ; prop . setLanguageKey ( \"gc.configgui.disable_ore_dict_space_metals\" ) . setRequiresMcRestart ( true ) ;", "( CodeList . class . isAssignableFrom ( type ) ? \"code\" : \"metadata\" ) + '.' + identifier ;", "if ( settings . isValidationEnabled ( ) ) { validator . validate ( k ) ; }", "public void restart ( RapidoidConnection conn ) { restarting . add ( conn ) ; } @ Override protected long getSelectorTimeout ( ) { return selectorTimeout ; } public SSLContext sslContext ( ) { return sslContext ; }", "Importer i = new Importer ( null , null , null , null , null , null , null , null , null , null , config , null , null , null , i18n , null ) ;", "private JSONObject corsConfiguration ; private String swagger ; private String environment ;", "private void transferToTextFlow ( HTextFlow from , TextFlow to )", "int mappedCommandLevel = foundCommandResult . getCommandDescription ( ) . getLabelCount ( ) ; if ( mappedCommandLevel == 1 ) { commandService . outputHelp ( sender , result , HelpProvider . SHOW_CHILDREN ) ; } else { commandService . outputHelp ( sender , result , HelpProvider . ALL_OPTIONS ) ; }", "", "import com . wikia . webdriver . Common . ContentPatterns . URLsContent ; import com . wikia . webdriver . Common . ContentPatterns . XSSContent ; import com . wikia . webdriver . Common . Core . Assertion ; import com . wikia . webdriver . Common . Core . CommonExpectedConditions ; import com . wikia . webdriver . Common . Core . Global ; import com . wikia . webdriver . Common . Core . Purge . PurgeMethod ; import com . wikia . webdriver . Common . Core . URLBuilder . UrlBuilder ; import com . wikia . webdriver . Common . Logging . PageObjectLogging ;", "String segment = dwpt . getSegment ( ) ;", "public static final String BATCH_SAVEPOINT = \"BATCH_SAVEPOINT\" ;", "private final AtomicBoolean completedEventMapping = new AtomicBoolean ( ) ;", "OmObservableProperty omObservableProperty = createObservableProperty ( hObservation . getObservableProperty ( ) ) ;", ". doFinally ( this :: allowDownwardFocusScroll ) . subscribe ( ( @ io . reactivex . annotations . NonNull ListExtractor . InfoItemsPage InfoItemsPage ) -> {", "", "private boolean jj_3R_930 ( ) { if ( jj_3R_964 ( ) ) return true ; return false ; } private boolean jj_3R_929 ( ) { if ( jj_3R_308 ( ) ) return true ; }", "import android . text . TextUtils ; import android . content . SharedPreferences ;", "import static java . util . Base64 . getDecoder ; import static java . util . Base64 . getEncoder ; public class SimpleListConnection < T > implements DataFetcher < Connection < T > > { }", "public TableView getDistinctView ( long columnIndex ) { return new TableView ( nativeGetDistinctView ( nativePtr , columnIndex ) , immutable ) ; }", "* Get an dictionary of array of strings { \"0\" : [ \"1\" , \"2\" , \"3\" ] , \"1\" : null , \"2\" : [ \"7\" , \"8\" , \"9\" ] }", "private final Rectangle subsetRegion ; private final JP2ImageFile jp2ImageFile ; private final int tileStartX ; private final int tileStartY ; private int numTilesX ; private int numTilesY ; private final Path localCacheFolder ;", "file12882 ) ; queryResult = query ( query , options ) ;", "\"@from(table = 'rdbms' , datasource.name = '\" + RDBMSTestConstants . DATA_SOURCE_NAME + \"'\" + \" , table.name = '\" + RDBMSTestConstants . TABLE_NAME + \"') \" +", "CliResult result = LegacyCliAdapter . writeToOutputFile ( config , outputPath ) ;", "private final List < AttributeProviderFactory > attributeProviderFactories ; private final List < NodeRendererFactory < HtmlNodeRendererContext > > nodeRendererFactories ;", "private void setValueProxyOnResult ( final RefDataStore refDataStore , final String mapName , final String keyName , final ReferenceDataResult result , final RefStreamDefinition refStreamDefinition ) { final MapDefinition mapDefinition = new MapDefinition ( refStreamDefinition , mapName ) ; Boolean doesMapDefExist = refDataLoaderHolder . isMapDefinitionAvailable ( mapDefinition ) ; if ( doesMapDefExist == null ) { doesMapDefExist = refDataStore . exists ( mapDefinition ) ; refDataLoaderHolder . markMapDefinitionAvailablility ( mapDefinition , doesMapDefExist ) ; } if ( doesMapDefExist ) { final RefDataValueProxy refDataValueProxy = refDataStore . getValueProxy ( mapDefinition , keyName ) ; result . setRefDataValueProxy ( refDataValueProxy ) ; } else { result . setRefDataValueProxy ( null ) ; } } private String getPipelineVersion ( final PipelineReference pipelineReference ) { return refDataLoaderHolder . getPipelineVersion ( pipelineReference , pipelineStore ) ; } private void loadContextData ( final Data stream , final StreamSourceInputStream contextStream , final DocRef contextPipeline , final RefStreamDefinition refStreamDefinition , final RefDataStore refDataStore ) { }", "private void prettyPrintEliminatedReferences ( List < ? extends Concrete . ReferenceExpression > references , boolean isData ) { }", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "if ( StringUtils . isNotEmpty ( newPropertyDefinition . getDefault ( ) ) ) { DeploymentSetup [ ] deploymentSetups = deploymentSetupService . getByTopologyId ( topologyId ) ; for ( DeploymentSetup deploymentSetup : deploymentSetups ) { if ( deploymentSetup . getInputProperties ( ) == null ) { deploymentSetup . setInputProperties ( Maps . < String , String > newHashMap ( ) ) ; } deploymentSetup . getInputProperties ( ) . put ( inputId , newPropertyDefinition . getDefault ( ) ) ; alienDAO . save ( deploymentSetup ) ; } } topologyServiceCore . updateSubstitutionType ( topology ) ;", "this . executor = new BlockingSubmitThreadPoolExecutor ( threads , queue , UPLOAD_TIMEOUT ) ; double throttleLimit = config . getUploadThrottle ( ) ; rateLimiter = RateLimiter . create ( throttleLimit < 1 ? Double . MAX_VALUE : throttleLimit ) ;", "public < K > void insertMulti ( Map < K , String > keyValues , Serializer < K > keySerializer ) { Mutator < K > m = createMutator ( keyspace , keySerializer ) ; for ( Map . Entry < K , String > keyValue : keyValues . entrySet ( ) ) { } }", "conf . getLong ( DFS_BLOCKREPORT_INTERVAL_MSEC_KEY , BLOCKREPORT_INTERVAL ) ; this . initialBlockReportDelay = conf . getLong ( DFS_BLOCKREPORT_INITIAL_DELAY_KEY ,", "Manager . initializeProtocols ( ) ;", "public static final EntityType < MoonVillagerEntity > MOON_VILLAGER = Registry . register ( Registry . ENTITY_TYPE , new Identifier ( Constants . MOD_ID , Constants . Entities . MOON_VILLAGER ) , FabricEntityTypeBuilder . create ( SpawnGroup . CREATURE , ( EntityType . EntityFactory < MoonVillagerEntity > ) MoonVillagerEntity :: new ) . dimensions ( EntityDimensions . fixed ( 0.6F , 2.4F ) ) . build ( ) ) ; public static final EntityType < EvolvedZombieEntity > EVOLVED_ZOMBIE = Registry . register ( Registry . ENTITY_TYPE , new Identifier ( Constants . MOD_ID , Constants . Entities . EVOLVED_ZOMBIE ) , FabricEntityTypeBuilder . create ( SpawnGroup . MONSTER , EvolvedZombieEntity :: new ) . dimensions ( EntityDimensions . fixed ( 0.6F , 1.95F ) ) . build ( ) ) ; public static final EntityType < EvolvedCreeperEntity > EVOLVED_CREEPER = Registry . register ( Registry . ENTITY_TYPE , new Identifier ( Constants . MOD_ID , Constants . Entities . EVOLVED_CREEPER ) , FabricEntityTypeBuilder . create ( EntityCategory . MONSTER , EvolvedCreeperEntity :: new ) . dimensions ( EntityDimensions . changing ( 0.65F , 1.8F ) ) . build ( ) ; public static final EntityType < BubbleEntity > BUBBLE = FabricEntityTypeBuilder . create ( EntityCategory . MISC , BubbleEntity :: new ) . setImmuneToFire ( ) . size ( EntityDimensions . changing ( 0.65F , 1.8F ) . build ( ) . disableSaving ( ) . disableSummon ( ) . build ( ) ;", "this . generatorService = Objects . requireNonNull ( generatorService , \"generatorService is NULL\" ) ; this . transactionTypeFactory = Objects . requireNonNull ( transactionTypeFactory , \"Transaction type factory is NULL\" ) ;", "@ Override public void shouldShallowCloneOperation ( ) { final Entity input = new Entity . Builder ( ) . group ( TestGroups . ENTITY ) . property ( \"property\" , 1 ) . build ( ) ; final ElementPropertyComparator comparator = new ElementPropertyComparator ( ) ; final Min min = new Min . Builder ( ) . input ( input ) . comparators ( comparator ) . build ( ) ; Min clone = ( Min ) min . shallowClone ( ) ; assertEquals ( input , clone . getInput ( ) . iterator ( ) . next ( ) ) ; assertEquals ( comparator , clone . getComparators ( ) . iterator ( ) . next ( ) ) ; } protected Min getTestObject ( ) { return new Min ( ) ; }", "", "final Short CONFLICT = 0 ; final Map < Short , Short > map = new TreeMap < Short , Short > ( ) ;", "con . prepareStatement ( \"SELECT FILE_NAME FROM account_patch_reviews \" + \"WHERE account_id = ? AND change_id = ? AND patch_set_id = ?\" ) ) {", "* @ param operation the operation * @ return A new { @ link IteratorSetting } for an Iterator capable of filtering { @ link gaffer . data . element . Element } s based on the * options defined in the gaffer . accumulostore . operation", "import mil . nga . giat . geowave . core . index . sfc . xz . XZHierarchicalIndexFactory ; import mil . nga . giat . geowave . core . store . cli . remote . options . IndexPluginOptions . BaseIndexBuilder ;", "* Long running put request , service returns a 201 to the initial request with no payload", "", "public Array < V > reverse ( ) { return this ; }", "import org . opentripplanner . gbannotation . BikeRentalStationUnlinked ; import org . opentripplanner . gbannotation . GraphBuilderAnnotation ; import org . opentripplanner . gbannotation . Graphwide ; import org . opentripplanner . gbannotation . LevelAmbiguous ; import org . opentripplanner . gbannotation . ParkAndRideUnlinked ; import org . opentripplanner . gbannotation . StreetCarSpeedZero ; import org . opentripplanner . gbannotation . TurnRestrictionBad ; import org . opentripplanner . gbannotation . TurnRestrictionException ; import org . opentripplanner . gbannotation . TurnRestrictionUnknown ;", "List < Substitution < Variable , Term > > searchResults = Lists . newArrayList ( ) ;", "String VERSION = \"\" ;", "import io . undertow . util . StatusCodes ; import io . undertow . util . ConduitFactory ;", "AccountReport accountReport = getAccountReport ( accountId , dateFrom , dateTo , transactionId , psuInvolved , withBalance ) ; return ResponseObject . builder ( ) . body ( getReportAccordingMaxSize ( accountReport , accountId ) ) . build ( ) ;", "* < div class = \"warning\" > < b > Upcoming API change < / b > < br > * As of ISO 19115 : 2014 , { @ code URI } is replaced by { @ link OnlineResource } . * This change may be applied in GeoAPI 4.0 . * < / div > * * @ param newValue the new graphics file .", "int slot = InventoryUtils . inventoryHasItem ( container . getInventory ( ) , getItem ( ) . getTypeId ( ) , getItem ( ) . getDurability ( ) ) ;", "SearchResult < WorkflowSummary > searchWorkflows ( int start , @ Max ( value = 5_000 , message = \"Cannot return more than {value} workflows. Please use pagination.\" ) int size , String sort , String freeText , String query ) ;", "", "setState ( 786 ) ; match ( T__26 ) ; setState ( 787 ) ;", "setState ( 588 ) ;", "sParams = mapParams ( CommonParams . QT , \"/sql\" , \"aggregationMode\" , \"facet\" , \"stmt\" , \"select distinct str_s, field_i from collection1 where str_s = 'a'\" ) ;", "public static final TipoEvento REMUNERACAO_RGPS = S1200 ; public static final TipoEvento TSV_TERMINO = S2399 ;", "{ setUpDatabase ( ) ; initAfterLifecycleStart ( ) ; } @ After public void cleanUp ( ) { lifecycle . stop ( ) ; db . close ( ) ; } protected void setUpDatabase ( ) throws Exception { }", "public ShortUrlStatistics getDailyStatistics ( ShortUrl shortUrl , int maxValues ) throws IOException { }", "DefinitionBuilder . Data setTrunc = new DefinitionBuilder . Data ( PRELUDE , \"TrS\" , Abstract . Binding . DEFAULT_PRECEDENCE , new SortMax ( Sort . SetOfLevel ( truncSLp ) ) , truncSParameter , Arrays . asList ( ( Binding ) truncSLp . getVar ( ) , ( Binding ) truncSLh . getVar ( ) ) ) ;", "@ Nonnull", "public String getUser ( ) { return this . user ; } public void setUser ( final String user ) throws GenieException { if ( StringUtils . isBlank ( user ) ) { throw new GenieException ( HttpURLConnection . HTTP_BAD_REQUEST , \"No user entered.\" ) ; } this . user = user ; }", "{ closePool ( ) ; pool = null ; } @ Override public PRIORITY getPriority ( ) { return PRIORITY . FIRST ; } Orient . instance ( ) . removeDbLifecycleListener ( this ) ;", "* Get null as date - this should throw or be unusable on the client side , depending on date representation", "final Builder updatedMember = SnomedRefSetMemberIndexEntry . builder ( existingMember ) ; ensureMemberActive ( context , existingMember , updatedMember ) ; if ( changed ) { updateModule ( context , existingMember , moduleIdFunction . apply ( inactivatable ) ) ; unsetEffectiveTime ( existingMember ) ; }", "import com . fasterxml . jackson . annotation . JsonIgnore ; import org . apache . commons . lang3 . StringUtils ;", "if ( hasCustomInventoryName ( ) ) tag . setString ( \"CustomName\" , customName ) ;", "import static org . thingsboard . server . dao . service . Validator . validateId ; import java . util . List ; import com . google . common . base . Function ; import com . google . common . util . concurrent . Futures ; import com . google . common . util . concurrent . ListenableFuture ;", "jj_la1 [ 95 ] = jj_gen ;", "public InverseDynamicsCommand < ? > getInverseDynamicsCommand ( ) { return stateMachine . getCurrentState ( ) . getInverseDynamicsCommand ( ) ; } public FeedbackControlCommand < ? > getFeedbackControlCommand ( ) { return stateMachine . getCurrentState ( ) . getFeedbackControlCommand ( ) ; } public FeedbackControlCommandList createFeedbackControlTemplate ( ) { FeedbackControlCommandList ret = new FeedbackControlCommandList ( ) ; for ( HandControlMode mode : HandControlMode . values ( ) ) { HandControlState state = stateMachine . getState ( mode ) ; if ( state != null && state . getFeedbackControlCommand ( ) != null ) ret . addCommand ( state . getFeedbackControlCommand ( ) ) ; } return ret ; } public void setEnableCompliantControl ( boolean enable , boolean [ ] enableLinearCompliance , boolean [ ] enableAngularCompliance , Vector3d desiredForce , Vector3d desiredTorque , double forceDeadzone , double torqueDeadzone )", "@ SuppressWarnings ( \"unchecked\" ) @ UiThread private void collapseViews ( @ NonNull ExpandableWrapper < P , C > parentWrapper , int flatParentPosition ) { }", "WithdrawBalanceActuator actuator = new WithdrawBalanceActuator ( ) ; actuator . setChainBaseManager ( dbManager . getChainBaseManager ( ) ) . setAny ( getContract ( OWNER_ADDRESS ) ) ;", "assertNull ( patientInfo . getDateOfBirth ( ) ) ; var renderedStrings = getRenderedStrings ( patientInfo , \"PID-7\" , 1 ) ;", "public void setSubmitTime ( long submitTime ) { this . submitTime = submitTime ; }", "", "import org . junit . runner . notification . Failure ; import org . thaliproject . p2p . btconnectorlib . PeerProperties ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ;", "import com . microsoft . azure . management . resources . fluentcore . utils . Utils ; import com . microsoft . rest . ServiceCall ; import com . microsoft . rest . ServiceCallback ; import com . microsoft . azure . management . resources . implementation . ResourceManager ;", "@ Test ( groups = { \"Toolbar\" } ) public class ShareToolbarTests extends NewTestTemplate { }", "", "\" @Pure\" , \" public static Class<Integer> fct() {\" ,", "import mekanism . client . render . tileentity . RenderThermalEvaporationController ;", "mPrefs = PreferenceManager . getDefaultSharedPreferences ( this ) ; mDefaultPostFontSize = mPrefs . getInt ( \"default_post_font_size\" , 15 ) ; mDefaultPostFontColor = mPrefs . getInt ( \"default_post_font_color\" , getResources ( ) . getColor ( R . color . default_post_font ) ) ; mPostList = ( ListView ) findViewById ( R . id . thread_posts ) ; mTitle = ( TextView ) findViewById ( R . id . title ) ; mNext = ( ImageButton ) findViewById ( R . id . next_page ) ; mReply = ( ImageButton ) findViewById ( R . id . reply ) ; mPageIndicator = ( RelativeLayout ) findViewById ( R . id . page_indicator ) ; mPageNumbers = ( TextView ) findViewById ( R . id . page_text ) ;", "", "import org . terasology . game . characters . events . DeathEvent ; import org . terasology . logic . health . DamageEvent ; import org . terasology . game . CoreRegistry ;", "private final Map < String , SosProcedureDescription < ? > > procedures = Maps . newHashMap ( ) ;", "Ambiguity result = new Ambiguity ( KSorts . K , new ArrayList < Term > ( ) ) ; for ( StateReturn stateReturn : s . getNtCall ( new NonTerminalCall . Key ( nt , position ) ) . exitStateReturns ) { }", "final TabControl . Tab tab = mTabControl . createNewTab ( closeOnExit , appId , urlData . mUrl ) ; sendAnimateFromOverview ( tab , true , urlData , null , delay , msg ) ; return tab ;", "ObjectAnimator oa = LauncherAnimUtils . ofViewAlphaAndScale ( mFolderIconImageView , 0 , 1.5f , 1.5f ) ; if ( Utilities . ATLEAST_LOLLIPOP ) { }", "@ Autowired private ResourceTransfer resourceTransfer ; @ Autowired private EndpointQueue endpointQueue ;", "import io . confluent . connect . jdbc . dialect . DatabaseDialect ; import io . confluent . connect . jdbc . dialect . DatabaseDialects ; import io . confluent . connect . jdbc . util . Version ;", "* scheduler . * @ warn exception SchedulerException description missing * * @ param triggerId the string that uniquely identifies the { @ code Trigger } to be removed * @ throws TriggerNotFoundException if there is no { @ code Trigger } that matches { @ code triggerId }", "import org . hl7 . fhir . r4 . model . Quantity ; import org . hl7 . fhir . r4 . model . Reference ; import org . hl7 . fhir . r4 . model . Resource ; import org . hl7 . fhir . r4 . model . ServiceRequest ; import org . hl7 . fhir . r4 . model . SimpleQuantity ; import org . hl7 . fhir . r4 . model . StringType ; import org . hl7 . fhir . r4 . model . SupplyDelivery ; import org . hl7 . fhir . r4 . model . SupplyDelivery . SupplyDeliveryStatus ; import org . hl7 . fhir . r4 . model . SupplyDelivery . SupplyDeliverySuppliedItemComponent ; import org . hl7 . fhir . r4 . model . Timing ;", "", "DefaultZoieVersionFactory defaultZoieVersionFactory = new DefaultZoieVersionFactory ( ) ; final ZoieSystem < IndexReader , String , DefaultZoieVersion > idxSystem = createZoie ( idxDir , true , 100 , defaultZoieVersionFactory ) ; for ( String bname : idxSystem . getStandardMBeanNames ( ) ) { registerMBean ( idxSystem . getStandardMBean ( bname ) , bname ) ; }", "import android . app . AlarmManager ;", "pageLink = new PageLink ( 4 , 0 , title2 ) ; pageData = doGetTypedWithPageLink ( \"/api/tenant/devices?\" , new TypeReference < PageData < Device > > ( ) { } , pageLink ) ;", "import com . smartcodeltd . jenkinsci . plugins . buildmonitor . viewmodel . duration . HumanReadableDuration ; import hudson . model . * ; import hudson . scm . ChangeLogSet ;", "private String getFolderSizeHuman ( String path ) { File dir = new File ( path ) ; if ( dir . exists ( ) ) { long bytes = getFolderSize ( dir ) ; if ( bytes < 1024 ) return bytes + \" B\" ; int exp = ( int ) ( Math . log ( bytes ) / Math . log ( 1024 ) ) ; String pre = ( \"KMGTPE\" ) . charAt ( exp - 1 ) + \"\" ; return String . format ( \"%.1f %sB\" , bytes / Math . pow ( 1024 , exp ) , pre ) ; } return \"0 B\" ; } private long getFolderSize ( File dir ) { if ( dir . exists ( ) ) { long result = 0 ; File [ ] fileList = dir . listFiles ( ) ; for ( int i = 0 ; i < fileList . length ; i ++ ) { if ( fileList [ i ] . isDirectory ( ) ) { result += getFolderSize ( fileList [ i ] ) ; } else { result += fileList [ i ] . length ( ) ; } } return result ; } return 0 ; }", "DeploymentProperties2Yaml . class , Yaml2DeploymentProperties . class", "* Long running delete request , service returns a location header in the initial request . Subsequent calls to operation status do not contain location header .", "int currentMode = logic . isRequestingPartials ( ) . ordinal ( ) + 1 ; if ( currentMode >= SupplyMode . values ( ) . length ) { currentMode = 0 ; } logic . setRequestingPartials ( SupplyMode . values ( ) [ currentMode ] ) ; ( ( GuiButton ) buttonList . get ( 0 ) ) . displayString = SupplyMode . values ( ) [ currentMode ] . toString ( ) ; MainProxy . sendPacketToServer ( PacketHandler . getPacket ( SupplierPipeModePacket . class ) . setPosX ( logic . getX ( ) ) . setPosY ( logic . getY ( ) ) . setPosZ ( logic . getZ ( ) ) ) ;", "if ( context . global ( ) . krunOptions . experimental . statistics ) System . err . println ( \"[\" + visited . size ( ) + \"states, \" + 0 + \"steps, \" + stopwatch + \"]\" ) ;", "private static final Logger LOGGER = LoggerFactory . getLogger ( PipelineStreamProcessor . class ) ;", "case REWRITE_ENABLED : return isRewriteEnabled ( ) ; case MM_NEXT_WRITE_ID : return getMmNextWriteId ( ) ; case MM_WATERMARK_WRITE_ID : return getMmWatermarkWriteId ( ) ;", "rule ( \"pistonSerializationFix\" , \"fix\" , \"Fixes bug with piston serialization\" ) , rule ( \"reloadUpdateOrderFix\" , \"fix\" , \"Fixes reload update order for tile entities\" ) . extraInfo ( \"Fixes instant wires randomly breaking.\" , \"Effective after chunk reload.\" ) , rule ( \"leashFix\" , \"fix\" , \"Fixes to leashes.\" ) . choices ( \"false\" , \"false casual cool\" ) , rule ( \"disablePlayerCollision\" , \"creative\" , \"Disables player entity collision.\" ) ,", "if ( AnnotatedElementHelper . hasAnnotation ( cfg , \"c_dyn_connectors\" ) ) { int i = 0 ; }", ". found ( \"required class\" , \"required classes\" ) . items ( Style . QUOTE , filter ( onClasses , ClassNameFilter . PRESENT , classLoader ) ) ;", "public void invalidateCaches ( ) { registeredTextures . clear ( ) ; } public void invalidateCaches ( ) { wrappedModels . clear ( ) ; }", "", "this . severalEdit = new EnvironmentNode ( Type . SERVICE , new ServiceDescription ( ) , \"Services\" , null , Collections . emptyList ( ) , false , null , null , null , null , null , new ArrayList < > ( ) , null , null ) ;", "public Object visit ( ONestedProjection node , Object data ) ; public Object visit ( ONestedProjectionItem node , Object data ) ;", "final String mapName = \"mountain lake\" ;", "", "setState ( 593 ) ; ( ( MultiplicativeExprContext ) _localctx ) . main_expr = instanceOfExpr ( ) ; setState ( 598 ) ;", "", "Attribute targetAttr = dataService . getEntityType ( target ) . getAttribute ( targetAttribute ) ;", "", "", "import com . itextpdf . kernel . colors . ColorConstants ; import com . itextpdf . kernel . colors . DeviceGray ;", "", "* The sorting criterion of the list . * @ return The paginated list of descriptors of the command * @ throws org . bonitasoft . engine . session . InvalidSessionException * Generic exception thrown if API Session is invalid , e . g session has expired .", "import won . protocol . model . Need ;", "", "if ( telcoCursor == null || telcoCursor . isAfterLast ( ) ) { clearNotifications ( context , false ) ; }", "import org . junit . After ; import org . junit . Before ;", "", "new Handler ( ) . postDelayed ( new Runnable ( ) { @ Override public void run ( ) { if ( mShouldTimeout ) { handleError ( qrcode ) ; layoutDetailView ( ) ; } } } , 15000 ) ; ( ( QRReaderModule ) getNewModule ( ) ) . getModel ( ) . fetchSuggestedUrl ( this , qrcode . getId ( ) , handler ) ;", "Configuration conf = new Configuration ( ) ; conf . set ( \"fs.defaultFS\" , this . nameNodeURI ) ; FileSystem fs = FileSystem . get ( conf ) ; String rootDir = \"Projects\" ; String buildPath = File . separator + rootDir + File . separator + studyName ; Path build = new Path ( buildPath + File . separator + sampleId + File . separator + fileType . toUpperCase ( ) . trim ( ) ) ; if ( fs . exists ( build ) ) { fs . delete ( build , true ) ; logger . log ( Level . INFO , \"{0} - File type folder was deleted from {1} in HDFS\" , new Object [ ] { fileType . toUpperCase ( ) , studyName } ) ; } else { logger . log ( Level . SEVERE , \"{0} - File type folder does not exist\" , fileType . toUpperCase ( ) ) ; } deleteFileTypes ( sampleId , fileType ) ;", "Iterable < byte [ ] > keys = new IterableIndex ( indice ) ; Iterable < KeyValue < T > > results = mgr . findAllImpl2 ( mainMetaClass , keys , meta . getQuery ( ) , batchSize ) ;", "case T__73 :", "@ Override public void implementNetworkElementsAndResources ( DeployDestination dest , ReservationContext context , NetworkVO network , NetworkOfferingVO offering )", "arguments . add ( Long . toString ( photo . getCreatorId ( ) ) ) ; arguments . add ( SN . formId ( photo . getAlbumId ( ) ) ) ;", "private List < KeySlice > getRangeSlices ( org . apache . cassandra . thrift . KeyRange keyRange , @ Nullable SliceQuery sliceQuery ) throws StorageException { }", "public static void parseDefine ( CommandParserArgs arguments , boolean redefine ) throws CommandException", "writeSomeData ( conn , table1 , 2000 , 50 ) ; conn . tableOperations ( ) . flush ( table1 , null , null , true ) ;", "", "for ( RenderingTool tool : ServiceLoader . load ( RenderingTool . class ) ) { try { renderedCount += tool . render ( ) ; }", "@ SuppressWarnings ( { \"unused\" } ) private Set < Description > owlClassesToAtomicConcepts ( Set < OWLClass > owlClasses ) { Set < Description > concepts = new HashSet < Description > ( ) ; for ( OWLClass owlClass : owlClasses ) concepts . add ( OWLAPIConverter . convertClass ( owlClass ) ) ; return concepts ; } public static void exportKBToOWL ( File owlOutputFile , KB kb , IRI ontologyIRI ) { OWLOntologyManager manager = OWLManager . createOWLOntologyManager ( ) ; IRI physicalIRI = IRI . create ( owlOutputFile . toURI ( ) ) ; SimpleIRIMapper mapper = new SimpleIRIMapper ( ontologyIRI , physicalIRI ) ; manager . addIRIMapper ( mapper ) ; OWLOntology ontology ; try { ontology = manager . createOntology ( ontologyIRI ) ; OWLAPIAxiomConvertVisitor . fillOWLOntology ( manager , ontology , kb ) ; manager . saveOntology ( ontology ) ; } catch ( OWLOntologyCreationException e ) { e . printStackTrace ( ) ; } catch ( UnknownOWLOntologyException e ) { e . printStackTrace ( ) ; } catch ( OWLOntologyStorageException e ) { e . printStackTrace ( ) ; } } public void setUseFallbackReasoner ( boolean useFallbackReasoner ) { this . useFallbackReasoner = useFallbackReasoner ; } catch ( Exception e ) { e . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } catch ( OWLOntologyStorageException e ) { e . printStackTrace ( ) ; } catch ( OWLOntologyStorageException e ) { e . printStackTrace ( ) ; } } public void setUseFallbackReasoner ( boolean useFallbackReasoner ) { this . useFallbackReasoner = useFallbackReasoner ;", "import android . graphics . Color ;", "Map < String , Map < String , String > > cnaDataMap , Map < Long , Set < CosmicMutationFrequency > > cosmic , Map < String , ClinicalData > clinicalDataMap ) throws DaoException", "player . getSession ( ) . send ( false , new BlockChangeMessage ( x , y , z , minecraftID , block . getData ( ) & 0xF ) ) ; player . sendMessage ( ChatStyle . DARK_RED , \"This area is a protected spawn point!\" ) ;", "", "public static DbSource fromFile ( boolean forceUnixNewlines , File filename , String encoding , String timezone ) { return new DbSourceFile ( forceUnixNewlines , filename , encoding , timezone ) ; }", "@ BindView ( R . id . layout_imdb ) LinearLayout layout_imdb ; @ BindView ( R . id . layout_flixi ) LinearLayout layout_flixi ; @ BindView ( R . id . layout_meta ) LinearLayout layout_meta ; @ BindView ( R . id . layout_tmdb ) LinearLayout layout_tmdb ; @ BindView ( R . id . layout_tomato ) LinearLayout layout_tomato ;", "import java . awt . * ; import java . awt . event . InputEvent ;", "import go . graphics . text . EFontSize ; import go . graphics . text . TextDrawer ; import java . util . Iterator ;", "", "reset ( ) ; String error = validateReadRequest ( msg ) ; if ( ! error . isEmpty ( ) ) { setError ( ctx . channel ( ) , new Error ( new IllegalArgumentException ( error ) , true , Protocol . Status . Code . INVALID_ARGUMENT ) ) ; }", "private void printCommand ( List < String > commands ) { String cmdStr = ProcessUtils . buildCommandStr ( commands ) ; logger . info ( \"task run command:\\n{}\" , cmdStr ) ; }", "package org . runnerup . tracker . component ; import android . content . Context ; import android . content . SharedPreferences ; import android . hardware . * ; import android . os . Build ; import android . os . SystemClock ; import android . preference . PreferenceManager ; import org . runnerup . BuildConfig ; import org . runnerup . common . util . Constants ; import org . runnerup . workout . Workout ; import java . util . HashMap ; import java . util . Random ; public class TrackerCadence extends DefaultTrackerComponent implements SensorEventListener { public static final String NAME = \"Cadence\" ; @ Override public String getName ( ) { return NAME ; } private SensorManager sensorManager = null ; private final static boolean testMode = BuildConfig . DEBUG ; private static boolean isEmulating = false ; private boolean isSportEnabled = true ; private boolean isStarted = true ; private Float latestVal = null ; private long latestTime = - 1 ; private Float prevVal = null ; private long prevTime = - 1 ; private Float currentCadence = null ; public Float getValue ( ) { if ( isEmulating ) { if ( latestVal == null ) { latestVal = 0.0f ; } latestVal += ( int ) ( ( new Random ( ) ) . nextFloat ( ) * 4 ) ; latestTime = SystemClock . elapsedRealtime ( ) * 1000000 ; } final long noDataNs = 5000 * 1000000L ; if ( ! isSportEnabled || latestTime < 0 || latestVal == null || prevTime == latestTime && SystemClock . elapsedRealtime ( ) * 1000000 ; } final long noDataNs = 5000 * 1000000L ; if ( ! isSportEnabled || latestTime < 0 || latestVal == null || prevTime == 0 || prevVal == null || prevTime == latestTime && SystemClock . elapsedRealtime ( ) * 1000000 ; } final long noDataNs = 5000 *", "@ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; IsLessThanOrEqualToConstantConstraint constraint = ( IsLessThanOrEqualToConstantConstraint ) o ; return Objects . equals ( field , constraint . field ) && Objects . equals ( referenceValue , constraint . referenceValue ) ; } @ Override public int hashCode ( ) { return Objects . hash ( field , referenceValue ) ; } @ Override public String toString ( ) { return String . format ( \"`%s` <= %s\" , field . name , referenceValue ) ; }", "import com . yahoo . omid . transaction . TTable ; import com . yahoo . omid . transaction . Transaction ; import com . yahoo . omid . transaction . TransactionManager ;", "* Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'", "public static class CustomSignificanceHeuristicPlugin extends Plugin implements ScriptPlugin { }", "final List < AbstractSMappedDocument > allDocumentOfTheList = documentHelper . getAllDocumentOfTheList ( document . getProcessInstanceId ( ) , document . getName ( ) ) ;", "jj_la1 [ 234 ] = jj_gen ;", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "private enum BundleKeys { STORE_NAME , STORE_CONTEXT , STORE_THEME }", "public NamedGroup getEcCertificateSignatureCurve ( ) { return ecCertificateSignatureCurve ; } public void setEcCertificateSignatureCurve ( NamedGroup ecCertificateSignatureCurve ) { this . ecCertificateSignatureCurve = ecCertificateSignatureCurve ; }", "private FutureDone < PeerSocketAddress > pingFirst ( Collection < PeerSocketAddress > peerSocketAddresses ) { }", "log . info ( \"Tablet seems to be already assigned to {} {}\" , new TServerInstance ( entry . getValue ( ) , key . getColumnQualifier ( ) ) ) ;", "writer . generateClassHeader ( eventSimpleName , \"GwtEvent<\" + eventSimpleName + \".\" + eventElementSimpleName + \"Handler>\" , reflection . getClassRepresenter ( ) . getModifiers ( ) ) ; writer . generateFieldDeclarations ( orderedElementFields ) ; if ( reflection . hasOptionalFields ( ) ) { writer . setWhitespaces ( 2 ) ; writer . generateBuilderClass ( eventSimpleName , requiredFields , optionalFields ) ; writer . resetWhitespaces ( ) ; if ( reflection . hasRequiredFields ( ) ) { writer . generateConstructorUsingFields ( eventSimpleName , requiredFields , Modifier . PUBLIC ) ; } writer . generateCustomBuilderConstructor ( eventSimpleName , allFields ) ; generateFireSelfMethod ( writer ) ; } else if ( reflection . hasRequiredFields ( ) ) { writer . generateEmptyConstructor ( eventSimpleName , Modifier . PROTECTED ) ; writer . generateConstructorUsingFields ( eventSimpleName , requiredFields , Modifier . PUBLIC ) ; generateFireFieldsStaticMethod ( writer , requiredFields , eventSimpleName ) ; } else { writer . generateEmptyConstructor ( eventSimpleName , Modifier . PUBLIC ) ; generateFireFieldsStaticMethod ( writer , requiredFields , eventSimpleName ) ; } generateFireInstanceStaticMethod ( writer , eventSimpleName ) ; generateHasHandlerInterface ( writer , eventElementSimpleName ) ;", "public PrivacyList getPrivacyList ( String listName ) throws NoResponseException , XMPPErrorException , NotConnectedException , InterruptedException { listName = StringUtils . requireNotNullOrEmpty ( listName , \"List name must not be null\" ) ; }", "values . put ( Downloads . COLUMN_URI , uri . toString ( ) ) ; values . put ( Downloads . COLUMN_COOKIE_DATA , cookies ) ; values . put ( Downloads . COLUMN_USER_AGENT , userAgent ) ; values . put ( Downloads . COLUMN_NOTIFICATION_PACKAGE ,", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "pendingType = PendingType . NEW_DEPLOY ;", "", "for ( ListenerInfo li : _listenerInfos . iterator ( ) ; it . hasNext ( ) ; ) if ( listener . equals ( li . listener ) )", "} catch ( Exception e ) {", "\"@from(table = 'rdbms' ,datasource.name = '\" + RDBMSTestConstants . DATA_SOURCE_NAME + \"' \" + \", table.name = '\" + RDBMSTestConstants . TABLE_NAME + \"') \" +", "PluginExecutorHelper pluginExecutorHelper , PolicyGenerator policyGenerator , SequenceService sequenceService ) {", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . n52 . shetland . ogc . ows . exception . NoApplicableCodeException ; import org . n52 . shetland . ogc . ows . exception . OwsExceptionReport ; import org . n52 . shetland . ogc . sos . request . GetObservationByIdRequest ; import org . n52 . shetland . ogc . sos . request . GetObservationRequest ; import org . n52 . shetland . util . CollectionHelper ; import org . n52 . shetland . util . DateTimeHelper ; import org . n52 . sos . ds . hibernate . dao . DaoFactory ; import org . n52 . sos . ds . hibernate . sql . JoinType ; import org . n52 . sos . ds . hibernate . dao . AbstractIdentifierNameDescriptionDAO ;", "void shouldInstantiateDefaultFeignBlockingLoadBalancerClientWhenHttpClientDisabled ( ) { ConfigurableApplicationContext context = initContext ( \"feign.httpclient.enabled=false\" , \"spring.cloud.loadbalancer.retry.enabled=false\" ) ; }", "import logisticspipes . api . IRoutedPowerProvider ; import logisticspipes . interfaces . ISendRoutedItem ; import logisticspipes . interfaces . IInventoryProvider ; import logisticspipes . modules . abstractmodules . LogisticsModule ;", "package com . tagtraum . perf . gcviewer . model ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . io . Serializable ; import java . net . HttpURLConnection ; import java . net . URL ; import java . net . URLConnection ; import java . util . ArrayList ; import java . util . Calendar ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . TreeMap ; import java . util . logging . Level ; import java . util . logging . Logger ; import com . tagtraum . perf . gcviewer . math . DoubleData ; import com . tagtraum . perf . gcviewer . math . IntData ; import com . tagtraum . perf . gcviewer . math . RegressionLine ; import com . tagtraum . perf . gcviewer . model . AbstractGCEvent . CollectionType ; import com . tagtraum . perf . gcviewer . model . AbstractGCEvent . Generation ; public class GCModel implements Serializable { private static final long serialVersionUID = - 6479685723904770990L ; private static class FileInformation implements Serializable { private static final long serialVersionUID = 1L ; public long lastModified ; public long length ; public FileInformation ( ) { this ( - 1 , - 1 ) ; } public FileInformation ( long lastModified , long length ) { super ( ) ; this . lastModified = lastModified ; this . length = length ; } public void setFileInformation ( FileInformation other ) { this . lastModified = other . lastModified ; this . length = length ; } public void setFileInformation ( FileInformation other ) { this . lastModified = other . lastModified ; this . length = other . length ; } public boolean equals ( Object other ) { if ( this == other ) { return true ; } if ( other == null ) {", "defaultSoftStartSeconds = Flags . DEFAULT_SOFT_START_SECONDS . bindTo ( flagSource ) . with ( FetchVector . Dimension . APPLICATION_ID , applicationId . serializedForm ( ) ) . value ( ) ; defaultTopKprobability = Flags . DEFAULT_TOP_K_PROBABILITY . bindTo ( flagSource ) . with ( FetchVector . Dimension . APPLICATION_ID , applicationId . serializedForm ( ) ) . value ( ) ; this . proxyProtocol = Flags . PROXY_PROTOCOL . bindTo ( flagSource ) . with ( FetchVector . Dimension . APPLICATION_ID , applicationId . serializedForm ( ) ) . value ( ) ; this . athenzDomain = athenzDomain ;", "import com . cloud . domain . dao . DomainDao ; import com . cloud . deploy . DeployDestination ;", "setCurrentFragment ( m_profileFrm , false ) ;", "", "* Get date - time dictionary value { \"0\" : \"2000-12-01t00:00:01z\" , \"1\" : \"1980-01-02T00:11:35+01:00\" , \"2\" : \"1492-10-12T10:15:01-08:00\" }", "private StringBuilder selftestOutput ; private String profile ;", "TypeCheckClassResult result = typeCheckClass ( \"\\\\static \\\\data List (A : \\\\Type0) | nil | cons A (List A) \\\\static \\\\function test => cons 0 nil\" ) ; testType ( Apps ( DataCall ( ( DataDefinition ) result . getDefinition ( \"List\" ) ) , Nat ( ) ) , result ) ;", "public NumberFeatureTraits readNumberFeatureTraits ( AnnotationFeature aFeature ) { NumberFeatureTraits traits = null ; try { traits = JSONUtil . fromJsonString ( NumberFeatureTraits . class , aFeature . getTraits ( ) ) ; } catch ( IOException e ) { log . error ( \"Unable to read traits\" , e ) ; } if ( traits == null ) { traits = new NumberFeatureTraits ( ) ; } return traits ; } public void writeNumberFeatureTraits ( AnnotationFeature aFeature , NumberFeatureTraits aTraits ) { try { aFeature . setTraits ( JSONUtil . toJsonString ( aTraits ) ) ; } catch ( IOException e ) { log . error ( \"Unable to write traits\" , e ) ; } } public UimaStringTraits readUimaStringTraits ( AnnotationFeature aFeature ) { UimaStringTraits traits = null ; try { traits = JSONUtil . fromJsonString ( UimaStringTraits . class , aFeature . getTraits ( ) ) ; } catch ( IOException e ) { log . error ( \"Unable to read traits\" , e ) ; } if ( traits == null ) { traits = new UimaStringTraits ( ) ; } catch ( IOException e ) { log . error ( \"Unable to write traits\" , e ) ; } }", "} synchronized public void doStartLoggingGlobalMotion ( ) { if ( globalMotionVectorLogger != null && globalMotionVectorLogger . isEnabled ( ) ) { log . info ( \"logging already started\" ) ; return ; } String filename = null , filepath = null ; final JFileChooser fc = new JFileChooser ( ) ; fc . setCurrentDirectory ( new File ( getString ( \"lastFile\" , System . getProperty ( \"user.dir\" ) ) ) ) ; fc . setFileSelectionMode ( JFileChooser . FILES_ONLY ) ; fc . setSelectedFile ( new File ( getString ( \"lastFile\" , System . getProperty ( \"user.dir\" ) ) ) ) ; fc . setDialogTitle ( \"Select folder and base file name for the logged motion vector event data\" ) ; int ret = fc . showOpenDialog ( chip . getAeViewer ( ) != null && chip . getAeViewer ( ) . getFilterFrame ( ) != null ? chip . getAeViewer ( ) . getFilterFrame ( ) : null ) ; if ( ret == JFileChooser . APPROVE_OPTION ) { File file = fc . getSelectedFile ( ) ; putString ( \"lastFile\" , file . toString ( ) ) ; globalMotionVectorLogger = new TobiLogger ( file . getPath ( ) , \"Global Motion vector for every generated slice\" ) ; globalMotionVectorLogger . setNanotimeEnabled ( false ) ; globalMotionVectorLogger . setHeaderLine ( \"system_time(ms) relative_timestamp(us) sliceDeltaT(us) method globalVx(pps) globalVy(pps) globalRotation(degree/s) samples\" ) ; globalMotionVectorLogger . setEnabled ( true ) ; } else { log . info ( \"Cancelled logging motion vectors\" ) ; globalMotionVectorLogger . setEnabled ( false ) ; globalMotionVectorLogger . setHeaderLine ( \"system_time(ms) relative_timestamp", "LOG . debug ( \"Block tree for {} is not initialized yet\" , id ) ; return ;", "long chunkKey = ChunkPos . asLong ( pos . intX ( ) > > 4 , pos . intZ ( ) > > 4 ) ; TickHandlerServer . addFootprint ( chunkKey , new Footprint ( GCCoreUtil . getDimensionID ( player . worldObj ) , pos , rotation , player . getName ( ) ) , GCCoreUtil . getDimensionID ( player . worldObj ) ) ;", "import java . util . ArrayList ; import java . sql . DriverManager ;", "List < UserPacketItem > uids = new ArrayList < > ( ) ;", "} else { int position = pageAdapter . getItemPositionByTitle ( selectedTabTag ) ; if ( position != - 1 ) { viewPager . setCurrentItem ( position ) ; }", "", ". addBeans ( MockBean . of ( generatorService , GeneratorService . class ) ) . addBeans ( MockBean . of ( mock ( TransactionVersionValidator . class ) , TransactionVersionValidator . class ) )", "import org . jboss . logging . Logger ;", "", "@ org . assertj . core . util . CheckReturnValue public static DragonBallGraphAssert assertThat ( DragonBallGraphRepository actual ) { }", "import net . minecraft . block . state . IBlockState ; import net . minecraft . util . math . BlockPos ;", "DataEntity < ? > observation = new QuantityDataEntity ( ) ;", "import static org . assertj . core . api . Assertions . assertThatExceptionOfType ; import static org . junit . jupiter . api . Assertions . assertThrows ; import static org . assertj . core . api . Assertions . assertThat ;", "SnomedRefSetMemberIndexEntry oldRevision = updatedMember . build ( ) ; final boolean changed = removeOrDeactivate ( context , existingMember , updatedMember ) ; context . update ( oldRevision , updatedMember . build ( ) ) ; if ( changed ) { updateModule ( context , existingMember , moduleIdFunction . apply ( inactivatable ) ) ; unsetEffectiveTime ( existingMember ) ; }", "@ UiThread public void collapseParent ( @ NonNull int parentPosition ) { collapseParent ( mParentItemList . get ( parentPosition ) ) ; }", "", "ListChangeListener . Change < ? extends DetailViewNode < ? > > c ) -> {", "RenderingOverlay . showPointsInImageSlice ( imp , offset ( imp . getRoi ( ) . getBounds ( ) . x , extractParamToArray ( results [ frame ] , PSFInstance . X ) ) , offset ( imp . getRoi ( ) . getBounds ( ) . y , PSFInstance . extractParamToArray ( results [ frame ] , PSFInstance . Y ) ) , frame , Color . red , RenderingOverlay . MARKER_CROSS ) ;", "import static com . onesignal . OneSignalPackagePrivateHelper . FCMBroadcastReceiver_onReceived ; import static com . onesignal . OneSignalPackagePrivateHelper . OneSignal_getSessionListener ; import static com . onesignal . OneSignalPackagePrivateHelper . OneSignal_setSessionManager ; import static com . onesignal . OneSignalPackagePrivateHelper . OneSignal_setSharedPreferences ; import static com . onesignal . OneSignalPackagePrivateHelper . OneSignal_setTrackerFactory ;", "public class InternalAccountQuery extends InternalQuery < AccountState , InternalAccountQuery > { private static final FluentLogger logger = FluentLogger . forEnclosingClass ( ) ; }", "TestMessageWithReply message = new TestMessageWithReply ( nodeB . getNodeId ( ) , nodeA . getPeerAddress ( ) , contentKey ) ;", "import android . widget . * ; import android . widget . AbsListView ; import android . widget . AbsSeekBar ; import android . widget . AdapterView ; import android . widget . ArrayAdapter ; import android . widget . CursorAdapter ; import android . widget . ExpandableListView ; import android . widget . Filter ; import android . widget . FrameLayout ; import android . widget . Gallery ; import android . widget . GridView ; import android . widget . ImageView ; import android . widget . ListView ; import android . widget . ProgressBar ; import android . widget . RatingBar ; import android . widget . RemoteViews ; import android . widget . ResourceCursorAdapter ; import android . widget . SeekBar ; import android . widget . SimpleCursorAdapter ; import android . widget . TabHost ; import android . widget . TextView ; import android . widget . Toast ; import android . widget . VideoView ; import android . widget . ViewAnimator ; import android . widget . ViewFlipper ; import android . widget . ZoomButtonsController ;", "", "removeEmptyClan ( clan ) ; return true ;", "private long connectionGroupProxyID = 0 ;", "import carpet . CarpetSettings ;", "@ Test public void isNotEqualToJsonWhenFileIsMatchingAndLenientShouldFail ( ) throws Exception { assertThatExceptionOfType ( AssertionError . class ) . isThrownBy ( ( ) -> assertThat ( forJson ( SOURCE ) ) . isNotEqualToJson ( createFile ( LENIENT_SAME ) , JSONCompareMode . LENIENT ) ) ; }", "final TezClient session = TezClient . newBuilder ( \"HIVE-\" + sessionId , tezConfig ) . setIsSession ( true ) . setLocalResources ( commonLocalResources ) . setServicePluginDescriptor ( servicePluginsDescriptor ) . build ( ) ;", "promise . fail ( new IllegalArgumentException ( \"Bayeux message must have a channel: \" + message ) ) ; return ;", "rTimeoutOptions_ , dismissProgressAnimation_ , connectionStatusCallback ) ;", "* @ param view the operation view * @ param store the accumulo store * @ return A new { @ link IteratorSetting } for an Iterator capable of filtering { @ link gaffer . data . element . Element } s based on a * { @ link View } * @ throws IteratorSettingException if an iterator setting could not be created", "prop = getConfig ( Constants . CONFIG_CATEGORY_CONTROLS , \"Map Scroll Mouse Sensitivity\" , 1.0 ) ; prop . setComment ( \"Increase to make the mouse drag scroll more sensitive, decrease to lower sensitivity.\" ) ;", "", "new MongoConfigModule ( config ) , new MongoLayerModule ( config ) , new PostgresqlDbWrapperModule ( ) ,", "isInputInAntlrParser = true ;", "private final NodeEngineImpl nodeEngine ; private final ICacheService cacheService ;", "jj_la1 [ 239 ] = jj_gen ;", "return map . entrySet ( ) . stream ( ) . map ( ( entry ) -> mapper . apply ( entry . getKey ( ) , entry . getValue ( ) ) ) . collect ( Collectors . toList ( ) ) ;", "minecraftbyexample . creativetab . Startup . initClientOnly ( ) ; minecraftbyexample . overlay_simple . Startup . initClientOnly ( ) ; minecraftbyexample . overlay_advanced . Startup . initClientOnly ( ) ; minecraftbyexample . mbe03_block_variants . Startup . initClientOnly ( ) ; minecraftbyexample . mbe10_item_simple . Startup . initClientOnly ( ) ; minecraftbyexample . mbe11_item_variants . Startup . initClientOnly ( ) ;", "super ( MetricType . CODE_COMPLETIONS , new MetricType [ ] { MetricType . CODE_COMPLETIONS_BASED_ON_EVENT , MetricType . CODE_COMPLETIONS_BASED_ON_IDE_USAGES } ) ; } @ Override public ValueData getValue ( Context context ) throws IOException { LongValueData value1 = ValueDataUtil . getAsLong ( basedMetric [ 0 ] , context ) ; LongValueData value2 = ValueDataUtil . getAsLong ( basedMetric [ 1 ] , context ) ; return LongValueData . valueOf ( value1 . getAsLong ( ) + value2 . getAsLong ( ) ) ; } @ Override public Class < ? extends ValueData > getValueDataClass ( ) { return LongValueData . class ;", "import com . nukkitx . math . vector . Vector3f ; import lombok . val ; import org . cloudburstmc . server . block . Block ; import org . cloudburstmc . server . block . BlockCategory ; import org . cloudburstmc . server . block . BlockState ; import org . cloudburstmc . server . block . BlockTraits ; import org . cloudburstmc . server . block . trait . EnumBlockTrait ; import org . cloudburstmc . server . item . behavior . Item ; import org . cloudburstmc . server . item . behavior . ItemTool ; import org . cloudburstmc . server . level . Level ; import org . cloudburstmc . server . math . Direction ; import org . cloudburstmc . server . math . Direction . Plane ; import org . cloudburstmc . server . player . Player ; import org . cloudburstmc . server . utils . data . WallConnectionType ; import java . util . EnumMap ; import java . util . Map ;", "setState ( 754 ) ;", "", "this . appShortcutsAnalytics = appShortcutsAnalytics ; this . accountManager = accountManager ; this . deepLinkAnalytics = deepLinkAnalytics ;", "stateMultiplierCalculator , doubleSupportDuration , singleSupportDuration , exitCMPDurationInPercentOfStepTime , UPcomingDoubleSupportSplitFraction , VISUALIZE , registry , yoGraphicsListRegistry ) ;", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { show ( Dialogs . INVALID_IMAP_FOLDER ) ; } } ) ; return false ;", "import android . support . v4 . app . Fragment ; import android . support . v4 . app . FragmentActivity ; import android . support . v4 . view . Menu ; import android . support . v4 . view . MenuItem ;", "final static public char GAP_CHAR = '-' ; final static public char MISSING_CHAR = '?' ; int getStateCount ( ) ; @ Deprecated List < Integer > string2state ( String sequence ) throws IllegalArgumentException ; List < Integer > stringToEncoding ( String sequence ) throws IllegalArgumentException ; @ Deprecated String state2string ( List < Integer > encoding ) ; String encodingToString ( List < Integer > encoding ) ; @ Deprecated String state2string ( int [ ] encoding ) ; String encodingToString ( int [ ] encoding ) ; public boolean [ ] getStateSet ( int code ) ; public int [ ] getStatesForCode ( int code ) ; @ Deprecated boolean isAmbiguousState ( int code ) ; boolean isAmbiguousCode ( int code ) ; boolean isStandard ( ) ; public String getTypeDescription ( ) ; @ Deprecated public char getChar ( int code ) ; @ Deprecated public String getCode ( int code ) ; public String getCharacter ( int code ) ; @ Description ( \"Basic data type implementation, with methods for decoding and encoding sequence strings\" ) public abstract class Base extends BEASTObject implements DataType { protected int stateCount ; protected String codeMap ; protected int codeLength ; protected int [ ] [ ] mapCodeToStateSet ; @ Override public void initAndValidate ( ) { if ( mapCodeToStateSet != null ) { if ( mapCodeToStateSet . length != codeMap . length ( ) / codeLength ) { throw new IllegalArgumentException ( \"codeMap and mapCodeToStateSet have incompatible lengths\" ) ; } } } @ Override public int getStateCount ( ) { return stateCount ; } public String getCodeMap ( ) { return codeMap ; } protected int codeLength ; protected int [ ] [ ] mapCodeToStateSet ; @ Override public void initAndValidate ( ) { if ( mapCodeToStateSet != null ) { if ( mapCodeToStateSet . length != codeMap . length ( ) / codeLength ) { throw new IllegalArgumentException", "public static final String WIKI_DIR = \"wiki/\" ; public static final String WIKIA_DIR = \"Wikia\" ;", "import edu . harvard . iq . dataverse . validation . PasswordValidatorServiceBean ; import javax . ejb . EJB ; import java . util . Objects ; import java . util . Set ;", "import com . torodb . packaging . config . model . protocol . mongo . Auth ; import com . torodb . packaging . config . model . protocol . mongo . AuthMode ; import com . torodb . packaging . config . model . protocol . mongo . FilterList ;", "this . fontRenderer . drawStringWithShadow ( I18n . format ( \"blockbuster.gui.gun.title\" ) , 10 , 15 , 0xffffffff ) ;", "public static final String WSS_FORM_LABEL = \"WSS form\" ;", "", "", "import io . github . bucket4j . * ; import io . github . bucket4j . grid . CommandResult ; import io . github . bucket4j . grid . GridBucketState ; import io . github . bucket4j . grid . jcache . ExecuteProcessor ; import io . github . bucket4j . grid . EstimationProbe ; import io . github . bucket4j . grid . jcache . InitStateAndExecuteProcessor ; import io . github . bucket4j . grid . jcache . InitStateProcessor ;", "jj_la1 [ 248 ] = jj_gen ;", "public Map < Disease , District > getLastReportedDistrictByDisease ( CaseCriteria caseCriteria , boolean includeSharedCases ) { User user = userService . getCurrentUser ( ) ; }", "{ if ( updateNetworkTime . markTimeIfDelay ( worldObj ) ) { sendNetworkUpdate ( ) ; } isActive = false ; if ( currentRecipe == null ) { decreaseAnimation ( ) ; return ; } if ( result . fill ( craftingResult . crafted . copy ( ) , false ) != craftingResult . crafted . amount ) { decreaseAnimation ( ) ; return ; } isActive = true ; if ( getBattery ( ) . getEnergyStored ( ) >= craftingResult . energyCost ) { increaseAnimation ( ) ; } else { decreaseAnimation ( ) ; } if ( ! time . markTimeIfDelay ( worldObj , craftingResult . craftingTime ) ) { return ; } if ( getBattery ( ) . useEnergy ( craftingResult . energyCost , craftingResult . energyCost , false ) > 0 ) { CraftingResult < FluidStack > r = currentRecipe . craft ( this , false ) ; if ( r != null && r . crafted != null ) { result . fill ( r . crafted . copy ( ) , true ) ; } } } @ Override public boolean hasWork ( ) { return isActive ; } @ Override public void readFromNBT ( NBTTagCompound data ) { super . readFromNBT ( data ) ; tankManager . readFromNBT ( data ) ; animationStage = data . getShort ( \"animationStage\" ) ; animationSpeed = data . getFloat ( \"animationSpeed\" ) ; updateRecipe ( ) ; } @ Override public void writeToNBT ( NBTTagCompound data ) ; tankManager . writeToNBT ( data ) ; data . setShort ( \"animationStage\" , animationStage ) ; data . setFloat ( \"animationSpeed\" , animationSpeed ) ; } @ Override public void writeToNBT ( NBTTagCompound data ) { super . writeTo", "+ \"\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u00a2\u00c4\u00b6\u00c4\u00be\u00c3\u00a2\u00c4\u00b6\u00c4\u00a2Language\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2", "this . raFile = FileChannel . open ( lockFile , StandardOpenOption . CREATE , StandardOpenOption . READ , StandardOpenOption . WRITE ) ; try { mainBuffer . write ( BlockGZIPConstants . BLOCK_GZIP_V1_IDENTIFIER ) ; mainBuffer . writeLong ( blockSize ) ; mainBuffer . writeLong ( 0 ) ; mainBuffer . writeLong ( 0 ) ; mainBuffer . writeLong ( 0 ) ; flushMainBuffer ( ) ; streamCloser . add ( mainBuffer ) . add ( indexBuffer ) . add ( raFile ) ; } catch ( final IOException e ) { streamCloser . close ( ) ; raFile . close ( ) ; throw e ; }", "import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ;", "import java . io . UncheckedIOException ;", "import edu . harvard . iq . dataverse . datavariable . VarGroup ; import edu . harvard . iq . dataverse . datavariable . VariableMetadata ; import edu . harvard . iq . dataverse . batch . util . LoggingUtil ;", "new RNNotificationsPackage ( MainApplication . this ) , new RCTPdfView ( ) , new RNFetchBlobPackage ( ) ,", "", "", "import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Input ;", "String type = event . getType ( ) ; if ( ignoreEvent ( event . roomId ) ) { return ; } if ( ! TextUtils . equals ( Event . EVENT_TYPE_TYPING , type ) && ! TextUtils . equals ( Event . EVENT_TYPE_RECEIPT , type ) && ! TextUtils . equals ( Event . EVENT_TYPE_TYPING , type ) ) { }", "abstract protected boolean isDatabaseProvidedByTravisCI ( ) ;", "StateMachine sm = ThingMLHelpers . allStateMachines ( eco . getInst ( ) . getInstance ( ) . getType ( ) ) . get ( 0 ) ; if ( StateHelper . canHandle ( sm , eco . getPort ( ) , m ) ) { }", "if ( param . equals ( taintedPath . getPlainValue ( ) ) ) { }", "if ( ( Asimov . get ( ) || noTotems ) && ! ( mc . currentScreen instanceof HandledScreen < ? > ) ) { }", "@ Column ( name = \"HAS_VALIDATION_ERRORS\" ) protected Boolean hasValidationError ; @ Transient protected Category deproxiedCategory ;", "try { if ( operation == OperationDefinition . Operation . MUTATION ) { result = mutationStrategy . execute ( executionContext , parameters ) ; } else if ( operation == SUBSCRIPTION ) { result = subscriptionStrategy . execute ( executionContext , operationRootType , root , fields ) ; } else { result = queryStrategy . execute ( executionContext , parameters ) ; } } catch ( NonNullableFieldWasNullException e ) { result = new ExecutionResultImpl ( null , executionContext . getErrors ( ) ) ; }", "import org . crandor . game . node . entity . player . link . quest . NeoQuestRepository ; import org . crandor . game . node . entity . player . link . prayer . crest . CrestCities ;", "EntityType entityType = when ( mock ( EntityType . class ) . getName ( ) ) . thenReturn ( \"entity\" ) . getMock ( ) ; Attribute attr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( \"attr\" ) . getMock ( ) ;", "import static org . mockito . Matchers . any ; import static org . mockito . Matchers . startsWith ;", "public static final double VERSION = 1.0 ; public static boolean COMMAND_LINE_LAUNCH = false ; private String host ; private StreamFrame streamFrame ; private NvConnection conn ; private boolean connectionTerminating ; private static JFrame limeFrame ; private Gamepad gamepad ; private VideoDecoderRenderer decoderRenderer ; public Limelight ( String host ) { this . host = host ; } private void startUp ( StreamConfiguration streamConfig , Preferences prefs ) { streamFrame = new StreamFrame ( ) ; decoderRenderer = PlatformBinding . getVideoDecoderRenderer ( ) ; conn = new NvConnection ( host , prefs . getUniqueId ( ) , this , streamConfig , PlatformBinding . getCryptoProvider ( ) ) ; streamFrame . build ( this , conn , streamConfig , prefs . getFullscreen ( ) ) ; conn . start ( PlatformBinding . getDeviceName ( ) , streamFrame , VideoDecoderRenderer . FLAG_PREFER_QUALITY , PlatformBinding . getAudioRenderer ( ) , decoderRenderer ) ; } public static StreamConfiguration createConfiguration ( Resolution res , Integer bitRate ) { return new StreamConfiguration . Builder ( ) . setApp ( \"Steam\" ) . setResolution ( res . width , res . height ) . setRefreshRate ( res . frameRate ) . setBitrate ( bitRate * 1000 ) . build ( ) ; } private static void createFrame ( ) { if ( ! PreferencesManager . hasExistingPreferences ( ) && ! System . getProperty ( \"os.name\" ) . contains ( \"Windows\" ) ) { JOptionPane . showMessageDialog ( null , \"Gamepad mapping is not set. If you want to use a gamepad, \" + \"RefreshRate\" ) . setBitrate ( res . frameRate ) . setBitrate ( res . frameRate ) . setBitrate ( res . frameRate ) . build ( ) ; } private static void createFrame ( ) { if", "values . put ( UserPackets . MASTER_KEY_ID , masterKeyId ) ; values . put ( UserPackets . TYPE , item . type ) ; values . put ( UserPackets . USER_ID , item . userId ) ; values . put ( UserPackets . ATTRIBUTE_DATA , item . attributeData ) ; values . put ( UserPackets . IS_PRIMARY , item . isPrimary ) ; values . put ( UserPackets . IS_REVOKED , item . selfRevocation != null ) ; values . put ( UserPackets . RANK , rank ) ; Uri uri = UserPackets . buildUserIdsUri ( masterKeyId ) ;", "* @ param blockMasterClient the block Tachyon master client for worker * @ param workerFileSystemMasterClient the file system Tachyon master client for worker", "StoragePoolSearch = _vmInstanceDao . createSearchBuilder ( ) ; SearchBuilder < VolumeVO > volumeSearch = _volumeDao . createSearchBuilder ( ) ; volumeSearch . and ( \"volumeType\" , volumeSearch . entity ( ) . getVolumeType ( ) , SearchCriteria . Op . EQ ) ; volumeSearch . and ( \"poolId\" , volumeSearch . entity ( ) . getPoolId ( ) , SearchCriteria . Op . EQ ) ; StoragePoolSearch . join ( \"vmVolume\" , volumeSearch , volumeSearch . entity ( ) . getInstanceId ( ) , StoragePoolSearch . entity ( ) . getId ( ) , JoinBuilder . JoinType . INNER ) ; StoragePoolSearch . done ( ) ; LocalStorageSearch = _storagePoolDao . createSearchBuilder ( ) ; SearchBuilder < StoragePoolHostVO > storageHostSearch = _storagePoolHostDao . createSearchBuilder ( ) ; storageHostSearch . and ( \"hostId\" , storageHostSearch . entity ( ) . getHostId ( ) , SearchCriteria . Op . EQ ) ; LocalStorageSearch . and ( \"poolHost\" , storageHostSearch , storageHostSearch . entity ( ) . getPoolId ( ) , LocalStorageSearch . entity ( ) . getId ( ) , JoinBuilder . JoinType . INNER ) ; LocalStorageSearch . and ( \"type\" , LocalStorageSearch . entity ( ) . getPoolType ( ) , SearchCriteria . Op . IN ) ; LocalStorageSearch . done ( ) ;", "{ assertFalse ( PdfBoxUtils . generateSubtractionImage ( dssDocument , expected , 1 ) ) ; } @ Override protected String getSigningAlias ( ) { return null ; }", "import java . util . ArrayList ; import java . util . Collection ;", "EntityType entityType = when ( mock ( EntityType . class ) . getName ( ) ) . thenReturn ( entityName ) . getMock ( ) ; Query < EntityType > entityQ = mock ( Query . class ) ;", "Set < Claim > claimsInChunk = claimWorldManager . getChunksToClaimsMap ( ) . get ( ChunkPos . chunkXZ2Int ( location . getBlockX ( ) > > 4 , location . getBlockZ ( ) > > 4 ) ) ;", "GameRegistry . addRecipe ( new ItemStack ( condenser ) , \"ODO\" , \"DCD\" , \"ODO\" , 'D' , Items . DIAMOND , 'O' , new ItemStack ( Blocks . OBSIDIAN ) , 'C' , new ItemStack ( alchChest ) ) ;", "public static class loadFileInfoFromUfs < I extends AsyncIface > extends org . apache . thrift . AsyncProcessFunction < I , loadFileInfoFromUfs_args , Long > { public loadFileInfoFromUfs ( ) { super ( \"loadFileInfoFromUfs\" ) ; } public loadFileInfoFromUfs_args getEmptyArgsInstance ( ) { return new loadFileInfoFromUfs_args ( ) ; } public AsyncMethodCallback < Long > getResultHandler ( final AsyncFrameBuffer fb , final int seqid ) { final org . apache . thrift . AsyncProcessFunction fcall = this ; return new AsyncMethodCallback < Long > ( ) { public void onComplete ( Long o ) { loadFileInfoFromUfs_result result = new loadFileInfoFromUfs_result ( ) ; result . success = o ; result . setSuccessIsSet ( true ) ; try { fcall . sendResponse ( fb , result , org . apache . thrift . protocol . TMessageType . REPLY , seqid ) ; return ; } catch ( Exception e ) { LOGGER . error ( \"Exception writing to internal frame buffer\" , e ) ; } fb . close ( ) ; } public void onError ( Exception e ) { byte msgType = org . apache . thrift . protocol . TMessageType . REPLY ; org . apache . thrift . TBase msg ; loadFileInfoFromUfs_result result = new loadFileInfoFromUfs_result ( ) ; if ( e instanceof FileAlreadyExistException ) { result . faee = ( FileAlreadyExistException ) e ; result . setFaeeIsSet ( true ) ; msg = result ; } else if ( e instanceof BlockInfoException ) { result . bie = ( BlockInfoException ) e ; result . setBieIsSet ( true ) ; msg = result ; } else if ( e instanceof SuspectedFileSizeException ) { result . sfse = ( SuspectedFileSizeException ) e ; result . setTeIsSet", "", "if ( Context . hasPrivilege ( PrivilegeConstants . VIEW_ORDERS ) ) { List < DrugOrder > drugOrderList = Context . getOrderService ( ) . getDrugOrdersByPatient ( p ) ; model . put ( \"patientDrugOrders\" , drugOrderList ) ; List < DrugOrder > currentDrugOrders = new ArrayList < DrugOrder > ( ) ; List < DrugOrder > discontinuedDrugOrders = new ArrayList < DrugOrder > ( ) ; Date rightNow = new Date ( ) ; for ( Iterator < DrugOrder > iter = drugOrderList . iterator ( ) ; iter . hasNext ( ) ; ) { DrugOrder next = iter . next ( ) ; if ( next . isCurrent ( ) || next . isFuture ( ) ) { currentDrugOrders . add ( next ) ; } if ( next . isDiscontinued ( rightNow ) ) { discontinuedDrugOrders . add ( next ) ; } } model . put ( \"currentDrugOrders\" , currentDrugOrders ) ; model . put ( \"completedDrugOrders\" , discontinuedDrugOrders ) ; List < RegimenSuggestion > standardRegimens = Context . getOrderService ( ) . getStandardRegimens ( ) ; if ( standardRegimens != null ) { model . put ( \"standardRegimens\" , standardRegimens ) ; } }", "Objects . requireNonNull ( patternDefinitions ) ; patternDefinitions . forEach ( this :: register ) ;", "* Test explicitly optional complex object . Please put a valid class - wrapper with 'value' = null .", "import com . redhat . ceylon . compiler . typechecker . model . MethodOrValue ;", "public void deleteFromBranch ( InternalActionContext ac , Branch branch , BulkActionContext context , boolean ignoreChecks ) { }", "import java . util . concurrent . BlockingQueue ; import java . util . logging . Logger ;", "column . setTimestamp ( commitTime . getAdditionTime ( times . getUnit ( ) ) ) ; if ( null != ent . getTtl ( ) && ent . getTtl ( ) > 0 ) { column . setTtl ( ent . getTtl ( ) ) ; }", "* This flag indicates whether the game should display the < code > GameWindow < / code > or not .", "package com . xilinx . rapidwright . edif ; import java . io . IOException ; import java . io . Writer ; import java . util . Collection ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; public class EDIFCellInst extends EDIFPropertyObject implements EDIFEnumerable { private EDIFCell parentCell ; private EDIFCell cellType ; private EDIFName viewref ; public static final EDIFName DEFAULT_VIEWREF = EDIFCell . DEFAULT_VIEW ; public static final String BLACK_BOX_PROP = \"IS_IMPORTED\" ; private Map < String , EDIFPortInst > portInsts ; protected EDIFCellInst ( ) { } public EDIFCellInst ( String name , EDIFCell cellType , EDIFCell parentCell ) { super ( name ) ; setCellType ( cellType ) ; if ( parentCell != null ) parentCell . addCellInst ( this ) ; viewref = cellType != null ? cellType . getEDIFView ( ) : DEFAULT_VIEWREF ; } public EDIFName getViewref ( ) { return viewref ; } public void setViewref ( EDIFName viewref ) { this . viewref = viewref ; } public Map < String , EDIFPortInst > getPortInstMap ( ) { return portInsts == null ? Collections . emptyMap ( ) : portInsts ; } protected EDIFPortInst addPortInst ( EDIFPortInst epr ) { if ( epr . getCellInst ( ) . equals ( this ) ) throw new RuntimeException ( \"ERROR: Incorrect EDIFPortInst '\" + epr . getFullName ( ) + \"' being added to EDIFCellInst \" + toString ( ) ) ; return portInsts . put ( epr . getName (", "import net . minecraft . world . Chunk ;", "{ URI sourceID = obdaSource . getSourceID ( ) ; Map < URI , ImmutableList < OBDAMappingAxiom > > mappings = new HashMap < > ( ) ; ImmutableList < OBDAMappingAxiom > joinedMappings = dataRepository . getMappings ( ) ; mappings . put ( sourceID , joinedMappings ) ; Set < OBDADataSource > dataSources = new HashSet < > ( ) ; dataSources . add ( obdaSource ) ; unfoldingOBDAModel = unfoldingOBDAModel . newModel ( dataSources , mappings ) ; } else if ( aboxMode . equals ( QuestConstants . VIRTUAL ) ) { }", "public OpenCGAResult groupBy ( long studyUid , Query query , String field , QueryOptions options , String user )", "private OneShotSQLGeneratorEngine ( RDBMetadata metadata , SQLDialectAdapter sqlAdapter , boolean isIRISafeEncodingEnabled , boolean distinctResultSet , IRIDictionary uriRefIds , JdbcTypeMapper jdbcTypeMapper , ImmutableMap < ExpressionOperation , String > operations , IntermediateQuery2DatalogTranslator iq2DatalogTranslator , PullOutVariableOptimizer pullOutVariableOptimizer , TypeExtractor typeExtractor , Relation2Predicate relation2Predicate , DatalogNormalizer datalogNormalizer , DatalogFactory datalogFactory , TypeFactory typeFactory , TermFactory termFactory ) { }", "final long primaryTerm = indexMetaData . primaryTerm ( shardId ) ; IndexShardRoutingTable . Builder indexShardRoutingBuilder = new IndexShardRoutingTable . Builder ( new ShardId ( index , shardId ) ) ;", "public RegenProductEntitlementCertsJob ( PoolManager poolManager , OwnerCurator ownerCurator ) { }", "@ UML ( identifier = \"metadataLinkage\" , obligation = OPTIONAL , specification = ISO_19115 )", "{ { if ( listView != null ) { int count = listView . getChildCount ( ) ; for ( int a = 0 ; a < count ; a ++ ) { View child = listView . getChildAt ( a ) ; if ( child instanceof CustomCell ) { CustomCell cell = ( CustomCell ) child ; cell . profileSearchCell . update ( 0 ) ; } } } } ; themeDescriptions . add ( new ThemeDescription ( listView , ThemeDescription . FLAG_CELLBACKGROUNDCOLOR , new Class [ ] { LocationCell . class , CustomCell . class } , null , null , null , Theme . key_windowBackgroundWhite ) ) ; themeDescriptions . add ( new ThemeDescription ( fragmentView , ThemeDescription . FLAG_BACKGROUND , null , null , null , null , Theme . key_windowBackgroundGray ) ) ; themeDescriptions . add ( new ThemeDescription ( actionBar , ThemeDescription . FLAG_BACKGROUND , null , null , null , null , Theme . key_actionBarDefault ) ) ; themeDescriptions . add ( new ThemeDescription ( listView , ThemeDescription . FLAG_LISTGLOWCOLOR , null , null , null , null , Theme . key_actionBarDefault ) ) ; themeDescriptions . add ( new ThemeDescription ( actionBar , ThemeDescription . FLAG_AB_ITEMSCOLOR , null , null , null , null , Theme . key_actionBarDefaultIcon ) ) ; themeDescriptions . add ( new ThemeDescription ( actionBar , ThemeDescription . FLAG_AB_TITLECOLOR , null , null , null , null , Theme . key_ITEMSCOLOR , null , null , null , null , Theme . key_actionBarDefaultTitle ) ) ; themeDescriptions . add ( new ThemeDescription ( actionBar , ThemeDescription . FLAG_AB_SELECTORCOLOR , null , null , null , null , null , null , Theme . key_actionBarDefaultIcon ) ) ; themeDescriptions", "public synchronized Iterable < AttributeMetaData > getAttributes ( )", "synchronized ( mLock ) { saveDeletedItem ( positionStart ) ; if ( mOriginalValues != null ) { mOriginalValues . remove ( getOriginalPositionForItem ( mItems . get ( positionStart ) ) ) ; } mItems . remove ( positionStart ) ; }", "ActiveMQXAConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory ( properties , factoryCustomizers . orderedStream ( ) . collect ( Collectors . toList ( ) ) ) . createConnectionFactory ( ActiveMQXAConnectionFactory . class ) ;", "checkArgument ( isNotBlank ( userName ) , \"userName cannot be null or empty\" ) ;", "|| ! noExistingGroup ( project . getName ( ) ) || ! verifyQuota ( project . getName ( ) ) || ! verifyLogs ( dfso , project . getName ( ) ) || ! noExistingCertificates ( project . getName ( ) ) ) { LOGGER . log ( Level . WARNING , \"some elements of project {0} already exist in the system \" + \"Possible inconsistency!\" , project . getName ( ) ) ;", "", "insts . ConditionalBranchInstruction ( context . cfg ( ) . currentInstruction , translateConditionOpcode ( CAstOperator . OP_EQ ) , null , c . getValue ( n . getChild ( 0 ) ) , context . currentScope ( ) . getConstantValue ( new Integer ( 0 ) ) , - 1 ) ) ;", "setState ( 678 ) ;", "Connector conn = accumulo . getConnector ( \"root\" , \"superSecret\" ) ;", "setState ( 822 ) ;", "\"repast.simphony.batch.standalone.StandAloneMain\" ) ;", "} ) . doOnNext ( containerList -> { if ( containerList . size ( ) == 0 ) {", "* Test explicitly required integer . Please put a valid int - wrapper with 'value' = null and the client library should throw before the request is sent .", "allUploadersInitalized &= initializeMongoUploader ( context , preferences ) ;", "import javafx . beans . property . IntegerProperty ; import javafx . beans . property . SimpleIntegerProperty ; import javafx . beans . value . ChangeListener ; import javafx . beans . value . ObservableValue ;", "@ Test public void filestat ( ) throws Throwable { }", "", "Engine . Index firstIndexRequest = new Engine . Index ( newUid ( Integer . toString ( i ) ) , doc , SequenceNumbersService . UNASSIGNED_SEQ_NO , Versions . MATCH_DELETED , VersionType . INTERNAL , PRIMARY , System . nanoTime ( ) , - 1 , false ) ; Engine . IndexResult indexResult = engine . index ( firstIndexRequest ) ; assertThat ( indexResult . getVersion ( ) , equalTo ( 1L ) ) ;", "clearComposingUi ( null ) ; clearWhoCardUi ( null ) ;", "public abstract class BlockContainerRailcraftSubtyped < V extends Enum < V > & IVariantEnum > extends BlockContainerRailcraft implements ISubtypedBlock < V > { private VariantData < V > variantData ; }", "@ JsfComponent ( type = AbstractSelect . COMPONENT_TYPE , family = AbstractSelect . COMPONENT_FAMILY , renderer = @ JsfRenderer ( type = \"org.richfaces.ui.SelectRenderer\" ) , tag = @ Tag ( name = \"select\" ) )", "BitSet optionals = new BitSet ( ) ; if ( struct . isSetSuccess ( ) ) { optionals . set ( 0 ) ; } if ( struct . isSetE ( ) ) { optionals . set ( 1 ) ; } oprot . writeBitSet ( optionals , 2 ) ; if ( struct . isSetSuccess ( ) ) { oprot . writeString ( struct . success ) ; } if ( struct . isSetE ( ) ) { struct . e . write ( oprot ) ; }", "* Get boolean dictionary value { \"0\" : true , \"1\" : false , \"2\" : false , \"3\" : true }", "import javax . validation . Validation ; import javax . validation . MessageInterpolator ;", "public File getInitialIncrementalSupportJavaOutputDir ( ) { return new File ( globalScope . getIntermediatesDir ( ) , \"/initial-incremental-classes/\" + variantData . getVariantConfiguration ( ) . getDirName ( ) ) ; } @ NonNull public File getIncrementalSupportJavaOutputDir ( ) { return new File ( globalScope . getIntermediatesDir ( ) , \"/incremental-classes/\" + variantData . getVariantConfiguration ( ) . getDirName ( ) ) ; } @ NonNull public Iterable < File > getJavaOuptuts ( ) ;", "public void deleteSearch ( int id ) { SQLiteDatabase db = tdHelper . getWritableDatabase ( ) ; db . delete ( TABLE_SEARCHES , ACCOUNT_ID_IS + \" AND id = ?\" , new String [ ] { account , String . valueOf ( id ) } ) ; db . close ( ) ; }", "import com . codenjoy . dojo . services . printer . PrinterFactory ;", "if ( getStorageManager ( ) . getFileById ( renamedFile . getParentId ( ) ) . equals ( getCurrentDir ( ) ) ) { }", "if ( tabView . index != selectedTabIndex ) { addChildView ( tabView . index - 1 ) ; } else { }", "String id = body . split ( keyPrefix ) [ 1 ] ; RedissonSession session = new RedissonSession ( id ) ;", "TTY . print ( cur . isLinearScanLoopHeader ( ) ? \" lh\" : \" \" ) ; TTY . print ( cur . isLinearScanLoopEnd ( ) ? \" le\" : \" \" ) ;", "import com . github . tessera . config . KeyDataConfig ; import com . github . tessera . config . PrivateKeyData ;", "new Orders ( farm , project ) . bootstrap ( ) . assign ( second , \"yegor\" , \"0\" ) ;", "import heigit . ors . common . TravelRangeType ; import heigit . ors . util . GeomUtility ;", "", "import org . molgenis . ontology . core . service . OntologyService ;", "import com . b2international . commons . collections . primitive . set . LongSet ; import com . b2international . commons . pcj . PrimitiveCollections ;", "public void addDeviationSlope ( long fromTime , long toTime , boolean useForScale , double scale ) { LineGraphSeries < ScaledDataPoint > dsMaxSeries ; LineGraphSeries < ScaledDataPoint > dsMinSeries ; List < ScaledDataPoint > dsMaxArray = new ArrayList < > ( ) ; List < ScaledDataPoint > dsMinArray = new ArrayList < > ( ) ; Double maxFromMaxValueFound = 0d ; Double maxFromMinValueFound = 0d ; Scale dsMaxScale = new Scale ( ) ; Scale dsMinScale = new Scale ( ) ; for ( long time = fromTime ; time <= toTime ; time += 5 * 60 * 1000L ) { AutosensData autosensData = IobCobCalculatorPlugin . getAutosensData ( time ) ; if ( autosensData != null ) { dsMaxArray . add ( new ScaledDataPoint ( time , autosensData . slopeFromMaxDeviation , dsMaxScale ) ) ; dsMinArray . add ( new ScaledDataPoint ( time , autosensData . slopeFromMinDeviation , dsMinScale ) ) ; maxFromMaxValueFound = Math . max ( maxFromMaxValueFound , Math . abs ( autosensData . slopeFromMaxDeviation ) ) ; maxFromMinValueFound = Math . max ( maxFromMinValueFound , Math . abs ( autosensData . slopeFromMinDeviation ) ) ; dsMinSeries . setColor ( Color . MAGENTA ) ; dsMaxSeries . setThickness ( 3 ) ; dsMinSeries . setThickness ( 3 ) ; dsMinSeries . setColor ( Color . YELLOW ) ; dsMinSeries . setThickness ( 3 ) ; dsMinSeries . setThickness ( 3 ) ; dsMinSeries . setColor ( Color . YELLOW ) ; dsMinSeries . setThickness ( 3 )", "@ InBrowser ( emulator = Emulator . DESKTOP_BREAKPOINT_BIG )", "writer . key ( \"name\" ) ; writer . value ( _name ) ; writer . key ( \"tags\" ) ; writer . array ( ) ; for ( String tag : _tags ) { writer . value ( tag ) ; } writer . endArray ( ) ; writer . key ( \"created\" ) ; writer . value ( ParsingUtilities . localDateToString ( _created ) ) ; writer . key ( \"modified\" ) ; writer . value ( ParsingUtilities . localDateToString ( _modified ) ) ; writer . key ( \"creator\" ) ; writer . value ( _creator ) ; writer . key ( \"contributors\" ) ; writer . value ( _contributors ) ; writer . key ( \"subject\" ) ; writer . value ( _subject ) ; writer . key ( \"description\" ) ; writer . value ( _description ) ; writer . key ( \"rowCount\" ) ; writer . value ( _rowCount ) ; writer . key ( \"customMetadata\" ) ; writer . object ( ) ;", "return OClass . INDEX_TYPE . HASH . toString ( ) ;", "String key = DFSUtil . addKeySuffixes ( DFS_NAMENODE_HTTP_ADDRESS_KEY , nameserviceId ) ;", "CCRenderState . startDrawing ( ) ; tesselating = true ;", "final PrivacyGroupManager privacyGroupManager = PrivacyGroupManager . create ( config ) ; final PrivacyGroupResource privacyGroupResource = new PrivacyGroupResource ( privacyGroupManager ) ; return Set . of ( transactionResource , rawTransactionResource , encodedPayloadResource , privacyGroupResource , upCheckResource , transactionResource3 ) ;", "@ NotNull default SpiResponse < SpiAuthorizationCodeResult > requestAuthorisationCode ( @ NotNull SpiPsuData psuData , SpiScaMethod scaMethod , SpiBulkPayment businessObject , AspspConsentData aspspConsentData ) { return SpiResponse . < SpiAuthorizationCodeResult > builder ( ) . fail ( SpiResponseStatus . NOT_SUPPORTED ) ; }", "", "", "", "CharSequence innerText = getText ( page , parentView , parentRichText , innerRichText , parentBlock , maxWidth , noTranslate ) ;", "", "* Send a 201 response with valid payload : { 'statusCode' : '201' , 'textStatusCode' : 'Created' }", "private final boolean noRHS ;", "public class JabRefMain extends Application { }", "public URL getSchema ( ) { return WMSProvider . class . getResource ( \"/META-INF/schemas/services/wms/3.4.0/wms_configuration.xsd\" ) ; }", "final ZLAndroidLibrary zlibrary = getZLibrary ( ) ; getWindow ( ) . setFlags ( WindowManager . LayoutParams . FLAG_FULLSCREEN , zlibrary . ShowStatusBarOption . getValue ( ) ? 0 : WindowManager . LayoutParams . FLAG_FULLSCREEN ) ; if ( ! zlibrary . ShowActionBarOption . getValue ( ) ) { requestWindowFeature ( Window . FEATURE_ACTION_BAR_OVERLAY ) ; }", "import com . syncleus . ferma . tx . Tx ;", "import com . cloud . agent . api . to . NicTO ; import com . cloud . agent . manager . AgentManager ;", "if ( theCase . getCaseType ( ) == CaseType . MULTI_USER_CASE ) { numShardsToUse = getNumShardsToUse ( ) ; } } catch ( Exception ex ) {", "protected void onPostExecute ( Void result ) { }", "AccumuloConfiguration aconf = DefaultConfiguration . getInstance ( ) ; CachableBlockFile . Reader _cbr = new CachableBlockFile . Reader ( in2 , data . length , CachedConfiguration . getInstance ( ) , aconf ) ;", "private CommandLoadFactorProvider loadFactorProvider = command -> CommandLoadFactorProvider . DEFAULT_VALUE ; private Function < UpstreamAwareStreamObserver < CommandProviderInbound > , StreamObserver < CommandProviderOutbound > > requestStreamFactory = so -> ( StreamObserver < CommandProviderOutbound > ) so . getRequestStream ( ) ; private InstructionAckSource < CommandProviderOutbound > instructionAckSource = new DefaultInstructionAckSource < > ( ack -> CommandProviderOutbound . newBuilder ( ) . setAck ( ack ) . build ( ) ) ;", "this ( ontIndex . getPropertyChains ( ) , new PropertyHierarchyCompositionComputationFactory ( traceWriter ) , executor ,", "", "environmentWebClient . removeSshKey ( environmentId , sshPublicKey ) ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 2 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event not arrived\" , callback . isEventArrived ( ) ) ;", "@ InBrowser ( emulator = Emulator . DESKTOP_BREAKPOINT_BIG )", "", "writeBytesCounter = context . getLongCounter ( Metrics . WRITE_BYTES ) ; durationCounter = context . getLongCounter ( Metrics . WRITE_DURATION ) ;", "final Iterable < Element > results = store . execute ( getBySeed , user ) ; assertEquals ( 1 , Iterables . size ( results ) ) ; assertThat ( results , IsCollectionContaining . hasItem ( e ) ) ;", "", "private static final PrefsBooleanProperty spellChecker = new PrefsBooleanProperty ( ) ; public static boolean isSpellChecker ( ) { return spellChecker . get ( ) ; } public static void setSpellChecker ( boolean spellChecker ) { Options . spellChecker . set ( spellChecker ) ; } public static BooleanProperty spellCheckerProperty ( ) { return spellChecker ; } private static final PrefsStringProperty emphasisMarker = new PrefsStringProperty ( ) ; public static String getEmphasisMarker ( ) { return emphasisMarker . get ( ) ; } public static void setEmphasisMarker ( String emphasisMarker ) { Options . emphasisMarker . set ( emphasisMarker ) ; } public static StringProperty emphasisMarkerProperty ( ) { return emphasisMarker ; } private static final PrefsStringProperty strongEmphasisMarker = new PrefsStringProperty ( ) ; public static String getStrongEmphasisMarker ( ) { return strongEmphasisMarker . get ( ) ; } public static void setStrongEmphasisMarker ( String strongEmphasisMarker ) { Options . strongEmphasisMarker . set ( strongEmphasisMarker ) ; } public static StringProperty strongEmphasisMarkerProperty ( ) { return strongEmphasisMarker ; } private static final PrefsStringProperty bulletListMarker = new PrefsStringProperty ( ) ; public static String getBulletListMarker ( ) { return bulletListMarker . get ( ) ; } public static void setBulletListMarker ( String bulletListMarker ) { Options . bulletListMarker . set ( bulletListMarker ) ; Options . bulletListMarker . set ( bulletListMarker ) ; } public static String bulletListMarkerProperty ( ) { return bulletListMarker ; } private static final PrefsBooleanProperty spellListMarkerProperty ( ) { return bulletListMarker ; } private static final PrefsBooleanProperty ( ) ; public", "public Set < String > getParentProcedures ( final Set < String > procedureIdentifiers , final boolean fullHierarchy , final boolean includeSelves ) { return getHierarchy ( this . parentProceduresForProcedures , procedureIdentifiers , fullHierarchy , includeSelves ) ; } @ Override public Set < String > getParentFeatures ( final String featureIdentifier , final boolean fullHierarchy , final boolean includeSelf ) { }", ". doOnSuccess ( postId -> { view . showSuccessMessage ( ) ; analytics . sendPostCompleteEvent ( postManager . remoteRelatedAppsAvailable ( ) , view . getCurrentSelected ( ) . getPackageName ( ) , hasComment , hasUrl , url == null ? \"\" : url , android . view . View . VISIBLE == view . getPreviewVisibility ( ) ) ; } ) . doOnSuccess ( postId -> tabNavigator . navigate ( new AppsTimelineTabNavigation ( postId ) ) ) . doOnSuccess ( postId -> goBack ( ) ) . toCompletable ( ) ;", "import org . nd4j . linalg . factory . Nd4j ; import org . nd4j . linalg . dataset . api . iterator . cache . DataSetCache ; import org . nd4j . linalg . dataset . api . iterator . cache . InFileDataSetCache ; import org . nd4j . linalg . dataset . api . iterator . cache . InMemoryDataSetCache ;", "@ Generated ( value = { \"https://www.jooq.org\" , \"jOOQ version:3.8.2\" } , comments = \"This class is generated by jOOQ\" )", "", "case 110 : {", "import com . vaadin . shared . annotations . DelegateToWidget ; import com . vaadin . shared . annotations . NoLayout ;", "public void startUp ( IngestJobContext context ) throws Exception { this . context = context ; }", "private class ColorCommand implements ConsoleCommand { }", "import utilities . generic_storage . SerialisableComparablePair ;", "import org . bitcoinj . core . CoinDefinition ;", "String uiPackageUrl = s3Client . uploadFile ( pluginProperties . getPluginPackageBucketName ( ) , keyName , pluginUiPackageFile ) ; log . info ( \"UI static package file has uploaded to MinIO {}\" , uiPackageUrl . split ( \"\\\\?\" ) [ 0 ] ) ;", "@ UML ( identifier = \"name\" , obligation = OPTIONAL , specification = ISO_19115 )", "JsonIncludeProperties . Value inclusions = intr . findPropertyInclusions ( propertyAcc ) ; if ( inclusions != null ) { Set < String > newIncluded = inclusions . getIncluded ( ) ; if ( newIncluded != null ) { included = ( included == null ) ? new HashSet < String > ( ) : new HashSet < String > ( included ) ; for ( String str : newIncluded ) { included . add ( str ) ; } } } Boolean b = intr . findSerializationSortAlphabetically ( config , propertyAcc ) ;", "enum ConsistencyLevel { CAUSAL , LINEARIZABLE } default ConsistencyLevel consistency ( ) { return ConsistencyLevel . LINEARIZABLE ; } default long address ( ) { return 0 ; }", "throw new BigPhatError ( \"maPimItemCreate not implemented\" ) ;", "* Long running delete request , service returns a 202 to the initial request . The endpoint indicated in the Azure - AsyncOperation header is invalid", "public void sendUSBInfoFromHalToController ( ) { if ( notProvisioned ( ) ) { return ; } Optional < StringBuilder > response = getResponse ( USB_INFO_URL ) ; if ( ! response . isPresent ( ) ) { return ; } String usbInfo = response . get ( ) . toString ( ) ; StatusReporter . setResourceManagerStatus ( ) . setUsbConnectionsInfo ( usbInfo ) ; Map < String , Object > postParams = new HashMap < > ( ) ; postParams . put ( \"info\" , usbInfo ) ; try { orchestrator . doCommand ( COMMAND_USB_INFO , null , postParams ) ; } catch ( Exception e ) { LoggingService . logWarning ( MODULE_NAME , e . getMessage ( ) ) ; } } public void sendHWInfoFromHalToController ( ) { if ( notProvisioned ( ) ) { return ; } Optional < StringBuilder > response = getResponse ( HW_INFO_URL ) ; if ( ! response . isPresent ( ) ) { return ; } String hwInfo = response . get ( ) . toString ( ) ; StatusReporter . setResourceManagerStatus ( ) . setHwInfo ( hwInfo ) ; Map < String , Object > postParams = new HashMap < > ( ) ; postParams . put ( \"info\" , hwInfo ) ; JsonObject jsonSendHWInfoResult = null ; try { jsonSendHWInfoResult = orchestrator . doCommand ( COMMAND_HW_INFO , null , postParams ) ; } catch ( Exception e ) { LoggingService . logWarning ( MODULE_NAME , jsonSendHWInfoResult == null ? \"Can't get HW Info from HAL.\" : jsonSendHWInfoResult . toString ( ) ; } catch ( Exception e ) { LoggingService . logInfo ( MODULE_NAME , jsonSendHWInfoResult == null ? \"Can't get HW Info from H", "import org . tron . common . utils . Base58 ; import org . tron . common . utils . ByteArray ; import org . tron . common . utils . DecodeUtil ; import org . tron . common . utils . Sha256Hash ; import org . tron . common . utils . StringUtil ; import org . tron . common . utils . Utils ; import org . tron . common . utils . WalletUtil ;", "ctx . function_parameters ( ) . name . getStart ( ) . getStartIndex ( ) , function . getBareName ( ) . length ( ) , ctx . function_parameters ( ) . name . getStart ( ) . getLine ( ) , ParserAbstract . getFullCtxText ( ctx . getParent ( ) ) ) ;", "lhs = KApp . of ( definitionHelper , K2Sort , term ) ; rhs = StringBuiltin . kAppOf ( sort ) ; rule = new Rule ( lhs , rhs , definitionHelper ) ;", "import java . awt . image . RasterFormatException ;", "this ( new EditSessionBuilder ( world , worldName ) . queue ( queue ) . player ( player ) . limit ( limit ) . changeSet ( changeSet ) . allowedRegions ( allowedRegions ) . autoQueue ( autoQueue ) . fastmode ( fastmode ) . checkMemory ( checkMemory ) . combineStages ( combineStages ) . blockBag ( blockBag ) . eventBus ( bus ) . event ( event ) ) ; } public EditSession ( EditSessionBuilder builder ) { super ( builder . compile ( ) . getExtent ( ) ) ; this . world = builder . getWorld ( ) ; this . worldName = builder . getWorldName ( ) ; this . queue = builder . getQueue ( ) ; this . wrapped = builder . isWrapped ( ) ; this . fastMode = builder . hasFastMode ( ) ; this . history = builder . getHistory ( ) ; this . bypassHistory = builder . getBypassHistory ( ) ; this . bypassAll = builder . getBypassAll ( ) ; this . originalLimit = builder . getLimit ( ) ; this . limit = builder . getLimit ( ) . copy ( ) ; this . player = builder . getPlayer ( ) ; this . changeTask = builder . getChangeTask ( ) ; this . maxY = builder . getMaxY ( ) ; this . blockBag = builder . getBlockBag ( ) ; this . changeSet ( changeSet ) . allowedRegions ( allowedRegions ) . autoQueue ( autoQueue ) . fastmode ( fastmode ) . checkMemory ( checkMemory ) . combineStages ( combineStages ) . blockBag ( blockBag ) . eventBus ( bus ) . event ( event ) ; this . changeTask = builder . getChangeTask ( ) ; this . maxY = builder . getMaxY ( ) ; this . blockBag ( blockBag ) . eventBus ( builder . getBlockBag ( ) ; this . changeTask ( builder . getChangeTask ( ) ; this . maxY = builder . getMaxY", "import java . io . File ; import java . lang . ref . WeakReference ; import java . util . Collections ; import java . util . Comparator ;", "", "jsonText = ClientConnection . download ( url ) ; Map < String , Object > map = DAO . jsonMapper . readValue ( jsonText , DAO . jsonTypeRef ) ;", "void testCreate ( ) throws Exception { this . mockMvc . perform ( post ( \"/\" ) . param ( \"text\" , \"FOO text\" ) . param ( \"summary\" , \"FOO\" ) ) . andExpect ( status ( ) . isFound ( ) )", "import hudson . tasks . Mailer ; import com . google . common . base . Objects ; import com . google . common . base . Strings ; import com . google . common . cache . CacheBuilder ; import com . google . common . cache . CacheLoader ; import com . google . common . cache . LoadingCache ; import com . google . common . collect . ImmutableMap ; import com . google . common . collect . Iterables ;", "fragment_backup_child_linear = view . findViewById ( R . id . fragment_backup_child_linear ) ;", "import com . lilithsthrone . world . WorldType ;", "_quotingChecker = base . _quotingChecker ;", "import com . enonic . xp . form . Form ; import com . enonic . xp . app . ApplicationService ;", "private int mTitleFontSize ; private int mPreviewFontSize ; private Tracker mTracker ;", "private MediaAsset checkExistingMediaAsset ( File f ) { String fhash = fileHash ( f ) ; if ( fhash == null ) return null ; System . out . println ( \"use existing MA [\" + fhash + \"] -> \" + myAssets . get ( fhash ) ) ; return myAssets . get ( fhash ) ; } private String fileHash ( File f ) { if ( f == null ) return null ; try { return Util . fileContentHash ( f ) ; } catch ( IOException iox ) { System . out . println ( \"StandardImport.fileHash() ignorning \" + f + \" threw \" + iox . toString ( ) ) ; } return null ; } private ArrayList < Keyword > getKeywordsForAsset ( Row row , int n , Shepherd myShepherd ) { }", "public void testAuthenticationRequiredProperty ( ) throws IOException , JsonParseException { when ( mockTransport . doGet ( \"/repository/properties/installation-manager/1.0.1\" ) )", "this . eventHistory . setCanvas ( new FullHTMLPane ( \"/rhq/resource/events/history-plain.xhtml?id=\" + resource . getId ( ) ) ) ; eventsTab . updateSubTab ( this . eventHistory ) ; this . contentDeployed . setCanvas ( new FullHTMLPane ( \"/rhq/resource/content/view-plain.xhtml?id=\" + resource . getId ( ) ) ) ; this . contentNew . setCanvas ( new FullHTMLPane ( \"/rhq/resource/content/deploy-plain.xhtml?id=\" + resource . getId ( ) ) ) ; this . contentSubscrip . setCanvas ( new FullHTMLPane ( \"/rhq/resource/content/subscription-plain.xhtml?id=\" + resource . getId ( ) ) ) ; this . contentHistory . setCanvas ( new FullHTMLPane ( \"/rhq/resource/content/history-plain.xhtml?id=\" + resource . getId ( ) ) ) ; contentTab . updateSubTab ( contentDeployed ) ; contentTab . updateSubTab ( contentNew ) ; contentTab . updateSubTab ( contentSubscrip ) ; contentTab . updateSubTab ( contentHistory ) ;", "import org . xvm . asm . PropertyStructure ; import org . xvm . runtime . Frame ; import org . xvm . runtime . ObjectHandle ;", "public void loadSinglePartition ( Path loadPath , String tableName , Map < String , String > partSpec , boolean replace , boolean inheritTableSpecs , boolean isSkewedStoreAsSubdir , boolean isSrcLocal , boolean isAcid , boolean hasFollowingStatsTask , Long mmWriteId , boolean isCommitMmWrite ) throws HiveException { }", "ReflectionHelper . invokePrivateMethod ( Object . class , PipeRendererTESR . class , PipeRendererTESR . INSTANCE , \"renderGatesWires\" , new Class [ ] { TileGenericPipe . class , double . class , double . class , double . class } , new Object [ ] { tgPipe , x , y , z } ) ;", "Network defaultNetwork = _networkModel . getExclusiveGuestNetwork ( zone . getId ( ) ) ;", "* @ param params Map containing any of the following optional parameters . * study : Study [ [ user @ ] project : ] study where study and project can be either the ID or UUID . * panels : Comma separated list of panel ids . * incVersion : Create a new version of panel .", "{ mput . putTransient ( name , key , value , ttl ) ; }", "* @ author Robert Thornton", "", "", "for ( Map . Entry < TypeMirror , String > me : protoMappings ) vs . add ( new Vertex < > ( me ) ) ;", "import java . io . IOException ; import java . security . Key ; import java . security . PrivilegedActionException ; import java . security . PrivilegedExceptionAction ; import java . util . EnumSet ; import java . util . concurrent . Future ; import java . util . Arrays ; import javax . crypto . spec . SecretKeySpec ; import javax . security . auth . Subject ; import org . ietf . jgss . GSSContext ; import org . ietf . jgss . GSSCredential ; import org . ietf . jgss . GSSException ; import org . ietf . jgss . GSSManager ; import org . ietf . jgss . GSSName ; import org . ietf . jgss . Oid ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import com . hierynomus . mserref . NtStatus ; import com . hierynomus . mssmb2 . SMB2Header ; import com . hierynomus . mssmb2 . messages . SMB2SessionSetup ; import com . hierynomus . protocol . commons . ByteArrayUtils ; import com . hierynomus . protocol . commons . concurrent . Futures ; import com . hierynomus . smbj . common . MessageSigning ; import com . hierynomus . smbj . connection . Connection ; import com . hierynomus . smbj . session . Session ; import com . hierynomus . smbj . session . Session ; import com . hierynomus . smbj . transport . TransportException ; import com . hierynomus . spnego . SpnegoException ; import com . sun . security . jgss . spnego . SpnegoException ; import com . sun . security . jgss . sun . security . jgss . session . Session ; import com . hierynomus . session . Session ; import", "{ task = client . checkLocationSettings ( builder . build ( ) ) ; task . addOnSuccessListener ( new OnSuccessListener < LocationSettingsResponse > ( ) { @ Override public void onSuccess ( LocationSettingsResponse locationSettingsResponse ) { m_gpsEnabled = true ; startEventLoop ( m_gpsEnabled ) ; } } ) ; task . addOnFailureListener ( new OnFailureListener ( ) { @ Override public void onFailure ( @ NonNull Exception e ) { m_gpsEnabled = false ; startEventLoop ( m_gpsEnabled ) ; } } ) ; }", "public boolean initialize ( String arguments ) { Map < String , String > argumentsMap = CommonFunctions . parseKeyValPairs ( arguments ) ; String hexUUIDsArgValue = argumentsMap . get ( \"hexUUIDs\" ) ; if ( hexUUIDsArgValue != null ) { hexUUIDsArgValue = hexUUIDsArgValue . trim ( ) ; if ( \"false\" . equals ( hexUUIDsArgValue ) ) { hexUUIDs = false ; } else if ( \"true\" . equals ( hexUUIDsArgValue ) ) { hexUUIDs = true ; } else { logger . log ( Level . SEVERE , \"Invalid 'hexUUIDs' value: \" + hexUUIDsArgValue + \". Only 'true' or 'false'\" ) ; return false ; } } boolean initResult = super . initialize ( arguments ) ; if ( ! initResult ) { return false ; } }", "import org . apache . lucene . util . BytesRef ; import org . apache . lucene . util . IOUtils ;", "import org . freeplane . features . common . map . ModeController ; import org . freeplane . features . common . map . NodeModel ; import org . freeplane . features . common . clipboard . ClipboardController ;", "private List < Sample > getFileSamples ( Study study , File file , ObjectMap fileModifyParams , boolean simulate , QueryOptions options , String sessionId ) throws AnalysisExecutionException , CatalogException { }", "private static final Set < String > KNOWN_VIEWS = initKnownViews ( ) ; private static final Set < String > initKnownViews ( ) { final Set < String > views = new HashSet < > ( Arrays . asList ( TasksView . VIEW_NAME , CasesView . VIEW_NAME , ContactsView . VIEW_NAME , EventsView . VIEW_NAME , SamplesView . VIEW_NAME , CampaignsView . VIEW_NAME , CampaignDataView . VIEW_NAME , ReportsView . VIEW_NAME , StatisticsView . VIEW_NAME , UsersView . VIEW_NAME , OutbreaksView . VIEW_NAME , RegionsView . VIEW_NAME , DistrictsView . VIEW_NAME , CommunitiesView . VIEW_NAME , FacilitiesView . VIEW_NAME , PointsOfEntryView . VIEW_NAME ) ) ; if ( permitted ( FeatureType . CASE_SURVEILANCE , UserRight . DASHBOARD_SURVEILLANCE_ACCESS ) ) { views . add ( SurveillanceDashboardView . VIEW_NAME ) ; } if ( permitted ( FeatureType . CONTACT_TRACING , UserRight . DASHBOARD_CONTACT_ACCESS ) ) { views . add ( ContactsDashboardView . VIEW_NAME ) ; } if ( permitted ( FeatureType . CAMPAIGNS , UserRight . DASHBOARD_CAMPAIGNS_ACCESS ) ) { views . add ( CampaignDashboardView . VIEW_NAME ) ; } if ( permitted ( FeatureType . CAMPAIGNS , UserRight . DASHBOARD_CAMPAIGNS_ACCESS ) ) { views . add ( CampaignDashboardView . VIEW_NAME ) ; } if ( permitted ( FeatureType . CAMPAIGNS , UserRight . DASHBOARD_CAMPAIGNS_ACCESS ) ) { views . add ( CampaignDashboardView .", "XooScmProvider . class , XooBlameCommand . class , XooFakeExporter . class , XooFakeImporter . class , XooFakeImporterWithMessages . class ,", "public int hashCode ( ) { final int PRIME = 59 ; int result = 1 ; final Object $keywords = this . getKeywords ( ) ; result = result * PRIME + ( $keywords == null ? 43 : $keywords . hashCode ( ) ) ; final Object $description = this . getDescription ( ) ; result = result * PRIME + ( $description == null ? 43 : $description . hashCode ( ) ) ; final Object $news = this . getNews ( ) ; result = result * PRIME + ( $news == null ? 43 : $news . hashCode ( ) ) ; final Object $screenshots = this . getScreenshots ( ) ; result = result * PRIME + ( $screenshots == null ? 43 : $screenshots . hashCode ( ) ) ; final Object $videos = this . getVideos ( ) ; result = result * PRIME + ( $videos == null ? 43 : $videos . hashCode ( ) ) ; return result ; } public boolean equals ( Object o ) { if ( o == this ) return true ; if ( ! ( o instanceof Media ) ) return false ; final Media other = ( Media ) o ; if ( ! other . canEqual ( ( Object ) this ) ) return false ; final Object this$keywords = this . getKeywords ( ) ; final Object other$keywords = other . getKeywords ( ) ; if ( this$keywords == null ? other$keywords != null : ! this$keywords . equals ( other$keywords ) ) { return false ; } final Object this$screenshots = this . getScreenshots ( ) ; final Object other$screenshots = other . getScreenshots ( ) ; result = result * PRIME ( ( Object ) this ) return false ; final Object this$screenshots ) { final Object other$screenshots = other . getScreenshots ( ) ; if ( this$screenshots == null ? other$screenshots != null ? other", "import java . awt . * ; import com . apollocurrency . aplwallet . apl . util . injectable . PropertiesHolder ;", "holdBattleBetween ( EPlayerType . AI_EASY , EPlayerType . AI_VERY_EASY , 60 * MINUTES ) ;", "import org . jenetics . internal . util . HashBuilder ;", "public ServiceCall dateNullAsync ( LocalDate dateQuery , final ServiceCallback < Void > serviceCallback ) { Call < ResponseBody > call = service . dateNull ( this . client . getMapperAdapter ( ) . serializeRaw ( dateQuery ) ) ; final ServiceCall serviceCall = new ServiceCall ( call ) ; }", "String formatName = FilenameUtils . getExtension ( ontologyIRI . toString ( ) ) ; OWLDocumentFormat format = getFormat ( formatName ) ; return saveOntology ( ontology , format , ontologyIRI , true ) ;", "public boolean isTerminated ( CassandraTask task ) { try { final String name = task . getName ( ) ; final Collection < String > taskNames = stateStore . fetchTaskNames ( ) ; if ( CollectionUtils . isNotEmpty ( taskNames ) && taskNames . contains ( name ) ) { final Protos . TaskStatus status = stateStore . fetchStatus ( name ) ; return CassandraDaemonStatus . isTerminated ( status . getState ( ) ) ; } } catch ( StateStoreException e ) { LOGGER . error ( e . getMessage ( ) , e ) ; } } } public void remove ( Set < String > names ) throws PersistenceException { for ( String name : names ) { remove ( name ) ; } }", "import com . sk89q . worldedit . extension . platform . Actor ; import com . sk89q . worldedit . function . FlatRegionFunction ;", "| ValidateSignatureException | ContractValidateException | ContractExeException | TaposException | DupTransactionException | TransactionExpirationException | ReceiptCheckErrException | TooBigTransactionException | TooBigTransactionResultException | ValidateScheduleException | VMIllegalException | BadBlockException e ) {", "* Long running delete request , service returns a 204 to the initial request , indicating success .", "routineLoader , txnService , securityService , costModel , metricsService , serviceManager ) ;", "static class DefaultFeignTargeterConditions extends AllNestedConditions { DefaultFeignTargeterConditions ( ) { super ( ConfigurationPhase . PARSE_CONFIGURATION ) ; } @ Conditional ( FeignCircuitBreakerDisabledConditions . class ) static class FeignCircuitBreakerDisabled { } @ Conditional ( HystrixDisabledConditions . class ) static class HystrixDisabled { } } @ Configuration ( proxyBeanMethods = false ) @ ConditionalOnClass ( OAuth2ClientContext . class ) @ ConditionalOnProperty ( \"feign.oauth2.enabled\" ) protected static class Oauth2FeignConfiguration { @ Bean @ ConditionalOnMissingBean ( OAuth2FeignRequestInterceptor . class ) @ ConditionalOnBean ( { OAuth2ClientContext . class , OAuth2ProtectedResourceDetails . class } ) public RequestInterceptor oauth2FeignRequestInterceptor ( OAuth2ClientContext oAuth2ClientContext , OAuth2ProtectedResourceDetails resource ) { return new OAuth2FeignRequestInterceptor ( oAuth2ClientContext , resource ) ; } }", "interface RunInfo { String HEADER = \"HEADER/\" ; String DATA = \"DATA/\" ; String SCREENS = \"SCREENS\" ; static final String PAUSE_STEP = \"PAUSE_STEP\" ; String SCROLL = \"SCROLL\" ; static final String COUNTDOWN = \"COUNTDOWN\" ; }", "import org . apache . sis . internal . jdk8 . JDK8 ; import org . apache . sis . internal . jdk8 . Function ;", "", "", "", "public boolean isHiveImpersonation ( String datasource ) { return Boolean . parseBoolean ( Optional . ofNullable ( properties . getProperty ( \"hive.jdbc.impersonation.\" + datasource ) ) . orElse ( \"false\" ) ) ; } public Optional < String > getWebhdfsProxyUser ( String datasource ) { return Optional . ofNullable ( properties . getProperty ( String . format ( \"webhdfs.proxy.user.%s\" , datasource ) ) ) ; } public Optional < String > getWebhdfsProxyPassword ( String datasource ) { return Optional . ofNullable ( properties . getProperty ( String . format ( \"webhdfs.proxy.password.%s\" , datasource ) ) ) ; } public Optional < String > getDatabaseType ( ) { return Optional . ofNullable ( properties . getProperty ( \"database.type\" ) ) ; } public String getMysqlHost ( ) { return PropertiesUtil . getParam ( properties , \"mysql.host\" ) ; } public String getMysqlPort ( ) { return PropertiesUtil . getParam ( properties , \"mysql.port\" ) ; } public String getMysqlDatabase ( ) { return PropertiesUtil . getParam ( properties , \"mysql.database\" ) ; } public String getMysqlUser ( ) { return PropertiesUtil . getParam ( properties , \"mysql.user\" ) ; } public String getMysqlPassword ( ) { return PropertiesUtil . getParam ( properties , \"mysql.password\" ) ; }", "import com . orientechnologies . orient . core . index . ORuntimeKeyIndexDefinition ; import com . orientechnologies . orient . core . index . OSimpleKeyIndexDefinition ; import com . orientechnologies . orient . core . intent . OIntentMassiveInsert ; import com . orientechnologies . orient . core . metadata . schema . OClass ;", "import org . apache . sis . internal . jdk8 . Temporal ;", "return quotaNode . replaceSelf4INodeDirectory ( ) ; inodeMap . put ( newNode ) ;", "return Props . create ( HiveMqtt5ClientActor . class , connection , proxyActor , connectionActor ) ;", "import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; import org . opengis . annotation . UML ;", "void zoteroBetterBibtexExport ( JsArrayString itemKeys , String translatorId , int libraryID , ServerRequestCallback < JavaScriptObject > callback ) ; void zoteroGetCollectionSpecs ( ServerRequestCallback < JavaScriptObject > callback ) ;", "import static org . mockito . Mockito . mock ; import static org . assertj . core . api . Assertions . assertThatThrownBy ;", "private void parseReport ( Project project , SensorContext context , File report ) throws javax . xml . stream . XMLStreamException { log . info ( \"Parsing report '{}'\" , report ) ; }", "import org . json . JSONException ; import org . json . JSONObject ;", "private ModelProcessor . ProcessResult processAnnotations ( AnnotationElements validatedModel ) throws ProcessingException , Exception { }", "Log . d ( TAG , \"cameraCurrentlyLocked:\" + cameraCurrentlyLocked ) ;", "ArtifactIdentifier identifier = processManager . getFd ( pid , fd ) ; if ( identifier == null ) { identifier = addUnknownFdAndMarkEpoch ( pid , fd ) ; }", "import org . elasticsearch . search . aggregations . InternalSingleBucketAggregationTestCase ; import org . elasticsearch . search . aggregations . bucket . ParsedSingleBucketAggregation ;", "public int getActualTransactionVersion ( ) { return transactionVersionValidator . getActualVersion ( ) ; } public boolean isValidVersion ( int transactionVersion ) { return transactionVersionValidator . isValidVersion ( transactionVersion ) ; } public void checkVersion ( int transactionVersion ) { transactionVersionValidator . checkVersion ( transactionVersion ) ; } public boolean verifySignature ( Transaction transaction ) { Account sender = accountService . getAccount ( transaction . getSenderId ( ) ) ; if ( sender == null ) { log . error ( \"Sender account not found, senderId={}\" , transaction . getSenderId ( ) ) ; return false ; } @ ParentChildSpecific ( ParentMarker . MULTI_SIGNATURE ) Credential signatureCredential ; SignatureVerifier signatureVerifier = SignatureToolFactory . selectValidator ( transaction . getVersion ( ) ) . orElseThrow ( UnsupportedTransactionVersion :: new ) ; if ( log . isTraceEnabled ( ) ) { log . trace ( \"#MULTI_SIG# verify signature validator class={}\" , signatureVerifier . getClass ( ) . getName ( ) ) ; } if ( sender . isChild ( ) ) { if ( transaction . getVersion ( ) < 2 ) { log . error ( \"Inconsistent transaction fields, the value of the sender property 'parent' doesn't match the transaction version.\" ) ; return false ; } signatureCredential = new MultiSigCredential ( 2 , accountService . getPublicKeyByteArray ( sender . getParentId ( ) ) , transaction . getSenderPublicKey ( ) ) ; } else { if ( transaction . getVersion ( ) < 2 ) { log . error ( \"Inconsistent transaction fields, the value of the sender property 'parent' doesn't match the transaction version.\" ) ; return false ; } if ( transaction . getVersion ( ) ) { log . error ( \"Inconsistent transaction fields, the value of the sender property 'parent' doesn't match the transaction version.\" ) ; return false ; } if ( transaction . getVersion ( ) ) ; return false ; } else { if ( transaction . getVersion (", "import io . anuke . ucore . core . Settings ;", "private final ExponentialBackOffConfig exponentialBackOffConfig ; private final ShutdownBehaviour shutdownBehaviour ;", "MetaClass compType = type . getOuterComponentType ( ) . asBoxed ( ) ;", "@ Override public void onFailure ( Throwable e ) { responseWithFailure ( e ) ; }", "import org . mifos . customers . office . business . service . OfficeHierarchyService ; import org . mifos . customers . office . persistence . OfficeDao ; import org . mifos . dto . domain . OfficeLevelDto ; import org . mifos . core . MifosRuntimeException ; import org . mifos . dto . screen . LoanProductDto ;", "_parseIntValue ( ) ;", "throws SQLException { Connection result = null ; }", "private byte [ ] defaultSessionTicketAgeAdd = ArrayConverter . hexStringToByteArray ( \"cb8dbe8e\" ) ; private byte [ ] defaultSessionTicketNonce = ArrayConverter . hexStringToByteArray ( \"00\" ) ; private byte [ ] defaultSessionTicketIdentity = ArrayConverter . hexStringToByteArray ( \"5266d21abe0f5156106eb1f0ec54a48a90fbc136de990a8881192211cc83aa7992ceb67d7a40b3f304fdea87e4ca61042c19641fd7493975ec69a3ec3f5fb6404aa4ac5acd5efbea15d454d89888a46fc4e6c6b9a3e0ee08ea21538372ced8d0aca453ceae44ce372a5388ab4cef67c5eae8cc1c72735d2646c19b2c50a4ee9bc97e70c6b57cab276a11a59fc5cbe0f5d2519e164fbf9f07a9dd053bcfc08939b475c7a2e76f04ef2a06cc9672bd4034\" ) ;", "", "assertNull ( TestValues . NULL , msg . getAccPedalPosition ( ) ) ; assertNull ( TestValues . NULL , msg . getAirbagStatus ( ) ) ; assertNull ( TestValues . NULL , msg . getBeltStatus ( ) ) ; assertNull ( TestValues . NULL , msg . getDriverBraking ( ) ) ; assertNull ( TestValues . NULL , msg . getFuelLevel ( ) ) ; assertNull ( TestValues . NULL , msg . getTirePressure ( ) ) ; assertNull ( TestValues . NULL , msg . getWiperStatus ( ) ) ; assertNull ( TestValues . NULL , msg . getGps ( ) ) ; assertNull ( TestValues . NULL , msg . getSpeed ( ) ) ; assertNull ( TestValues . NULL , msg . getRpm ( ) ) ; assertNull ( TestValues . NULL , msg . getFuelLevelState ( ) ) ; assertNull ( TestValues . NULL , msg . getInstantFuelConsumption ( ) ) ; assertNull ( TestValues . NULL , msg . getExternalTemperature ( ) ) ; assertNull ( TestValues . NULL , msg . getPrndl ( ) ) ; assertNull ( TestValues . NULL , msg . getOdometer ( ) ) ; assertNull ( TestValues . NULL , msg . getBodyInformation ( ) ) ; assertNull ( TestValues . NULL , msg . getPrndl ( ) ) ; assertNull ( TestValues . NULL , msg . getOdometer ( ) ) ; assertNull ( TestValues . NULL , msg . getExternalTemperature ( ) ) ; assertNull ( TestValues . NULL , msg . getPrndl ( ) ) ; assertNull ( TestValues . NULL , msg . getRpm ( ) ) ; assertNull ( TestValues . NULL , msg . getBodyInformation ( ) ) ; assertNull ( TestValues . NULL , msg . getOdometer ( ) ) ; assertNull ( Test", "public static final ParseException INVALID_Q_VALUE = new ParseException ( \"Value of 'q' should start either from 0 or 1\" ) ; public static final ParseException ENCODE_NEGATIVE_VALUE = new ParseException ( \"Trying to encode value that is less than 0\" ) ; public static final ParseException DECODE_NEGATIVE_VALUE = new ParseException ( \"Trying to decode negative value\" ) ;", "", "", "import de . metas . picking . api . PickingSlotId ; import de . metas . util . ISingletonService ;", "new CryptoBulkFeature < > ( session , new DisabledBulkFeature ( ) , new GraphDeleteFeature ( session ) , cryptomator ) . pre ( Transfer . Type . upload , Collections . singletonMap ( new TransferItem ( source ) , status ) , new DisabledConnectionCallback ( ) ) ; new StreamCopier ( new TransferStatus ( ) , new TransferStatus ( ) ) . transfer ( new ByteArrayInputStream ( content ) , new CryptoWriteFeature < > ( session , new GraphWriteFeature ( session ) , cryptomator ) . write ( source , status . length ( content . length ) , new DisabledConnectionCallback ( ) ) ) ; assertTrue ( new CryptoFindFeature ( session , new DefaultFindFeature ( session ) , cryptomator ) . find ( source ) ) ;", "import org . jooq . lambda . Collectable ; import lombok . AllArgsConstructor ; import lombok . experimental . Wither ;", "m_fusedLocationProviderClient . stop ( locationCallback ) ;", "@ Test public void shouldNotHaveVeryLongSectionCommentLines ( ) { List < Method > sectionCommentMethods = getSectionCommentMethods ( ) ; Set < Method > badMethods = new HashSet < > ( ) ; for ( Method method : sectionCommentMethods ) { boolean hasTooLongLine = getSectionComments ( method ) . stream ( ) . anyMatch ( line -> line . length ( ) > MAX_COMMENT_LENGTH ) ; if ( hasTooLongLine ) { badMethods . add ( method ) ; } } if ( ! badMethods . isEmpty ( ) ) { String methodList = badMethods . stream ( ) . map ( m -> m . getName ( ) + \" in \" + m . getDeclaringClass ( ) . getSimpleName ( ) ) . collect ( Collectors . joining ( \"\\n- \" ) ) ; fail ( \"Found SectionComments methods with too long comments:\\n- \" + methodList ) ; } } @ SuppressWarnings ( \"unchecked\" ) private List < Method > getSectionCommentMethods ( ) { List < Class < ? extends SettingsHolder > > settingsClasses = new ClassCollector ( \"src/main/java\" , \"fr/xephi/authme/settings/properties/\" ) . collectClasses ( SettingsHolder . class ) ; checkArgument ( ! settingsClasses . isEmpty ( ) , \"Could not find any SettingsHolder classes\" ) ; return settingsClasses . stream ( ) . map ( Class :: getDeclaredMethods ) . flatMap ( Arrays :: stream ) . filter ( method -> method . isAnnotationPresent ( SectionComments . class ) ) . collect ( Collectors . toList ( ) ) ; } private static List < String > getSectionComments ( Method sectionCommentsMethod ) { Map < String , String [ ] > comments = ReflectionTestUtils . invokeMethod ( sectionCommentsMethod , null ) ; return comments . values ( ) . flatMap ( Arrays :: stream ) . collect ( Collectors . toList ( ) ) ; for ( Property < ? > property : configurationData . getProperties ( ) )", "", "protected void preRenderCallback ( EntitySongbird entity , MatrixStack matrixStackIn , float partialTickTime ) { if ( this . entityModel . isChild ) { matrixStackIn . scale ( 0.35F , 0.35F , 0.35F ) ; } }", "CArray clone ; try { clone = ( CArray ) super . clone ( ) ; } catch ( CloneNotSupportedException ex ) { throw new RuntimeException ( ex ) ; } clone . associative_mode = associative_mode ; if ( ! associative_mode ) { if ( array != null ) { clone . array = new ArrayList < Construct > ( this . array ) ; } } else if ( associative_array != null ) { clone . associative_array = new TreeMap < String , Construct > ( this . associative_array ) ; } clone . regenValue ( new HashSet < CArray > ( ) ) ; return clone ;", "areCoMDynamicsSatisfied = new YoBoolean ( \"areCoMDynamicsSatisfied\" , registry ) ; areCoMDynamicsSatisfied . set ( false ) ;", "@ Override public boolean isFeaturesReprojectionDisabled ( ) { return featuresReprojectionDisabled ; } @ Override public void setFeaturesReprojectionDisabled ( boolean featuresReprojectionDisabled ) { this . featuresReprojectionDisabled = featuresReprojectionDisabled ; }", "String link = status . isIdle ( ) ? task . getLink ( ) : Util . fixNull ( Jenkins . getInstance ( ) . getRootUrl ( ) ) + currentBuild . getUrl ( ) ; tasks . add ( new Task ( task . getId ( ) , task . getName ( ) , String . valueOf ( currentBuild . getNumber ( ) ) , status , link , task . isManual ( ) , getTestResult ( currentBuild ) , task . getDownstreamTasks ( ) ) ) ;", "", "df = manager . getOWLDataFactory ( ) ; Set < OWLDataProperty > numericDataProperties = new HashSet < OWLDataProperty > ( ) ; for ( OWLDataProperty dataProperty : datatypeProperties ) { Collection < OWLDataRange > ranges = dataProperty . getRanges ( owlAPIOntologies ) ; }", "prop . setComment ( \"Maximum number of Astro Miners each player is allowed to have active (default 4).\" ) ; prop . setLanguageKey ( \"gc.configgui.astro_miners_max\" ) ;", "performCachedOperation ( new SolrIndexCachedOperation . CacheOperation ( ) { @ Override public void execute ( ) throws ServiceException { int page = 0 ; while ( ( page * pageSize ) < numItemsToIndex ) { buildIncrementalIndex ( page , pageSize ) ; page ++ ; } } } ) ;", "this . attributes . addAll ( attributes ) ; return ( T ) this ;", "import org . sufficientlysecure . keychain . R ; import org . sufficientlysecure . keychain . pgp . PgpKeyHelper ;", "@ Parameter ( required = true ) private Set < String > excludes = new HashSet < String > ( ) ;", "return mTrustManager ; } public void useProxy ( boolean enableTor , String type , String host , int port )", "this ( prefix , hostname , port , queueSize , constantTags , errorHandler , DEFAULT_MAX_PACKET_SIZE_BYTES ) ; } public NonBlockingStatsDClient ( final String prefix , final String hostname , final int port , final int queueSize , final String [ ] constantTags , final StatsDClientErrorHandler errorHandler , final int maxPacketSizeBytes ) throws StatsDClientException { this ( prefix , queueSize , constantTags , errorHandler , staticStatsDAddressResolution ( hostname , port ) , maxPacketSizeBytes , SOCKET_TIMEOUT_MS , SOCKET_BUFFER_BYTES ) ;", "package org . n52 . sos . ds . hibernate . util . observation ; import java . util . List ; import java . util . Locale ; import org . hibernate . query . Query ; import org . hibernate . Session ; import org . n52 . iceland . convert . ConverterException ; import org . n52 . series . db . beans . DatasetEntity ; import org . n52 . shetland . ogc . gml . AbstractFeature ; import org . n52 . shetland . ogc . gml . time . TimeInstant ; import org . n52 . shetland . ogc . om . ObservationStream ; import org . n52 . shetland . ogc . om . OmObservableProperty ; import org . n52 . shetland . ogc . om . OmObservation ; import org . n52 . shetland . ogc . om . OmObservationConstellation ; import org . n52 . shetland . ogc . om . SingleObservationValue ; import org . n52 . shetland . ogc . om . values . NilTemplateValue ; import org . n52 . shetland . ogc . ows . exception . OwsExceptionReport ; import org . n52 . shetland . ogc . sos . SosProcedureDescription ; import org . n52 . shetland . ogc . sos . request . AbstractObservationRequest ; import org . n52 . shetland . ogc . ows . exception . OwsExceptionReport ; import org . n52 . shetland . ogc . sos . dao . FeatureOfInterestDAO ; import org . n52 . shetland . ogc . sos . ds . hibernate . util . HibernateHelper ; import org . n52 . shetland . ogc . sos . request . AbstractObservationRequest ; import org .", "internalRecordUnion , externalRecordUnion , feedRecordUnion , unorderedListOfHintsType , BuiltinType . ASTRING , BuiltinType . AINT32 , BuiltinType . AINT32 } ;", "* Get an array of array of strings [ { \"0\" : [ \"1\" , \"2\" , \"3\" ] , \"1\" : [ ] , \"2\" : [ \"7\" , \"8\" , \"9\" ] }", "public void process ( final TransformerConfiguration configuration ) { final JsonParser input , final JsonGenerator output , final List < Consumer < ColumnMetadata > > columnActions = configuration . getActions ( ColumnMetadata . class ) ; final ParsedActions actions = columnActions == null ? null : columnActions . get ( 0 ) ; }", "* Get an array of array of strings [ { \"0\" : [ \"1\" , \"2\" , \"3\" ] , \"1\" : [ ] , \"2\" : [ \"7\" , \"8\" , \"9\" ] }", "", "private static void startEngineTest ( String path , String filename ) { }", "jj_la1 [ 229 ] = jj_gen ;", "", "context . setActiveServerKeySetType ( Tls13KeySetType . HANDSHAKE_TRAFFIC_SECRETS ) ; context . setConnection ( new InboundConnection ( ) ) ;", "", "private PreviewScalingStrategy previewScalingStrategy = null ; private boolean torchOn = false ;", "import org . killbill . billing . beatrix . integration . db . TestDBRouterAPI ; import org . killbill . billing . client . KillBillClientException ;", "transform = ( ( MathTransformProvider ) method ) . createMathTransform ( this , parameters ) ; } catch ( IllegalArgumentException exception ) {", "import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . hadoop . conf . Configuration ; import org . opencb . biodata . formats . alignment . io . AlignmentDataReader ; import org . opencb . biodata . formats . alignment . io . AlignmentRegionDataReader ; import org . opencb . biodata . formats . alignment . io . AlignmentRegionDataWriter ; import org . opencb . biodata . formats . alignment . sam . io . AlignmentBamDataReader ; import org . opencb . biodata . formats . alignment . sam . io . AlignmentBamDataWriter ; import org . opencb . biodata . formats . alignment . sam . io . AlignmentSamDataReader ; import org . opencb . biodata . formats . alignment . sam . io . AlignmentSamDataWriter ;", "private static final Object MUTEX = new BuilderFactoryMutex ( ) ;", "dataSource . update ( dbVersion ) ; log . debug ( \"Init existing SHARD using db version'{}' in {} ms\" , dbVersion , System . currentTimeMillis ( ) - start ) ;", "import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "private static Intent createBaseSummaryIntent ( Context context , int summaryNotificationId , JSONObject fcmJson , String group ) { return getNewBaseIntent ( context , summaryNotificationId ) . putExtra ( BUNDLE_KEY_ONESIGNAL_DATA , fcmJson . toString ( ) ) . putExtra ( \"summary\" , group ) ; }", "AggregateMinuteMessage aggregateMinuteMessage = GsonUtil . GSON . fromJson ( eventMessageJsonElement , AggregateMinuteMessage . class ) ; aggregateMinuteMessage . setSym ( aggregateMinuteMessage . getTicker ( ) ) ;", "private static final String WARNING = \"warning\" ; private static final String SUCCESS = \"success\" ;", "* Long running put request , service returns a 201 to the initial request with no payload", "if ( switchVariable != null ) { ProducedType st = switchVariable . getType ( ) . getTypeModel ( ) ; if ( ! isTypeUnknown ( st ) ) { checkAssignable ( t , st , e , \"case must be assignable to switch variable type\" ) ; } } else if ( switchStatementOrExpression != null ) { Tree . Expression switchExpression = switchClause ( ) . getExpression ( ) ; if ( switchExpression != null ) { ProducedType st = switchExpression . getTypeModel ( ) ; if ( ! isTypeUnknown ( st ) ) { if ( ! hasUncheckedNulls ( switchExpression . getTerm ( ) ) || ! isNullCase ( t ) ) { checkAssignable ( t , st , e , \"case must be assignable to switch expression type\" ) ; } } } } }", "mes ( config ( ) . GAME_TICK * 2 , \"Gujuo shakes his head slightly in sadness.\" ) ;", "if ( ! configuration . getBoolean ( \"disable-webserver\" , true ) ) { InetAddress bindAddress ; { String address = configuration . getString ( \"webserver-bindaddress\" , \"0.0.0.0\" ) ; try { bindAddress = address . equals ( \"0.0.0.0\" ) ? null : InetAddress . getByName ( address ) ; } catch ( UnknownHostException e ) { bindAddress = null ; } } int port = configuration . getInt ( \"webserver-port\" , 8123 ) ; webServer = new HttpServer ( bindAddress , port ) ; webServer . handlers . put ( \"/\" , new FilesystemHandler ( getFile ( configuration . getString ( \"webpath\" , \"web\" ) ) ) ) ; webServer . handlers . put ( \"/tiles/\" , new FilesystemHandler ( tilesDirectory ) ) ; webServer . handlers . put ( \"/up/\" , new ClientUpdateHandler ( mapManager , playerList , getServer ( ) ) ) ; webServer . handlers . put ( \"/up/configuration\" , new ClientConfigurationHandler ( ( Map < ? , ? > ) configuration . getProperty ( \"web\" ) ) ) ; SendMessageHandler messageHandler = new SendMessageHandler ( ) ; messageHandler . onMessageReceived . addListener ( new Listener < SendMessageHandler . Message > ( ) { @ Override public void triggered ( Message t ) { log . info ( \"[WEB] \" + t . name + \": \" + t . message ) ; getServer ( ) . broadcastMessage ( \"[WEB] \" + t . name + \": \" + t . message ) ; } } ) ; webServer . handlers . put ( \"/up/sendmessage\" , messageHandler ) ; try { webServer . startServer ( ) ; } catch ( new Listener < SendMessageHandler . Message > ( ) { @ Override public void triggered ( Message t ) { log . info ( \"[WEB] \" + t . name + \": \" + t", "private static final RequestHandler APP_RESOURCE_HANDLER = new ApplicationResourceHandler ( ) ;", "return new ParamsInfo ( sql , name , jarUrlList , localSqlPluginPath , remoteSqlPluginPath , pluginLoadMode , deployMode , confProp , dirtyProperties , planner ) ;", "protected boolean passToNextPipe ( LPTravelingItem item , TileEntity tile ) { IPipeInformationProvider information = SimpleServiceLocator . pipeInformationManager . getInformationProviderFor ( tile ) ; }", "for ( Hash hash : trans ) { TransactionViewModel transaction = TransactionViewModel . fromHash ( tangle , hash ) ; if ( transaction . getType ( ) == TransactionViewModel . PREFILLED_SLOT || transaction . snapshotIndex ( ) == 0 ) { } }", "ttc . sceConf = new TestSCEConfiguration ( suite , NetworkingStrategy . KRYONET , evaluator , noOfThreads , noOfVMThreads , ttc . netConf , new InMemoryStorage ( ) ,", "public CsvRepository ( File file , EntityTypeFactory entityTypeFactory , AttributeFactory attrMetaFactory ,", "if ( finding . getDependency ( ) != null && finding . getDependency ( ) . getCve ( ) != null ) { if ( vulnFinding . getDependency ( ) != null && vulnFinding . getDependency ( ) . getCve ( ) != null ) { return finding . getDependency ( ) . getCve ( ) . equals ( vulnFinding . getDependency ( ) . getCve ( ) ) ; } } else if ( vulnFinding . getDependency ( ) == null ) { if ( ! finding . getIsStatic ( ) ) { if ( ! vulnFinding . getIsStatic ( ) && dynamicToDynamicMatch ( finding , vulnFinding ) ) { return true ; } else if ( vulnFinding . getIsStatic ( ) && dynamicToStaticMatch ( finding , vulnFinding ) ) { return true ; } } else if ( finding . getIsStatic ( ) ) { if ( ! vulnFinding . getIsStatic ( ) && staticToStaticMatch ( finding , vulnFinding ) ) { return true ; } }", "subscription . getProduct ( ) . getName ( ) , principal , subscription . getOwner ( ) . getId ( ) , null , subscription . getId ( ) , null , entityToJson ( subscription ) , null , null ) ;", "jj_la1 [ 107 ] = jj_gen ;", "", "private AccountBalanceService accountBalanceService = CDI . current ( ) . select ( BalanceService . class ) . get ( ) ; private AccountInfoService accountInfoService = CDI . current ( ) . select ( AccountInfoServiceImpl . class ) . get ( ) ; private AccountLeaseService accountLeaseService = CDI . current ( ) . select ( AccountLeaseServiceImpl . class ) . get ( ) ; private AccountAssetService accountAssetService = CDI . current ( ) . select ( AccountAssetServiceImpl . class ) . get ( ) ; private AccountCurrencyService accountCurrencyService = CDI . current ( ) . select ( AccountCurrencyServiceImpl . class ) . get ( ) ;", "import de . ovgu . featureide . Commons ; import de . ovgu . featureide . ConstraintProperties ; import de . ovgu . featureide . fm . core . analysis . ConstraintProperties . ConstraintDeadStatus ; import de . ovgu . featureide . fm . core . analysis . ConstraintProperties . ConstraintFalseOptionalStatus ; import de . ovgu . featureide . fm . core . analysis . FeatureProperties . ConstraintRedundancyStatus ; import de . ovgu . featureide . fm . core . analysis . FeatureProperties ; import de . ovgu . featureide . fm . core . analysis . FeatureProperties . FeatureDeterminedStatus ; import de . ovgu . featureide . fm . core . analysis . FeatureProperties . FeatureParentStatus ; import de . ovgu . featureide . fm . core . analysis . FeatureProperties . FeatureSelectionStatus ;", "final MPPOrderNode activity = getPP_Order_Node ( ) ; if ( X_PP_Order_Node . DOCACTION_Complete . equals ( activity . getDocStatus ( ) ) )", "public void validateMissing ( Currency currency , Transaction transaction , Set < CurrencyType > validators ) throws AplException . NotValidException { log . trace ( \"EXCHANGEABLE 2 [{}]: \\ncurrency={}, \\n{}, \\n{}\" , transaction . getECBlockHeight ( ) , currency , transaction , validators ) ; if ( transaction . getType ( ) . getSpec ( ) == MS_CURRENCY_ISSUANCE ) { } }", "maxLargeSizeOfPost , largePostRatio , maxNumberOfLikes , exportText ) ;", "CompletableFuture < AppResponse > appResponseFuture = currentClient . request ( inv , timeout ) . thenApply ( obj -> ( AppResponse ) obj ) ; FutureContext . getContext ( ) . setCompatibleFuture ( responseFuture ) ; return new AsyncRpcResult ( appResponseFuture , invocation ) ;", "", "deleteSamples ( sampleId ) ;", "@ Override public List < String > getValidators ( ) throws APIException { IstanbulValidators validators = null ; try { validators = gethService . getQuorumService ( ) . istanbulGetValidators ( \"latest\" ) . send ( ) ; if ( validators == null || validators . hasError ( ) ) { throw new APIException ( validators . getError ( ) . getMessage ( ) ) ; } } catch ( IOException e ) { throw new APIException ( e . getMessage ( ) ) ; } return validators . getValidators ( ) ; } @ Override public Map < String , Boolean > getCandidates ( ) throws APIException { IstanbulCandidates candidates = null ; try { candidates = gethService . getQuorumService ( ) . istanbulCandidates ( ) . send ( ) ; if ( candidates == null || candidates . hasError ( ) ) { throw new APIException ( candidates . getError ( ) . getMessage ( ) ) ; } } catch ( IOException e ) { throw new APIException ( e . getMessage ( ) ) ; } return candidates . getCandidates ( ) ; } @ Override public String propose ( String address , boolean auth ) throws APIException { ConsensusNoResponse response = null ; try { response = gethService . getQuorumService ( ) . istanbulPropose ( address , auth ) . send ( ) ; if ( response == null || response . hasError ( ) ) { throw new APIException ( response . getError ( ) . getMessage ( ) ) ; } } catch ( IOException e ) { throw new APIException ( e . getMessage ( ) ) ; } return candidates . getCandidates ( ) ; } @ Override public String propose ( String address , boolean auth ) throws APIException { ConsensusNoResponse response = null ; try { response = gethService . getQuorumService ( ) . istanbulPropose ( address , auth ) . send ( ) ; if ( response == null || response . hasError ( ) ) { throw new APIException ( response . getError ( )", "", "public static AsyncComponent < Void > buildDeletionProcess ( List < File > files , NetworkManager networkManager )", "OrionHighlightingConfigurationOverlay config = OrionHighlightingConfigurationOverlay . create ( ) ; config . setId ( lang . getLanguageId ( ) + \".highlighting\" ) ; config . setContentTypes ( mimeType ) ; config . setPatterns ( lang . getHighlightingConfiguration ( ) ) ; orionContentTypeRegistrant . registerFileType ( orionContentType , config ) ; LOGGER . info ( \"registered language description for \" + lang . getLanguageId ( ) ) ;", "boolean uploadWasFine = intent . getBooleanExtra ( FileUploadService . EXTRA_UPLOAD_RESULT , false ) ;", "", "* Long running delete request , service returns a 202 to the initial request receing a reponse with an invalid 'Location' and 'Retry-After' headers", "", "if ( jj_3R_745 ( ) ) { jj_scanpos = xsp ; break ; }", "private final Map < EntityType < ? > , Entity > CACHED_ENTITIES = new HashMap < > ( ) ; @ Override public < T extends Entity > T getCachedEntity ( EntityType < T > type ) { return ( T ) CACHED_ENTITIES . get ( type ) ; } @ Override public < T extends Entity > void setCachedEntity ( EntityType < T > type , T entity ) { CACHED_ENTITIES . put ( type , entity ) ; } public boolean setBlockStateWithBlockEntity ( BlockPos blockPos_1 , BlockState blockState_1 , BlockEntity newBlockEntity , int int_1 ) { if ( ( Object ) this instanceof EmptyChunk ) return false ; if ( World . isHeightInvalid ( blockPos_1 ) ) { return false ; } else if ( ! this . isClient && this . properties . getGeneratorType ( ) == LevelGeneratorType . DEBUG_ALL_BLOCK_STATES ) { return false ; } else { WorldChunk worldChunk_1 = this . getWorldChunk ( blockPos_1 ) ; Block block_1 = blockState_1 . getBlock ( ) ; BlockState blockState_2 ; if ( newBlockEntity != null && block_1 instanceof BlockEntityProvider ) blockState_2 = ( ( IWorldChunk ) worldChunk_1 ) . setBlockStateWithBlockEntity ( blockPos_1 , blockState_1 , newBlockEntity , ( int_1 & 64 ) != 0 ) ; else blockState_2 = worldChunk_1 . setBlockState ( blockPos_1 , blockState_1 , newBlockEntity , ( int_1 & 64 ) != 0 ) ; if ( blockState_2 == null ) { return false ; } else { BlockState_3 = this . getBlockState ( blockPos_1 ) ; if ( blockState_3 != blockState_2 && ( blockState_3 . getLightSubtracted ( ( BlockView", "import java . util . * ;", "List < Versioned < byte [ ] > > values = storeRW . get ( keyBytes , null ) ;", "Engine . Index create = new Engine . Index ( newUid ( \"1\" ) , doc , SequenceNumbersService . UNASSIGNED_SEQ_NO , Versions . MATCH_DELETED , VersionType . INTERNAL , PRIMARY , 0 , - 1 , false ) ;", "@ JsonInclude ( Include . NON_EMPTY )", "private Route wrapWithRootDirectives ( final Function < String , Route > rootRoute ) { final Function < Function < String , Route > , Route > outerRouteProvider = innerRouteProvider -> handleExceptions ( exceptionHandler , ( ) -> ensureCorrelationId ( correlationId -> rewriteResponse ( materializer , correlationId , ( ) -> RequestTimeoutHandlingDirective . handleRequestTimeout ( correlationId , ( ) -> logRequestResult ( correlationId , ( ) -> innerRouteProvider . apply ( correlationId ) ) ) ) ) ; final Function < String , Route > innerRouteProvider = correlationId -> EncodingEnsuringDirective . ensureEncoding ( correlationId , ( ) -> HttpsEnsuringDirective . ensureHttps ( correlationId , ( ) -> CorsEnablingDirective . enableCors ( ( ) -> SecurityResponseHeadersDirective . addSecurityResponseHeaders ( ( ) -> handleRejections ( rejectionHandler , ( ) -> handleExceptions ( exceptionHandler , ( ) -> rootRoute . apply ( correlationId )", "import algorithms . RestrictedVisibilityGraphAlgorithm ;", "throw rethrowAsGuestException ( e , meta ) ;", "this . lowerJaw = new ModelRenderer ( this , 52 , 48 ) ; this . lowerJaw . setRotationPoint ( 0.0F , 2.0F , 0.0F ) ; this . lowerJaw . addBox ( - 2.0F , 0.0F , - 0.5F , 4 , 2 , 1 , 0.0F ) ; this . lForeleg01 = new ModelRenderer ( this , 29 , 0 ) ; this . lForeleg01 . setRotationPoint ( 3.1F , 0.9F , 2.3F ) ; this . lForeleg01 . addBox ( - 1.0F , - 2.4F , - 2.5F , 3 , 7 , 5 , 0.0F ) ; this . setRotateAngle ( lForeleg01 , 0.13962634015954636F , 0.0F , - 0.08726646259971647F ) ; this . rAntler04 = new ModelRenderer ( this , 0 , 13 ) ; this . rAntler04 . mirror = true ; this . rAntler04 . setRotationPoint ( 0.0F , - 0.1F , - 2.6F ) ; this . lHindLeg01 = new ModelRenderer ( this , 46 , 0 ) ; this . lHindLeg01 . setRotationPoint ( 0.0F , - 0.22689280275926282F , 0.0F ) ; this . rAntler04 . mirror = true ; this . rAntler04 . setRotationPoint ( 0.0F , - 0.22689280275926282F , - 0.22759093446006054F , - 0.22689280275926282F , - 0.2275", "String avail = ( resource . getCurrentAvailability ( ) != null && resource . getCurrentAvailability ( ) . getAvailabilityType ( ) != null ) ? ( resource . getCurrentAvailability ( ) . getAvailabilityType ( ) . name ( ) . toLowerCase ( ) ) : \"down\" ; badge . setSrc ( \"types/\" + category + \"_\" + avail + \"_24.png\" ) ;", "ret . add ( Task03150LoweCaseURLOnVirtualLinksTable . class ) ; ret . add ( Task03500RulesEngineDataModel . class ) ;", "I3DOperation [ ] texture = new I3DOperation [ ] { LogisticsNewRenderPipe . basicPipeTexture } ;", "* @ warn method description missing * @ warn parameter descriptions missing", "if ( isActualParameter ( parameter ) ) { String arg = parameter . asType ( ) . toString ( ) ; String result = extractSimpleType ( arg ) ; parameterTypeNames . add ( result ) ; referenceTypes . add ( ( parameter . asType ( ) instanceof ReferenceType ) ) ; }", "import static com . b2international . index . query . Expressions . matchAnyLong ; import static com . b2international . index . query . Expressions . matchRange ;", "import com . itextpdf . kernel . color . Color ; import com . itextpdf . kernel . geom . Rectangle ; import com . itextpdf . kernel . pdf . annot . PdfTextAnnotation ; import com . itextpdf . kernel . pdf . canvas . PdfCanvas ; import com . itextpdf . kernel . pdf . filespec . PdfFileSpec ; import com . itextpdf . kernel . font . PdfFontFactory ; import com . itextpdf . kernel . pdf . canvas . PdfCanvas ;", "{ return fieldsNode ; } private StackTraceElement extractCallerData ( final ILoggingEvent event ) { final StackTraceElement [ ] ste = event . getCallerData ( ) ; if ( ste == null || ste . length == 0 ) { return DEFAULT_CALLER_DATA ; } return ste [ 0 ] ; }", "*", "import org . threeten . bp . OffsetDateTime ; import javax . validation . Valid ;", "if ( botInfo != null && userInfo != null && ! TextUtils . isEmpty ( userInfo . about ) && id == share ) { text = String . format ( \"%s https://\" + getMessagesController ( ) . linkPrefix + \"/%s\" , userInfo . about , user . username ) ; }", "\"Inline file reading url \" + urls [ j ] ) ; Log . e ( TAG , \"IOException: \" + ioException . toString ( ) ) ;", "", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "m_asCartesianVelocity = new Lazy < cesiumlanguagewriter . advanced . ICesiumInterpolatableValuePropertyWriter < Motion1 < Cartesian > > > ( new Func1 < cesiumlanguagewriter . advanced . ICesiumInterpolatableValuePropertyWriter < Motion1 < Cartesian > > > ( this , \"createCartesianVelocityAdaptor\" , new Class [ ] { } ) { public cesiumlanguagewriter . advanced . ICesiumInterpolatableValuePropertyWriter < Motion1 < Cartesian > > invoke ( ) { return createCartesianVelocityAdaptor ( ) ; } } , false ) ; m_asReference = new Lazy < cesiumlanguagewriter . advanced . ICesiumValuePropertyWriter < Reference > > ( new Func1 < cesiumlanguagewriter . advanced . ICesiumValuePropertyWriter < Reference > > ( this , \"createReferenceAdaptor\" , new Class [ ] { } ) { public cesiumlanguagewriter . advanced . ICesiumValuePropertyWriter < Reference > invoke ( ) { return createReferenceAdaptor ( ) ; } } , false ) ;", "private final FBView myView ; private OPDSBookItem myItem ; private NetworkImage myCover ; BookElement ( FBView view ) { myView = view ; } public void setData ( OPDSBookItem item ) { final String bookUrl = item . getUrl ( UrlInfo . Type . Book ) ; String coverUrl = item . getUrl ( UrlInfo . Type . Image ) ; if ( coverUrl == null ) { coverUrl = item . getUrl ( UrlInfo . Type . Thumbnail ) ; } if ( bookUrl == null || coverUrl == null ) { myItem = null ; myCover = null ; } else { myItem = item ; myCover = new NetworkImage ( coverUrl ) ; myCover . synchronize ( ) ; } }", "import pl . project13 . core . util . JsonManager ;", "dbAnalyze ( d ) ;", "import java . util . concurrent . locks . Lock ; import java . util . concurrent . locks . ReentrantLock ; import java . util . concurrent . atomic . AtomicInteger ; import org . junit . Assert ; import org . junit . Test ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ;", "", "index = new Engine . Index ( newUid ( \"1\" ) , doc , index . seqNo ( ) , 2L , VersionType . INTERNAL . versionTypeForReplicationAndRecovery ( ) , REPLICA , 0 , - 1 , false ) ;", "", "private volatile boolean _initialized ; private final Object _lock1 = new Object ( ) , _lock2 = new Object ( ) , _lock3 = new Object ( ) ;", "", "assertThat ( e . getRootCause ( ) , instanceOf ( QueryShardException . class ) ) ;", "private final Database database ; private final MetricsService metrics ;", "UpdateResponse updateResponse = new UpdateResponse ( indexResponse . getShardInfo ( ) , indexResponse . getShardId ( ) , indexResponse . getType ( ) , indexResponse . getId ( ) , indexResponse . getSeqNo ( ) , indexResponse . getVersion ( ) , indexResponse . getResult ( ) ) ; if ( ( updateRequest . fetchSource ( ) != null && updateRequest . fetchSource ( ) . fetchSource ( ) ) || ( updateRequest . fields ( ) != null && updateRequest . fields ( ) . length > 0 ) ) { }", "void test_runWithLock_withTwoLockables_runsOneAtATime ( ) throws Exception { }", "import us . dot . its . jpo . ode . importer . parser . TimLogLocation ; import us . dot . its . jpo . ode . j2735 . J2735 ; import us . dot . its . jpo . ode . j2735 . dsrc . BasicSafetyMessage ; import us . dot . its . jpo . ode . j2735 . dsrc . MessageFrame ; import us . dot . its . jpo . ode . j2735 . dsrc . TravelerInformation ; import us . dot . its . jpo . ode . model . OdeBsmPayload ; import us . dot . its . jpo . ode . model . OdeData ;", "ZKUpdateUtil . setHflex ( table , \"1\" ) ; ZKUpdateUtil . setVflex ( table , true ) ;", "public boolean newAdminUsersNeedSysAdminApproval ( ) { return properties . newAdminUsersNeedSysAdminApproval ( ) ; } public boolean newAdminUsersRequireConfirmation ( ) { return properties . newAdminUsersRequireConfirmation ( ) ; } public boolean newOrganizationsNeedSysAdminApproval ( ) { return properties . newOrganizationsNeedSysAdminApproval ( ) ; } private boolean areActivationChecksDisabled ( ) { return ! ( newOrganizationsNeedSysAdminApproval ( ) || properties . newOrganizationsRequireConfirmation ( ) || newAdminUsersNeedSysAdminApproval ( ) || newAdminUsersRequireConfirmation ( ) ) ; } private static void sendHtmlMail ( AccountCreationProps props , String to , String from , String subject , String html ) { MailUtils . sendHtmlMail ( props . getMailProperties ( ) , to , from , subject , html ) ; } public AccountCreationProps getAccountCreationProps ( ) { return properties ; } protected void writeUserPassword ( UUID appId , EntityRef owner , CredentialsInfo creds ) throws Exception { writeCreds ( appId , owner , creds , USER_PASSWORD ) ; } protected CredentialsInfo readUserPasswordCredentials ( UUID appId , UUID ownerId ) throws Exception { return readCreds ( appId , ownerId , USER_PASSWORD ) ; } protected CredentialsInfo readUserPasswordCredentials ( UUID appId , UUID ownerId ) throws Exception { return readCreds ( appId , ownerId , USER_PASSWORD ) ; } protected void writeUserToken ( UUID appId , EntityRef owner , CredentialsInfo token ) throws Exception { writeCreds ( appId , owner , token , USER_TOKEN ) ; } protected CredentialsInfo readUserTokenCredentials ( UUID appId , UUID ownerId ) throws Exception { return readCreds ( appId , UUID ownerId ) throws Exception { return readCreds ( appId , UUID ownerId ) throws Exception { return readCreds ( appId , UUID ownerId ) throws Exception { return readCreds ( appId , UUID ownerId ) throws Exception { return readCreds ( appId , UUID ownerId ) throws Exception { return readCreds ( appId ,", "import net . minecraftforge . fml . relauncher . Side ; import net . minecraftforge . fml . relauncher . SideOnly ;", "import net . imagej . ops . threshold . local . LocalThresholdMethod ; import net . imglib2 . Dimensions ; import net . imglib2 . Interval ; import net . imglib2 . IterableInterval ; import net . imglib2 . RandomAccessible ; import net . imglib2 . RandomAccessibleInterval ; import net . imglib2 . algorithm . neighborhood . Shape ; import net . imglib2 . histogram . Histogram1d ; import net . imglib2 . img . Img ; import net . imglib2 . img . ImgFactory ; import net . imglib2 . interpolation . InterpolatorFactory ; import net . imglib2 . labeling . Labeling ; import net . imglib2 . outofbounds . OutOfBoundsFactory ; import net . imglib2 . type . NativeType ; import net . imglib2 . type . Type ; import net . imglib2 . type . logic . BitType ; import net . imglib2 . type . numeric . ComplexType ; import net . imglib2 . type . numeric . RealType ; import net . imglib2 . type . numeric . complex . ComplexFloatType ; import net . imglib2 . type . numeric . integer . LongType ; import net . imglib2 . type . numeric . real . DoubleType ;", "MutableSet < Class < ? > > interfaces = Sets . newLinkedHashSet ( ) ;", "import org . apache . lucene . index . DocumentsWriterPerThread . IndexingChain ;", "private static void updateRequirePrefixInRootFiles ( BundlableNode browsableNode , String sourceAppRequirePrefix ) throws IOException { File [ ] rootHtmlFiles = browsableNode . dir ( ) . getUnderlyingFile ( ) . listFiles ( ( FileFilter ) new SuffixFileFilter ( \".html\" ) ) ; if ( rootHtmlFiles != null ) { findAndReplaceInTextFiles ( browsableNode . root ( ) , Arrays . asList ( rootHtmlFiles ) , sourceAppRequirePrefix , browsableNode . requirePrefix ( ) ) ; } } private static void findAndReplaceInAllTextFiles ( BRJS brjs , File rootRenameDirectory , String sourceRequirePrefix , String targetRequirePrefix ) throws IOException , ConfigException", "TestShardRouting . newShardRouting ( initShard . index ( ) , initShard . id ( ) , \"some_node\" , initShard . currentNodeId ( ) , initShard . primaryTerm ( ) , initShard . primary ( ) , ShardRoutingState . INITIALIZING , AllocationId . newTargetRelocation ( AllocationId . newRelocation ( initShard . allocationId ( ) ) ) ) ) , false ) ;", "if ( ! results . isEmpty ( ) ) { Coverage . print ( subject . termContext ( ) . global ( ) . krunOptions . experimental . coverage , subject ) ; Coverage . print ( subject . termContext ( ) . global ( ) . krunOptions . experimental . coverage , rule ) ; }", "private final ImmutableSetMultimap < EntityType , SemanticTag < Attribute , LabeledResource , LabeledResource > > attributeTags ; private final ImmutableList < SemanticTag < EntityType , LabeledResource , LabeledResource > > entityTags ;", "import com . flow . platform . core . context . AbstractContextInitHandler ; import com . flow . platform . core . context . ContextEvent ; import com . flow . platform . core . context . SpringContext ;", "import org . streampipes . messaging . kafka . SpKafkaProducer ;", "import java . io . FileOutputStream ;", "", "String lastDataStr = context . getString ( \"enable_last_data\" , DEFAULT_LAST_DATA ) ; if ( lastDataStr . equals ( \"true\" ) || lastDataStr . equals ( \"false\" ) ) { lastData = Boolean . parseBoolean ( lastDataStr ) ; LOGGER . debug ( \"[\" + this . getName ( ) + \"] Reading configuration (last_data=\" + lastDataStr + \")\" ) ; } else { invalidConfiguration = true ; LOGGER . debug ( \"[\" + this . getName ( ) + \"] Invalid configuration (last_data=\" + lastDataStr + \") -- Must be 'true' or 'false'\" ) ; } lastDataTableSuffix = context . getString ( \"last_data_table_suffix\" , DEFAULT_LAST_DATA_TABLE_SUFFIX ) ; LOGGER . debug ( \"[\" + this . getName ( ) + \"] Reading configuration (last_data_table_suffix=\" + lastDataTableSuffix + \")\" ) ; lastDataUniqueKey = context . getString ( \"last_data_unique_key\" , DEFAULT_LAST_DATA_UNIQUE_KEY ) ; LOGGER . debug ( \"[\" + this . getName ( ) + \"] Reading configuration (last_data_unique_key=\" + lastDataUniqueKey + \")\" ) ; lastDataTimeStampKey = context . getString ( \"last_data_timestamp_key\" , DEFAULT_LAST_DATA_TIMESTAMP_KEY ) ; LOGGER . debug ( \"[\" + this . getName ( ) + \"] Reading configuration (last_data_timestamp_key=\" + lastDataTimeStampKey + \")\" ) ; lastDataSQLTimestampFormat = context . getString ( \"last_data_sql_timestamp_format\" , DEFAULT_LAST_DATA_SQL_TS_FORMAT ) ; LOGGER . debug ( \"[\" + this . getName ( ) + \"] Reading configuration (last_data_sql_timestamp_key=\" + lastDataTimeStampKey + \")\" ) ; LOGGER . debug ( \"[\" + this", "", "addObjReference ( ctx . function_parameters ( ) . schema_qualified_name ( ) . identifier ( ) , type , ACTION_ALTER ) ;", "@ UML ( identifier = \"extent\" , obligation = OPTIONAL , specification = ISO_19115 )", "import java . util . Collection ; import java . util . ArrayList ;", "import android . view . View ;", "import java . io . File ; import java . io . IOException ; import java . lang . reflect . InvocationTargetException ; import java . util . logging . Level ; import java . util . logging . Logger ; import com . tagtraum . perf . gcviewer . ctrl . GCViewerGuiController ;", "BeginNode unknownTypeSux = createUnknownTypeSuccessor ( graph ) ; BeginNode [ ] successors = new BeginNode [ ] { calleeEntryNode , unknownTypeSux } ; createDispatchOnTypeBeforeInvoke ( graph , successors , false ) ;", "( ( TileEntityTelemetry ) tile ) . receiveUpdate ( data , this . getDimensionID ( ) ) ;", "import java . util . concurrent . ConcurrentHashMap ; import java . util . logging . Logger ;", "if ( config . getPreConfiguredSipGateway ( ) != null ) { services . setSipGateway ( config . getPreConfiguredSipGateway ( ) ) ; } if ( protocolProviderHandler . isRegistered ( ) )", "if ( jj_3R_789 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_790 ( ) ) return true ; }", "package aws . example . athena ;", "import com . stratio . meta2 . core . statements . SelectStatement ;", "import rtg . api . world . deco . DecoBaseBiomeDecorations ; import rtg . api . world . surface . SurfaceBase ; import rtg . api . world . terrain . TerrainBase ; import rtg . world . biome . deco . DecoSingleBiomeDecorations ;", "l1Cache . put ( repository , entity1 ) ; Optional < Entity > actualEntity = l1Cache . get ( repository , entityID1 , entityType ) ;", "import com . dianping . cat . report . model . ModelPeriod ; import com . dianping . cat . report . model . ModelRequest ; import com . dianping . cat . report . model . ModelResponse ; import com . dianping . cat . report . page . PayloadNormalizer ;", "", "Assumptions . assumeFalse ( bookForm . pagesRead . isEmpty ( ) , \"Pages read not populated\" ) ; Assumptions . assumeFalse ( bookForm . numberOfPages . isEmpty ( ) , \"Number of pages not populated\" ) ;", "SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder ( getText ( page , parentView , parentRichText , ( ( TLRPC . TL_textUrl ) richText ) . text , parentBlock , maxWidth , noTranslate ) ) ;", "if ( inputB . isEmpty ( ) ) return ; for ( int i = 0 ; i < this . input . size ( ) ; i ++ )", "private void onRefreshAction ( ) { postsAdapter . loadPosts ( ) ; ProfileManager . getInstance ( this ) . getProfileSingleValue ( userID , createOnProfileChangedListener ( ) ) ; } @ Override protected void onDestroy ( ) { super . onDestroy ( ) ; profileManager . closeListeners ( this ) ; }", "changeSelected ( changeInfo , project ) ; mySelectedChange = changeInfo ;", "frameCount ++ ;", "mIconPack = new IconPackXML ( packageName ) ; mIconPack . setAppfilterid ( appfilterid ) ;", "", "selectionMatrix . applyAngularSelection ( feedbackTermToPack ) ; feedbackTermToPack . clipToMaxLength ( gains . getMaximumProportionalError ( ) ) ;", "public Boolean visit ( final ModuleRequiresDirective n , final Visitable arg ) { final ModuleRequiresDirective n2 = ( ModuleRequiresDirective ) arg ; if ( ! nodesEquals ( n . getModifiers ( ) , n2 . getModifiers ( ) ) )", "import com . android . launcher3 . util . PackageManagerHelper ; import com . android . launcher3 . util . PackageUserKey ;", "private static int mMode ; private static Thread mThread ; private static boolean mContinueThread = true ;", "media = new Media ( ) ; keyboard = new Keyboard ( webEngineRuntime ) ;", "WorksheetR2RMLJenaModelParser modelParser = getModel ( rmlID , refreshR2RML ) ; String sourceName = r2rmlURI ; gRDFGen . generateRDF ( modelParser , sourceName , dataStream , InputType . valueOf ( dataType ) , - 1 , false , outWriter ) ;", "import com . hiddenswitch . proto3 . net . client . models . CreateAccountRequest ; import com . hiddenswitch . proto3 . net . client . models . CreateAccountResponse ; import com . hiddenswitch . proto3 . net . models . * ;", "import cm . aptoide . pt . annotation . Partners ; import cm . aptoide . pt . crashreports . CrashReport ;", "public PlayQueueItem getItem ( final int index ) { if ( index < 0 || index >= streams . size ( ) || streams . get ( index ) == null ) { return null ; } }", "", "private boolean jj_3R_241 ( ) { if ( jj_3R_258 ( ) ) return true ; return false ; } private boolean jj_3R_249 ( ) { if ( jj_3R_262 ( ) ) return true ; return false ; } private boolean jj_3R_248 ( ) { if ( jj_3R_261 ( ) ) return true ; return false ; } private boolean jj_3R_301 ( ) { if ( jj_scan_token ( IDENT ) ) return true ; }", "mSaveButton = new Button ( ApplicationScreen . instance ) ;", "import com . google . common . base . Charsets ; import com . google . common . io . Resources ; import de . zalando . aruha . nakadi . config . JsonConfig ;", "static final String MASTER_CLIENT_ID = \"master_client_id\" ; static final String CLONE_CERTIFICATE = \"clone_certificate\" ; public static final String ASSERTION = \"assertion\" ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 0 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertFalse ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "@ Inject private LocationSecurityService locationSecurityService ; @ Inject private IToscaTypeSearchService toscaTypeSearchService ; @ Inject private ICSARRepositorySearchService csarRepoSearchService ;", "public ServiceCall arrayStringPipesValidAsync ( List < String > arrayQuery , final ServiceCallback < Void > serviceCallback ) { Validator . validate ( arrayQuery , serviceCallback ) ; Call < ResponseBody > call = service . arrayStringPipesValid ( this . client . getMapperAdapter ( ) . serializeList ( arrayQuery , CollectionFormat . PIPES ) ) ; final ServiceCall serviceCall = new ServiceCall ( call ) ; }", "", "", "", "import com . gentics . mesh . madl . traversal . TraversalResult ; import com . gentics . mesh . parameter . GenericParameters ; import com . gentics . mesh . parameter . PagingParameters ; import com . gentics . mesh . parameter . value . FieldsSet ; import com . syncleus . ferma . traversals . VertexTraversal ;", "currentRecipe = BuildcraftRecipeRegistry . refineryRecipes . getDistillationRegistry ( ) . getRecipeForInput ( tankIn . getFluid ( ) ) ;", "import org . jetbrains . annotations . NotNull ; import org . jetbrains . annotations . Nullable ;", "modCompatLoader . addModCompat ( new MineTweakerModCompat ( ) ) ; modCompatLoader . addApiCompat ( new RfApiCompat ( ) ) ;", "", "assertEquals ( Test . MATCH , Test . GENERAL_BOOLEAN , hdRadioEnable ) ; assertTrue ( Test . TRUE , Validator . validateSisData ( Test . GENERAL_SISDATA , sisData ) ) ;", "long accountId ; int sdpId ; long creationDate ;", "Criteria seriesCriteria = c . createCriteria ( ContextualReferencedSeriesObservation . SERIES ) ; seriesCriteria . createCriteria ( Series . OBSERVABLE_PROPERTY ) . add ( Restrictions . eq ( ObservableProperty . IDENTIFIER , observablePropertyIdentifier ) ) ;", "if ( source != null ) source . sendFeedback ( Messenger . c ( fields ) , source . getMinecraftServer ( ) != null && source . getMinecraftServer ( ) . getWorld ( World . field_25179 ) != null ) ;", "return newBuilder ( ) . withCapacity ( capacity ) . withEnabled ( enabled ) . withRetryPolicy ( retryPolicy ) . withServiceJobProcesses ( serviceJobProcesses ) . withMigrationPolicy ( migrationPolicy ) ;", "", "if ( predictedAlt == SLL_min_alt ) { retry_with_context_predicts_same_alt ++ ; }", "", "import com . jetbrains . jetpad . vclang . naming . namespace . SimpleNamespace ;", "import java . lang . reflect . Modifier ; import java . lang . reflect . Type ; import java . net . URL ; import java . util . HashMap ;", "private VMTemplateDao _templateDao ; @ Inject private TemplateJoinDao _templateJoinDao ; @ Inject ResourceManager _resourceMgr ; private ResourceMetaDataService _resourceMetaDataMgr ; @ Inject private TaggedResourceService _taggedResourceMgr ; @ Inject", "if ( Browser . supportsPointerEvents ( ) ) { pointerHandler = new PointerEventHandler ( ( IsEuclidianController ) euclidianController , euclidiancontroller . getOffsets ( ) ) ; PointerEventHandler . attachTo ( absPanel . getElement ( ) , pointerHandler ) ; CancelEventTimer . killTouch ( absPanel ) ; } else { }", "public void setBasePrice ( BigDecimal basePrice ) { }", "", "public static final String ASSOCIATEDFIELDNAME = \"associatedFieldName\" ; public static final String TRANSLATABLE = \"translatable\" ;", "final Table . ID tableId = ClientServiceHandler . checkTableId ( master . getInstance ( ) , tableName , tableOp ) ; Namespace . ID namespaceId = getNamespaceIdFromTableId ( tableOp , tableId ) ;", "import com . mercadopago . android . px . internal . features . Constants ;", "setState ( 673 ) ;", "int logType , int year , int month , int day , String log , List < cgTrackableLog > trackables ) { if ( isEmpty ( viewstates ) ) {", "final Instance instance = HdfsZooInstance . getInstance ( ) ; final ServerConfigurationFactory confFactory = new ServerConfigurationFactory ( instance ) ;", "", "AudioManager audiMgr = ( AudioManager ) this . ctx . getActivity ( ) . getSystemService ( Context . AUDIO_SERVICE ) ; if ( audiMgr . getRouting ( AudioManager . MODE_NORMAL ) == AudioManager . ROUTE_EARPIECE ) { return 1 ; } else if ( audiMgr . getRouting ( AudioManager . MODE_NORMAL ) == AudioManager . ROUTE_SPEAKER ) { return 2 ; } else { return - 1 ; }", "import de . rub . nds . tlsattacker . core . workflow . chooser . DefaultChooser ; import de . rub . nds . tlsattacker . transport . ConnectionEndType ;", "setState ( 402 ) ; _errHandler . sync ( this ) ;", "public String getNameLong ( ) { return nameLong ; } public void setNameLong ( String nameLong ) { this . nameLong = nameLong ; } public boolean isMandatory ( ) { return mandatory ; } public void setMandatory ( boolean mandatory ) { this . mandatory = mandatory ; }", "@ SuppressWarnings ( { \"rawtypes\" , \"unchecked\" } ) public final Object apply ( AbstractFeature feature , ParameterValueGroup parameters ) { return new Result ( feature , association , result ) ; }", "private final int controllerIndex ; private int currentCommandId ; public OrientationFeedbackController ( RigidBodyBasics endEffector , WholeBodyControlCoreToolbox ccToolbox , FeedbackControllerToolbox fbToolbox , YoRegistry parentRegistry )", "public interface TreeModel < E > { }", "actor . printError ( BBC . getPrefix ( ) + \"An unknown FAWE error has occurred! Please see console.\" ) ; log . error ( \"An unknown FAWE error occurred\" , e ) ; } } catch ( Throwable e ) { Exception faweException = FaweException . get ( e ) ; String message = e . getMessage ( ) ; if ( faweException != null ) { BBC . WORLDEDIT_CANCEL_REASON . send ( actor , faweException . getMessage ( ) ) ; } else { actor . printError ( BBC . getPrefix ( ) + \"There was an error handling a FAWE command: [See console]\" ) ; actor . printRaw ( e . getClass ( ) . getName ( ) + \": \" + e . getMessage ( ) ) ; log . log ( Level . SEVERE , \"An unexpected error occurred while handling a FAWE command\" , e ) ;", "log . debug ( \"Error looking up item {}: {}\" , itemId , response ) ;", "rest . start ( CLUSTER . bootstrapServers ( ) , TestUtils . tempDirectory ( ) . getPath ( ) ) ; final Paths paths1 = new Paths ( \"localhost\" , rest . port ( ) ) ;", "import org . tron . core . capsule . AccountCapsule ; import org . tron . core . capsule . AssetIssueCapsule ; import org . tron . core . capsule . BlockCapsule ;", "import static hudson . FilePath . TarCompression . * ; import static hudson . Util . * ; import static hudson . Util . * ; import javax . annotation . Nonnull ;", "private boolean isAccessibilityServiceEnabled ( Context context , Class < ? extends AccessibilityService > service ) { AccessibilityManager am = ( AccessibilityManager ) context . getSystemService ( Context . ACCESSIBILITY_SERVICE ) ; List < AccessibilityServiceInfo > enabledServices = am . getEnabledAccessibilityServiceList ( AccessibilityServiceInfo . FEEDBACK_ALL_MASK ) ; for ( AccessibilityServiceInfo enabledService : enabledServices ) { ServiceInfo enabledServiceInfo = enabledService . getResolveInfo ( ) . serviceInfo ; if ( enabledServiceInfo . packageName . equals ( context . getPackageName ( ) ) && enabledServiceInfo . name . equals ( service . getName ( ) ) ) return true ; } return false ; }", "", "@ ApiResponse ( code = 400 , message = \"Invalid ID supplied\" ) , @ ApiResponse ( code = 404 , message = \"Pet not found\" ) } )", "public void refresh ( boolean force ) { }", "resource ( ) . path ( String . format ( \"/%s/%s/token\" , orgName , appName ) ) . accept ( MediaType . APPLICATION_JSON ) . type ( MediaType . APPLICATION_JSON_TYPE ) . post ( ApiResponse . class , entity ) ; fail ( \"This should cause an exception\" ) ; } catch ( UniformInterfaceException uie ) { assertEquals ( String . valueOf ( Status . BAD_REQUEST . getStatusCode ( ) ) , String . valueOf ( uie . getResponse ( ) . getStatus ( ) ) ) ;", "import org . apache . flink . table . api . bridge . java . StreamTableEnvironment ; import org . apache . flink . table . api . bridge . java . internal . StreamTableEnvironmentImpl ;", "public User findOne ( Long aLong , QueryParams queryParams ) { User user = THREAD_LOCAL_REPOSITORY . get ( aLong ) ; }", "String CaseData_facilityType = \"CaseData.facilityType\" ; String CaseData_followUpComment = \"CaseData.followUpComment\" ; String CaseData_followUpStatus = \"CaseData.followUpStatus\" ; String CaseData_followUpUntil = \"CaseData.followUpUntil\" ;", "public void drain ( Player player , LocalSession session , EditSession editSession , double radius ) throws WorldEditException { worldEdit . checkMaxRadius ( radius ) ; }", "* Test explicitly required integer . Please put a header 'headerParameter' = & gt ; null and the client library should throw before the request is sent .", "private static final Integer BEFORE_ID = 78910 ; private final HttpServletRequest request = new MockHttpServletRequest ( ) ; private final MockContainerRequestContext requestContext = new MockContainerRequestContext ( ) ; private final SecurityContext securityContext = new MockSecurityContext ( ) ;", "if ( mRequiredInput . mType != RequiredInputParcel . RequiredInputType . NFC_KEYTOCARD ) { obtainYubiKeyPin ( mRequiredInput ) ; }", "private final ActorSelection proxyActorSelection ;", "Objects . requireNonNull ( centerPoint , \"The specified center point of the new rectangle must not be null.\" ) ; if ( area < 0 ) { throw new IllegalArgumentException ( \"The specified area \" + area + \" must be larger than zero.\" ) ; } if ( ratio < 0 ) { throw new IllegalArgumentException ( \"The specified ratio \" + ratio + \" must be larger than zero.\" ) ; }", "import org . apache . roller . weblogger . pojos . * ; import java . util . * ; import org . apache . roller . weblogger . util . HTMLSanitizer ;", "* Get dictionary of complex type with { \"0\" : { \"integer\" : 1 , \"string\" : \"2\" } , \"1\" : { \"integer\" : 3 , \"string\" : \"4\" } , \"2\" : { \"integer\" : 5 , \"string\" : \"6\" } }", "@ Override public AkCollator collatorAt ( int index ) { return null ; } @ Override public TInstance typeInstanceAt ( int index ) { return tInstances [ index ] ; }", "import org . ehcache . jsr107 . EhcacheCachingProvider ; import org . springframework . boot . autoconfigure . cache . annotation . CachingConfigurerSupport ;", "\"ntEntryH\\000\\022?\\n\\014delete_store\\030\\030 \\001(\\0132\\'.tachyo\" + \"n.proto.journal.DeleteStoreEntryH\\000\\022E\\n\\017in\" + \"ode_directory\\030\\t \\001(\\0132*.tachyon.proto.jour\" + \"nal.InodeDirectoryEntryH\\000\\022]\\n\\034inode_direc\" + \"tory_id_generator\\030\\n \\001(\\01325.tachyon.proto.\" + \"journal.InodeDirectoryIdGeneratorEntryH\\000\" + \"\\022;\\n\\ninode_file\\030\\013 \\001(\\0132%.tachyon.proto.jou\" + \"rnal.InodeFileEntryH\\000\\022]\\n\\034inode_last_modi\" + \"fication_time\\030\\014 \\001(\\01325.tachyon.proto.journal.Li\" + \"neageEntryH\\000\\0226\\n\\007\" + \"lineage\\030\\r \\001(\\0132#.tachyon.proto.journal.Li\" + \"neageEntryH\\000\\022N\\n\\024lineage_id_generator\\030\\016 \\001\" + \"(\\0132..tachyon.proto.journal.LineageIdGene\" + \"ratorEntryH\\000\\022=\\n\\00async_\" + \"persist_request\\030\\030\\031 \\001(\\0132#.tachyon.proto.journal.MergeStoreEntryH\\000\\022N\\n\\024", "for ( int i = 0 ; i < 263 ; i ++ ) jj_la1 [ i ] = - 1 ;", "final Type promote = AnalyzerCaster . promoteNumeric ( left . actual , false ) ;", "public MatchQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { }", "", "name = \"Friends chat channel name (transparent)\" , description = \"Color of Friends chat channel name (transparent)\" , titleSection = \"transparentTitle\"", "", "", "{ DriveMode driveMode = DriveMode . valueOf ( parent . getItemAtPosition ( pos ) . toString ( ) . toUpperCase ( ) ) ; if ( \"SMARTPHONE\" . equals ( driveMode . name ( ) ) ) { requestPermissionsForSmartphone ( ) ; if ( ! smartphoneController . isConnected ( ) ) { smartphoneController . connect ( this ) ; } } setDriveMode ( driveMode ) ; } else if ( parent == logSpinner ) { }", "import fr . free . nrw . commons . PageTitle ;", "ejectorComponent . setOutputData ( configComponent , TransmissionType . ITEM ) ; addCapabilityResolver ( BasicCapabilityResolver . constant ( Capabilities . CONFIG_CARD_CAPABILITY , this ) ) ;", "this . sort = Sort . of ( element . getAttribute ( Constants . SORT_sort_ATTR ) ) ; this . userTyped = Boolean . parseBoolean ( element . getAttribute ( Constants . TYPE_userTyped_ATTR ) ) ; this . separator = separator ;", "internal_static_edu_brown_hstore_PartitionFragment_descriptor =", "String expression = AlertUtils . getExpressionWithAbsoluteStartAndEndTimeStamps ( context ) ; sb . append ( MessageFormat . format ( \"Alert {0} was triggered at {1}\\n\" , getDisplayedName ( context , context . getAlert ( ) . getName ( ) ) ,", "import static com . google . common . util . concurrent . Futures . transform ; import static com . google . common . util . concurrent . Futures . allAsList ; import static com . google . common . util . concurrent . MoreExecutors . newDirectExecutorService ; import static com . google . common . util . concurrent . MoreExecutors . listeningDecorator ; import build . buildfarm . ac . ActionCache ; import build . buildfarm . cas . ContentAddressableStorage ; import build . buildfarm . cas . ContentAddressableStorage . Blob ;", "testFI ( Apps ( ConCall ( ( Constructor ) result . getDefinition ( \"c\" ) , getThisFI ( result ) , Zero ( ) ) , Lam ( param ( Nat ( ) ) , Suc ( Zero ( ) ) ) ) , result ) ;", "this . constructionNodeTools = constructionNodeTools ; this . substitutionFactory = substitutionFactory ; this . nullValue = termFactory . getNullConstant ( ) ; this . childVariables = extractChildVariables ( projectedVariables , substitution ) ;", "realUgi . doAs ( ( PrivilegedExceptionAction < Void > ) ( ) -> { Connector conn = mac . getConnector ( proxyPrincipal , new KerberosToken ( ) ) ; try ( Scanner s = conn . createScanner ( tableName , Authorizations . EMPTY ) ) { s . iterator ( ) . hasNext ( ) ; fail ( \"Expected to see an exception\" ) ; } catch ( RuntimeException e ) { int numSecurityExceptionsSeen = Iterables . size ( Iterables . filter ( Throwables . getCausalChain ( e ) , org . apache . accumulo . core . client . AccumuloSecurityException . class ) ) ; assertTrue ( \"Expected to see at least one AccumuloSecurityException, but saw: \" + Throwables . getStackTraceAsString ( e ) , numSecurityExceptionsSeen > 0 ) ;", "", "", "this . identityCertService = identityCertService ; this . productAdapter = productAdapter ; this . subAdapter = subAdapter ; this . entitler = entitler ; this . epCurator = epCurator ; this . entitlementCurator = entitlementCurator ;", "", "@ C . SelectionFlags public final int selectionFlags ; @ C . RoleFlags public final int roleFlags ;", "this . useFastRewriting = ! kompileOptions . experimental . koreProve ; this . theFastMatcher = new FastRuleMatcher ( global , allRuleBits . length ( ) ) ;", "try ( Timer0 . Context ignored = guessRelevantGroupsLatency . start ( ) ) { return all ( ) . stream ( ) . map ( n -> byName . getIfPresent ( n . get ( ) ) ) . filter ( Objects :: nonNull ) . flatMap ( p -> p . getConfig ( ) . getAllGroupUUIDs ( ) . stream ( ) ) . filter ( id -> id != null && id . get ( ) != null ) . collect ( toSet ( ) ) ; }", "NamespaceBlockedException . class , NamespacedEntityIdInvalidException . class , ThingIdInvalidException . class , PolicyIdInvalidException . class ) ;", "", "StudyConfiguration studyConfiguration = studyConfigurationFactory . getStudyConfiguration ( studyId , null , scm , new QueryOptions ( ) , sessionId ) ;", "@ NotNull", "SumProductSolverGraph ssolver = ( SumProductSolverGraph ) solver ; ssolver . setOption ( UpdateOptions . optimizedUpdateSparseThreshold , sparsityControl ) ;", "* Users of this class must call { @ code initialize ( ) } before they use this class . * @ warn exception SchedulerException description missing *", "public Type value ( ) { return publisher ; } public static Type INSTANCE = publisher ;", "public void testEnablePreviewsAndOpenCompilerPropertiesProposals ( ) throws Exception { fJProject1 = JavaProjectHelper . createJavaProject ( \"TestProject1\" , \"bin\" ) ; fJProject1 . setRawClasspath ( Java14ProjectTestSetup . getDefaultClasspath ( ) , null ) ; JavaProjectHelper . set14CompilerOptions ( fJProject1 , false ) ; fSourceFolder = JavaProjectHelper . addSourceContainer ( fJProject1 , \"src\" ) ; StringBuffer buf = new StringBuffer ( ) ; buf . append ( \"module test {\\n\" ) ; buf . append ( \"}\\n\" ) ; IPackageFragment def = fSourceFolder . createPackageFragment ( \"\" , false , null ) ; def . createCompilationUnit ( \"module-info.java\" , buf . toString ( ) , false , null ) ; IPackageFragment pack = fSourceFolder . createPackageFragment ( \"test\" , false , null ) ; buf = new StringBuffer ( ) ; buf . append ( \"package test;\\n\" ) ; buf . append ( \"public record Rec1() {\\n\" ) ; buf . append ( \"}\\n\" ) ; ICompilationUnit cu = pack . createCompilationUnit ( \"Rec1.java\" , buf . toString ( ) , false , null ) ; CompilationUnit astRoot = getASTRoot ( cu ) ; ArrayList < IJavaCompletionProposal > proposals = collectCorrections ( cu , astRoot , 1 , null ) ; ArrayList < IJavaCompletionProposal > proposals = collectCorrections ( cu , astRoot , 1 , null ) ; assertNumberOfProposals ( proposals , 2 ) ; String label1 = CorrectionMessages . PreviewFeaturesSubProcessor_enable_preview_features ; assertProposalExists ( proposals , label1 ) ; String label2 = CorrectionMessages . PreviewFeaturesSubProcessor_open_compliance_properties_page_enable_preview_features", "* Get an array of Dictionaries of type & lt ; string , string & gt ; with value [ { '1' : 'one' , '2' : 'two' , '3' : 'three' } , { } , { '7' : 'seven' , '8' : 'eight' , '9' : 'nine' } ]", "public Builder draft ( boolean draft ) { this . draft = draft ; return this ; } public Builder formatGuessId ( String formatGuessId ) { this . formatGuessId = formatGuessId ; }", "import cpw . mods . fml . common . network . PacketDispatcher ; import cpw . mods . fml . common . network . Player ; import java . util . LinkedList ; import java . util . List ; import java . util . ListIterator ; import java . util . Set ; import net . minecraft . entity . item . EntityItem ; import net . minecraft . entity . player . EntityPlayer ; import net . minecraft . item . ItemStack ; import net . minecraft . nbt . NBTTagCompound ; import net . minecraft . network . packet . Packet3Chat ; import net . minecraft . util . AxisAlignedBB ; import net . minecraft . util . ChatMessageComponent ; import net . minecraft . world . ChunkCoordIntPair ; import net . minecraftforge . common . ForgeChunkManager ; import net . minecraftforge . common . ForgeChunkManager . Ticket ; import net . minecraftforge . common . ForgeChunkManager . Type ; import net . minecraftforge . common . ForgeDirection ;", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "return new RadiusDescriptor . Square ( toBlockPos ( ) , getRange ( ) ) ;", "ShadowHandlerThread . class , ShadowHtml . class ,", "if ( ! CubeProviderTools . cubeAndNeighborsExist ( this . cache , cube . getX ( ) , cube . getY ( ) , cube . getZ ( ) ) ) { }", "import com . speedment . common . injector . annotation . InjectKey ;", "this . fontRenderer . drawString ( str , posX + 10 , fontPosY + 36 , WHITE ) ;", "Optional < Integer > maxRequestJournalEntries , Map < String , ResponseTransformer > transformers , FileSource rootFileSource ,", "public GeoPolygonQueryBuilder fromXContent ( QueryParseContext parseContext ) throws IOException { }", "this . env = env ; defaultConnectionTimeout = settings . getAsTime ( \"watcher.http.default_connection_timeout\" , TimeValue . timeValueSeconds ( 10 ) ) ; defaultReadTimeout = settings . getAsTime ( \"watcher.http.default_read_timeout\" , TimeValue . timeValueSeconds ( 10 ) ) ;", "public int [ ] getNumAnchors ( ) { if ( numAnchors == null ) { } }", "public void flatMap ( Row input , Collector < BaseRow > out ) throws Exception { Map < String , Object > inputParams = Maps . newHashMap ( ) ; for ( Integer conValIndex : sideInfo . getEqualValIndex ( ) ) { Object equalObj = input . getField ( conValIndex ) ; } }", "this . helper . getValidator ( ) . assertNoErrors ( agent ) ; Object feature = agent . getMembers ( ) . get ( 0 ) ;", "return new MqttPublisherActor ( connectionId , targets , mqttClientActor , dryRun , factory ) ;", "public int newCellsAdditionAnimationDurationPerCell = 200 ; public int oldCellsRemovalAnimationDuration = 200 ; private int cellPositionTransitionAnimationDuration = 250 ;", "@ Override public VMTemplateHostVO findVmTemplateHost ( long templateId , StoragePool pool ) { long dcId = pool . getDataCenterId ( ) ; Long podId = pool . getPodId ( ) ; }", "import com . rits . cloning . Cloner ; import com . google . common . base . Optional ;", "", "case TYPE_HAIR :", "TestProcessDependencies . class , ContractIT . class , RefactorWidgetIT . class , ExportImportWithoutMigrationIT . class", "assertThat ( sdkPicker . selectSdks ( buildConfig ( new Config . Builder ( ) ) , usesSdk ) ) . containsExactly ( sdkCollection . getSdk ( 16 ) ) ;", "Collections . emptyList ( ) , Collections . emptyList ( ) ) , \"modified\" , \"app added\" , null , \"weburls\" , true , \"aptoide\" , AppViewFragment . OpenType . OPEN_ONLY , 0 , null , \"editorsChoice\" , \"origin\" , false , \"marketName\" , false , false , bdsFlags , \"\" , \"\" , false , null , null ) ;", "IdService idService , JsonSerde jsonSerde , @ Named ( Constants . Queue . CLUSTER ) QueueGroup clusterQueues ) {", "public List < String > getEnumeratedValues ( ) { return enumeratedValues ; } public boolean hasEnumeratedValues ( ) { return ! enumeratedValues . isEmpty ( ) ; } public List < String > completeEnumeratedValues ( String query ) { return StringUtils . isNotEmpty ( query ) ? enumeratedValues . stream ( ) . filter ( value -> StringUtils . containsIgnoreCase ( value , query ) ) . collect ( Collectors . toList ( ) ) : enumeratedValues ; } public String getFinalValue ( ) { if ( environment != null && variableSet != null && variable != null ) { return variableSet . getOrDefault ( variable , getValue ( ) ) ; } return getValue ( ) ; }", "@ Test public void testClass3 ( ) throws IOException , CopperParserException { String input = \"class Hello\\n\" + \"\u00c4\u012bclass def create():Hello = new\\n\" + \"\u00c4\u012bdef foo():Int = 7\\n\" + \"\u00c4\u012bval bar:Int = 19\\n\" + \"Hello.create().foo()\" ; TypedAST res = ( TypedAST ) new Wyvern ( ) . parse ( new StringReader ( input ) , \"test input\" ) ; Assert . assertEquals ( res . typecheck ( Globals . getStandardEnv ( ) ) , Int . getInstance ( ) ) ; Assert . assertEquals ( res . evaluate ( Globals . getStandardEnv ( ) ) . toString ( ) , \"IntegerConstant(7)\" ) ; } @ Test public void testClassMutual ( ) throws IOException , CopperParserException { String input = \"class Foo\\n\" + \"\u00c4\u012bclass def create():Foo = new\\n\" + \"\u00c4\u012bdef hello():Hello = Hello.create()\\n\" + \"class Hello\\n\" + \"\u00c4\u012bclass def create():Hello = new\\n\" + \"\u00c4\u012bdef foo():Foo = Foo.create()\\n\" + \"class Hello\\n\" + \"\u00c4\u012bval bar:Int = 19\\n\" + \"Hello.create().bar\" ; TypedAST res = ( TypedAST ) new Wyvern ( ) . parse ( new StringReader ( input ) , \"test input\" ) ; Assert . assertEquals ( res . typecheck ( Globals . getStandardEnv ( ) , Int . getInstance ( ) ) ; Assert . assertEquals ( res . typecheck ( Globals . getStandardEnv ( ) , Int . getInstance ( ) ) ; Assert . assertEquals ( \"IntegerConstant(5\" + \"9\\n\" + \"5\" ; TypedAST res = ( TypedAST ) new Wyver", "{ return ; } updateConfig ( ) ; updateRifts ( ) ; if ( event . getKey ( ) . equals ( \"essPouch\" ) || event . getKey ( ) . equals ( \"Lavas\" ) ) { removeSwaps ( ) ; handleSwaps ( ) ; }", "public void addDomains ( Set < String > domains ) { domains . addAll ( domains ) ; } public void removeDomain ( String domain ) { domains . remove ( domain ) ; } public void removeDomains ( Set < String > domains ) { domains . removeAll ( domains ) ; } public Set < String > getDomains ( ) { return Collections . unmodifiableSet ( domains ) ; } public Persistence getPersistence ( ) { return persistence ; } public void setPersistence ( Persistence persistence ) { this . persistence = persistence ; } public Properties getProperties ( ) { return properties ; } public void setProperties ( Properties properties ) { this . properties = properties ; } public String getServiceName ( ) { return serviceName ; } public void setServiceName ( String serviceName ) { this . serviceName = serviceName ; }", "} catch ( InputCoercionException e ) { verifyException ( e , \"out of range of `int`\" ) ; assertEquals ( JsonToken . VALUE_NUMBER_INT , e . getInputType ( ) ) ; assertEquals ( Integer . TYPE , e . getTargetType ( ) ) ;", "return CurrencyTextFormatter . formatText ( val , currency , locale , defaultLocale ) ;", "public GrizzlyFuture < WriteResult < WriteQueueMessage , SocketAddress > > write ( Connection connection , SocketAddress dstAddress , WriteQueueMessage message , CompletionHandler < WriteResult < WriteQueueMessage , SocketAddress > > completionHandler , final PushBackHandler pushBackHandler ,", "ValueTypeBoolean . ValueBoolean value = input . getRight ( ) . getValue ( 0 , ValueTypes . BOOLEAN ) ; input . getLeft ( ) . ifPresent ( tag -> tag . putBoolean ( input . getMiddle ( ) , value . getRawValue ( ) ) ) ; return input . getLeft ( ) ;", "public static class Perspective { public static float zoom = 1f ; ToolType action = ToolType . BRUSH ; public static PointF scroll = new PointF ( 0f , 0f ) ; } public Point translate2Image ( float x , float y ) { Point point = new Point ( ) ; point . x = Math . round ( ( x / Perspective . zoom ) - rectImage . left ) ; point . y = Math . round ( ( y / Perspective . zoom ) - rectImage . top ) ; return point ; }", "private Collection < String > getBeanNamesForType ( ListableBeanFactory beanFactory , boolean considerHierarchy , Class < ? > type , TypeExtractor typeExtractor ) { Set < String > result = new LinkedHashSet < > ( ) ; collectBeanNamesForType ( result , beanFactory , type , typeExtractor , considerHierarchy ) ; return result ; } private void collectBeanNamesForType ( Set < String > result , ListableBeanFactory beanFactory , Class < ? > type , TypeExtractor typeExtractor , boolean considerHierarchy ) { BeanTypeRegistry registry = BeanTypeRegistry . get ( beanFactory ) ; result . addAll ( registry . getNamesForType ( type , typeExtractor ) ) ; }", "private final static String APPLICATION_NAME = \"applicationClassName\" ; private static final Logger logger = LoggerFactory . getLogger ( ReflectorServletProcessor . class ) ;", "import java . util . Objects ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . LinkedList ; import java . util . List ; import org . apache . logging . log4j . LogManager ; import org . apache . logging . log4j . Logger ;", "* Long running put request , service returns a 200 to the initial request , with an entity that is not a valid json", "", "public void enableDeadMansSwitch ( long rate , long timeout ) throws IOException { if ( dmsDisposable != null ) { LOG . warn ( \"You already have Dead Man's switch enabled. Doing nothing\" ) ; return ; } final BitmexWebSocketSubscriptionMessage subscriptionMessage = new BitmexWebSocketSubscriptionMessage ( \"cancelAllAfter\" , new Object [ ] { DMS_CANCEL_ALL_IN } ) ; String message = objectMapper . writeValueAsString ( subscriptionMessage ) ; dmsDisposable = Schedulers . single ( ) . schedulePeriodicallyDirect ( new Runnable ( ) { @ Override public void run ( ) { sendMessage ( message ) ; } } , 0 , DMS_RESUBSCRIBE , TimeUnit . MILLISECONDS ) ; Schedulers . single ( ) . start ( ) ; } public void disableDeadMansSwitch ( ) throws IOException { final BitmexWebSocketSubscriptionMessage subscriptionMessage = new BitmexWebSocketSubscriptionMessage ( \"cancelAllAfter\" , new Object [ ] { 0 } ) ; String message = objectMapper . writeValueAsString ( subscriptionMessage ) ; sendMessage ( message ) ; } public boolean isDeadMansSwitchEnabled ( ) { return dmsCancelTime > 0 && System . currentTimeMillis ( ) < dmsCancelTime ; }", "", "@ Override public void onGotKey ( Key key , KeyBlock block , ObjectContainer container , ClientContext context ) { if ( persistent ) { container . activate ( this , 1 ) ; container . activate ( key , 5 ) ; container . activate ( this . key , 5 ) ; } }", "return Factory . fromLotus ( getDelegate ( ) . getModifiedDocuments ( ( lotus . domino . DateTime ) toLotus ( since ) , noteClass ) , DocumentCollection . class , this ) ;", "result . ifPresent ( name -> { if ( title == null ) { System . out . println ( \"null title\" ) ;", "sslSocketAcceptor . getFilterChain ( ) . addAfter ( XMPP_CODEC_FILTER_NAME , CAPACITY_FILTER_NAME , new StalledSessionsFilter ( ) ) ; int maxBufferSize = JiveGlobals . getIntProperty ( \"xmpp.client_ssl.maxReadBufferSize\" , 10 * MB ) ; installReadThrottle ( sslSocketAcceptor , maxBufferSize ) ;", "if ( dumpOnStart ) { getLog ( ) . info ( this . server . dump ( ) ) ; }", "if ( jj_3R_808 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_809 ( ) ) return true ; }", "", "@ PathParam ( \"activation_key_id\" ) @ Verify ( ActivationKey . class ) String activationKeyId , @ PathParam ( \"pool_id\" ) @ Verify ( value = Pool . class , require = Access . READ_POOLS ) String poolId , @ QueryParam ( \"quantity\" ) @ DefaultValue ( \"1\" ) long quantity ) {", "private boolean jj_3R_268 ( ) { if ( jj_3R_187 ( ) ) return true ; }", "import static org . slf4j . LoggerFactory . getLogger ; import com . apollocurrency . aplwallet . apl . core . account . AccountLedger ; import com . apollocurrency . aplwallet . apl . core . transaction . Messaging ; import com . apollocurrency . aplwallet . apl . core . transaction . TransactionType ; import com . apollocurrency . aplwallet . apl . core . db . TransactionalDataSource ;", "", "if ( Build . VERSION . SDK_INT >= 11 ) getWindow ( ) . requestFeature ( Window . FEATURE_ACTION_BAR ) ;", "import ar . ext . textfile . * ;", "if ( ( attribute | MA_PIM_ATTRPREFERRED ) != 0 )", "@ ExportVertexToPythonBindings public LogNormalVertex ( @ LoadParentVertex ( MU_NAME ) DoubleVertex mu , @ LoadParentVertex ( SIGMA_NAME ) DoubleVertex sigma ) { this ( checkHasOneNonLengthOneShapeOrAllLengthOne ( mu . getShape ( ) , sigma . getShape ( ) ) , mu , sigma ) ; }", "setState ( 792 ) ;", "", "* Efficient wrapper for strings .", "private static void updateRequirePrefix ( AssetContainer assetContainer , String sourceAppRequirePrefix , String sourceRequirePrefix , String targetRequirePrefix ) throws IOException , ConfigException { BRJS brjs = assetContainer . root ( ) ; }", "@ XmlElement ( name = \"dependsOn\" ) @ UML ( identifier = \"dependsOn\" , obligation = OPTIONAL , specification = ISO_19115 ) public List < DefaultOperationMetadata > getDependsOn ( ) { return dependsOn = nonNullList ( dependsOn , DefaultOperationMetadata . class ) ; }", "DateRangeMapper mapper = new DateRangeMapper ( \"name\" , \"from\" , \"to\" , TIMESTAMP_PATTERN ) ;", "LOGGER . debug ( \"Injecting executor\" ) ; CLUSTER . injectImage ( TEST_CONFIG . getExecutorImageName ( ) ) ;", "public class Result implements Serializable { }", "", "\"@from(table = 'rdbms' , datasource.name = '\" + RDBMSTestConstants . DATA_SOURCE_NAME + \"'\" + \" , table.name = '\" + RDBMSTestConstants . TABLE_NAME + \"') \" +", "null ,", "Observable < Pair < Project , RefTag > > showProject ( ) ; Observable < Void > showSignupLogin ( ) ; Observable < Void > showActivityFeed ( ) ; Observable < Activity > showActivityUpdate ( ) ;", "_work = new double [ _n ] [ SORT_INDEX + 1 ] ;", "import com . dianping . cat . config . content . ContentFetcher ; import com . dianping . cat . config . content . DefaultContentFetcher ;", "if ( context . global ( ) . krunOptions . experimental . statistics ) System . err . println ( \"[\" + visited . size ( ) + \"states, \" + 0 + \"steps, \" + stopwatch + \"]\" ) ;", "import org . apache . commons . lang . StringUtils ; import org . apache . commons . collections4 . MapUtils ;", "jj_la1_0 = new int [ ] { 0x0 , 0x302 , 0x302 , 0x0 , 0x300 , 0x2 , 0x2 , 0x2 , 0xd4c40000 , 0x0 , 0x300 , 0x2 , 0x300 , 0x2 , 0x0 , 0x2 , 0x2 , 0x2 , 0x0 , 0x0 , 0x2 , 0x2 , 0x0 , 0x0 , 0x2 , 0x0 , 0x2 , 0x100000 , 0x2 , 0x0 , 0x2 , 0x2 , 0xd4c40000 , 0xd4c40000 , 0x2 , 0x2 , 0x2 , 0xd4fd1500 , 0x2 , 0xd4fd1500 , 0x2 , 0x2 , 0x2 , 0x0 , 0x2 , 0x2 , 0x2 , 0x0 , 0x2 , 0x2 , 0x0 , 0x2 , 0x2 , 0x2 , 0x0 , 0x2 , 0x0 , 0x2 , 0x0 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0xd4fd1500 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x2 , 0x0 , 0x2 , 0x2 , 0x2 , 0x", "params . set ( \"numWorkers\" , params . getInt ( \"numWorkers\" , 1 ) ) ; params . set ( \"workerCollection\" , params . get ( \"workerCollection\" , defaultWorkerCollection ) ) ; params . set ( \"workerZkhost\" , params . get ( \"workerZkhost\" , defaultZkhost ) ) ; params . set ( \"aggregationMode\" , params . get ( \"aggregationMode\" , \"map_reduce\" ) ) ;", "import java . util . ArrayList ; import java . util . List ; import static de . tudarmstadt . ukp . inception . workload . dynamic . api . WorkloadConst . * ; import static de . tudarmstadt . ukp . inception . workload . dynamic . api . WorkloadConst . * ;", "public < T > void asyncGetMore ( final MongoNamespace namespace , final MongoGetMore getMore , final Decoder < T > resultDecoder ,", "private final ContentResolver contentResolver ; private final Downloads downloads ; StorageManager ( ContentResolver contentResolver , File externalStorageDir , File internalStorageDir , File systemCacheDir , File downloadDataDir ) { this . contentResolver = contentResolver ; this . externalStorageDir = externalStorageDir ; this . internalStorageDir = internalStorageDir ; this . systemCacheDir = systemCacheDir ; this . downloadDataDir = downloadDataDir ; }", "import io . github . nucleuspowered . nucleus . util . Action ;", "scroll = new Pair < > ( new SeekOrderObjects ( keys . getValue ( lowestInd ) , false ) , DIRECTION_UP ) ; } else if ( downKeys && keyNum >= keys . size ( ) - pageSize ) { int highestInd = keys . size ( ) - pageSize * 2 ; if ( highestInd < 0 ) scroll = new Pair < > ( SEEK_HOME , null ) ; else scroll = new Pair < > ( new SeekOrderObjects ( keys . getValue ( highestInd ) , false ) , DIRECTION_DOWN ) ; } } return scroll ; } public ImMap < ObjectInstance , DataObject > readKeys ( MFormChanges result , boolean updateFilters , boolean updatePageSize , ImMap < ObjectInstance , DataObject > currentObject , SeekObjects seeks , int direction , SQLSession sql , QueryEnvironment env , Modifier modifier , ExecutionEnvironment execEnv , BaseClass baseClass , ReallyChanged reallyChanged ) throws SQLException , SQLHandledException { updated = ( updated | UPDATED_KEYS ) ; if ( ! classView . isGrid ( ) ) { ImMap < ObjectInstance , DataObject > readKeys = seeks . readKeys ( sql , env , modifier , baseClass , reallyChanged ) ; updateViewProperty ( execEnv , readKeys ) ; return readKeys ; } else { int activeRow = - 1 ; if ( isInTree ( ) ) { ImMap < ImMap < ObjectInstance , DataObject > , ImMap < ObjectValue > > treeElements = executeTree ( sql , env , modifier , baseClass , reallyChanged ) ; ImList < ImMap < ObjectInstance , DataObject > > expandParents = treeElements . mapListValues ( value -> immutableCast ( value . filterFn ( ( key , value1 ) -> key instanceof ObjectInstance && value1 instanceof DataObject ) ) ; keys = treeElements . mapOrderValues ( MapFact :: EMPTY ) ; ImMap < ImMap < ObjectInstance , DataObject > , Boolean > groupExpandables", "getSkill ( ForceKillMe . class ) ;", "import com . apollocurrency . aplwallet . apl . core . http . JSONResponses . incorrect ; import com . apollocurrency . aplwallet . apl . core . rest . converter . DexTradeEntryMinToDtoConverter ; import com . apollocurrency . aplwallet . apl . core . rest . converter . DexTradeEntryToDtoConverter ; import com . apollocurrency . aplwallet . apl . exchange . model . DexTradeEntry ; import com . apollocurrency . aplwallet . apl . exchange . model . DexTradeEntryMin ; import static com . apollocurrency . aplwallet . apl . util . Constants . MAX_ORDER_DURATION_SEC ; import io . swagger . v3 . oas . annotations . media . Content ; import io . swagger . v3 . oas . annotations . media . Schema ; import java . util . Random ; import org . checkerframework . checker . units . qual . A ; import static org . slf4j . LoggerFactory . getLogger ;", "", "taskEntityManager . insert ( task , ( ExecutionEntity ) execution ) ; handleAssignments ( taskEntityManager , activeTaskAssignee , activeTaskOwner , activeTaskCandidateUsers , activeTaskCandidateGroups , task , expressionManager , execution ) ;", "protected boolean getOption ( String name , boolean dft ) { Object value = getOption ( name ) ; if ( value == null ) return dft ; if ( value instanceof Boolean ) return ( Boolean ) value ; return Boolean . parseBoolean ( value . toString ( ) ) ; }", "private enum State { BEGIN , HANDSHAKE , MESSAGES , REPLIES , END , COMPLETE } private class AsyncLongPollScheduler extends LongPollScheduler { private AsyncLongPollScheduler ( HttpServletRequest request , HttpServletResponse response , AsyncContext asyncContext , ServerSessionImpl session , ServerMessage . Mutable reply , String browserId , long timeout ) { } }", "{ result = eresult = treeutils . makeBinary ( that . pos , optag , that . getOperator ( ) , lhs , rhs ) ; } else if ( optag == JCTree . Tag . PLUS && that . type . equals ( syms . stringType ) ) { if ( esc || infer ) { } }", "* Long running post request , service returns a 202 to the initial request , with 'Location' and 'Retry-After' headers , Polls return a 200 with a response body after success", "PaintroidApplication . COMMAND_MANAGER . commitCommand ( new BitmapCommand ( PaintroidApplication . DRAWING_SURFACE . getBitmap ( ) ) ) ; mCropRunFinished = false ;", "setState ( 363 ) ;", "import org . elasticsearch . index . IndexSettings ; import org . elasticsearch . index . analysis . AnalyzerScope ; import org . elasticsearch . index . analysis . IndexAnalyzers ; import org . elasticsearch . index . analysis . NamedAnalyzer ; import org . elasticsearch . index . mapper . MapperService . MergeReason ; import org . elasticsearch . index . query . QueryShardContext ; import org . elasticsearch . index . similarity . SimilarityService ; import org . elasticsearch . indices . IndicesModule ; import org . elasticsearch . indices . mapper . MapperRegistry ; import org . elasticsearch . plugins . MapperPlugin ; import org . elasticsearch . plugins . Plugin ; import org . elasticsearch . plugins . ScriptPlugin ; import org . elasticsearch . script . ScriptModule ;", "int captionStartOffsetX = 700 + Hospital . getInstance ( ) . getWidth ( ) + 40 ; int captionStartOffsetY = 40 ; int captionSize = 24 ;", "sendAnimateFromOverview ( tab , false , EMPTY_URL_DATA , null , delay , null ) ;", "* Get an array of array of strings [ [ '1' , '2' , '3' ] , null , [ '7' , '8' , '9' ] ]", "", "{ logger . debug ( message + \"\\n\" + iq . toXML ( ) . toString ( ) . replace ( \">\" , \">\\n\" ) ) ; }", "jjtn000 . expression = Expression ( ) ; jj_consume_token ( MATCHES ) ; if ( jj_2_140 ( 2147483647 ) ) { jjtn000 . rightExpression = Expression ( ) ; } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case RID_STRING : case STRING_LITERAL : jjtn000 . right = String ( ) ; break ; case CHARACTER_LITERAL : token = jj_consume_token ( CHARACTER_LITERAL ) ; jjtn000 . right = token . image ; break ; case HOOK : case COLON : jjtn000 . rightParam = InputParameter ( ) ; } }", "private void reloadBoardPrefs ( ) { prefs = getSharedPreferences ( ChanHelper . PREF_NAME , 0 ) ; selectedBoardType = ChanBoard . Type . valueOf ( prefs . getString ( ChanHelper . BOARD_TYPE , ChanBoard . Type . JAPANESE_CULTURE . toString ( ) ) ) ; } @ Override protected void onRestart ( ) { super . onRestart ( ) ; Log . i ( TAG , \"onRestart\" ) ; } protected void onResume ( ) { super . onResume ( ) ; Log . i ( TAG , \"onResume\" ) ; } public void onWindowFocusChanged ( boolean hasFocus ) { Log . i ( TAG , \"onWindowFocusChanged hasFocus: \" + hasFocus ) ; }", "", "String columnSql = getSqlColumn ( entityType , attr ) ; sql . append ( getTableName ( tableEntityType ) ) . append ( \" ADD \" ) . append ( columnSql ) ;", "\"\\3\u00e6\u0124\u012d\u00ea\u013e\u00aa\u00e8\u0126\u00b3\u00eb\u00a7\u0143\u00e4\u0127\u00bc\u00e3\u00af\u00a7\u00e7\u0140\u0128\u00e5\u00a5\u00a4\\3|\u00cc\u00b5\\4\\2\\t\\2\\4\" +", "final PageResponse pageResponse = new PageResponse ( offset , limited . size ( ) , ( long ) fullList . size ( ) , true ) ;", "jj_la1 [ 205 ] = jj_gen ;", "{ if ( true ) throw ( ParseException ) jjte000 ; }", "versionTextField = SPUIComponentProvider . getTextField ( i18n . get ( \"textfield.version\" ) , \"\" , ValoTheme . TEXTFIELD_TINY , true , null , i18n . get ( \"textfield.version\" ) , true , SPUILabelDefinitions . TEXT_FIELD_MAX_LENGTH ) ; versionTextField . setId ( SPUIComponentIdProvider . SOFT_MODULE_VERSION ) ;", "import cm . aptoide . pt . v8engine . install . InstalledRepository ; import cm . aptoide . pt . v8engine . networking . image . ImageLoader ;", "private void startReviewPaymentMethodsActivity ( final List < PaymentMethod > supportedPaymentMethods ) { new Constants . Activities . ReviewPaymentMethodsActivityBuilder ( )", "EVT_CACHE_OBJECT_REMOVED , null , false , old , old != null || hasValueUnlocked ( ) , subjId , null , taskName ) ;", "", "if ( embeddingMode == EmbeddingMode . SUBSET ) { throw new IllegalArgumentException ( \"Subset embedding for Type 1 fonts is not supported\" ) ; } loader = new Type1FontLoader ( fontFileURI , embedded , useKerning , resourceResolver ) ;", "ExecuteProcessHelper . sqlTranslation ( paramsInfo . getLocalSqlPluginPath ( ) , paramsInfo . getPluginLoadMode ( ) , tableEnv , sqlTree , sideTableMap , registerTableCache , planner ) ;", "import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . ObjectInputStream ; import java . nio . file . Paths ;", "", "public static final String PREFIX = \"node-\" ;", "when ( repoCollection . getRepository ( entityType ) ) . thenReturn ( ( Repository < Entity > ) ( Repository < ? > ) repo ) ;", "promote = AnalyzerCaster . promoteNumeric ( last . after , expression . actual , true ) ;", "public static String PILSEN_2_8_7 = String . format ( \"2.8.7 Pilsen (build 2262)\" ) ; public static String PILSEN_2_8_8 = String . format ( \"2.8.8 Pilsen (build 2308)\" ) ; public static String PILSEN_2_8_9 = String . format ( \"2.8.9 Pilsen (build %s)\" , BUILD ) ; public static String CURRENT = DEV ;", "import thredds . featurecollection . FeatureCollectionConfig ;", "private void mountInternal ( InodePath inodePath , AlluxioURI ufsPath , MountOptions options )", "", "String md5 = Md5Utils . getMD5 ( configInfo . getContent ( ) , Constants . ENCODE ) ; final String sql = \"UPDATE config_info_tag SET content=?, md5 = ?, src_ip=?,src_user=?,gmt_modified=?,app_name=? WHERE \" + \"data_id=? AND group_id=? AND tenant_id=? AND tag_id=?\" ; final Object [ ] args = new Object [ ] { configInfo . getContent ( ) , md5 , srcIp , srcUser , time , appNameTmp , configInfo . getDataId ( ) , configInfo . getGroup ( ) , tenantTmp , tagTmp } ; SqlContextUtils . addSqlContext ( sql , args ) ; boolean result = databaseOperate . update ( SqlContextUtils . getCurrentSqlContext ( ) ) ; if ( ! result ) { throw new NacosConfigException ( \"\u00c3\u00a3\u00c4\u00a2\u00c4\u00b2\u00c3\u00a6\u00c5\u0124\u00c4\u00a9\u00c3\u00a7\u00c5\u0125\u00c2\u00be\u00c3\u00a3\u00c4\u00a2\u00c4\u00b3\u00c3\u00a9\u00c4\u00a7\u00c4\u00af\u00c3\u00a7\u00c2\u00bd\u00c2\u00ae\u00c3\u00a4\u00c2\u00bf\u00c2\u00ae\u00c3\u00a6\u00c4\u00b6\u00c2\u00b9\u00c3\u00a5\u00c2\u00a4\u00c2\u00b1\u00c3\u00a8\u00c2\u00b4\u00c2\u00a5\" ) ; }", "import org . eclipse . ditto . services . connectivity . messaging . persistence . ConnectionPersistenceOperationsActor ; import org . eclipse . ditto . services . connectivity . messaging . config . ConnectivityConfig ;", "final Props props = SmppInterpreter . props ( builder . build ( ) ) ; interpreter = getContext ( ) . actorOf ( props ) ; Sid organizationSid = storage . getOrganizationsDao ( ) . getOrganization ( storage . getAccountsDao ( ) . getAccount ( number . getAccountSid ( ) ) . getOrganizationSid ( ) ) . getSid ( ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( \"redirectToHostedSmsApp organizationSid = \" + organizationSid ) ;", "private void addOriginalKeyStore ( ) throws Exception { Path resources = Paths . get ( KeyStoresTestCase . class . getResource ( \".\" ) . toURI ( ) ) ; Files . copy ( resources . resolve ( \"test-original.keystore\" ) , resources . resolve ( \"test-copy.keystore\" ) , java . nio . file . StandardCopyOption . REPLACE_EXISTING ) ; ModelNode operation = new ModelNode ( ) ; operation . get ( ClientConstants . OPERATION_HEADERS ) . get ( \"allow-resource-service-restart\" ) . set ( Boolean . TRUE ) ; operation . get ( ClientConstants . OP_ADDR ) . add ( \"subsystem\" , \"elytron\" ) . add ( \"key-store\" , KEYSTORE_NAME ) ; operation . get ( ClientConstants . OP ) . set ( ClientConstants . ADD ) ; operation . get ( ElytronDescriptionConstants . PATH ) . set ( resources + \"/test-copy.keystore\" ) ; operation . get ( ElytronDescriptionConstants . TYPE ) . set ( \"JKS\" ) ; operation . get ( CredentialReference . CREDENTIAL_REFERENCE ) . get ( CredentialReference . CLEAR_TEXT ) . set ( \"Elytron\" ) ; assertSuccess ( services . executeOperation ( operation ) ) ; } private KeyStore getKeyStore ( String keyStoreName ) { ServiceName serviceName = Capabilities . KEY_STORE_RUNTIME_CAPABILITY . getCapabilityServiceName ( keyStoreName ) ; return ( KeyStore ) services . getContainer ( ) . getService ( serviceName ) . getValue ( ) ; }", "import java . io . IOException ; import java . util . Arrays ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Queue ; import java . util . UUID ; import java . util . concurrent . TimeUnit ; import java . util . logging . Level ; import java . util . logging . Logger ; import java . util . zip . Deflater ; import javax . net . ssl . TrustManager ; import javax . net . ssl . X509TrustManager ; import tigase . conf . ConfigurationException ;", "setState ( 799 ) ;", "import com . hartwig . hmftools . bachelorpp . types . BachelorRecordFilter ; import com . hartwig . hmftools . common . chromosome . Chromosome ; import com . hartwig . hmftools . common . collect . Multimaps ;", "inputMan . setScreen ( solApplication , screens . mainGameScreen ) ; is . setOperations ( is . chooseMercenaryScreen ) ;", "setState ( 663 ) ;", "public YAMLFactoryBuilder stringQuotingChecker ( StringQuotingChecker sqc ) { _quotingChecker = sqc ; return this ; }", "", "synchronized ( mWorkerHosts ) { if ( mWorkerHosts . size ( ) >= mNumWorkers || ( mOneWorkerPerHost && mWorkerHosts . contains ( container . getNodeId ( ) . getHost ( ) ) ) ) { LOG . info ( \"Releasing assigned container on {}\" , container . getNodeId ( ) . getHost ( ) ) ; mRMClient . releaseAssignedContainer ( container . getId ( ) ) ; } else { try { ContainerLaunchContext ctx = Records . newRecord ( ContainerLaunchContext . class ) ; ctx . setCommands ( commands ) ; ctx . setLocalResources ( localResources ) ; ctx . setEnvironment ( env ) ; LOG . info ( \"Launching container {} for Tachyon worker {} on {} with worker command: {}\" , container . getId ( ) , mWorkerHosts . size ( ) , container . getNodeHttpAddress ( ) , command ) ; mNMClient . startContainer ( container , ctx ) ; mWorkerHosts . add ( container . getNodeId ( ) . getHost ( ) ) ; } catch ( Exception e ) { LOG . error ( \"Error launching container {}\" , container . getId ( ) , e ) ; } } mOutstandingWorkerContainerRequestsLatch . countDown ( ) ; }", "import its_meow . betteranimalsplus . init . ModEntities ; import its_meow . betteranimalsplus . init . ModTextures ; import its_meow . betteranimalsplus . init . ModTileEntities ; import net . minecraft . client . renderer . RenderType ; import net . minecraft . client . renderer . RenderTypeLookup ; import net . minecraft . client . renderer . Vector3f ; import its_meow . betteranimalsplus . init . ModResources ; import its_meow . betteranimalsplus . init . ModTextures ; import its_meow . betteranimalsplus . init . ModTileEntities ;", "IConnection conn = Red5 . getConnectionLocal ( ) ; String scopeName ; if ( conn != null && conn . getScope ( ) != null ) { scopeName = conn . getScope ( ) . getName ( ) ; } else { log . info ( \"Connection local was null, using scope name from the stream: {}\" , stream ) ; scopeName = stream . getScope ( ) . getName ( ) ; } log . info ( \"Stream broadcast closed for stream=[{}] meeting=[{}]\" , stream . getPublishedName ( ) , scopeName ) ; String userId = getUserId ( ) ; String meetingId = conn . getScope ( ) . getName ( ) ; String streamId = stream . getPublishedName ( ) ; publisher . userUnshareWebcamRequestMessage ( meetingId , userId , streamId ) ;", "VmInstance vm = VmInstances . lookup ( vmId ) ; if ( vm . getSplitTime ( ) > VmInstances . SHUT_DOWN_TIME ) { if ( VmState . RUNNING . equals ( vm . getRuntimeState ( ) ) || VmState . SHUTTING_DOWN . equals ( vm . getRuntimeState ( ) ) || VmState . STOPPING . equals ( vm . getRuntimeState ( ) ) ) { vm . setState ( VmState . TERMINATED , Reason . EXPIRED ) ; } }", "public int available ( ) throws IOException { return nativeavailable ( ) ; } } class MonitorThread extends Thread { private boolean CTS = false ; private boolean DSR = false ; private boolean RI = false ; private boolean CD = false ; private boolean OE = false ; private boolean PE = false ; private boolean FE = false ; private boolean BI = false ; private boolean Data = false ; private boolean Output = false ; MonitorThread ( ) { setDaemon ( true ) ; } public void run ( ) { eventLoop ( ) ; } }", "public static boolean getIsBackUpCurrentLog ( ) { return mBackUpCurrentLog ; } ufs . close ( ) ; return transactionId ;", "@ XmlElement ( name = \"boundMin\" ) @ XmlJavaTypeAdapter ( GO_Real . Since2014 . class ) @ UML ( identifier = \"boundMin\" , obligation = OPTIONAL , specification = ISO_19115 )", "targetAttribute . setRefEntity ( targetRefEntityType ) ;", "@ SuppressWarnings ( \"WeakerAccess\" ) MethodDatabase getMethodDatabase ( ClassLoader loader ) { if ( loader == null ) throw new IllegalArgumentException ( ) ; if ( ! dbForClassloader . containsKey ( loader ) ) { MethodDatabase newDb = new MethodDatabase ( this , loader , new DefaultSuspendableClassifier ( loader ) ) ; dbForClassloader . put ( loader , newDb ) ; return newDb ; } else return dbForClassloader . get ( loader ) ; }", "lsmBtree = LSMBTreeUtils . createLSMTree ( virtualBufferCaches , file , bufferCache , fileMapProvider , typeTraits , comparatorFactories , bloomFilterKeyFields , runtimeContext . getBloomFilterFalsePositiveRate ( ) , runtimeContext . getMetadataMergePolicyFactory ( ) . createMergePolicy ( GlobalConfig . DEFAULT_COMPACTION_POLICY_PROPERTIES ) , opTracker , runtimeContext . getLSMIOScheduler ( ) , LSMBTreeIOOperationCallbackFactory . INSTANCE . createIOOperationCallback ( ) ) ;", "import org . dspace . content . virtual . VirtualMetadataPopulator ; import org . dspace . core . Constants ;", "final FuturePeerConnection fpc = peer . createPeerConnection ( candidate ) ; futures [ i ] = relayRPC . setupRelay ( cc , fpc ) ; if ( futures [ i ] != null ) { }", "regularExressionMenuItem . setSelection ( lastRegularExpressionState ) ; regularExressionMenuItem . addSelectionListener ( new SelectionAdapter ( ) { @ Override public void widgetSelected ( SelectionEvent e ) { searchText . setFocus ( ) ; if ( ! searchOnEnter ) { searchText ( ) ; } } } ) ;", "if ( column . equals ( partitioningColumn . getPartitionColForDML ( ) ) ) { }", "import net . minecraft . tileentity . TileEntity ; import net . minecraft . util . BlockPos ; import net . minecraft . util . MovingObjectPosition ; import net . minecraft . util . MovingObjectPosition . MovingObjectType ; import net . minecraft . util . ResourceLocation ; import net . minecraft . world . World ; import net . minecraftforge . client . event . RenderGameOverlayEvent ; import net . minecraftforge . client . event . RenderWorldLastEvent ;", "@ Deprecated public SagaConfiguration < S > configureMessageMonitor ( Function < Configuration , MessageMonitor < ? super EventMessage < ? > > > messageMonitor ) { }", "public Multimap < Attribute , AttributeModifier > getAttributeModifiers ( EquipmentSlotType slot , ItemStack stack ) { Multimap < Attribute , AttributeModifier > multimap = HashMultimap . create ( ) ; }", "setState ( 689 ) ;", "public static String getSmallerGfy ( String gfyUrl ) { gfyUrl = gfyUrl . replaceAll ( \"fat|zippy|giant\" , \"thumbs\" ) . replaceAll ( \"\\\\.mp4|\\\\.webm\" , \"-mobile.mp4\" ) ; return gfyUrl ; }", "cacheTable . addEvents ( loadedCache , preLoadedDataSize ) ;", "insts . ConditionalBranchInstruction ( context . cfg ( ) . currentInstruction , translateConditionOpcode ( CAstOperator . OP_EQ ) , null , c . getValue ( l ) , context . currentScope ( ) . getConstantValue ( new Integer ( 0 ) ) , - 1 ) ) ;", "IOException e = null ; for ( int i = 0 ; i < 9 ; i ++ ) { try { int csz = toIntExact ( arc . getFile ( ) . length ( ) ) ; ObjectMetadata md = new ObjectMetadata ( ) ; md . addUserMetadata ( \"size\" , Integer . toString ( arc . uncompressedLength . get ( ) ) ) ; md . addUserMetadata ( \"lz4compress\" , Boolean . toString ( Main . compress ) ) ; md . addUserMetadata ( \"encrypt\" , Boolean . toString ( Main . chunkStoreEncryptionEnabled ) ) ; md . addUserMetadata ( \"compressedsize\" , Integer . toString ( csz ) ) ; md . addUserMetadata ( \"bsize\" , Integer . toString ( arc . getLen ( ) ) ) ; md . addUserMetadata ( \"objects\" , Integer . toString ( arc . getSz ( ) ) ) ; md . addUserMetadata ( \"uuid\" , arc . getUUID ( ) ) ; md . addUserMetadata ( \"bcompressedsize\" , Integer . toString ( csz ) ) ; md . setContentType ( \"binary/octet-stream\" ) ; md . setContentLength ( csz ) ; if ( md5sum ) { FileInputStream in = new FileInputStream ( arc . getFile ( ) ) ; Hasher hasher = Hashing . md5 ( ) . newHasher ( ) ; ByteStreams . copy ( in , Funnels . asOutputStream ( hasher ) ) ; String mds = BaseEncoding . base64 ( ) . encode ( hasher . hash ( ) . asBytes ( ) ) ; md . setContentMD5 ( mds ) ; md . addUserMetadata ( \"md5sum\" , mds ) ; IOUtils . closeQuietly ( in ) ; } FileInputStream in = new FileInputStream ( arc . getFile ( ) ) ; Hasher hasher = Hashing . md5 ( ) . newHasher ( ) ; ByteStreams . copy", "@ Deprecated public static int getOreID ( ItemStack stack ) { if ( stack == null || stack . getItem ( ) == null ) return - 1 ; String registryName = stack . getItem ( ) . delegate . name ( ) ; int id ; if ( registryName == null ) { FMLLog . log ( Level . DEBUG , \"Attempted to find the oreIDs for an unregistered object (%s). This won't work very well.\" , stack ) ; return - 1 ; } else { id = GameData . getItemRegistry ( ) . getId ( registryName ) ; } List < Integer > ids = stackToId . get ( id ) ; if ( ids == null || ids . size ( ) == 0 ) { ids = stackToId . get ( id | ( ( stack . getItemDamage ( ) + 1 ) << 16 ) ) ; } return ( ids != null && ids . size ( ) > 0 ) ? ids . get ( 0 ) : - 1 ; }", "public void testTemplateHandlerWithInclude ( ) throws Exception { TemplateEngine engine = MVELTemplateEngine . create ( ) ; testTemplateHandler ( engine , \"src/test/filesystemtemplates\" , \"test-mvel-template4.templ\" , \"Hello badger and fox\\nRequest path is /test-mvel-template4.templ\" ) ; } @ Test public void testTemplateHandlerOnClasspathDisableCaching ( ) throws Exception { System . setProperty ( CachingTemplateEngine . DISABLE_TEMPL_CACHING_PROP_NAME , \"true\" ) ; testTemplateHandlerOnClasspath ( ) ; } @ Test", "import static org . mockito . Mockito . when ; import static org . zalando . nakadi . config . SecuritySettings . AuthMode . OFF ;", "@ Override public void setAuditCreationAndUpdateData ( Object entity ) throws Exception { BroadleafRequestContext brc = BroadleafRequestContext . getBroadleafRequestContext ( ) ; if ( ! brc . getAdmin ( ) ) { return ; } setAuditCreationData ( entity , new AdminAuditable ( ) ) ; setAuditUpdateData ( entity , new AdminAuditable ( ) ) ; }", "", "", "setState ( 420 ) ;", "for ( int i = 0 ; i < section . itemsCount ( ) ; i ++ ) { ListItemWidget item = section . getItem ( i ) ; m_viewAdapter . addAt ( item . getView ( ) , listIndex + i ) ; }", "prop = getConfig ( Constants . CONFIG_CATEGORY_WORLDGEN , \"Enable Copper Ore Gen\" , true ) ; prop . setComment ( \"If this is enabled, copper ore will generate on the overworld.\" ) ;", "", "{ if ( lines . get ( i ) . startsWith ( \"const frontendFolder\" ) ) { lines . set ( i , frontendLine ) ; } }", "public int fadeInDuration = AnimationUtils . DEFAULT_DURATION ; public int fadeOutDuration = AnimationUtils . DEFAULT_DURATION ; public LayoutParams buttonLayoutParams = null ;", "final ShipkitExecTask shipkitExecTask = TaskMaker . task ( project , COMMIT_VERSION_UPGRADE , ShipkitExecTask . class , new Action < ShipkitExecTask > ( ) { @ Override public void execute ( final ShipkitExecTask exec ) { exec . setDescription ( \"Commits updated build file.\" ) ; exec . mustRunAfter ( REPLACE_VERSION ) ; exec . dependsOn ( GitConfigPlugin . SET_EMAIL_TASK , GitConfigPlugin . SET_USER_TASK ) ; deferredConfiguration ( project , new Runnable ( ) { @ Override public void run ( ) { String message = String . format ( \"%s version upgraded to %s\" , upgradeDependencyExtension . getDependencyName ( ) , upgradeDependencyExtension . getNewVersion ( ) ) ; exec . execCommand ( execCommand ( \"Committing build file\" , \"git\" , \"commit\" , \"--author\" , GitUtil . getGitGenericUserNotation ( conf . getGit ( ) . getUser ( ) , conf . getGit ( ) . getEmail ( ) ) , \"-m\" , message , upgradeDependencyExtension . getBuildFile ( ) . getAbsolutePath ( ) ) ) ; } } ) ; exec . onlyIf ( wasBuildFileUpdatedSpec ( replaceVersionTask ) ) ; } } ) ;", "import org . zalando . nakadi . domain . EventTypeBase ; import org . zalando . nakadi . domain . Timeline ;", "public void applyNonEndpointMutationsWhileFrozen ( ) throws Exception { final Dimension fullSize = new Dimension ( 2000 , 1000 ) ; final Info info = Info . builder ( ) . withSize ( fullSize ) . build ( ) ; final OperationList opList = new OperationList ( new Crop ( 0 , 0 , 70 , 30 ) ) ; }", "import org . apache . http . entity . ContentType ; import com . mashape . unirest . request . HttpRequest ; import org . apache . commons . io . IOUtils ;", "private ServiceJobProcesses serviceJobProcesses ; private MigrationPolicy migrationPolicy ;", "", "PostManager . getInstance ( this ) . getPost ( postId , createOnPostChangeListener ( ) ) ; CommentsAdapter commentsAdapter = new CommentsAdapter ( commentsContainer ) ; ApplicationHelper . getDatabaseHelper ( ) . getCommentsList ( postId , createOnPostChangedDataListener ( commentsAdapter ) ) ; postImageView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { openImageDetailScreen ( ) ; } } ) ;", "Engine . Index idxRequest = new Engine . Index ( newUid ( uuidValue ) , doc , SequenceNumbersService . UNASSIGNED_SEQ_NO , 2 , VersionType . EXTERNAL , PRIMARY , System . nanoTime ( ) , - 1 , false ) ;", "public Packet getNextPacket ( ) throws IOException , PacketParseException { }", "controller . selectMode ( mode ) ; String fileName = token . nextToken ( \"\" ) . substring ( 1 ) ; if ( PORTABLE_APP && fileName . startsWith ( \":\" ) && USER_DRIVE . endsWith ( \":\" ) ) { fileName = USER_DRIVE + fileName . substring ( 1 ) ; }", "import io . vertx . ext . web . client . impl . UserAgentUtil ; import io . vertx . ext . web . client . jackson . WineAndCheese ;", "clearSearchImageView . setColorFilter ( new PorterDuffColorFilter ( Theme . getColor ( darkTheme ? Theme . key_voipgroup_searchPlaceholder : Theme . key_dialogSearchIcon ) , PorterDuff . Mode . SRC_IN ) ) ;", "public class PopulateEventAwards extends AsyncTask < String , Void , APIResponse . CODE > { }", "final String [ ] finalArgs = args ; final Consumer < UUID > uuidConsumer = uuid -> { if ( page [ 0 ] == Integer . MIN_VALUE && uuid == null && MathMan . isInteger ( finalArgs [ 0 ] ) ) { page [ 0 ] = Integer . parseInt ( finalArgs [ 0 ] ) ; } else { if ( uuid != null ) { Plot plot = MainUtil . getPlotFromString ( player , finalArgs [ 0 ] , true ) ; if ( plot != null ) { unsortedPre . addAll ( Collections . singletonList ( plot ) ) ; } } } }", "final List < PublicKey > recipientList = new ArrayList < > ( ) ; recipientList . addAll ( sendRequest . getRecipients ( ) ) ;", "", "registerMod ( new ThaumCraft ( ) ) ;", "* Put An array of array of strings { \"0\" : [ \"1\" , \"2\" , \"3\" ] , \"1\" : [ \"4\" , \"5\" , \"6\" ] , \"2\" : [ \"7\" , \"8\" , \"9\" ] }", "public static Condition createConditionFromErrors ( final List < Error > errors ) { return Condition . create ( null , null , null , null , null , null , errors ) ; } public static StatusPage createStatusPageFromErrors ( final List < Error > errors ) { }", "* @ param id The id of the audio player", "neLayer . setOverlapMode ( ANY_OVERLAP ) ; sut . add ( document , username , jcas . getCas ( ) , 0 , 1 ) ;", "", "assertEquals ( Pi ( typeArgs ( Tele ( vars ( \"F\" ) , Pi ( Nat ( ) , Universe ( ) ) ) , Tele ( vars ( \"f\" ) , Pi ( typeArgs ( Tele ( vars ( \"x\" ) , Nat ( ) ) ) , Apps ( Index ( 1 ) , Index ( 0 ) ) ) ) , Apps ( Index ( 1 ) , Zero ( ) ) ) , ( ( LeafElimTreeNode ) ( ( FunctionDefinition ) def ) . getElimTree ( ) ) . getExpression ( ) . getType ( new ArrayList < Binding > ( ) ) ) ;", "prop . setComment ( \"Set this to true for increased difficulty in modpacks (see forum for more info).\" ) ; prop . setLanguageKey ( \"gc.configgui.hard_mode\" ) ;", "private ServicesTableModel tableModel ; private static final Logger logger = Logger . getLogger ( IngestDialogPanel . class . getName ( ) ) ; private Image image ; private static IngestDialogPanel instance = null ;", "List < AggregationContainer > getCompatibleAggregationsForQuery ( Collection < String > dimensions , Collection < String > storedMeasures , AggregationPredicate where ) { where = where . simplify ( ) ; Set < String > allDimensions = new LinkedHashSet < > ( dimensions ) ; allDimensions . addAll ( where . getDimensions ( ) ) ; List < AggregationContainer > compatibleAggregations = new ArrayList < > ( ) ; for ( AggregationContainer aggregationContainer : aggregations . values ( ) ) { if ( ! all ( allDimensions , in ( aggregationContainer . aggregation . getKeys ( ) ) ) ) continue ; List < String > compatibleMeasures = newArrayList ( filter ( storedMeasures , in ( aggregationContainer . measures ) ) ) ; if ( compatibleMeasures . isEmpty ( ) ) continue ; AggregationPredicate intersection = AggregationPredicates . and ( where , aggregationContainer . predicate ) . simplify ( ) ; if ( ! intersection . equals ( where ) ) continue ; compatibleAggregations . add ( aggregationContainer ) ; } return compatibleAggregations ; } static class AggregationContainerWithScore implements Comparable < AggregationContainerWithScore > { }", "import us . ihmc . yoVariables . registry . YoRegistry ;", "prop = getConfig ( Constants . CONFIG_CATEGORY_ACHIEVEMENTS , \"idAchievBase\" , 1784 ) ; prop . setComment ( \"Base Achievement ID. All achievement IDs will start at this number.\" ) ;", "return TERM_FACTORY . getConstantLiteral ( DateTimeFormatter . ISO_TIME . format ( convertToTime ( value ) ) , COL_TYPE . TIME ) ;", "Integer timeout = ( Integer ) context . getBL ( ) . LM . timeoutHttp . read ( context ) ;", "public void clearLocalNotification ( String gameObject , String func ) { JPushInterface . clearLocalNotification ( getActivity ) ; UnityPlayer . UnitySendMessage ( gameObject , func , \"clearLocalNotification\" ) ; }", "protected final ActionCache actionCache ; protected final OperationsMap outstandingOperations ; protected final OperationsMap completedOperations ; protected final Map < Digest , ByteString > activeBlobWrites ;", "return runActionOnExclusivLockedBus ( ( ) -> { int selectResponse = checkSlaveSelect ( device ) ; if ( selectResponse < 0 ) { return selectResponse ; } return I2C . i2cWriteAndReadBytes ( fd , writeSize , writeOffset , writeBuffer , readSize , readOffset , readBuffer ) ; } ) ;", "import de . rub . nds . tlsattacker . transport . ConnectionEndType ;", "else if ( phenomenonTime instanceof TimeInstant ) { if ( ( ( TimeInstant ) phenomenonTime ) . isSetValue ( ) ) { observation . setResultTime ( ( ( TimeInstant ) phenomenonTime ) . getValue ( ) . toDate ( ) ) ; } else if ( ( ( TimeInstant ) phenomenonTime ) . isSetIndeterminateValue ( ) ) { observation . setResultTime ( getDateForTimeIndeterminateValue ( ( ( TimeInstant ) phenomenonTime ) . getIndeterminateValue ( ) , \"gml:TimeInstant/gml:timePosition[@indeterminatePosition]\" ) ) ; } else { throw new NoApplicableCodeException ( ) . withMessage ( \"Error while adding result time to Hibernate Observation entitiy!\" ) ; } } else if ( resultTime . isSetIndeterminateValue ( ) ) { observation . setResultTime ( getDateForTimeIndeterminateValue ( resultTime . getIndeterminateValue ( ) , \"gml:TimeInstant/gml:timePosition[@indeterminatePosition]\" ) ) ; }", "private static void invalidateInputsByShowMessageForAndShowMessages ( FacesContext context , UIForm form , Set < ConstraintViolation < ? > > violations , String showMessageFor ) { for ( String forId : showMessageFor . split ( \"\\\\s+\" ) ) { UIComponent component = form . findComponent ( forId ) ; context . validationFailed ( ) ; if ( component instanceof UIInput ) { ( ( UIInput ) component ) . setValid ( false ) ; } String clientId = component . getClientId ( context ) ; addErrors ( clientId , violations , getLabel ( component ) ) ; } } private static void invalidateInputsByClientIdsAndShowMessages ( FacesContext context , UIForm form , Set < ConstraintViolation < ? > > violations , Set < String > clientIds , String showMessageFor ) { context . validationFailed ( ) ; StringBuilder labels = new StringBuilder ( ) ; }", "private boolean updateGroup ( final Integer newGroup , final SnomedRelationshipIndexEntry original , SnomedRelationshipIndexEntry . Builder relationship , final Integer newGroup , final SnomedRelationshipIndexEntry original , SnomedRelationshipIndexEntry . Builder relationship , final SnomedRelationshipModifiedState state ) { }", "@ Override public Set < FillType > getAvailableFillTypes ( ) { return new HashSet < > ( Arrays . asList ( FillType . values ( ) ) ) ; } @ Override public boolean isObjectDraggingRestricted ( ) { return false ; } @ Override public int getEnforcedLineEquationForm ( ) { return - 1 ; } @ Override public int getEnforcedConicEquationForm ( ) { return - 1 ; } @ Override public OperationArgumentFilter createOperationArgumentFilter ( ) { return null ; } @ Override public ParserFunctions createParserFunctions ( ) { return ParserFunctionsFactory . createParserFunctions ( ) ; }", "internal_static_voldemort_RepairJobRequest_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 38 ) ; internal_static_voldemort_RepairJobRequest_fieldAccessorTable = new com . google . protobuf . GeneratedMessage . FieldAccessorTable ( internal_static_voldemort_RepairJobRequest_descriptor , new java . lang . String [ ] { \"StoreName\" , } , voldemort . client . protocol . pb . VAdminProto . RepairJobRequest . class , voldemort . client . protocol . pb . VAdminProto . RepairJobRequest . Builder . class ) ; internal_static_voldemort_RepairJobResponse_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 40 ) ; internal_static_voldemort_ROStoreVersionDirMap_descriptor = getDescriptor ( ) . getMessageTypes ( ) . get ( 38 ) ;", "", "", "JCMediaManager . instance ( ) . currentVideoWidth = 0 ; JCMediaManager . instance ( ) . currentVideoHeight = 0 ; JCMediaManager . instance ( ) . bufferPercent = 0 ; JCMediaManager . instance ( ) . videoRotation = 0 ;", "{ } ; public static final TOverload WEEKOFYEAR = new MWeek ( ) { } ; protected MWeek ( WeekType type , DateType dateType ) { this . weekType = type ; this . dateType = dateType ; }", "struct . db_name = iprot . readString ( ) ; struct . setDb_nameIsSet ( true ) ;", "try { String uri = UriCreator . getUri ( friend . getAvatarUid ( ) ) ; ImageLoader . getInstance ( ) . displayImage ( uri , avatarImageView , Consts . avatarDisplayOptions ) ; } catch ( BaseServiceException e ) { ErrorUtils . showError ( this , e ) ; }", "context . addServlet ( new ServletHolder ( getTransactionInfoByBlockNumOnSolidityServlet ) , \"/walletsolidity/gettransactioninfobyblocknum\" ) ; context . addServlet ( new ServletHolder ( getMarketOrderByAccountOnSolidityServlet ) , \"/walletsolidity/getmarketorderbyaccount\" ) ; context . addServlet ( new ServletHolder ( getMarketOrderByIdOnSolidityServlet ) , \"/walletsolidity/getmarketorderbyid\" ) ; context . addServlet ( new ServletHolder ( getMarketPriceByPairOnSolidityServlet ) , \"/walletsolidity/getmarketpricebypair\" ) ; context . addServlet ( new ServletHolder ( getMarketOrderListByPairOnSolidityServlet ) , \"/walletsolidity/getmarketorderlistbypair\" ) ; context . addServlet ( new ServletHolder ( getMarketPairListOnSolidityServlet ) , \"/walletsolidity/getmarketpairlist\" ) ;", "public boolean existsAnnotationCas ( AnnotationDocument aAnnotationDocument ) throws IOException", "* Long running delete request , service returns an Azure - AsyncOperation header in the initial request . Subsequent calls to operation status do not contain Azure - AsyncOperation header .", "import java . util . Arrays ; import org . eclipse . ditto . model . base . entity . id . NamespacedEntityIdInvalidException ;", "import org . opencb . opencga . storage . core . search . SearchManager ; import org . opencb . opencga . storage . core . metadata . StudyConfigurationManager ;", "private static OkHttpClient sHttpClient ; private static Picasso sPicasso ; private static String sDefSystemLanguage ; private static PopcornApplication sInstance ; public PopcornApplication ( ) { sInstance = this ; } public static PopcornApplication getInstance ( ) { return sInstance ; } @ Override public void onCreate ( ) { super . onCreate ( ) ; sDefSystemLanguage = LocaleUtils . getCurrent ( ) ; Constants . DEBUG_ENABLED = false ; int versionCode = 0 ; try { String packageName = getPackageName ( ) ; PackageInfo packageInfo = getPackageManager ( ) . getPackageInfo ( packageName , 0 ) ; int flags = packageInfo . applicationInfo . flags ; versionCode = packageInfo . versionCode ; Constants . DEBUG_ENABLED = ( flags & ApplicationInfo . FLAG_DEBUGGABLE ) != 0 ; } catch ( PackageManager . NameNotFoundException e ) { e . printStackTrace ( ) ; } }", "this . accountingDropdownReadPlatformService = accountingDropdownReadPlatformService ; this . namedParameterJdbcTemplate = new NamedParameterJdbcTemplate ( dataSource ) ;", "doc . add ( new Table ( UnitValue . createPercentArray ( 1 ) ) . useAllAvailableWidth ( ) . addCell ( \"Hello\" ) . setBorder ( new SolidBorder ( ColorConstants . ORANGE , 5 ) ) ) ;", "* Gets the user search fields , the fields to use when a fulltext search is", "* Test explicitly required string . Please put a header 'headerParameter' = & gt ; null and the client library should throw before the request is sent .", "import java . util . Collection ; import java . util . ArrayList ;", "setState ( 332 ) ;", "", "", "if ( VoltDB . instance ( ) . isIV2Enabled ( ) ) { long handle = m_ciHandles . getHandle ( isSinglePartition , partitions [ 0 ] , invocation . getClientHandle ( ) , ( Connection ) clientData , adminConnection , messageSize , now ) ; try { long initiatorHSId ; if ( isSinglePartition ) { JSONObject master = m_iv2Masters . get ( Integer . toString ( partitions [ 0 ] ) ) ; if ( master == null ) { hostLog . error ( \"Failed to find master initiator for partition: \" + Integer . toString ( partitions [ 0 ] ) + \". Transaction not initiated.\" ) ; m_ciHandles . removeHandle ( handle ) ; return false ; } initiatorHSId = master . getLong ( \"hsid\" ) ; } else { initiatorHSId = m_cartographer . getHSIdForMultiPartitionInitiator ( ) ; } Iv2InitiateTaskMessage workRequest = new Iv2InitiateTaskMessage ( m_siteId , initiatorHSId , Iv2InitiateTaskMessage . UNUSED_MP_TXNID , isReadOnly , isSinglePartition , invocation , handle ) ; Iv2Trace . logCreateTransaction ( workRequest ) ; m_mailbox . send ( initiatorHSId , workRequest ) ; } catch ( JSONException e ) { m_ciHandles . removeHandle ( handle ) ; throw new RuntimeException ( e ) ; } m_backpressure . increaseBackpressure ( messageSize ) ; return true ; } else { return m_initiator . createTransaction ( connectionId , connectionHostname , adminConnection , invocation , isReadOnly , isSinglePartition , isEveryPartition , partitions , numPartitions , clientData , messageSize , now , allowMismatchedResults ) ; }", "if ( ( matcherFeature != null ) && matcherFeature . matches ( ) ) { featureProject . createBuilderMarker ( res , name + MESSAGE_ABSTRACT , lineNumber , IMarker . SEVERITY_WARNING ) ; }", "import java . util . Optional ; import javax . annotation . ParametersAreNonnullByDefault ;", "private void uploadRestData ( final ResumeUploadCompleteHandler completeHandler ) { }", "import org . eclipse . ditto . model . base . headers . DittoHeaders ; import org . eclipse . ditto . model . base . exceptions . DittoRuntimeException ;", "this . schemaCache = configuration . getTypeCache ( typeCacheRetrieval ) ; isOpen = true ; txCounter = new AtomicLong ( 0 ) ; openTransactions = Collections . newSetFromMap ( new ConcurrentHashMap < StandardTitanTx , Boolean > ( 100 , 0.75f , 1 ) ) ; String uniqueInstanceId = configuration . getUniqueGraphId ( ) ; ModifiableConfiguration globalConfig = GraphDatabaseConfiguration . getGlobalSystemConfig ( backend ) ; if ( globalConfig . has ( REGISTRATION_TIME , uniqueInstanceId ) ) { throw new TitanException ( String . format ( \"A Titan graph with the same instance id [%s] is already open. Might required forced shutdown.\" , uniqueInstanceId ) ) ; } globalConfig . set ( REGISTRATION_TIME , Timestamps . MILLI . getTime ( ) , uniqueInstanceId ) ; Log mgmtLog = backend . getSystemMgmtLog ( ) ; mgmtLogger = new ManagementLogger ( this , mgmtLog , schemaCache ) ; mgmtLog . registerReader ( mgmtLogger ) ;", "public class SAMLEntityDescriptorParser extends AbstractDescriptorParser implements ParserNamespaceSupport { private static final PicketLinkLogger logger = PicketLinkLoggerFactory . getLogger ( ) ; }", "import com . fasterxml . jackson . core . util . JacksonFeatureSet ;", "assertEquals ( StoreTrait . values ( ) . length , before . size ( ) ) ; assertEquals ( StoreTrait . values ( ) . length , after . size ( ) ) ; assertEquals ( before , after ) ;", "else if ( command . equals ( \"Copy\" ) )", "InstrumentationPropertiesBuilder propertiesBuilder = new InstrumentationPropertiesBuilder ( request , result ) . add ( InstrumentationIDs . ERROR_CLASS , result == null ? InstrumentationIDs . AUTH_RESULT_EMPTY : InstrumentationIDs . AUTH_TOKEN_NOT_RETURNED ) ; ClientAnalytics . logEvent ( new RefreshTokenEvent ( propertiesBuilder , InstrumentationIDs . EVENT_RESULT_FAIL , true ) ) ; Logger . v ( TAG , \"Token is not returned from backgroud(silent) request.\" ) ;", "private void selectPage ( BottomNavigationSection section ) { if ( section == currentSection ) { return ; } Fade transition = new Fade ( ) ; TransitionManager . beginDelayedTransition ( pageContainer , transition ) ; if ( currentSection != null ) { pageViews . get ( currentSection ) . setVisibility ( View . INVISIBLE ) ; } pageViews . get ( section ) . setVisibility ( View . VISIBLE ) ; Resources . Theme theme = getThemeFor ( section ) ; setStatusBarColor ( getColorFromTheme ( theme , android . R . attr . statusBarColor ) ) ; setBottomNavigationBarColor ( getColorFromTheme ( theme , android . support . design . R . attr . colorPrimary ) ) ; currentSection = section ; } private Resources . Theme getThemeFor ( BottomNavigationSection section ) { Resources . Theme theme = getResources ( ) . newTheme ( ) ; theme . setTo ( getTheme ( ) ) ; theme . applyStyle ( section . theme ( ) , true ) ; return theme ; } @ ColorInt private int getColorFromTheme ( Resources . Theme theme , @ AttrRes int attributeId ) { TypedValue typedValue = new TypedValue ( ) ; theme . resolveAttribute ( attributeId , typedValue , true ) ; return typedValue . data ; } private void setStatusBarColor ( @ ColorInt int color ) { Window window = getWindow ( ) ; int currentStatusBarColor = window . getStatusBarColor ( ) ; animateColor ( currentStatusBarColor , color , animation -> window . setStatusBarColor ( ( int ) animation . getAnimatedValue ( ) ) ; } private void setBottomNavigationBarColor ( @ ColorInt int color ) { ColorDrawable backgroundDrawable = ( ColorDrawable ) bottomNavigationView . getBackground ( ) ; int currentBackgroundColor = backgroundDrawable . getColor ( ) ; animateColor ( currentBackgroundColor , color , animation -> backgroundDrawable . getColor ( ) ; animateColor ( currentColor , color , animation -> backgroundDrawable .", "", "\"The number of weights and number of objectives don't match\" ) ; }", "if ( this . field != null && this . terms != null ) { }", "syncTabListViewItems ( ) ; tabPane . getTabs ( ) . addListener ( ( ListChangeListener < Tab > ) change -> syncTabListViewItems ( ) ) ; tabListView . getSelectionModel ( ) . selectedIndexProperty ( ) . addListener ( ( observableValue , oldValue , newValue ) -> tabPane . getSelectionModel ( ) . select ( newValue . intValue ( ) ) ) ; HBox contentPane = new HBox ( ) ; contentPane . getChildren ( ) . add ( tabListView ) ; contentPane . getChildren ( ) . add ( tabPane ) ; HBox . setMargin ( tabPane , new Insets ( 0 , - 13 , 0 , 6 ) ) ; Rectangle clipRect = new Rectangle ( ) ; clipRect . widthProperty ( ) . bind ( contentPane . widthProperty ( ) . subtract ( 13 ) ) ; clipRect . heightProperty ( ) . bind ( contentPane . heightProperty ( ) ) ; contentPane . setClip ( clipRect ) ; getDialogPane ( ) . setContent ( contentPane ) ; addOnCloseRequest ( event -> {", "checkAndroidOUnknowSource ( ) ;", "long epochStartSlot = BeaconStateUtil . get_epoch_start_slot ( BeaconStateUtil . get_current_epoch ( headState ) ) ;", "CaseDbConnection connection = connections . getConnection ( ) ; s = connection . createStatement ( ) ; rs = connection . executeQuery ( s , \"SELECT type_name FROM blackboard_attribute_types\" ) ; ArrayList < BlackboardAttribute . ATTRIBUTE_TYPE > attribute_types = new ArrayList < BlackboardAttribute . ATTRIBUTE_TYPE > ( ) ;", "{ s_logger . warn ( \"Unable to get an answer to the CheckNetworkCommand from agent:\" + host . getId ( ) ) ; throw new ConnectionException ( true , \"Unable to get an answer to the CheckNetworkCommand from agent: \" + host . getId ( ) ) ; } if ( ! answer . getResult ( ) ) { s_logger . warn ( \"Unable to setup agent \" + hostId + \" due to \" + ( ( answer != null ) ? answer . getDetails ( ) : \"return null\" ) ) ; String msg = \"Incorrect Network setup on agent, Reinitialize agent after network names are setup, details : \" + answer . getDetails ( ) ; _alertMgr . sendAlert ( AlertManager . ALERT_TYPE_HOST , dcId , host . getPodId ( ) , msg , msg ) ; throw new ConnectionException ( true , msg ) ; } else { if ( answer . needReconnect ( ) ) { throw new ConnectionException ( false , \"Reinitialize agent after network setup.\" ) ; } }", "r . assertOkStatus ( ) ; ChangeInfo ci = get ( r . getChangeId ( ) , DETAILED_LABELS ) ; ImmutableList < AccountInfo > ccs = firstNonNull ( ci . reviewers . get ( ReviewerState . CC ) , ImmutableList . < AccountInfo > of ( ) ) . stream ( ) . sorted ( comparing ( ( AccountInfo a ) -> a . email ) ) . collect ( toImmutableList ( ) ) ; assertThat ( ccs ) . hasSize ( 2 ) ; assertThat ( ccs . get ( 0 ) . email ) . isEqualTo ( \"non.existing.1@example.com\" ) ; assertThat ( ccs . get ( 0 ) . _accountId ) . isNull ( ) ; assertThat ( ccs . get ( 1 ) . email ) . isEqualTo ( \"non.existing.2@example.com\" ) ; assertThat ( ccs . get ( 1 ) . _accountId ) . isNull ( ) ;", "m_mailboxView . setVisibility ( View . GONE ) ; m_settingsView . setVisibility ( View . GONE ) ;", "private Object currentRemote ; private DbSource dbProject ; private DbSource dbRemote ;", "import reactor . core . publisher . Mono ; import reactor . ipc . netty . resources . LoopResources ;", "", "openDistributedLog ( ) ;", "", "* @ param materializer the materializer for the Akka actor system * @ param thingPersistenceActorPropsFactory factory of props of thing persistence actors .", "* Long running put request , service returns a 200 to the initial request , with an entity that is not a valid json", "* Test explicitly required array . Please put null and the client library should throw before the request is sent .", "", "@ Test public void testBoundingGetGeometry ( ) throws ParseException { Polygon clipPoly = OSHDBGeometryBuilder . getGeometry ( new OSHDBBoundingBox ( - 180 , - 90 , 180 , 90 ) ) ; Geometry expectedPolygon = ( new WKTReader ( ) ) . read ( \"POLYGON((-180.0 -90.0, 180.0 -90.0, 180.0 90.0, -180.0 90.0, -180.0 -90.0))\" ) ; assertEquals ( expectedPolygon , clipPoly ) ; } @ Test public void testBoundingBoxOf ( ) throws ParseException { OSHDBBoundingBox clipPoly = OSHDBGeometryBuilder . boundingBoxOf ( new Envelope ( - 180 , 180 , - 90 , 90 ) ) ; Envelope expectedPolygon = new Envelope ( - 180 , 180 , - 90 , 90 ) ; assertEquals ( new String ( \"(-180.000000,-90.000000) (180.000000,90.000000)\" ) , clipPoly . toString ( ) ) ; @ Test public void testBoundingBoxGetGeometry ( ) { OSHDBBoundingBox bbox = new OSHDBBoundingBox ( 0 , 0 , 1 , 1 ) ; Polygon geometry = OSHDBGeometryBuilder . getGeometry ( bbox ) ; Coordinate [ ] test = { new Coordinate ( 0 , 0 ) , new Coordinate ( 1 , 0 ) , new Coordinate ( 0 , 0 ) , new Coordinate ( 0 , 1 ) , new Coordinate ( 0 , 0 ) } ; Assert . assertArrayEquals ( test , geometry . getCoordinates ( ) ) ; bbox = new OSHDBBoundingBox ( 0 , 0 , 0 , 0 ) , new Coordinate ( 0 , 0 ) , new Coordinate ( 0 , 0 ) , new Coordinate ( 0 , 0 ) , new Coordinate ( 0 , 0 ) , new Coordinate ( 0 , 0 ) , new Coordinate ( 0 , 0 ) , new Coordinate ( 0 , 0 ) , new Coordinate", "final KStream < byte [ ] , String > stream1 = builder . stream ( inputTopicA ) ; final KStream < byte [ ] , String > stream2 = stream1 . mapValues ( ( v -> v . toUpperCase ( ) ) ) ; final KStream < byte [ ] , String > stream3 = stream1 . mapValues ( v -> v . toLowerCase ( ) ) ;", "addPersistentPath ( ctx ) ; ctx . getConf ( ) . set ( \"mapred.job.name\" , ctx . getQueryHandle ( ) . toString ( ) ) ; OperationHandle op = getClient ( ) . executeStatementAsync ( getSession ( ctx ) , ctx . getDriverQuery ( ) , ctx . getConf ( ) . getValByRegex ( \".*\" ) ) ; LOG . info ( \"QueryHandle: \" + op ) ; hiveHandles . put ( ctx . getQueryHandle ( ) . getHandleId ( ) + \" HiveHandle:\" + ctx . hiveHandle ( ) , op ) ; } catch ( IOException e ) { throw new GrillException ( \"Error adding persistent path\" , e ) ;", "import de . greenrobot . event . EventBus ;", "public void setOnlyQuarantineOrderedVerbally ( Boolean quarantineOrderedVerbally ) { this . quarantineOrderedVerbally = quarantineOrderedVerbally ; return this ; } public Boolean getQuarantineOrderedOfficialDocument ( ) { return quarantineOrderedOfficialDocument ; } public ContactCriteria quarantineOrderedOfficialDocument ( Boolean quarantineOrderedOfficialDocument ) { this . quarantineOrderedOfficialDocument = quarantineOrderedOfficialDocument ; return this ; } public Boolean getQuarantineNotOrdered ( ) { return quarantineNotOrdered ; } public ContactCriteria quarantineNotOrdered ( Boolean quarantineNotOrdered ) { this . quarantineNotOrdered = quarantineNotOrdered ; }", "import org . openl . rules . webstudio . web . repository . deployment . DeploymentOutputStream ;", "import us . ihmc . sensorProcessing . outputData . JointDesiredOutputWriter ; import us . ihmc . sensorProcessing . parameters . HumanoidRobotSensorInformation ;", "import static org . assertj . core . api . Assertions . assertThat ;", "import javax . xml . stream . XMLEventWriter ; import org . xml . sax . ContentHandler ; import org . xml . sax . DTDHandler ; import org . xml . sax . ext . LexicalHandler ; import java . io . StringReader ; import javax . xml . parsers . ParserConfigurationException ; import org . postgresql . pljava . Adjusting ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ;", "import org . apache . kafka . common . cache . Cache ; import org . apache . kafka . copycat . data . Date ; import org . apache . kafka . copycat . data . Decimal ;", "String srcMediaWebsite , String srcMediaName , Date reportDateTime , String reportingUserUuid , String surveillanceOfficerUuid ) {", "", "multicastEvent ( listener , new ApplicationStartingEvent ( new SpringApplication ( ) , NO_ARGS ) ) ;", "if ( ( infer || esc ) && heapSym == null ) { JCVariableDecl d = treeutils . makeStaticVarDef ( syms . intType , heapVarName , classDecl . sym ,", "import android . database . Observable ; import android . database . sqlite . SQLiteCursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import android . database . sqlite . SQLiteProgram ; import android . database . sqlite . SQLiteQueryBuilder ; import android . database . sqlite . SQLiteStatement ; import android . graphics . Bitmap ; import android . graphics . Canvas ; import android . graphics . Color ; import android . graphics . ColorMatrix ; import android . graphics . CornerPathEffect ; import android . graphics . LinearGradient ; import android . graphics . Matrix ; import android . graphics . Paint ; import android . graphics . Path ; import android . graphics . Rect ; import android . graphics . Typeface ; import android . graphics . drawable . AnimationDrawable ; import android . graphics . drawable . BitmapDrawable ; import android . graphics . drawable . ColorDrawable ; import android . graphics . drawable . Drawable ; import android . graphics . drawable . LayerDrawable ; import android . graphics . drawable . ShapeDrawable ; import android . graphics . drawable . StateListDrawable ;", "import solver . constraints . Constraint ; import solver . constraints . ConstraintFactory ; import solver . constraints . nary . alldifferent . AllDifferent ; import solver . propagation . generator . * ; import solver . propagation . generator . sorter . evaluator . EvtRecEvaluators ;", "final boolean newTab , final UrlData urlData , final byte [ ] postData , final int delay , final Message msg ) {", "* Long running post request , service returns a 202 to the initial request , without a location header .", "", "owner . setBatchEvent ( new BatchEvent ( owner , 1200 , \"Craft Jewelry\" , Formulae . getRepeatTimes ( owner , SKILLS . CRAFTING . id ( ) ) , false ) {", "public Object visit ( OStatementSemicolon node , Object data ) ; public Object visit ( OStatementInternal node , Object data ) ; public Object visit ( OExpressionStatement node , Object data ) ; public Object visit ( OQueryStatement node , Object data ) ;", "import org . cloudfoundry . uaa . clients . MixedActionsRequest ; import org . cloudfoundry . uaa . clients . UpdateClient ; import org . cloudfoundry . uaa . clients . UpdateClientAction ;", "public Product getByCode ( String code ) { return repository . getByCode ( code ) ; } public List < Product > getAllProducts ( ) { return repository . getAll ( ) ; }", "if ( session_ . getSessionInfo ( ) . isVcsAvailable ( VCSConstants . GIT_ID ) ) { dialog . getDirectoryChooser ( ) . addValueChangeHandler ( new ValueChangeHandler < String > ( ) { @ Override public void onValueChange ( ValueChangeEvent < String > event ) { fileServer_ . isGitDirectory ( dialog . getDirectory ( ) , new ServerRequestCallback < Boolean > ( ) { @ Override public void onResponseReceived ( Boolean isGitDirectory ) { dialog . setGitStatus ( isGitDirectory ) ; } @ Override public void onError ( ServerError error ) { dialog . setGitStatus ( true ) ; Debug . logError ( error ) ; } } ) ; } } ) ; }", "public static final String INDEX_SERVICE = \"index_service\" ; public static final String DEFAULT_INDEX_SERVICE = \"internal\" ; public static final String SPHINX_SERVERS_SHARDS = \"sphinx_servers_shards\" ; public static final String DEFAULT_SPHINX_SERVERS_SHARDS = \"localhost:1\" ; public static final String INDEX_ALL_FIELDS = \"index_all_fields\" ; public static final String DEFAULT_INDEX_ALL_FIELDS = \"content,filename,filenamereverse,path,interesting\" ;", "public static boolean protectNetherIsland ( uSkyBlock plugin , CommandSender sender , IslandInfo islandConfig ) { try { WorldGuardPlugin worldGuard = getWorldGuard ( ) ; RegionManager regionManager = worldGuard . getRegionManager ( plugin . getSkyBlockNetherWorld ( ) ) ; String regionName = islandConfig . getName ( ) + \"nether\" ; if ( islandConfig != null && noOrOldRegion ( regionManager , regionName , islandConfig ) ) { ProtectedCuboidRegion region = setRegionFlags ( sender , islandConfig , regionName ) ; final Iterable < ProtectedRegion > set = regionManager . getApplicableRegions ( islandConfig . getIslandLocation ( ) ) ; for ( ProtectedRegion regions : set ) { if ( ! ( regions instanceof GlobalProtectedRegion ) ) { regionManager . removeRegion ( regions . getId ( ) ) ; } } regionManager . addRegion ( region ) ; plugin . log ( Level . INFO , \"New protected region created for \" + islandConfig . getLeader ( ) + \"'s Island by \" + sender . getName ( ) ) ; islandConfig . setRegionVersion ( getVersion ( ) ) ; return true ; } } catch ( Exception ex ) { String name = islandConfig != null ? islandConfig . getLeader ( ) : \"Unknown\" ; plugin . log ( Level . SEVERE , \"ERROR: Failed to protect \" + name + \"'s Island (\" + sender . getName ( ) + \")\" , ex ) ; } return false ; } private static String getVersion ( ) { return \"\" + VERSION + I18nUtil . getLocale ( ) ; }", "final long feePerKb = getFeePerKb ( ) . getLongValue ( ) ;", "import com . fasterxml . jackson . annotation . JsonFormat ;", "", "@ NotNull", "import static org . springframework . data . domain . Sort . Direction . DESC ; import static cc . ryanc . halo . model . dto . HaloConst . OPTIONS ;", "Throwables . propagateIfPossible ( ex , RepositoryException . class ) ; return null ;", "", "public static class Util1pt12 { public static ResourceLocation buildName ( ItemStack output ) { ResourceLocation firstTry = new ResourceLocation ( Const . MODID , output . getUnlocalizedName ( ) ) ; int index = 0 ; while ( CraftingManager . REGISTRY . containsKey ( firstTry ) ) { index ++ ; firstTry = new ResourceLocation ( Const . MODID , firstTry . getResourcePath ( ) + \"_\" + index ) ; } return firstTry ; } private static NonNullList < Ingredient > convertToNonNullList ( Object [ ] input ) { NonNullList < Ingredient > list = NonNullList . create ( ) ; for ( Object any : input ) { if ( any instanceof Ingredient ) { list . add ( ( Ingredient ) any ) ; } else { Ingredient ing = CraftingHelper . getIngredient ( any ) ; if ( ing == null ) { ing = Ingredient . EMPTY ; } list . add ( ing ) ; } } return list ; } } public static IRecipe addShapelessOreRecipe ( ItemStack stack , Object ... recipeComponents ) { IRecipe r = new ShapelessOreRecipe ( stack , recipeComponents ) ; GameRegistry . addRecipe ( r ) ; return r ; }", "jj_la1 [ 251 ] = jj_gen ; break label_169 ;", "public EntityCollectionResponseV2 ( String href ) { this . href = requireNonNull ( href ) ; this . meta = null ; this . start = null ; this . num = null ; this . total = null ; this . prevHref = null ; this . nextHref = null ; this . items = null ; } public EntityCollectionResponseV2 ( EntityPager entityPager , List < Map < String , Object > > items , Fetch fetch , String href , EntityMetaData meta , MolgenisPermissionService permissionService , DataService dataService )", "* @ param inodePath the path for which metadata should be loaded * @ param options the load metadata options * @ return the flush counter for journaling", ". isThrownBy ( ( ) -> sut . addSpan ( document , username , jcas . getCas ( ) , 0 , 1 ) ) . withMessageContaining ( \"no overlap or stacking\" ) ; corefLayer . setOverlapMode ( OVERLAP_ONLY ) ; assertThatExceptionOfType ( AnnotationException . class ) . isThrownBy ( ( ) -> sut . addSpan ( document , username , jcas . getCas ( ) , 0 , 1 ) ) . withMessageContaining ( \"stacking is not allowed\" ) ; corefLayer . setOverlapMode ( STACKING_ONLY ) ; assertThatCode ( ( ) -> sut . addSpan ( document , username , jcas . getCas ( ) , 0 , 1 ) ) . doesNotThrowAnyException ( ) ; corefLayer . setOverlapMode ( ANY_OVERLAP ) ; assertThatCode ( ( ) -> sut . addSpan ( document , username , jcas . getCas ( ) , 0 , 1 ) ) . doesNotThrowAnyException ( ) ;", "import com . google . common . collect . ImmutableMap ; import com . google . common . base . Preconditions ;", "", "package org . eclipse . birt . report . engine . emitter . pptx ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . OutputStream ; import java . util . ArrayList ; import java . util . logging . Level ; import org . eclipse . birt . core . exception . BirtException ; import org . eclipse . birt . report . engine . api . CompressionMode ; import org . eclipse . birt . report . engine . api . DocxRenderOption ; import org . eclipse . birt . report . engine . api . EngineException ; import org . eclipse . birt . report . engine . api . RenderOption ; import org . eclipse . birt . report . engine . api . script . IReportContext ; import org . eclipse . birt . report . engine . content . IReportContent ; import org . eclipse . birt . report . engine . content . impl . PageContent ; import org . eclipse . birt . report . engine . emitter . EmitterUtil ; import org . eclipse . birt . report . engine . emitter . IEmitterServices ; import org . eclipse . birt . report . engine . emitter . pptx . util . PPTUtil ; import org . eclipse . birt . report . engine . emitter . pptx . writer . Presentation ; import org . eclipse . birt . report . engine . emitter . pptx . writer . SlideMaster ; import org . eclipse . birt . report . engine . emitter . EmitterUtil ; import org . eclipse . birt . report . engine . emitter . IEmitterServices ; import org . eclipse . birt . report . engine . emitter . pptx . eclipse . birt . report . engine . emitter . pptx . writer . Presentation ; import org .", "public double getpReplyRandomTip ( ) { return pReplyRandomTip ; } @ JsonProperty @ Parameter ( names = { \"--p-reply-random\" } , description = ProtocolConfig . Descriptions . P_REPLY_RANDOM_TIP ) protected void setpReplyRandomTip ( double pReplyRandomTip ) { this . pReplyRandomTip = pReplyRandomTip ; } @ Override public double getpDropTransaction ( ) { return pDropTransaction ; } @ JsonProperty @ Parameter ( names = { \"--p-drop-transaction\" } , description = ProtocolConfig . Descriptions . P_DROP_TRANSACTION ) protected void setpDropTransaction ( double pDropTransaction ) { this . pDropTransaction = pDropTransaction ; } @ Override public double getpSelectMilestoneChild ( ) { return pSelectMilestoneChild ; } @ JsonProperty @ Parameter ( names = { \"--p-select-milestone\" } , description = ProtocolConfig . Descriptions . P_SELECT_MILESTONE_CHILD ) protected void setpSelectMilestoneChild ( double pSelectMilestoneChild ) { this . pSelectMilestoneChild = pSelectMilestoneChild ; } @ Override", "", "public static synchronized HashinatorSnapshotData serializeConfiguredHashinator ( ) throws IOException { HashinatorSnapshotData optimizedSerializationData = null ; Pair < Long , ? extends TheHashinator > currentInstance = instance . get ( ) ; switch ( getConfiguredHashinatorType ( ) ) { case LEGACY : break ; case ELASTIC : { if ( optimizedSerializationDataCache . get ( ) == null ) { byte [ ] serData = currentInstance . getSecond ( ) . serializeCooked ( ) ; optimizedSerializationDataCache . set ( new HashinatorSnapshotData ( serData , currentInstance . getFirst ( ) ) ) ; } optimizedSerializationData = optimizedSerializationDataCache . get ( ) ; break ; } } return optimizedSerializationData ; } public static byte [ ] deserializeConfiguredHashinator ( long version , byte config [ ] ) { return deserializeHashinator ( getConfiguredHashinatorClass ( ) , version , config , true ) ; } public static Pair < Long , byte [ ] > getCurrentVersionedConfig ( ) { Pair < Long , ? extends TheHashinator > currentHashinator = instance . get ( ) ; return Pair . of ( currentHashinator . getFirst ( ) , currentHashinator . getSecond ( ) . pGetCurrentConfig ( ) . getSecond ( ) ) ; }", "@ At public Restful list ( @ Param ( \"hostPorts[]\" ) String [ ] hostPorts , @ Param ( \"groupName\" ) String groupName , @ Param ( value = \"first\" , df = \"true\" ) boolean first ) throws Exception { }", "import org . apache . tez . dag . api . TezConfiguration ;", "", "", "import android . provider . Contacts . ContactMethodsColumns ;", "assertThat ( countOpportunities ( new Trimmer ( ) , ( CompilationUnit ) As . COMPILIATION_UNIT . ast ( Wrap . Expression . on ( \"on * notion * of * no * nothion != the * plain + kludge\" ) ) ) , is ( 2 ) ) ;", "import org . molgenis . data . meta . model . Attribute ; import org . molgenis . data . meta . model . EntityType ;", "import de . tudarmstadt . ukp . inception . recommendation . api . model . LearningRecord ; import de . tudarmstadt . ukp . inception . recommendation . api . model . LearningRecordUserAction ; import de . tudarmstadt . ukp . inception . recommendation . api . model . Offset ;", "when ( securitySettings . getAuthMode ( ) ) . thenReturn ( OFF ) ; when ( securitySettings . getAdminClientId ( ) ) . thenReturn ( \"nakadi\" ) ;", "ResultSet rs = sqlStatement . executeQuery ( sqlQuery ) ; tuples = new JDBCSolutionMappingSet ( rs , SQLSignature , constructionNode , termFactory , substitutionFactory , rdfFactory ) ;", "import org . eclipse . ditto . protocoladapter . TopicPath ; import org . eclipse . ditto . model . query . filter . QueryFilterCriteriaFactory ; import org . eclipse . ditto . model . query . model . criteria . Criteria ; import org . eclipse . ditto . model . query . model . criteria . CriteriaFactory ; import org . eclipse . ditto . model . query . model . criteria . CriteriaFactoryImpl ; import org . eclipse . ditto . model . query . model . expression . ThingsFieldExpressionFactory ; import org . eclipse . ditto . model . query . things . ModelBasedThingsFieldExpressionFactory ; import org . eclipse . ditto . model . query . things . ThingPredicateVisitor ; import org . eclipse . ditto . model . things . Thing ;", "import java . util . ArrayList ; import java . util . List ; import brave . Tracing ; import brave . baggage . BaggageField ; import brave . baggage . BaggagePropagation ; import brave . baggage . BaggagePropagationConfig . SingleBaggageField ; import brave . baggage . BaggagePropagationCustomizer ; import brave . handler . SpanHandler ; import brave . propagation . B3Propagation ; import brave . baggage . BaggagePropagationConfig . SingleBaggageField ; import brave . baggage . BaggagePropagationCustomizer ; import brave . propagation . B3SinglePropagation ;", "int demand = ( aBuffer . getInt ( 2 ) ) > > 8 ;", "import java . io . IOException ;", "import mekhq . campaign . personnel . enums . PrisonerStatus ; import mekhq . campaign . personnel . enums . Marriage ; import mekhq . campaign . personnel . enums . BabySurnameStyle ;", "import com . uber . jaeger . Span ;", "* Long running delete request , service returns a 202 with a location header", "import org . jtalks . common . security . SecurityService ;", "public RemoteOperationResult renameFile ( String oldName , String oldRemotePath , String newName , String newRemotePath ) { RenameRemoteFileOperation renameOperation = new RenameRemoteFileOperation ( oldName , oldRemotePath , newName , newRemotePath ) ; RemoteOperationResult result = renameOperation . execute ( mClient ) ; return result ; } private class AuthTask extends AsyncTask < Context , Void , WebdavClient > { @ Override protected WebdavClient doInBackground ( Context ... params ) { WebdavClient client = null ; try { client = OwnCloudClientFactory . createOwnCloudClient ( mAccount , ( Context ) params [ 0 ] ) ; } catch ( OperationCanceledException e ) { Log . e ( TAG , \"Error while trying to access to \" + mAccount . name , e ) ; e . printStackTrace ( ) ; } catch ( AuthenticatorException e ) { Log . e ( TAG , \"Error while trying to access to \" + mAccount . name , e ) ; e . printStackTrace ( ) ; } catch ( AccountNotFoundException e ) { Log . e ( TAG , \"Error while trying to access to \" + mAccount . name , e ) ; e . printStackTrace ( ) ; } catch ( IOException e ) { Log . e ( TAG , \"Error while trying to access to \" + mAccount . name , e ) ; e . printStackTrace ( ) ; } catch ( IllegalStateException e ) { Log . e ( TAG , \"Error while trying to access to \" + mAccount . name , e ) ; e . printStackTrace ( ) ; } return client ; } @ Override protected void onPostExecute ( WebdavClient result ) { super . onPostExecute ( result ) ; mClient = result ; } }", "private Consumer < String > loggingSink = log :: info ; @ Nullable private Function < Meter , String > meterIdPrinter ;", "this , shortcutIds , mShortcuts , notificationKeys ) ) ; } private String getTitleForAccessibility ( ) { return getContext ( ) . getString ( mNumNotifications == 0 ? R . string . action_deep_shortcut : R . string . shortcuts_menu_with_notifications_description ) ;", "private class OffCommand implements ConsoleCommand { }", "c . cfg ( ) . addInstruction ( new EachElementHasNextInstruction ( c . cfg ( ) . currentInstruction , result , c . getValue ( n . getChild ( 0 ) ) ) ) ;", "if ( ( ( bitField0_ & 0x00100000 ) == 0x00100000 ) ) { }", "tfFilter . setText ( te . getGuiFilterString ( ) ) ; btnSort = new IconButton ( this , ID_SORT , 233 , 27 , getSortOrderIcon ( ) ) { }", "else if ( object instanceof IAtomContainer ) { return ( T ) readAtomContainer ( ( IAtomContainer ) object ) ; } else if ( object instanceof IAtomContainer ) { return ( T ) readMolecule ( object . getBuilder ( ) . newInstance ( IMolecule . class , object ) ) ; }", "for ( final IConstraint c : getFeatureModel ( ) . getConstraints ( ) ) { }", "import net . minecraft . util . math . Matrix3f ; import net . minecraft . util . math . Matrix4f ; import net . minecraft . util . math . Quaternion ;", "compositeViewerDock , hitsDock , subitemDock , duplicateDock , parentDock , tableTabDock , galleryTabDock , bookmarksTabDock , evidenceTabDock , metadataTabDock , categoriesTabDock } ;", "", "CallManager . CallableEndpoint callableEndpoint = endpointUtil . makeCallableEndpoint ( functionName ) ;", "if ( executor != null ) { executor . shutdownNow ( ) ; } logger . info ( \"Time fetching data: \" + iterator . getTimeFetching ( TimeUnit . MILLISECONDS ) / 1000.0 + \"s\" ) ; logger . info ( \"Time converting data: \" + iterator . getTimeConverting ( TimeUnit . MILLISECONDS ) / 1000.0 + \"s\" ) ;", "import com . google . gerrit . extensions . registration . DynamicMap ; import com . google . gerrit . extensions . common . AccountInfo ;", "gd2 . addChoice ( \"Fused_image_output\" , Multi_View_Fusion . outputType , Multi_View_Fusion . outputType [ defaultOutputType ] ) ; gd2 . addCheckbox ( \"Load_input_images_sequentially\" , defaultLoadImagesSequentially ) ;", "@ XmlElement ( name = \"scopedName\" ) @ XmlJavaTypeAdapter ( GO_GenericName . Since2014 . class ) @ UML ( identifier = \"scopedName\" , obligation = OPTIONAL , specification = ISO_19115 )", "import java . util . HashMap ; import java . util . Map ; import java . util . List ; import java . util . concurrent . ConcurrentHashMap ;", "import android . support . annotation . NonNull ;", "boolean readWeights , WeightedRelationshipConsumer action ) {", "EntityType entityType = when ( mock ( EntityType . class ) . getName ( ) ) . thenReturn ( \"entity\" ) . getMock ( ) ; Attribute idAttr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( \"idAttr\" ) . getMock ( ) ; Attribute attr = when ( mock ( Attribute . class ) . getName ( ) ) . thenReturn ( \"attr\" ) . getMock ( ) ;", "import net . i2p . util . OrderedProperties ;", "if ( attributeValue instanceof AttributeDefinition ) { String runtimeAttributeValue = extractRuntimeInformationAttribute ( runtimeInformations , currentInstance , new String [ ] { basePaaSTemplate . getId ( ) } , attributeId ) ; if ( runtimeAttributeValue != null ) { String propertyValue = null ; AbstractPropertyValue abstractPropertyValue = template . getProperties ( ) . get ( propertyName ) ; if ( abstractPropertyValue instanceof ScalarPropertyValue ) { propertyValue = ( ( ScalarPropertyValue ) abstractPropertyValue ) . getValue ( ) ; } if ( ! runtimeAttributeValue . equals ( \"\" ) && ! runtimeAttributeValue . equals ( runtimeAttributeValue ) ) { return runtimeAttributeValue ; } } }", "public void refreshYotaScreen ( ) { final Intent intent = new Intent ( this , FBReaderYotaService . class ) ; intent . putExtra ( FBReaderYotaService . KEY_BACK_SCREEN_IS_ACTIVE , myFBReaderApp . ViewOptions . YotaDrawOnBackScreen . getValue ( ) ) ; if ( myFBReaderApp . Model != null ) { FBReaderIntents . putBookExtra ( intent , myFBReaderApp . Model . Book ) ; } try { startService ( intent ) ; } catch ( Throwable t ) { } } private BroadcastReceiver mySyncUpdateReceiver = new BroadcastReceiver ( ) { public void onReceive ( Context context , Intent intent ) { myFBReaderApp . useSyncInfo ( myResumeTimestamp + 10 * 1000 > System . currentTimeMillis ( ) ) ; } } ;", "} else if ( inForeground ) { getInAppMessageController ( OneSignal . getLogger ( ) ) . initWithCachedInAppMessages ( ) ;", "Entitlement e = entitler . entitleByProduct ( parentSystem , virtHost , new Integer ( \"1\" ) ) ;", "", "@ Override public void loadingFailed ( ) { Log . e ( TAG , \"Loading failed.\" ) ; if ( ! isHoneycomb ( ) ) { mRefresh . setVisibility ( View . VISIBLE ) ; mRefresh . setAnimation ( null ) ; mRefresh . setImageResource ( android . R . drawable . ic_dialog_alert ) ; mRefresh . startAnimation ( adapt . getBlinkingAnimation ( ) ) ; } Toast . makeText ( getActivity ( ) , \"Loading Failed!\" , Toast . LENGTH_LONG ) . show ( ) ; } @ Override public void loadingStarted ( ) { Log . e ( TAG , \"Loading started.\" ) ; if ( ! isHoneycomb ( ) ) { mRefresh . setVisibility ( View . VISIBLE ) ; mRefresh . setImageResource ( R . drawable . ic_menu_refresh ) ; mRefresh . startAnimation ( adapt . getRotateAnimation ( ) ) ; } } @ Override public void loadingSucceeded ( ) { Log . e ( TAG , \"Loading succeeded.\" ) ; mRefresh . setAnimation ( null ) ; mRefresh . setVisibility ( View . GONE ) ; }", "", "", "jj_la1 [ 141 ] = jj_gen ;", "@ SuppressWarnings ( \"deprecation\" ) @ Deprecated @ Override protected com . oracle . truffle . api . instrument . Visualizer getVisualizer ( ) { return null ; }", "", "public Repository create ( Repository repository , boolean initRepository )", "test ( FunCall ( ( FunctionDefinition ) result . getDefinition ( \"A.B.f\" ) ) , result ) ;", "public void should_stop_do_nothing_when_already_stopped ( ) throws SWorkException { }", "public int getTTL ( TitanSchemaType type ) ; public void setTTL ( TitanSchemaType type , int ttl ) ; public void changeName ( TitanSchemaElement element , String newName ) ; public void updateIndex ( TitanIndex index , SchemaAction updateAction ) ;", "public static String buildModuleStatement ( String interceptorStatement ) { String moduleName = null ; String [ ] splitArray = interceptorStatement . split ( OpenAPIConstants . MODULE_STATEMENT_SEPARATOR ) ; if ( splitArray . length == 2 ) { moduleName = splitArray [ 1 ] . split ( OpenAPIConstants . INTERCEPTOR_STATEMENT_SEPARATOR ) [ 0 ] ; } if ( splitArray . length == 3 ) { moduleName = splitArray [ 1 ] ; } return moduleName ; } public static String buildModuleVersion ( String interceptorStatement ) { String moduleVersion = null ; String [ ] splitArray = interceptorStatement . split ( OpenAPIConstants . MODULE_STATEMENT_SEPARATOR ) ; if ( splitArray . length == 3 ) { moduleVersion = splitArray [ 2 ] . split ( OpenAPIConstants . INTERCEPTOR_STATEMENT_SEPARATOR ) [ 0 ] ; } return moduleVersion ; } public static List < String > getAuthProviders ( String schemas ) { List < String > authProviders = new ArrayList < > ( ) ; boolean basic = false ; boolean oauth2 = false ; if ( schemas != null ) { String [ ] schemasArray = schemas . trim ( ) . split ( \"\\\\s*,\\\\s*\" ) ; for ( String s : schemasArray ) { if ( s . equalsIgnoreCase ( APISecurity . basic . name ( ) ) ) { authProviders . add ( APISecurity . basic . name ( ) ) ; } else if ( s . equalsIgnoreCase ( APISecurity . apikey . name ( ) ) ) { authProviders . add ( APISecurity . apikey . name ( ) ) ; } else if ( s . equalsIgnoreCase ( APISecurity . oauth2 . name ( ) ) ) { authProviders . add ( APISecurity . oauth2 . name ( ) ) ; } else if ( s . equalsIgnoreCase ( APISecurity . oauth2 . name ( ) ) ) { authProviders . add ( APISecurity . oauth2 . name ( ) ) { authProviders .", "protected boolean onError ( final Throwable exception ) { if ( super . onError ( exception ) ) { return true ; } }", "assists . add ( new AssistPercentToFormat ( ) ) ;", "prop . setComment ( \"Enter IDs of other mods' ores here for Galacticraft to generate them on the Moon and other planets. Format is BlockName or BlockName:metadata. Use optional parameters at end of each line: /RARE /UNCOMMON or /COMMON for rarity in a chunk; /DEEP /SHALLOW or /BOTH for height; /SINGLE /STANDARD or /LARGE for clump size; /XTRARANDOM for ores sometimes there sometimes not at all. /ONLYMOON or /ONLYMARS if wanted on one planet only. If nothing specified, defaults are /COMMON, /BOTH and /STANDARD. Repeat lines to generate a huge quantity of ores.\" ) ; prop . setLanguageKey ( \"gc.configgui.other_mod_ore_gen_i_ds\" ) ;", "{ bind ( BillingApi . class ) . to ( DefaultBillingApi . class ) . asEagerSingleton ( ) ; bind ( EntitlementUserApi . class ) . to ( DefaultEntitlementUserApi . class ) . asEagerSingleton ( ) ; bind ( SubscriptionApiService . class ) . annotatedWith ( Names . named ( EntitlementModule . REPAIR_NAMED ) ) . to ( RepairSubscriptionApiService . class ) . asEagerSingleton ( ) ; bind ( SubscriptionApiService . class ) . to ( DefaultSubscriptionApiService . class ) . asEagerSingleton ( ) ; bind ( SubscriptionFactory . class ) . annotatedWith ( Names . named ( EntitlementModule . REPAIR_NAMED ) ) . to ( RepairSubscriptionFactory . class ) . asEagerSingleton ( ) ; bind ( SubscriptionFactory . class ) . to ( DefaultSubscriptionFactory . class ) . asEagerSingleton ( ) ; bind ( ChargeThruApi . class ) . toInstance ( BrainDeadProxyFactory . createBrainDeadProxyFor ( ChargeThruApi . class ) ) ; }", "there = AnalyzerCaster . getLegalCast ( location , last . after , promote , false , false ) ; back = AnalyzerCaster . getLegalCast ( location , promote , last . after , true , false ) ;", "", "@ Override public void onSignedOut ( ) { } @ Override public void onSignInFailed ( ) { } @ Override public void onMessageReceived ( String from , Bundle message ) { logAndToast ( \"Message received\" , message ) ; } private void logAndToast ( String message ) { logAndToast ( message , \"\" ) ; } private void logAndToast ( String message , Object value ) { String text = message + \"//\" + value ; Log . d ( TAG , text ) ; Toast . makeText ( getApplicationContext ( ) , text , Toast . LENGTH_LONG ) . show ( ) ; }", "Map < String , AccountState > accountStateMap , Map < String , AccountState > balanceValidateMap , String txHash ) { long hardForkingHeight = 878000 ; boolean forked = blockHeight <= 0 || blockHeight > hardForkingHeight ;", "* Long running delete request , service returns a 202 to the initial request . Poll the endpoint indicated in the Azure - AsyncOperation header for operation status", "private final CacheManager cacheManager ; < % _ } _ % > public UserService ( UserRepository userRepository , PasswordEncoder passwordEncoder < % if ( enableSocialSignIn ) { % > , SocialService socialService < % } % > < % if ( databaseType == = 'sql' && authenticationType == = 'oauth2' ) { % > , JdbcTokenStore jdbcTokenStore < % } % > < % if ( searchEngine == = 'elasticsearch' ) { % > , UserSearchRepository userSearchRepository < % } % > < % if ( databaseType == = 'sql' || databaseType == = 'mongodb' || databaseType == = 'couchbase' ) { % > < % if ( authenticationType == = 'session' ) { % > , PersistentTokenRepository persistentTokenRepository < % } % > , AuthorityRepository authorityRepository < % } % > < % if ( cacheManagerIsAvailable == = true ) { % > , CacheManager cacheManager < % } % > ) {", "setState ( 536 ) ;", "String query = \"SELECT blackboard_artifacts.artifact_id AS artifact_id, \" + \"blackboard_artifacts.obj_id AS obj_id, blackboard_artifact_types.artifact_type_id AS artifact_type_id, \" + \"blackboard_artifact_types.type_name AS type_name, \" + \"blackboard_artifact_types.display_name AS display_name,\" + \"blackboard_artifacts.review_status_id \"", "test ( ClassCall ( ( ClassDefinition ) result . getDefinition ( \"A.B.C\" ) ) , result ) ;", "import com . cloud . exception . PermissionDeniedException ; import com . cloud . server . ManagementServer ; import com . cloud . utils . component . AdapterBase ; import com . cloud . utils . component . ComponentLocator ; import com . cloud . utils . component . ArrayList ; import java . util . Arrays ; import java . util . HashSet ; import java . util . List ; import java . util . Map ; import java . util . Properties ; import java . util . Set ;", "", "setState ( 193 ) ;", "final ProcessingLogConfig processingLogConfig = new ProcessingLogConfig ( restConfig . getOriginals ( ) ) ; final ProcessingLogContext processingLogContext = ProcessingLogContext . create ( processingLogConfig ) ; final MutableFunctionRegistry functionRegistry = new InternalFunctionRegistry ( ) ;", "assertThat ( this . message . getHeaders ( ) ) . containsKeys ( \"b3\" , \"nativeHeaders\" ) ; assertThat ( this . spans ) . extracting ( MutableSpan :: kind ) . contains ( Span . Kind . CONSUMER ,", "* Test explicitly optional string . Please put a header 'headerParameter' = & gt ; null .", "try ( Instrumentation ignored = onResultInstrumenter . newInstrumentation ( ) ) { }", "public static class ScriptedTimeoutPlugin extends Plugin implements ScriptPlugin { }", "if ( path != null && fileFilters [ 0 ] == FILE_FILTER_R && ! path . toLowerCase ( ) . endsWith ( \".r\" ) )", "import cc . arduino . packages . BoardPort ; import processing . app . legacy . PApplet ;", "protected Request initRequest ( String artifactName , String version ) { return new Request ( ) . setArtifactName ( artifactName ) . setVersion ( version ) . setUserCredentials ( getCredentials ( ) ) ; } protected Request initRequest ( ) { return new Request ( ) . setUserCredentials ( getCredentials ( ) ) ; }", "", "* Launch an activity for which you would like a result when it finished . When this activity exits ,", "import com . fasterxml . jackson . annotation . JsonIgnore ;", "public SetMultimap < EntityType , SemanticTag < Attribute , LabeledResource , LabeledResource > > getAttributeTags ( )", ". proximityModule ( new ProximityModule ( context ) ) . analyticsModule ( new AnalyticsModule ( application ) ) . remoteConfigModule ( new RemoteConfigModule ( ) )", "", "", "public WebFluxConfig ( ResourceProperties resourceProperties , WebFluxProperties webFluxProperties , ListableBeanFactory beanFactory , ObjectProvider < HandlerMethodArgumentResolver > resolvers , ObjectProvider < CodecCustomizer > codecCustomizers ,", "db . execSQL ( \"CREATE TABLE single (id TEXT PRIMARY KEY, addresses TEXT, archived INTEGER\" + \", blockheight INTEGER, addressType TEXT);\" ) ; db . execSQL ( \"CREATE TABLE bip44 (id TEXT PRIMARY KEY, accountIndex INTEGER, coinId TEXT, publicKey BLOB\" ) ;", "@ Diseases ( { Disease . NEW_INFLUENCA , Disease . RABIES , Disease . ANTHRAX , Disease . UNDEFINED , Disease . OTHER } )", "public void testQuickClose ( ) throws Exception { CuratorFramework client = CuratorFrameworkFactory . newClient ( server . getConnectString ( ) , timing . session ( ) , 1 , new RetryNTimes ( 0 , 0 ) ) ; try { client . start ( ) ; client . close ( ) ; } finally { CloseableUtils . closeQuietly ( client ) ; } } @ Test public void testCreateContainersForBadConnect ( ) throws Exception { final int serverPort = server . getPort ( ) ; server . close ( ) ; CuratorFramework client = CuratorFrameworkFactory . newClient ( server . getConnectString ( ) , 1000 , 1000 , new RetryForever ( 100 ) ) ; try { new Thread ( ) { @ Override public void run ( ) { try { Thread . sleep ( 3000 ) ; server = new TestingServer ( serverPort , true ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } . start ( ) ; client . start ( ) ; client . createContainers ( \"/this/does/not/exist\" ) ; Assert . assertNotNull ( client . checkExists ( ) . forPath ( \"/this/does/not/exist\" ) ) ; } finally { CloseableUtils . closeQuietly ( client ) ; } } @ Test", "void timersWithServiceLevelObjectivesHaveInfBucket ( ) { registry = new StatsdMeterRegistry ( configWithFlavor ( StatsdFlavor . ETSY ) , clock ) ; Timer . builder ( \"my.timer\" ) . serviceLevelObjectives ( Duration . ofMillis ( 1 ) ) . register ( registry ) ; }", "interestRecalculationData , minimumDaysBetweenDisbursalAndFirstRepayment , holdGuaranteeFunds , productGuaranteeData , principalThresholdForLastInstalment , accountMovesOutOfNPAOnlyOnArrearsCompletion ) ;", "@ Thunk Intent mMarketSearchIntent ;", "this . defaultUserSettingsHandler = defaultUserSettingsHandler ; this . geoFenceController = geoFenceController ; this . deviceController = deviceController ; eventRuleHandler = new EventRuleHandlerImpl ( ) ;", "Payer . loadPayers ( new Location ( \"Massachusetts\" , null ) ) ; person . setPayerAtTime ( time , Payer . noInsurance ) ;", "import org . geometerplus . zlibrary . core . util . * ;", "", "import org . pac4j . core . exception . HttpAction ;", "private List < HProjectIteration > projectIterations = new ArrayList < HProjectIteration > ( ) ; @ OneToMany ( mappedBy = \"project\" ) @ Cache ( usage = CacheConcurrencyStrategy . READ_WRITE ) public List < HProjectIteration > getProjectIterations ( ) { return projectIterations ; } public void addIteration ( HProjectIteration iteration ) { projectIterations . add ( iteration ) ; iteration . setProject ( this ) ; } @ Size ( max = 80 )", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "boolean importLegacy = ACTION_DATA_IMPORT_LEGACY . equals ( intent . getAction ( ) ) ;", "public TcpHandler ( final ExceptionReporter exceptionReporter , final AtomicInteger maxInflightRequests ) { }", "", "BMDistribution ( CBMS cbms , Vector x , List < MultiLabel > support ) { this . numLabels = cbms . numLabels ; this . numComponents = cbms . numComponents ; this . logProportions = cbms . multiClassClassifier . predictLogClassProbs ( x ) ; this . support = support ; this . ifSupport = true ; double [ ] [ ] classScore = new double [ numComponents ] [ numLabels ] ; this . normalizedLogProbs = new double [ numComponents ] [ support . size ( ) ] ; for ( int k = 0 ; k < numComponents ; k ++ ) { for ( int l = 0 ; l < numLabels ; l ++ ) { classScore [ k ] [ l ] = ( ( LogisticRegression ) cbm . binaryClassifiers [ k ] [ l ] ) . predictClassScores ( x ) [ 1 ] ; } double [ ] supportScores = new double [ support . size ( ) ] ; for ( int s = 0 ; s < support . size ( ) ; s ++ ) { MultiLabel label = support . get ( s ) ; for ( Integer l : label . getMatchedLabels ( ) ) { supportScores [ s ] += classScore [ k ] [ l ] ; } } double [ ] supportProbs = MathUtil . softmax ( supportScores ) ; for ( int s = 0 ; s < support . size ( ) ; s ++ ) { supportScores [ s ] ; for ( int s = 0 ; s < support . size ( ) ; s ++ ) { MultiLabel label = support . get ( s ) ; for ( Integer l : label . getMatchedLabels ( ) ) { supportScores [ s ] + classScore [ k ] [ l ] ; } } double [ ] supportProbs = MathUtil . softmax ( supportScores ) ; for ( int s = 0 ; s < support . size ( ) ;", "List < VisualizableEntityAttribute > visualizableEntityAttributeList =", "import org . python . pydev . shared_core . SharedCorePlugin ; import org . python . pydev . shared_core . string . StringUtils ;", "Hee_Q10820 . run ( ) ; Hee_Q10809 . run ( ) ; Hee_Q2743 . run ( ) ; Hee_Q11655 . run ( ) ; Hee_Q10824 . run ( ) ; Hee_Q11656 . run ( ) ; Hee_Q3015 . run ( ) ; Hee_Q11723 . run ( ) ; Hee_Q1927 . run ( ) ; Hee_Q7785 . run ( ) ; Hee_Q1764 . run ( ) ; Hee_Q11279 . run ( ) ; Hee_Q1717 . run ( ) ; Hee_Q4195 . run ( ) ;", "private ResponderSubscriber ( final UUID id , final ActorRef sender ) { }", "@ Order ( 66 ) @ ExportEntity ( EventDto . class ) @ ExportProperty ( EventDto . TYPE_OF_PLACE )", "camera . position . lerpDelta ( position , 0.08f ) ;", "return distinctByIri ( candidatesFullText , aKB ) ;", "else if ( exampleRequested . equals ( \"smtp_dispatcher_properties\" ) ) { requestedObject = getSmtpDispatcherPropertiesExample ( \"none\" ) ; } else if ( exampleRequested . equals ( \"smtp_dispatcher_properties_ssl\" ) ) { requestedObject = getSmtpDispatcherPropertiesExample ( \"SSL\" ) ; } else if ( exampleRequested . equals ( \"smtp_dispatcher_properties_tls\" ) ) { requestedObject = getSmtpDispatcherPropertiesExample ( \"TLS\" ) ; } else if ( exampleRequested . equals ( \"server_settings\" ) ) { requestedObject = getServerSettingsExample ( ) ; }", "GroupRecordConsumer groupConsumer = new GroupRecordConsumer ( new SimpleGroupFactory ( schema ) ) ; GroupWriter groupWriter = new GroupWriter ( new RecordConsumerLoggingWrapper ( groupConsumer ) , schema ) ;", "case ECHO : { _logger . outputf ( \"%s\\n\" , CommonUtil . joinStrings ( \" \" , Arrays . copyOfRange ( words , 1 , words . length ) ) ) ;", "when ( attribute . getNullableExpression ( ) ) . thenReturn ( \"nullableExpression\" ) ; when ( attribute . getValidationExpression ( ) ) . thenReturn ( \"expression\" ) ;", "import de . adorsys . psd2 . model . * ; import org . apache . commons . lang3 . StringUtils ;", "setState ( 533 ) ;", "", "( esc || infer ) ? null : methodDecl != null ? methodDecl . sym : classDecl . sym , expr ) ; d . init = expr ;", "import com . lilithsthrone . utils . colours . Colour ; import com . lilithsthrone . utils . colours . PresetColour ; import com . lilithsthrone . utils . Util ;", "* Get dictionary of complex type with empty item { \"0\" : { \"integer\" : 1 , \"string\" : \"2\" } , \"1:\" { } , \"2\" : { \"integer\" : 5 , \"string\" : \"6\" } }", "SnomedRefSetMemberIndexEntry member = SnomedComponents . newConcreteDomainReferenceSetMember ( )", "final RefundRepository refundRepository , final PendingFundRepository pendingFundRepository , final RequestRepository requestRepository ,", "import mekanism . client . MekKeyHandler ; import mekanism . client . MekanismKeyHandler ;", "", "import com . oracle . truffle . espresso . runtime . StaticObject ; import com . oracle . truffle . espresso . vm . InterpreterToVM ;", "public Slave makeASlaveAndConfigureJob ( Job job ) throws ExecutionException , InterruptedException { Slave slave = slaveController . install ( jenkins ) . get ( ) ; job . configure ( ) ; job . setLabelExpression ( slave . getName ( ) ) ; job . save ( ) ; return slave ; } public MavenModuleSet setupMavenJob ( String resourceProjectDir , String goal ) { return setupMavenJob ( resourceProjectDir , goal , null , null ) ; } public < T extends AbstractCodeStylePluginMavenBuildSettings > MavenModuleSet setupMavenJob ( String resourceProjectDir , String goal , Class < T > codeStyleBuildSettings ) { return setupMavenJob ( resourceProjectDir , goal , codeStyleBuildSettings , null ) ; } public < T extends AbstractCodeStylePluginMavenBuildSettings > MavenModuleSet setupMavenJob ( String resourceProjectDir , String goal , Class < T > codeStyleBuildSettings , AbstractCodeStylePluginMavenBuildConfigurator < T > configurator ) { MavenInstallation . ensureThatMavenIsInstalled ( jenkins ) ; final MavenModuleSet job = jenkins . jobs . create ( MavenModuleSet . class ) ; job . copyDir ( resource ( resourceProjectDir ) ) ; job . goals . set ( goal ) ; if ( codeStyleBuildSettings != null ) { final T buildSettings = job . addBuildSettings ( codeStyleBuildSettings ) ; if ( configurator != null ) { configurator . configure ( buildSettings ) ; } } job . save ( ) ; return job ; }", "ElasticTestUtils . configure ( elasticsearchConfig , container , indicesPrefix , ElasticVersion . V5_6 ) ; return Guice . createInjector ( new InMemoryModule ( elasticsearchConfig ) ) ;", "import org . opengis . referencing . ReferenceIdentifier ; import org . apache . sis . internal . jaxb . Context ; import org . apache . sis . internal . metadata . NameMeaning ;", "private static boolean checkSamsungBLELibrary ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR2 ) return false ; if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . JELLY_BEAN ) return false ; try { Class . forName ( \"org.runnerup.hr.SamsungBLEHRProvider\" ) ; Class . forName ( \"com.samsung.android.sdk.bt.gatt.BluetoothGatt\" ) ; Class . forName ( \"com.samsung.android.sdk.bt.gatt.BluetoothGattAdapter\" ) ; Class . forName ( \"com.samsung.android.sdk.bt.gatt.BluetoothGattCallback\" ) ; Class . forName ( \"com.samsung.android.sdk.bt.gatt.BluetoothGattCharacteristic\" ) ; Class . forName ( \"com.samsung.android.sdk.bt.gatt.BluetoothGattDescriptor\" ) ; Class . forName ( \"com.samsung.android.sdk.bt.gatt.BluetoothGattService\" ) ; return true ; } catch ( Exception e ) { } return false ; } private static", "IOUtils . close ( bitsetFilterCache , indexCache , indexFieldData , mapperService , refreshTask , fsyncTask , globalCheckpointTask ) ;", "Set < XRoadId > subjectIds = new HashSet < > ( ) ; subjectIds . add ( LocalGroupId . create ( \"group1\" ) ) ; accessRightService . addSoapServiceAccessRights ( clientId , TestUtils . FULL_SERVICE_CODE_BMI_OLD , subjectIds ) ;", "* * @ param ann Annotated entity to check for specified annotation * @ param annoClass Type of annotation to find * * @ return Value of given annotation ( as per { @ code annoClass } ) , if entity * has one ; { @ code null } otherwise", "import static com . gentics . mesh . core . data . relationship . GraphPermission . DELETE_PERM ; import static com . gentics . mesh . core . data . relationship . GraphPermission . UPDATE_PERM ; import static com . gentics . mesh . core . rest . error . Errors . error ; import static io . netty . handler . codec . http . HttpResponseStatus . BAD_REQUEST ; import static io . netty . handler . codec . http . HttpResponseStatus . CREATED ; import static io . netty . handler . codec . http . HttpResponseStatus . INTERNAL_SERVER_ERROR ; import static io . netty . handler . codec . http . HttpResponseStatus . NO_CONTENT ; import static io . netty . handler . codec . http . HttpResponseStatus . OK ; import java . util . concurrent . Semaphore ; import java . util . concurrent . atomic . AtomicBoolean ; import java . util . function . Consumer ; import javax . inject . Inject ; import javax . inject . Singleton ; import com . gentics . mesh . Mesh ;", "if ( ! ( database instanceof MariaDBDatabase ) && statement . getOrdered ( ) != null ) { if ( ! ( database instanceof SybaseASADatabase ) ) { if ( statement . getOrdered ( ) ) { queryStringBuilder . append ( \" ORDER\" ) ; } else { if ( database instanceof OracleDatabase ) { queryStringBuilder . append ( \" NOORDER\" ) ; } } } }", "@ Inject public DefaultBlockValidator ( BlockDb blockDb , BlockchainConfig blockchainConfig ) { super ( blockDb , blockchainConfig ) ; }", "import com . cloud . network . Network . State ; import com . cloud . network . Network . Event ;", "", "if ( ( infer || esc ) ) { }", "@ Override public void accept ( ProfileVisitor visitor ) { visitor . visit ( this ) ; } @ Override public Set < RuleInformation > getRules ( ) { return rules ; } @ Override public AtomicConstraint withRules ( Set < RuleInformation > rules ) { return new IsInSetConstraint ( this . field , this . legalValues , rules ) ; }", "private final IdentityManager identityManager ; private final ConfigurationManager configurationManager ; private final MesosConfig mesosConfig ; private final CassandraPlanManager planManager ; private final PlanScheduler planScheduler ; private final CassandraRepairScheduler repairScheduler ; private final OfferAccepter offerAccepter ; private final PersistentOfferRequirementProvider offerRequirementProvider ; private final CassandraTasks cassandraTasks ; private final Reconciler reconciler ; private final EventBus eventBus ; private final BackupManager backupManager ; private final ExecutorClient client ;", "BibEntry entry = getBibEntry ( row ) ; TypedBibEntry typedEntry = new TypedBibEntry ( entry , Optional . of ( panel . getDatabase ( ) ) , panel . getBibDatabaseContext ( ) . getMode ( ) ) ;", "public int getVoiceUserIDFromRoom ( String room , String userID ) { RoomImp rm = rooms . get ( room ) ; if ( rm != null ) { return rm . getUserWithID ( userID ) ; } return - 1 ; } public void setMessagingService ( MessagingService messagingService ) { this . messagingService = messagingService ; this . messagingService . start ( ) ; } public void createRoom ( String name , boolean record , String meetingid ) { }", "client . loginWithPassword ( username , password , new LoginApiClient . ApiCallback < Credentials > ( ) {", "bps = getBorderProps ( borderProps , CommonBorderPaddingBackground . END , context ) ;", "", "import java . util . Iterator ; import java . util . List ; import java . util . UUID ;", "import org . apache . syncope . common . to . AbstractTaskTO ;", "public FeatureHost ( @ NotNull C context ) { mFeatures = new HashMap < > ( 10 ) ; }", "import it . unibz . inf . ontop . iq . optimizer . MappingIQNormalizer ; import it . unibz . inf . ontop . model . term . TermFactory ;", "import net . imglib2 . type . numeric . integer . ByteType ;", "* Long running put request , service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code", "", "import com . conveyal . r5 . streets . EdgeStore . Edge ; import com . vividsolutions . jts . geom . * ;", "setState ( 652 ) ;", "RegistryKey < World > dim = RegistryKey . of ( shape . DIMENSION , new Identifier ( tag . getString ( \"dim\" ) ) ) ; long key = rshape . key ( ) ;", "@ Override public void copyDDProject ( ADeploymentProject project , String name , String comment ) throws ProjectException { }", "DefaultEntitlementBillingApi api = new DefaultEntitlementBillingApi ( factory , null , dao , accountApi , bcdCalculator ) ; SortedSet < BillingEvent > events = api . getBillingEventsForAccountAndUpdateAccountBCD ( new UUID ( 0L , 0L ) ) ;", "if ( isSshEnabled ( ) ) { tabs . add ( new UserTab ( \"Ssh Keys\" , \"fa fa-fw fa-shield\" , UserSshKeysPage . class ) ) ; } tabs . add ( new UserTab ( \"Build Setting\" , \"fa fa-fw fa-play-circle\" , UserJobSecretsPage . class , UserBuildSettingPage . class ) ) ;", "final PreimageSha256Fulfillment fulfillment1 = PreimageSha256Fulfillment . from ( \"Roads? Where we're going, we don't need roads.\" . getBytes ( ) ) ; final PreimageSha256Condition condition1 = fulfillment1 . getDerivedCondition ( ) ; final PreimageSha256Fulfillment fulfillment2 = PreimageSha256Fulfillment . from ( \"Great Scott!\" . getBytes ( ) ) ; final PreimageSha256Condition condition2 = fulfillment2 . getDerivedCondition ( ) ;", "private IndexSelection indexSelection ; private Map < String , String > attributes ;", "origin . setAddress ( externalIp ) ;", "System . out . println ( \"Called download\" ) ;", "import com . google . common . annotations . VisibleForTesting ; import com . google . common . collect . Iterables ;", "this . accountService = accountService ; this . dexConfig = dexConfig ;", "* Send a post request with header values \"scenario\" : \"valid\" , \"value\" : \"2010-01-01\" or \"scenario\" : \"min\" , \"value\" : \"0001-01-01\"", "public static boolean rfApiLoaded = false ; public static boolean storageDrawersLoaded = false ;", "return Objects . hash ( thingId , policyId , acl , definition , attributes , features , lifecycle , revision , modified , created , metadata ) ;", "import reborncore . common . registration . RebornRegister ; import reborncore . common . registration . config . ConfigRegistry ; import reborncore . common . util . Inventory ; import techreborn . TechReborn ; import techreborn . init . TRContent ; import techreborn . init . TRTileEntities ; import techreborn . items . ItemUpgrades ;", "private EntityType entityType ; private Attribute idAttr ;", "synchronized ( activeNotifications ) { SimpleArrayMap < String , Collection < DownloadBatch > > clusters = getClustersByNotificationTag ( batches ) ; }", "import net . minecraft . client . renderer . ItemRenderer ; import net . minecraft . client . renderer . block . model . IBakedModel ; import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; import net . minecraft . client . renderer . texture . TextureManager ; import net . minecraft . client . renderer . texture . TextureMap ; import net . minecraft . client . renderer . vertex . DefaultVertexFormats ;", "public VAdminProto . AsyncOperationStatusResponse handleFetchAndUpdate ( VAdminProto . InitiateFetchAndUpdateRequest request ) { }", "", "", "createSchemaDataModel ( DataModelUtils . BIBRM_CONTRACT_DATA_MODEL_UUID , bibrmContractDM , bibrmContractDM , bibrmContractSchema ) ; createSchemaDataModel ( DataModelUtils . BIBO_DOCUMENT_DATA_MODEL_UUID , biboDocumentDM , biboDocumentDM , biboDocumentSchema ) ; createSchemaDataModel ( DataModelUtils . MABXML_DATA_MODEL_UUID , mabxmlSchemaDM , mabxmlSchemaDM , mabxmlSchema ) ; createSchemaDataModel ( DataModelUtils . FOAF_PERSON_DATA_MODEL_UUID , foafPersonDM , foafPersonDM , foafPersonSchema ) ;", "jj_la1 [ 156 ] = jj_gen ; break label_85 ;", "public static void loadShapeData ( SailRepository repo , URL resourceName ) throws RDF4JException , UnsupportedRDFormatException , IOException { try ( RepositoryConnection conn = repo . getConnection ( ) ) { conn . begin ( ) ; conn . add ( resourceName , resourceName . toString ( ) , RDFFormat . TURTLE , RDF4J . SHACL_SHAPE_GRAPH ) ; conn . commit ( ) ; } } public static SailRepository getInitializedShaclRepository ( String shapeData , boolean undefinedTargetClassValidatesAllSubjects ) throws IOException { ShaclSail sail = new ShaclSail ( new MemoryStore ( ) ) ; sail . setUndefinedTargetValidatesAllSubjects ( undefinedTargetClassValidatesAllSubjects ) ; SailRepository repo = new SailRepository ( sail ) ; repo . init ( ) ; }", "super ( nodeID ) ;", "case MqttTopics . GATEWAY_PROVISION_RESPONSE_TOPIC : case MqttTopics . DEVICE_PROVISION_RESPONSE_TOPIC :", "showErrorActivity ( this , mErrorMessage , false ) ;", "import net . minecraft . block . entity . FurnaceBlockEntity ; import net . minecraft . inventory . BasicInventory ;", "test ( Apps ( ConCall ( ( Constructor ) result . getDefinition ( \"c\" ) , Reference ( getThis ( result ) ) ) , Zero ( ) , Lam ( param ( Nat ( ) ) , Suc ( Zero ( ) ) ) ) , result ) ; testType ( Apps ( DataCall ( ( DataDefinition ) result . getDefinition ( \"D\" ) ) , Reference ( getThis ( result ) ) , Zero ( ) , Lam ( param ( Nat ( ) ) , Suc ( Zero ( ) ) ) ) , result ) ; assertEquals ( result . getDefinition ( \"c\" ) , result . getDefinition ( \"D.c\" ) ) ;", "", "download ( buffer ) ;", "assertNull ( Test . NULL , msg . getHdRadioEnable ( ) ) ; assertNull ( Test . NULL , msg . getSisData ( ) ) ;", "else if ( text . equals ( \"Revoke Certificate\" ) ) { rCert = new RevokeCert ( comp_right ) ; rCert . setVisible ( true ) ; } else if ( text . equals ( \"Sign File/Text\" ) ) { siCert = new SignCert ( comp_right ) ; siCert . setVisible ( true ) ; }", "return tags . get ( ) == null && forceLogging . get ( ) == null && aclLogging . get ( ) == null && aclLogRecords . get ( ) == null ;", "filterForm = new ContactsFilterForm ( ) ; filterForm . addValueChangeListener ( e -> { if ( ! navigateTo ( criteria , false ) ) { filterForm . updateResetButtonState ( ) ;", "static List < List < Object > > getDEGGeneratedData ( List < Field > profileFields , List < IConstraint > constraints , GenerationConfig . DataGenerationType generationStrategy , GenerationConfig . TreeWalkerType walkerType ) { return getGeneratedDataAsList ( profileFields , constraints , generationStrategy , walkerType )", "", "", "FreeStyleProject project = DuplicatesUtil . createGerritTriggeredJob ( j , \"projectX\" ) ; project . getBuildersList ( ) . add ( new SleepBuilder ( 5000 ) ) ; serverMock . waitForCommand ( GERRIT_STREAM_EVENTS , 2000 ) ; boolean started = false ;", "private final UIConfiguration uiConfiguration ; private final SingularityAuthorizationHelper authorizationHelper ; private final Optional < SingularityUser > user ;", "return new StandardSlackService ( teamDomain , authToken , botUser , authTokenCredentialId , room ) ;", "boolean withUgMobileMoney , boolean withRwfMobileMoney , boolean withZmMobileMoney ,", "", "public enum BundleState { none ( \"none\" ) , pending ( null ) , storing ( \"bundling\" ) , canceling ( null ) , complete ( \"succeeded\" ) , failed ( \"failed\" ) ; private String mappedState ; BundleState ( String mappedState ) { this . mappedState = mappedState ; } public String getMappedState ( ) { return this . mappedState ; } } private String uuid ;", "import java . util . HashSet ; import java . util . Set ;", "import java . time . temporal . ChronoUnit ; import java . util . * ;", "", "SpiPsuData spiPsuData = psuDataMapper . mapToSpiPsuData ( pisConsent . getPsuData ( ) ) ;", "", "", "this . catalogService = catalogService ; this . blockCalculator = blockCalculator ;", "import cz . startnet . utils . pgdiff . loader . SupportedVersion ;", "@ SuppressWarnings ( \"JdkObsolete\" ) @ SuppressWarnings ( \"unchecked\" ) private static Map < String , List < Object > > buildSyncopeUserAttributes ( final JsonNode user ) { }", "public ServiceCall arrayStringCsvNullAsync ( List < String > arrayQuery , final ServiceCallback < Void > serviceCallback ) { Validator . validate ( arrayQuery , serviceCallback ) ; Call < ResponseBody > call = service . arrayStringCsvNull ( this . client . getMapperAdapter ( ) . serializeList ( arrayQuery , CollectionFormat . CSV ) ) ; final ServiceCall serviceCall = new ServiceCall ( call ) ; }", "private final double originLat , Double originLon ;", "", "for ( FE9Character boss : charData . allBossCharacters ( ) ) { String pid = charData . getPIDForCharacter ( boss ) ; List < FE9ChapterUnit > bossUnits = new ArrayList < FE9ChapterUnit > ( ) ; for ( FE9Data . Chapter chapter : FE9Data . Chapter . values ( ) ) { for ( FE9ChapterArmy army : chapterData . armiesForChapter ( chapter ) ) { FE9ChapterUnit bossUnit = army . getUnitForPID ( pid ) ; if ( bossUnit != null ) { bossUnits . add ( bossUnit ) ; } army . commitChanges ( ) ; } } chapterData . commitChanges ( ) ; if ( ! bossUnits . isEmpty ( ) ) { int normalizedHPAdjustment = 255 ; int normalizedSTRAdjustment = 255 ; int normalizedMAGAdjustment = 255 ; int normalizedSKLAdjustment = 255 ; int normalizedSPDAdjustment = 255 ; int normalizedLCKAdjustment = 255 ; int normalizedDEFAdjustment = 255 ; int normalizedRESAdjustment = 255 ; for ( FE9ChapterUnit bossUnit : bossUnits ) { normalizedHPAdjustment = Math . min ( normalizedHPAdjustment , bossUnit . getHPAdjustment ( ) ) ; normalizedSTRAdjustment = Math . min ( normalizedSTRAdjustment , bossUnit . getSTRAdjustment ( ) ) ; normalizedMAGAdjustment = Math . min ( normalizedMAGAdjustment , bossUnit . getMAGAdjustment ( ) ) ; normalizedSKLAdjustment = Math . min ( normalizedSKLAdjustment , bossUnit . getMAGAdjustment ( ) ) ; normalizedSKLAdjustment = Math . min ( normalizedSKLAdjustment , bossUnit . getSKLAdjustment ( ) ; normalizedSPDAdjustment = Math . min ( normalizedSPDAdjustment , bossUnit . getMAGAdjustment ( ) ) ; normalizedSKLAdjustment", "reportClasses = getProperty ( REPORT_CLASSES_DESCRIPTOR ) ; reportMethods = getProperty ( REPORT_METHODS_DESCRIPTOR ) ; cycloVersion = getProperty ( CYCLO_VERSION_DESCRIPTOR ) ;", "if ( jj_3R_1057 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_1058 ( ) ) return true ; }", "public abstract class ListFragment < AdapterType extends EndlessAdapter > extends Fragment implements EndlessAdapter . OnLoadListener , ILoadItemsListener { private static final String TAG = ListFragment . class . getSimpleName ( ) ; }", "MinecraftForge . EVENT_BUS . addListener ( this :: serverLoad ) ; MinecraftForge . EVENT_BUS . addListener ( this :: serverLoaded ) ; MinecraftForge . EVENT_BUS . addListener ( this :: serverStopped ) ;", "failureRecovery = new FailureRecovery ( ) { @ Override public void recover ( ) { getPaymentMethodSearch ( ) ; } } ; ApiUtil . showApiExceptionError ( mActivity , error ) ; failureRecovery = new FailureRecovery ( ) { @ Override public void recover ( ) { getPaymentMethodSearch ( ) ; } } ;", "privateAliyun , daho ,", "import org . json . JSONObject ; import org . ecocean . security . Collaboration ; import org . ecocean . servlet . ServletUtilities ; import javax . servlet . http . HttpServletRequest ;", "import net . squanchy . search . OnSearchClickListener ; import net . squanchy . search . SearchActivity ;", "if ( info . getAudioStreams ( ) . isEmpty ( ) ) { detailControlsBackground . setVisibility ( View . GONE ) ; } if ( ! info . getVideoStreams ( ) . isEmpty ( ) || ! info . getVideoOnlyStreams ( ) . isEmpty ( ) ) { break ; }", "import com . hubspot . singularity . SingularityTaskId ; import com . hubspot . singularity . SingularityTaskShellCommandRequestId ; import com . hubspot . singularity . TaskCleanupType ; import com . hubspot . singularity . api . SingularityBounceRequest ;", "@ Path ( \"/{machineId}/cancel\" )", "getSendMessagesHelper ( ) . processForwardFromMyName ( object , did == 0 ? dialog_id : did ) ;", "spawnPos = type . getPlayerSpawnLocation ( ( WorldServer ) entity . world , ( EntityPlayerMP ) entity ) ;", "jj_la1 [ 122 ] = jj_gen ; break label_22 ;", "Passphrase passphrase , Passphrase newPassphrase ,", "* * @ return status of listener", "", "btnClear = new MultiIconButton ( this , ID_CLEAR , 24 + 65 , 60 , EnderWidget . X_BUT , EnderWidget . X_BUT_PRESSED , EnderWidget . X_BUT_HOVER ) ; scrollbar = new VScrollbar ( this , 24 + 215 , 27 , 90 ) ;", "this . downloadDeleter = new DownloadDeleter ( getContentResolver ( ) ) ; this . batchRepository = new BatchRepository ( getContentResolver ( ) , downloadDeleter ) ; if ( systemFacade == null ) { systemFacade = new RealSystemFacade ( this ) ; }", "* Send a post request with header values \"scenario\" : \"valid\" , \"value\" : \"The quick brown fox jumps over the lazy dog\" or \"scenario\" : \"null\" , \"value\" : null or \"scenario\" : \"empty\" , \"value\" : \"\"", "", "private final Queue < TaskMessage > pendingDriverMessages = new ConcurrentLinkedQueue < > ( ) ; private Optional < TaskMessage > dequeueDriverMessage ( ) { return Optional . ofNullable ( pendingDriverMessages . poll ( ) ) ; }", "", "boolean plopAnywhere ( ServerWorld world , BlockPos pos ) ; boolean plopAnywhere ( ServerWorld world , BlockPos pos , ChunkGenerator < ? extends ChunkGeneratorConfig > generator ) ;", "@ Test public void testCanonicalUriLinkHeader ( ) throws Exception { final String path = \"/\" + IMAGE + \"/pct:50,50,50,50/,50/0/default.jpg\" ; final URI uri = getHTTPURI ( path ) ; final String uriStr = uri . toString ( ) ; final String expectedURI = uriStr . substring ( 0 , uriStr . indexOf ( IMAGE . toString ( ) ) + IMAGE . toString ( ) . length ( ) ) + \"/32,28,32,28/57,/0/default.jpg\" ; client = newClient ( path ) ; Response response = client . send ( ) ; assertEquals ( \"<\" + expectedURI + \">;rel=\\\"canonical\\\"\" , response . getHeaders ( ) . getFirstValue ( \"Link\" ) ) ; }", "Rectangle rect = dockables . dockables ( ) . get ( indexBeneathMouse ) . getComponent ( ) . getBounds ( ) ;", "protected < F extends Field > F addDateField ( String propertyId , Class < F > fieldType , int allowedDaysInFuture ) { F field = createField ( propertyId , fieldType ) ; }", "public List < SingularityExecutorShellCommandDescriptor > getShellCommands ( ) { return shellCommands ; } public void setShellCommands ( List < SingularityExecutorShellCommandDescriptor > shellCommands ) { this . shellCommands = shellCommands ; } public String getShellCommandOutFile ( ) { return shellCommandOutFile ; } public void setShellCommandOutFile ( String shellCommandOutFile ) { this . shellCommandOutFile = shellCommandOutFile ; } public String getCgroupsMesosCpuTasksFormat ( ) { return cgroupsMesosCpuTasksFormat ; } public void setCgroupsMesosCpuTasksFormat ( String cgroupsMesosCpuTasksFormat ) { this . cgroupsMesosCpuTasksFormat = cgroupsMesosCpuTasksFormat ; } public String getProcCgroupFormat ( ) { return procCgroupFormat ; } public void setProcCgroupFormat ( String procCgroupFormat ) { this . procCgroupFormat = procCgroupFormat ; } public String getSwitchUserCommandFormat ( ) { return switchUserCommandFormat ; } public void setSwitchUserCommandFormat ( String switchUserCommandFormat ) { this . switchUserCommandFormat = switchUserCommandFormat ; } public List < String > getArtifactSignatureVerificationCommand ( ) { return artifactSignatureVerificationCommand ; } public void setArtifactSignatureVerificationCommand ( List < String > artifactSignatureVerificationCommand ) { this . artifactSignatureVerificationCommand = artifactSignatureVerificationCommand ; } public boolean isFailTaskOnInvalidArtifactSignature ( ) { return failTaskOnInvalidArtifactSignature ; } public void setFailTaskOnInvalidArtifactSignature ( boolean failTaskOnInvalidArtifactSignature ) { this . failTaskOnInvalidArtifactSignature ) { this . artifactSignatureVerificationCommand = artifactSignatureVerificationCommand ; } public String getSignatureVerifyOut ( ) { return failTaskOnInvalidArtifactSignature ; } public void setArtifactSignatureVerificationCommand ) { this . artifactSignatureVerificationCommand ) { this", "HdfsFileStatusWithId fileWithId , FileInfo fileInfo ,", "import com . battlelancer . seriesguide . beta . R ; import com . battlelancer . seriesguide . items . Series ; import com . battlelancer . seriesguide . util . DBUtils ;", "var14 . setInventorySlotContents ( slot , new ItemStack ( item , var9 , var8 ) ) ;", "", "* Get byte array value [ hex ( AB , AC , AD ) , null ] with the first item base64 encoded", "import com . b2international . snowowl . snomed . datastore . index . entry . SnomedDescriptionIndexEntry ; import com . b2international . snowowl . snomed . datastore . index . entry . SnomedRefSetMemberIndexEntry ;", "import org . eevolution . api . IPPOrderRoutingRepository ;", "public DbIterator < Transaction > getTransactions ( Connection con , PreparedStatement pstmt ) { return new DbIterator < > ( con , pstmt , transactionDb :: loadTransaction ) ; }", "try ( Instrumentation ignored = onResultInstrumenter . newInstrumentation ( ) ) { }", "modules . add ( new RuneLiteModule ( mock ( OkHttpClient . class ) , ( ) -> null , false , RuneLite . DEFAULT_CONFIG_FILE ) ) ;", "", "GCResource gcResource = new GCResource ( \"SampleSun1_7_0-02_G1_young.txt\" ) ; gcResource . getLogger ( ) . addHandler ( handler ) ; DataReader reader = getDataReader ( gcResource ) ;", "} /", "", "for ( Attribute attr : entity . getEntityType ( ) . getAtomicAttributes ( ) )", "import org . niis . xroad . restapi . openapi . model . ServiceDescriptionDisabledNotice ;", "this . transactionRequest = transactionRequest ; Logger . i ( \"transaction info set\" ) ;", "start_button . clearAnimation ( ) ; start_button . setBackground ( buttonColor ) ; start_button . setText ( \"Start Broadcssast\" ) ; logMessage ( \"Failed for unknown reason !\" ) ; break ;", "fixedWhereClause = fixedWhereClause . replaceFirst ( \"\\\\?|:value\" , Pattern . quote ( DataTypeFactory . getInstance ( ) . fromObject ( param , database ) . objectToSql ( param , database ) ) ) ;", "public final class Xslt implements Component , SequentialExecution { }", "+ \"\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u00a2\u00c4\u00b6\u00c4\u00a4\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u0124\u00c5\u0124\u00c3\u00a2\u00c4\u00b6\u00c4\u00be\u00c3\u00a2\u00c4\u00b6\u00c4\u00a2Role\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4\u00a2\u00c2\u00a6\u00c3\u00a2\u00c4", "import com . google . common . base . Optional ; import com . google . common . collect . ImmutableList ; import lombok . AllArgsConstructor ; import lombok . Getter ;", "", "", "", "private static final ObjectMapper MAPPER = new ObjectMapper ( ) . configure ( SerializationFeature . FAIL_ON_EMPTY_BEANS , false ) . configure ( DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES , false ) . findAndRegisterModules ( ) ;", "return userService . findById ( referenceType , referenceId , id ) . map ( this :: setInternalStatus ) ;", "ResponseEntity < Void > addPet ( @ ApiParam ( value = \"Pet object that needs to be added to the store\" , required = true ) @ Valid @ RequestBody Pet body , @ RequestHeader ( value = \"Accept\" , required = false ) String accept ) throws Exception ;", "import org . rajawali3d . cameras . Camera ;", "{ logger . debug ( \"Successfully relinked the moved file in the user profile.\" ) ; }", "", "return true ;", "* Get an array of array of strings { \"0\" : [ \"1\" , \"2\" , \"3\" ] , \"1\" : [ \"4\" , \"5\" , \"6\" ] , \"2\" : [ \"7\" , \"8\" , \"9\" ] }", "private void loadDrawableResourceXmlDirs ( DocumentLoader drawableResourceLoader , File xmlResourceDir ) throws Exception { if ( xmlResourceDir != null ) { drawableResourceLoader . loadResourceXmlDirs ( xmlResourceDir . listFiles ( DRAWABLE_DIR_FILE_FILTER ) ) ; } } private void loadValueResourcesFromDirs ( DocumentLoader documentLoader , File resourceDir , boolean system ) throws Exception { if ( system ) { loadSystemResourceXmlDir ( documentLoader , resourceDir ) ; } else { loadValueResourcesFromDir ( documentLoader , resourceDir ) ; } }", "@ Override public View getView ( int position , View convertView , ViewGroup parent ) { final LayoutInflater layoutInflater = getActivity ( ) . getLayoutInflater ( ) ; return createMedicineListItem ( layoutInflater , mMedicines . get ( position ) ) ; } }", "PriceList nextPriceList = catalogService . getFullCatalog ( ) . findPriceList ( PriceListSet . DEFAULT_PRICELIST_NAME , now ) ; SubscriptionEventTransition t = new SubscriptionTransitionData ( zeroId , oneId , twoId , EventType . API_USER , ApiEventType . CREATE , then , now , null , null , null , null , SubscriptionState . ACTIVE , nextPlan , nextPhase , nextPriceList , 1 , null , true ) ;", "import org . jf . dexlib2 . dexbacked . util . CompactOffsetTable ; import org . jf . dexlib2 . dexbacked . util . FixedSizeList ;", "import com . cloud . dc . VlanVO ; import com . cloud . dc . dao . AccountVlanMapDao ;", "protected Object _fromString ( JsonParser p , DeserializationContext ctxt , String string ) throws IOException", "oldFrame . put ( 0 , 0 , oldBuffer ) ; Mat newFrameTmp = new Mat ( chip . getSizeY ( ) , chip . getSizeX ( ) , CvType . CV_8U ) ; Mat oldFrameTmp = new Mat ( chip . getSizeY ( ) , chip . getSizeX ( ) , CvType . CV_8U ) ; newFrame . convertTo ( newFrameTmp , CvType . CV_8U ) ; oldFrame . convertTo ( oldFrameTmp , CvType . CV_8U ) ;", "public boolean isTypingHooks ( ) { return getPreferences ( ) . getBoolean ( TYPING_HOOKS , false ) ; } public void setTypingHooks ( boolean isTypingHooks ) { getPreferences ( ) . putBoolean ( TYPING_HOOKS , isTypingHooks ) ; } public boolean isAutoAdditionList ( ) { return getPreferences ( ) . getBoolean ( AUTO_ADDITION_LIST , false ) ; } public void setAutoAdditionList ( boolean isAutoAdditionList ) { getPreferences ( ) . putBoolean ( AUTO_ADDITION_LIST , isAutoAdditionList ) ; } public boolean isRemoveEmptyList ( ) { return getPreferences ( ) . getBoolean ( REMOVE_EMPTY_LIST , false ) ; } public void setRemoveEmptyList ( boolean isRemoveEmptyList ) { getPreferences ( ) . putBoolean ( REMOVE_EMPTY_LIST , isRemoveEmptyList ) ; } public boolean isReorderOrderedListNumber ( ) { return getPreferences ( ) . getBoolean ( REORDER_ORDERED_LIST , false ) ; } public void setReorderOrderedListNumber ( boolean isReorder ) { getPreferences ( ) . putBoolean ( REORDER_ORDERED_LIST , isReorder ) ; } public boolean isRemoveOrderedListNumber ( ) { return getPreferences ( ) . getBoolean ( REMOVE_ORDERED_LIST , isRemoveOrderedList ) ; } public void setRemoveOrderedListNumber ( boolean isRemoveOrderedList ) { getPreferences ( ) . putBoolean ( REMOVE_ORDERED_LIST , isRemoveOrderedList ) ; } public boolean isRemoveOrderedList ) { getPreferences ( ) . putBoolean ( REMOVE_ORDERED_LIST , isRemoveOrderedList ) ; } public void setRemoveOrderedListNumber ( boolean isRemoveOrderedList ) { getPreferences ( ) . putBoolean ( boolean isRemoveOrderedList ) { getPreferences ( ) . putBoolean ( boolean isRemoveOrderedList ) { getPreferences ( ) . putBoolean ( boolean is", "import buildcraft . robotics . * ; import buildcraft . robotics . ai . * ; import buildcraft . robotics . boards . * ;", "import org . spongepowered . api . item . inventory . property . InventoryDimension ; import org . spongepowered . api . item . inventory . transaction . InventoryTransactionResult ;", "import java . security . NoSuchAlgorithmException ;", "dfuFile . VID = ( dfuFile . file [ length - 11 ] & 0xFF ) << 8 ; dfuFile . VID |= ( dfuFile . file [ length - 12 ] & 0xFF ) ; dfuFile . PID = ( dfuFile . file [ length - 13 ] & 0xFF ) << 8 ; dfuFile . PID |= ( dfuFile . file [ length - 14 ] & 0xFF ) ; dfuFile . BootVersion = ( dfuFile . file [ length - 15 ] & 0xFF ) << 8 ; dfuFile . BootVersion |= ( dfuFile . file [ length - 16 ] & 0xFF ) ;", "final ConfiguredObjectRecordImpl queueRecord = new ConfiguredObjectRecordImpl ( queueId , \"Queue\" , EMPTY_ATTR ) ; _store . create ( queueRecord ) ; final ConfiguredObjectRecordImpl queue2Record = new ConfiguredObjectRecordImpl ( queue2Id , \"Queue\" , EMPTY_ATTR ) ; _store . create ( queue2Record ) ; final ConfiguredObjectRecordImpl exchangeRecord = new ConfiguredObjectRecordImpl ( exchangeId , \"Exchange\" , EMPTY_ATTR ) ; _store . create ( exchangeRecord ) ; Map < String , ConfiguredObjectRecord > bindingParents = new HashMap < String , ConfiguredObjectRecord > ( ) ; bindingParents . put ( \"Exchange\" , exchangeRecord ) ; bindingParents . put ( \"Queue\" , queueRecord ) ; final ConfiguredObjectRecordImpl bindingRecord = new ConfiguredObjectRecordImpl ( bindingId , \"Binding\" , EMPTY_ATTR , bindingParents ) ; Map < String , ConfiguredObjectRecord > binding2Parents = new HashMap < String , ConfiguredObjectRecord > ( ) ; binding2Parents . put ( \"Exchange\" , exchangeRecord ) ; binding2Parents . put ( \"Queue\" , queue2Record ) ; final ConfiguredObjectRecordImpl binding2Parents = new HashMap < String , ConfiguredObjectRecord > ( ) ; binding2Parents . put ( \"Exchange\" , binding2Parents ) ; Map < String , ConfiguredObjectRecord > binding2Parents = new HashMap < String , ConfiguredObjectRecord > ( ) ; binding2Parents . put ( \"Exchange\" , binding2Parents ) ; final ConfiguredObjectRecordImpl binding2Parents . put ( \"Queue\" , queue2Record ) ; final ConfiguredObjectRecordImpl binding2Parents ) ; final ConfiguredObjectRecordImpl binding2Parents ) ; _recoveryHandler ) . recoverConfigurationStore ( _recoveryHandler ) . configuredObject ( binding2Parents ) ; verify ( _recoveryHandler", "opA1B1 . setIncludeIncomingOutGoing ( IncludeIncomingOutgoingType . INCOMING ) ; final Set < Element > a1B1EdgeIncomingResults = returnElementsFromOperation ( store , opA1B1 , new User ( ) , false ) ; assertEquals ( 0 , a1B1EdgeIncomingResults . size ( ) ) ;", "if ( jj_3R_256 ( ) ) { jj_scanpos = xsp ; break ; }", "append ( bf . getOrProtocol ( left , right , result ) ) ;", "import java . util . ArrayList ; import java . util . List ; import java . commons . UUID ;", "return new UnknownExtensionPreparator ( context . getChooser ( ) , message , getSerializer ( message ) ) ;", "import de . ovgu . featureide . fm . core . io . manager . FileManager ; import de . ovgu . featureide . fm . core . io . manager . IFeatureModelManager ; import de . ovgu . featureide . fm . core . io . manager . SimpleFileHandler ; import de . ovgu . featureide . fm . core . job . IRunner ; import de . ovgu . featureide . fm . core . job . JobStartingStrategy ; import de . ovgu . featureide . fm . core . job . JobToken ;", "if ( block instanceof BlockFluidBase || block instanceof BlockLiquid || block instanceof IPlantable ) { }", "isRunning = true ; TransactionManager . paymentUsingMandiriClickPay ( transactionRequest . getActivity ( ) ,", "private final LocalDate testDate = new LocalDate ( 1998 , 6 , 4 ) ; private final long testDateTime = ZonedDateTime . of ( testDate , 6 , 4 ) . toDateTime ( new LocalTime ( 8 , 3 , 31 , 0 ) , systemUTC ( ) . zone ( ) ) . toInstant ( ) . toEpochMilli ( ) ; private final long testDateTimeWithMillis = ZonedDateTime . of ( testDate , LocalTime . of ( 8 , 31 , ( int ) TimeUnit . MILLISECONDS . toNanos ( 537 ) ) , systemUTC ( ) , UTC ) . toInstant ( ) . toEpochMilli ( ) ;", "if ( oldStudent != null && oldStudent . getTeacher ( ) == this ) { }", "import de . ovgu . featureide . fm . core . io . FileSystem ; import de . ovgu . featureide . fm . core . io . IPersistentFormat ; import de . ovgu . featureide . fm . core . io . guidsl . GuidslFormat ;", "private final ApplicationService applicationService ; private final NakadiSettings nakadiSettings ;", "private final FeedStore feedStore = new FeedStoreImpl ( new Store < > ( persistence , securityContext ) , securityContext , persistence ) ; private final PipelineStore pipelineStore = new PipelineStoreImpl ( new Store < > ( persistence , securityContext ) , securityContext , persistence ) ; @ Mock private DocumentPermissionCache mockDocumentPermissionCache ; @ Mock private ReferenceDataLoader mockReferenceDataLoader ; @ Inject private PipelineScopeRunnable pipelineScopeRunnable ; @ Before public void setup ( ) { super . setup ( ) ; injector . injectMembers ( this ) ; MockitoAnnotations . initMocks ( this ) ; Mockito . when ( mockDocumentPermissionCache . hasDocumentPermission ( Mockito . anyString ( ) , Mockito . anyString ( ) , Mockito . anyString ( ) ) ) . thenReturn ( true ) ; } private PipelineDoc buildPipelineDoc ( PipelineReference pipelineReference ) { PipelineDoc pipelineDoc = new PipelineDoc ( ) ; pipelineDoc . setUuid ( pipelineReference . getPipeline ( ) . getUuid ( ) ) ; pipelineDoc . setVersion ( UUID . randomUUID ( ) . toString ( ) ) ; return pipelineDoc ; } private RefDataStoreHolder getRefDataStoreHolder ( ) { return injector . getInstance ( RefDataStoreHolder . class ) ; }", "setState ( 440 ) ;", "import com . orientechnologies . orient . core . record . impl . ODocument ; import java . io . UnsupportedEncodingException ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ;", "* Get dictionary of complex type with { \"0\" : { \"integer\" : 1 , \"string\" : \"2\" } , \"1\" : { \"integer\" : 3 , \"string\" : \"4\" } , \"2\" : { \"integer\" : 5 , \"string\" : \"6\" } }", "CaseDbConnection connection = connections . getConnection ( ) ; s = connection . createStatement ( ) ; rs = connection . executeQuery ( s , \"select * from tsk_file_layout where obj_id = \" + id + \" order by sequence\" ) ; List < TskFileRange > ranges = new ArrayList < TskFileRange > ( ) ; while ( rs . next ( ) ) { ranges . add ( rsHelper . tskFileRange ( rs ) ) ; }", "Clog . setLastRequest ( query_string ) ; Clog . d ( Clog . httpReqLogTag , Clog . getString ( R . string . fetch_url , query_string ) ) ;", "", "if ( thisDetails != null ) { details . add ( thisDetails ) ; }", "import com . cloud . network . dao . NetworkVO ; import com . cloud . server . ManagementServer ; import com . cloud . utils . component . Adapters ; import com . cloud . utils . component . ComponentLocator ;", "public PacketCollector createPacketCollectorAndSend ( StanzaFilter packetFilter , Stanza packet ) throws NotConnectedException , InterruptedException ;", "import org . zalando . nakadi . partitioning . PartitionStrategy ; import org . zalando . nakadi . exceptions . NoSuchEventTypeException ;", "* @ param ctx ChannelHandlerContext", "graph = super . transform ( graph , queryMetaData ) ;", "", "private static boolean mContinueThread = true ; public static void openGcodeFile ( Context context , File file , DataStorage data , int mode ) { mContext = context ; Log . i ( TAG , \" Open GcodeFile \" ) ; }", "Map < ResourceGroup , List < RequestMappingContext > > resourceGroupRequestMappings = new HashMap < > ( ) ; int requestMappingContextId = 0 ;", "c . drawBitmap ( mBitmap , 0 , 0 , null ) ;", "ITenant systemTenant = tenantManager . createTenant ( null , ServerRepositoryPaths . getPentahoRootFolderName ( ) , tenantAdminAuthorityName , tenantAuthenticatedAuthorityName , \"Anonymous\" ) ; userRoleDao . createUser ( systemTenant , sysAdminUserName , \"password\" , \"\" , new String [ ] { tenantAdminAuthorityName } ) ; login ( sysAdminUserName , systemTenant , new String [ ] { tenantAdminAuthorityName , tenantAuthenticatedAuthorityName } ) ; ITenant mainTenant_1 = tenantManager . createTenant ( systemTenant , MAIN_TENANT_1 , tenantAdminAuthorityName , tenantAuthenticatedAuthorityName , \"Anonymous\" ) ; userRoleDao . createUser ( mainTenant_1 , \"admin\" , \"password\" , \"\" , new String [ ] { tenantAdminAuthorityName } ) ; login ( \"admin\" , mainTenant_1 , new String [ ] { tenantAdminAuthorityName , tenantAuthenticatedAuthorityName } ) ;", "import org . springframework . cloud . servicebroker . model . binding . DeleteServiceInstanceBindingResponse ;", "{ { bindService ( new Intent ( this , FileUploadService . class ) , mUploadServiceConnection , Context . BIND_AUTO_CREATE ) ; } } @ Override protected void onNewIntent ( Intent intent ) { Log_OC . v ( TAG , \"onNewIntent() start\" ) ; Account current = AccountUtils . getCurrentOwnCloudAccount ( this ) ; if ( current != null && mAccount != null && ! mAccount . name . equals ( current . name ) ) { mAccount = current ; } }", "public final Set < FileEditor > getOpenFileEditors ( ) { Set < FileEditor > fileEditors = new HashSet < FileEditor > ( ) ; for ( FileEditor fileEditor : openFileEditors . values ( ) ) { fileEditors . add ( fileEditor ) ; } return fileEditors ; } protected final FileEditor getSelectedFileEditor ( ) { return selectedFileEditor ; }", "", "import com . google . common . base . Splitter ; import com . google . common . collect . Iterables ; import com . google . common . base . Throwables ;", "final JasperReportBuilder mainReport = PDFWriter . generatePatientReport ( patientReport , reporterData ) ; assertNotNull ( mainReport ) ; final JasperReportBuilder supplement = PDFWriter . generateSupplementaryReport ( patientReport ) ; final JasperReportBuilder evidenceReport = EvidenceItemsWriter . generatePatientReport ( patientReport , reporterData ) ; assertNotNull ( supplement ) ; assertNotNull ( evidenceReport ) ;", "if ( incrementConfig . isIncrement ( ) && ! incrementConfig . isUseMaxFunc ( ) ) { if ( incrementConfig . isIncrement ( ) && ! incrementConfig . isUseMaxFunc ( ) ) { Object incrementVal = resultSet . getObject ( incrementConfig . getColumnIndex ( ) + 1 ) ; endLocationAccumulator . add ( getLocation ( incrementConfig . getColumnType ( ) , incrementVal ) ) ; } }", "* Get an array of Dictionaries of type & lt ; string , string & gt ; with value [ { '1' : 'one' , '2' : 'two' , '3' : 'three' } , { } , { '7' : 'seven' , '8' : 'eight' , '9' : 'nine' } ]", "import java . nio . ByteBuffer ; import java . util . regex . Pattern ;", "", "", "* Check if the given type represents a \"simple\" value type : a primitive or * primitive wrapper , an enum , a String or other CharSequence , a Number , a * Date , a Temporal , a URI , a URL , a Locale , or a Class . * < p > { @ code Void } and { @ code void } are not considered simple value types . * @ param type the type to check", "import javax . servlet . http . HttpServletRequest ; import javax . ws . rs . PathParam ; import javax . ws . rs . container . ResourceContext ; import javax . ws . rs . container . ResourceInfo ; import javax . ws . rs . ext . WriterInterceptorContext ;", "InsGallery . openGallery ( MainActivity . this , GlideEngine . createGlideEngine ( ) ) . theme ( themeId ) . isWeChatStyle ( isWeChatStyle ) . isUseCustomCamera ( cb_custom_camera . isChecked ( ) ) . setLanguage ( language ) . setPictureStyle ( mPictureParameterStyle ) . setPictureCropStyle ( mCropParameterStyle ) . setPictureWindowAnimationStyle ( mWindowAnimationStyle ) . isWithVideoImage ( true ) . loadCacheResourcesCallback ( new GlideCacheResourcesManager ( ) ) . maxSelectNum ( maxSelectNum ) . minSelectNum ( 1 ) . maxVideoSelectNum ( 1 ) . imageSpanCount ( 4 ) . isReturnEmpty ( false ) . setRequestedOrientation ( ActivityInfo . SCREEN_ORIENTATION_PORTRAIT ) . isOriginalImageControl ( cb_original . isChecked ( ) ) . selectionMode ( cb_choose_mode . isChecked ( ) ? PictureConfig . MULTIPLE : PictureConfig . SINGLE ) . isSingleDirectReturn ( cb_single_back . isChecked ( ) ) . previewImage ( cb_preview_img . isChecked ( ) ) . previewVideo ( cb_preview_video . isChecked ( ) ) . enablePreviewAudio ( cb_preview_audio . isChecked ( ) ) . isCamera ( cb_isCamera . isChecked ( ) ) . isZoomAnim ( true ) . enableCrop ( cb_crop . isChecked ( ) ) . compress ( cb_compress . isChecked ( ) ) . synOrAsy ( true ) . withAspectRatio ( aspect_ratio_x , aspect_ratio_y ) . hideBottomControls ( ! cb_hide . isChecked ( ) ) . isCamera ( cb_preview_audio . isChecked ( ) ) . isCamera ( cb_preview_audio . isChecked ( ) ) . isZoomAnim ( true ) . enableCrop ( cb_crop . isChecked ( )", "", "throw SQLError . createSQLException ( Messages . getString ( \"EscapeProcessor.6\" , new Object [ ] { functionToken } ) , SQLError . SQL_STATE_SYNTAX_ERROR , exceptionInterceptor ) ;", "* Class { @ code InterController } is the UI in charge of dealing with Inter and * Relation instances ( addition , removal , modifications ) to correct OMR output , * with the ability to undo & amp ; redo at will .", "public void getToken ( Activity activity , CardTokenRequest cardTokenRequest , TokenCallBack tokenCallBack ) { }", "closeReason = reason ;", "import tachyon . worker . BlockWorkerClient ;", "public static final short SCOPE_START_DATA = ( short ) 0xCDAB ;", "if ( siteId != null && siteId . length ( ) > 0 && showSiteUsers ) { }", "public void replaceFragment ( @ NonNull Fragment fragment ) { replaceFragment ( fragment , null ) ; }", "LoanSummaryDto loanSummary = new LoanSummaryDto ( loan . getLoanSummary ( ) . getOriginalPrincipal ( ) , loan . getLoanSummary ( ) . getPrincipalPaid ( ) , loan . getLoanSummary ( ) . getPrincipalDue ( ) , loan . getLoanSummary ( ) . getOriginalInterest ( ) , loan . getLoanSummary ( ) . getInterestPaid ( ) , loan . getLoanSummary ( ) . getInterestDue ( ) , loan . getLoanSummary ( ) . getOriginalFees ( ) , loan . getLoanSummary ( ) . getFeesPaid ( ) , loan . getLoanSummary ( ) . getFeesDue ( ) , loan . getLoanSummary ( ) . getOriginalPenalty ( ) , loan . getLoanSummary ( ) . getPenaltyPaid ( ) , loan . getLoanSummary ( ) . getPenaltyDue ( ) , loan . getLoanSummary ( ) . getTotalLoanAmnt ( ) , loan . getLoanSummary ( ) . getTotalAmntPaid ( ) , loan . getLoanSummary ( ) . getTotalAmntDue ( ) , loan . getLoanSummary ( ) . getPenaltyDue ( ) , loan . getLoanSummary ( ) . getPenaltyDue ( ) , loan . getLoanSummary ( ) . getPenaltyDue ( ) , loan . getLoanSummary ( ) . getPenaltyDue ( ) , loan . getLoanSummary ( ) , loan . getLoanSummary ( ) . getTotalAmntPaid ( ) , loan . getLoanSummary ( ) . getTotalAmntDue ( ) , loan . getLoanSummary ( ) . getPenaltyDue ( ) , loan . getLoanSummary ( ) . getTotalAmntAgId ( ) , loan . getLoanSummary ( ) . getPenaltyDue (", "import mekanism . common . block . states . BlockStateMachine . MachineType ; import mekanism . common . recipe . inputs . AdvancedMachineInput ; import mekanism . common . recipe . inputs . ChemicalPairInput ; import mekanism . common . recipe . inputs . FluidInput ; import mekanism . common . recipe . inputs . GasInput ; import mekanism . common . recipe . inputs . InfusionInput ; import mekanism . common . recipe . inputs . IntegerInput ; import mekanism . common . recipe . inputs . ItemStackInput ; import mekanism . common . recipe . inputs . MachineInput ; import mekanism . common . recipe . inputs . PressurizedInput ; import mekanism . common . recipe . machines . AdvancedMachineRecipe ; import mekanism . common . recipe . machines . AmbientGasRecipe ; import mekanism . common . recipe . machines . BasicMachineRecipe ; import mekanism . common . recipe . machines . ChanceMachineRecipe ; import mekanism . common . recipe . machines . ChanceMachineRecipe ; import mekanism . common . recipe . machines . OsmiumCompressorRecipe ; import mekanism . common . recipe . machines . CrusherRecipe ; import mekanism . common . recipe . machines . CrystallizerRecipe ; import mekanism . common . recipe . machines . MachineRecipe ; import mekanism . common . recipe . machines . ChanceMachineRecipe ; import mekanism . common . recipe . machines . DissolutionRecipe ; import mekanism . common . recipe . machines . SterichmentRecipe ; import mekanism . common . recipe . machines . MachineRecipe ; import mekanism .", "BigDecimal longStepSize = longExchange . getExchangeMetaData ( ) . getCurrencyPairs ( ) . get ( currencyPair ) . getAmountStepSize ( ) ; BigDecimal shortStepSize = shortExchange . getExchangeMetaData ( ) . getCurrencyPairs ( ) . get ( currencyPair ) . getAmountStepSize ( ) ; LOGGER . info ( \"{} trade amount step size: {}\" , longExchange . getExchangeSpecification ( ) . getExchangeName ( ) , longStepSize ) ; LOGGER . info ( \"{} trade amount step size: {}\" , shortExchange . getExchangeSpecification ( ) . getExchangeName ( ) , shortStepSize ) ; if ( longStepSize != null ) { longVolume = roundByStep ( longVolume , longStepSize ) ; } if ( shortStepSize != null ) { shortVolume = roundByStep ( shortVolume , shortStepSize ) ; }", "me . setId ( \"AAAAA\" ) ; jobExecution . setUser ( me ) ; jobExecution . setStatus ( JobExecution . Status . PENDING ) ; jobExecution . setType ( \"AnnotatorJob\" ) ; jobExecution . setSubmissionDate ( date ) ; jobExecution . setStartDate ( date ) ; jobExecution . setProgressInt ( 50 ) ; jobExecution . setProgressMax ( 1032 ) ; Gson gson = new GsonBuilder ( ) . registerTypeAdapter ( JobExecution . class , new EntitySerializer ( ) )", "* Get date dictionary value { \"0\" : \"2000-12-01t00:00:01z\" , \"1\" : \"date-time\" }", "import org . springframework . integration . metadata . PropertiesPersistingMetadataStore ; import org . springframework . integration . test . util . TestUtils ; import org . springframework . messaging . Message ;", "@ GuardedBy ( \"mInodeTree\" ) private void scheduleAsyncPersistenceInternal ( InodePath inodePath ) throws AlluxioException { inodePath . getInode ( ) . setPersistenceState ( PersistenceState . IN_PROGRESS ) ; }", "@ GetMapping ( \"/rest/tenants/{tenantId}/users/{userId}\" ) @ PreAuthorize ( \"hasAuthority('sysadmin') or hasPermission(#tenantId, 'org.eclipse.vorto.repository.domain.Namespace', 'namespace_admin')\" )", "@ Inject ConfigurationDao _configDao = null ;", "@ Override public void shutdown ( ) { } @ ReceiveEvent ( components = BookshelfComponent . class , priority = EventPriority . PRIORITY_HIGH )", "import com . boydti . fawe . object . mask . IdMask ;", "test ( ConCall ( ( Constructor ) result . getDefinition ( \"E.c\" ) , Reference ( getThis ( result ) ) ) , result ) ; assertEquals ( result . getDefinition ( \"E.c\" ) , result . getDefinition ( \"E.D.c\" ) ) ;", "final long storageKey = CDOIDUtils . asLong ( group . cdoID ( ) ) ; service . updateDocument ( storageKey , doc ) ; } catch ( final IOException e ) {", "* Long running put request , service returns a 200 to the initial request , with an entity that is not a valid json", "public void setDbSource ( DbSource dbSource ) { this . dbSource = dbSource ; if ( diffPane != null ) { diffPane . setDbTarget ( dbSource ) ; } } public void setDbTarget ( DbSource dbTarget ) { this . dbTarget = dbTarget ; if ( diffPane != null ) { diffPane . setDbSource ( dbTarget ) ; } }", "mes ( n , config ( ) . GAME_TICK * 2 , \"The Shaman starts an incantation...\" ) ;", "ingest ( connector , getAdminPrincipal ( ) , CHUNKSIZE , 1 , 50 , 0 , tableName ) ;", "TaskDef getTaskDef ( @ NotEmpty ( message = \"TaskType cannot be null or empty\" ) String taskType ) ;", "* * @ return Whether format supported by this factory * supports native binary content", "private static final String ELYTRON_JACC_CAPABILITY_NAME = \"org.wildfly.security.jacc-policy\" ;", "final long minBlockSize = context . getHadoopConf ( ) . getLong ( \"dfs.namenode.fs-limits.min-block-size\" , 0 ) ;", "@ Override public double getFatalyFailedBlocks ( ObjectContainer container ) { if ( persistenceType == PERSIST_FOREVER && progressPending != null ) container . activate ( progressPending , 2 ) ; }", "bottomSheetBehavior . setBottomSheetCallback ( null ) ;", "case T__66 : enterOuterAlt ( _localctx , 8 ) ;", "import org . n52 . series . db . beans . DataEntity ; import org . n52 . series . db . beans . DatasetEntity ; import org . n52 . series . db . beans . UnitEntity ; import org . n52 . shetland . ogc . ows . exception . OwsExceptionReport ; import org . n52 . shetland . ogc . sos . request . AbstractObservationRequest ; import org . n52 . shetland . ogc . sos . request . GetObservationRequest ;", "import static ai . grakn . graql . internal . reasoner . utils . ReasonerUtils . areDisjointTypes ; import static ai . grakn . graql . internal . reasoner . utils . ReasonerUtils . compatibleRelationTypesWithRoles ; import static ai . grakn . graql . internal . reasoner . utils . ReasonerUtils . supers ;", "public static void applyProductOptionValueCriteria ( PersistentEntityCriteria queryCriteria , CriteriaTransferObject cto , PersistencePackage persistencePackage , String skuPropertyPrefix ) { final List < Long > productOptionValueFilterIDs = new ArrayList < Long > ( ) ; for ( String filterProperty : cto . getPropertyIdSet ( ) ) { if ( filterProperty . startsWith ( PRODUCT_OPTION_FIELD_PREFIX ) ) { FilterAndSortCriteria criteria = cto . get ( filterProperty ) ; productOptionValueFilterIDs . add ( Long . parseLong ( criteria . getFilterValues ( ) [ 0 ] ) ) ; } } final List < String > productOptionValueFilterValues = new ArrayList < String > ( ) ; FilterAndSortCriteria consolidatedCriteria = cto . get ( CONSOLIDATED_PRODUCT_OPTIONS_FIELD_NAME ) ; if ( consolidatedCriteria . getFilterValues ( ) . length > 0 ) { productOptionValueFilterValues . addAll ( Arrays . asList ( StringUtils . split ( consolidatedCriteria . getFilterValues ( ) [ 0 ] , CONSOLIDATED_PRODUCT_OPTIONS_DELIMETER ) ) ) ; } AssociationPath path ; if ( StringUtils . isNotEmpty ( skuPropertyPrefix ) ) { path = new AssociationPath ( new AssociationPathElement ( skuPropertyPrefix ) , new AssociationPathElement ( \"productOptionValues\" ) ) ; } else { path = new AssociationPath ( new AssociationPathElement ( \"productOptionValues\" ) ) ; } if ( productOptionValueFilterIDs . size ( ) > 0 ) { ( ( NestedPropertyCriteria ) queryCriteria ) . add ( new FilterCriterion ( path , \"id\" , productOptionValueFilterIDs , false , new SimpleFilterCriterionProvider ( FilterDataStrategy . DIRECT , 1 ) { @ Override @ SuppressWarnings ( \"unchecked\" ) public Criterion getCriterion ( String targetPropertyName , Object [ ] filterObjectValues , Object [ ] directValues ) { return Restrictions . in ( targetPropertyName , ( List < Long >", "public static boolean useND2Chunkmap ( ) { return Prefs . get ( PREF_ND2_CHUNKMAP , NativeND2Reader . USE_CHUNKMAP_DEFAULT ) ; } public static boolean isLeicaLIFPhysicalSizeBackwardsCompatible ( ) { return Prefs . get ( PREF_LEICA_LIF_PHYSICAL_SIZE , LIFReader . OLD_PHYSICAL_SIZE_DEFAULT ) ; }", "prop = getConfig ( Constants . CONFIG_CATEGORY_DIMENSIONS , \"Static Loaded Dimensions\" , ConfigManagerCore . staticLoadDimensions ) ; prop . setComment ( \"IDs to load at startup, and keep loaded until server stops. Can be added via /gckeeploaded\" ) ;", "SearchSourceBuilder newBuilder = SearchSourceBuilder . parseSearchSource ( parser , parseContext , aggParsers ) ; assertNull ( parser . nextToken ( ) ) ;", "@ UiField ToggleButton lineWrapping ; @ UiField ToggleButton skipDeleted ; @ UiField ToggleButton skipUnchanged ; @ UiField ToggleButton skipUncommented ;", "", "chunkDebugTool = CarpetSettings . getBool ( \"chunkDebugTool\" ) ; mergeTNT = CarpetSettings . getBool ( \"mergeTNT\" ) ; disablePlayerCollision = CarpetSettings . getBool ( \"disablePlayerCollision\" ) ;", "final String thingId = signal ( ) . getThingId ( ) ; final String policyId = enforcerKeyEntry . getValueOrThrow ( ) . getId ( ) ; final DittoRuntimeException error = errorForExistingThingWithDeletedPolicy ( signal ( ) , thingId , policyId ) ; log ( ) . info ( \"Enforcer was not existing for Thing <{}>, responding with: {}\" , thingId , error ) ; replyToSender ( error ) ;", "if ( jj_3R_793 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_794 ( ) ) return true ; }", "jj_la1 [ 131 ] = jj_gen ;", "eventBus . unregister ( this ) ; chatCommandManager . unregisterCommand ( LAYOUT_COMMAND ) ;", "viewer . showBlockBoundariesProperty ( ) . bind ( this . showBlockBoundaries ) ; viewer . rendererBlockSizeProperty ( ) . bind ( this . rendererBlockSize ) ; { final Affine affineCopy = this . affine . clone ( ) ; final boolean wasAffineSet = this . wasAffineSet ; viewer . addAffineListener ( this :: setAffine ) ; viewer . backgroundFillProperty ( ) . bindBidirectional ( this . backgroundColor ) ; if ( wasAffineSet ) { LOG . debug ( \"Setting viewer affine to {}\" , affineCopy ) ; viewer . setAffine ( affineCopy ) ; } } public boolean isWasAffineSet ( ) { return wasAffineSet ; }", "while ( isCtrlKeyDown ( ) ) { } User32 . INSTANCE . SendMessage ( handle , WM_LBUTTONDOWN , 0x00000001 , lParam ) ; User32 . INSTANCE . SendMessage ( handle , WM_LBUTTONUP , 0x00000000 , lParam ) ;", "import dr . math . matrixAlgebra . Vector ; import dr . xml . AttributeParser ; import dr . xml . XMLParser ;", "@ Nullable", "import cn . academy . support . BlockConverterBase ;", "Options options = createCommandLineOptions ( ) ; CommandLine cl = parseCommandLine ( args , options ) ; if ( cl == null ) { System . out . println ( \"Error Parsing Command Line Arguments\" ) ; return ; } try { KarmaStats stats = new KarmaStats ( cl ) ; if ( ! stats . parseCommandLineOptions ( cl ) ) { System . out . println ( \"Parse ERROR\" ) ; return ; } } catch ( Exception e ) { e . printStackTrace ( ) ; }", "assertNull ( TestValues . NULL , msg . getAccPedalPosition ( ) ) ; assertNull ( TestValues . NULL , msg . getAirbagStatus ( ) ) ; assertNull ( TestValues . NULL , msg . getBeltStatus ( ) ) ; assertNull ( TestValues . NULL , msg . getDriverBraking ( ) ) ; assertNull ( TestValues . NULL , msg . getFuelLevel ( ) ) ; assertNull ( TestValues . NULL , msg . getTirePressure ( ) ) ; assertNull ( TestValues . NULL , msg . getWiperStatus ( ) ) ; assertNull ( TestValues . NULL , msg . getGps ( ) ) ; assertNull ( TestValues . NULL , msg . getSpeed ( ) ) ; assertNull ( TestValues . NULL , msg . getRpm ( ) ) ; assertNull ( TestValues . NULL , msg . getFuelLevelState ( ) ) ; assertNull ( TestValues . NULL , msg . getInstantFuelConsumption ( ) ) ; assertNull ( TestValues . NULL , msg . getExternalTemperature ( ) ) ; assertNull ( TestValues . NULL , msg . getPrndl ( ) ) ; assertNull ( TestValues . NULL , msg . getOdometer ( ) ) ; assertNull ( TestValues . NULL , msg . getBodyInformation ( ) ) ; assertNull ( TestValues . NULL , msg . getPrndl ( ) ) ; assertNull ( TestValues . NULL , msg . getOdometer ( ) ) ; assertNull ( TestValues . NULL , msg . getExternalTemperature ( ) ) ; assertNull ( TestValues . NULL , msg . getPrndl ( ) ) ; assertNull ( TestValues . NULL , msg . getRpm ( ) ) ; assertNull ( TestValues . NULL , msg . getBodyInformation ( ) ) ; assertNull ( TestValues . NULL , msg . getOdometer ( ) ) ; assertNull ( Test", "import android . widget . Spinner ; import android . widget . SpinnerAdapter ;", "updateState ( System . currentTimeMillis ( ) ) ;", "public abstract void randomize ( ) ; @ Override public AccessibleObject getAccessibleObject ( ) { return null ; } @ Override public boolean isAssignmentStatement ( ) { return false ; }", "else switch ( curToken ) { case \" \" : break ; case \"(\" : parenthesisRendered = true ; break ; case \")\" : break ; case \"[\" : break ; case \"]\" : break ; case \"{\" : break ; case \"}\" : break ; case \",\" : break ; case \"\\n\" : break ; case \"\\t\" : break ; case \"'\" : break ; default : if ( isOntologyURI ( curToken ) ) { fadeOntologyURI ( doc , tokenStartIndex , tokenLength , enclosedByBracket ) ; } }", "import won . bot . framework . eventbot . action . impl . needlifecycle . AbstractCreateNeedAction ; import won . bot . framework . eventbot . bus . EventBus ;", "Assert . assertEquals ( title , questionGroup . getTitle ( ) ) ; Assert . assertEquals ( QuestionGroupState . ACTIVE , questionGroup . getState ( ) ) ; assertEquals ( true , questionGroup . isEditable ( ) ) ;", "import com . radixdlt . client . core . atoms . Atom ;", "new HandleConstructor ( ) . generateConstructor ( typeNode , level , onConstructor , findRequiredFields ( typeNode ) , false , staticName , SkipIfConstructorExists . NO , annotationNode , null , false ) ;", "import com . google . android . gms . location . FusedLocationProviderClient ; import com . google . android . gms . location . LocationServices ;", ". flatMap ( organizationId -> Mono . when ( createUserId ( this . cloudFoundryClient , this . uaaClient , organizationId , userName ) ,", "IJmlClauseType ct = clause . clauseType ; if ( ct == MethodDeclClauseExtension . oldClause || ct == FORALL ) { clauseIds . put ( clause , null ) ; } }", "@ Generated ( value = { \"https://www.jooq.org\" , \"jOOQ version:3.8.2\" } , comments = \"This class is generated by jOOQ\" )", "public IdsRepository getIdsRepository ( ) { return idsRepository ; } public NotificationAnalytics getNotificationAnalytics ( ) { if ( notificationAnalytics == null ) { notificationAnalytics = new NotificationAnalytics ( Analytics . getInstance ( ) , AppEventsLogger . newLogger ( this ) , getBodyInterceptorPoolV7 ( ) , getDefaultClient ( ) , WebService . getDefaultConverter ( ) , tokenInvalidator , cm . aptoide . pt . dataprovider . BuildConfig . APPLICATION_ID , getDefaultSharedPreferences ( ) , new AptoideInstallParser ( ) ) ; } return notificationAnalytics ; }", "import com . cloud . storage . VolumeVO ; import com . cloud . storage . Storage . ImageFormat ;", "@ Override public void uploadLocalProject ( String name , String projectFolder , String comment ) throws ProjectException { }", "void injectMembers ( SnippetHelper helper ) ; void injectMembers ( RSConnectPublishButton publishButton ) ; void injectMembers ( RSConnectDeploy deploy ) ;", "List < OmObservation > result = toSosObservation ( observations , request , LocaleHelper . fromRequest ( request ) , LocaleHelper . fromRequest ( request ) , session ) ;", "import com . dotcms . datagen . ContainerDataGen ; import com . dotcms . datagen . ContentletDataGen ; import com . dotcms . datagen . FolderDataGen ; import com . dotcms . datagen . HTMLPageDataGen ; import com . dotcms . datagen . StructureDataGen ; import com . dotcms . datagen . TemplateDataGen ; import com . dotcms . mock . request . MockInternalRequest ; import com . dotcms . mock . response . BaseResponse ;", "assertEquals ( 1 , ( ( GraphFilters ) operation ) . getView ( ) . getEntityGroups ( ) . size ( ) ) ; assertEquals ( 0 , ( ( GraphFilters ) operation ) . getView ( ) . getEdgeGroups ( ) . size ( ) ) ; final Set < EntityId > seeds = new HashSet < > ( ) ; for ( final Object seed : ( ( GetRDDOfElements ) operation ) . getInput ( ) ) { seeds . add ( ( EntitySeed ) seed ) ; }", "import org . n52 . sos . ds . hibernate . dao . observation . series . AbstractSeriesValueDAO ; import org . n52 . sos . ds . hibernate . dao . observation . series . AbstractSeriesValueTimeDAO ; import org . n52 . sos . ds . hibernate . entities . observation . legacy . AbstractValuedLegacyObservation ; import org . n52 . sos . ds . hibernate . entities . series . values . SeriesValue ; import org . n52 . sos . ds . hibernate . entities . values . AbstractValue ;", "import com . google . common . collect . ImmutableList ; import it . unibz . inf . ontop . injection . NativeQueryLanguageComponentFactory ; import it . unibz . inf . ontop . model . Function ; import it . unibz . inf . ontop . model . CQIE ; import it . unibz . inf . ontop . model . DatalogProgram ; import it . unibz . inf . ontop . ontology . DataPropertyExpression ; import it . unibz . inf . ontop . ontology . OClass ; import it . unibz . inf . ontop . ontology . ObjectPropertyExpression ; import it . unibz . inf . ontop . ontology . OntologyFactory ; import it . unibz . inf . ontop . ontology . impl . OntologyFactoryImpl ; import it . unibz . inf . ontop . owlrefplatform . core . dagjgrapht . TBoxReasoner ; import it . unibz . inf . ontop . model . Function ; import it . unibz . inf . ontop . model . DatalogProgram ; import it . unibz . inf . ontop . model . Predicate ; import it . unibz . inf . ontop . model . Predicate ; import it . unibz . inf . ontop . model . Term ; import it . unibz . inf . ontop . owlrefplatform . core . dagjgrapht . TBoxReasoner ; import it . unibz . TBoxReasoner ;", "import org . apache . xmlgraphics . image . loader . ImageException ; import org . apache . xmlgraphics . image . loader . ImageFlavor ; import org . apache . xmlgraphics . image . loader . ImageInfo ; import org . apache . xmlgraphics . image . loader . ImageManager ; import org . apache . xmlgraphics . image . loader . ImageSessionContext ; import org . apache . xmlgraphics . image . loader . util . ImageUtil ;", "@ Test ( enabled = true ) public void checkPermissionToEditClientInPendingApprovalState ( ) { String firstName = \"Edit\" ; String lastName = \"Permission\" ; DefineHiddenMandatoryFieldsPage mandatoryFieldsPage = navigationHelper . navigateToAdminPage ( ) . navigateToDefineHiddenMandatoryFields ( ) ; mandatoryFieldsPage . uncheckMandatoryCitizenShip ( ) ; mandatoryFieldsPage . uncheckMandatoryEthnicity ( ) ; mandatoryFieldsPage . uncheckMandatoryMaritalStatus ( ) ; mandatoryFieldsPage . submit ( ) ; CreateClientEnterPersonalDataPage . SubmitFormParameters clientParams = clientParams ( ) ; clientParams . setFirstName ( firstName ) ; clientParams . setLastName ( lastName ) ; ClientViewDetailsPage clientPage = clientTestHelper . createNewClient ( \"group1\" , clientParams ) ; clientPage . editPersonalInformation ( ) . submitAndNavigateToViewDetailsPage ( clientParams ) ; CustomerChangeStatusPage changeStatusPage = clientPage . navigateToCustomerChangeStatusPage ( ) ; EditCustomerStatusParameters parameters = new EditCustomerStatusParameters ( ) ; parameters . setClientStatus ( ClientStatus . PARTIAL ) ; parameters . setNote ( \"test\" ) ; changeStatusPage . setChangeStatusParametersAndSubmit ( parameters ) ; ManageRolePage manageRolePage = navigationHelper . navigateToAdminPage ( ) . navigateToManageRolePage ( \"Admin\" ) ; manageRolePage . disablePermission ( \"3\" ) ; manageRolePage . enablePermission ( \"3_0_0\" ) ; manageRolePage . enablePermission ( \"3_0_2\" ) ; manageRolePage . enablePermission ( \"3_0_3\" ) ; manageRolePage . setChangeStatusParametersAndSubmit ( parameters ) ; ManageRolePage manageRolePage . submitAndGotoViewRolesPage ( ) ; manageRolePage . navigateToManageRolePage (", "import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . LinkedList ;", "public InstanceOfSnippetsTemplates ( MetaAccessProvider runtime , Assumptions assumptions , TargetDescription target , Class < T > snippetsClass ) { super ( runtime , assumptions , snippetsClass ) ; }", "Assert . assertEquals ( \"case 2\" , experiment , response . getEntity ( ) ) ;", "", "TableId tableId = tls . extent . getTableId ( ) ; TableConfiguration tableConf = this . master . getConfigurationFactory ( ) . getTableConfiguration ( tableId ) ;", "if ( owner != null && getOwner ( ) != owner ) { }", "if ( ! hasKey ( \"toggles\" , \"NecronNotifications\" ) ) writeBooleanConfig ( \"toggles\" , \"NecronNotifications\" , false ) ; if ( ! hasKey ( \"toggles\" , \"BonzoTimer\" ) ) writeBooleanConfig ( \"toggles\" , \"BonzoTimer\" , false ) ; if ( ! hasKey ( \"toggles\" , \"BlockBreakingFarms\" ) ) writeBooleanConfig ( \"toggles\" , \"BlockBreakingFarms\" , false ) ; if ( ! hasKey ( \"toggles\" , \"AutoSkillTracker\" ) ) writeBooleanConfig ( \"toggles\" , \"AutoSkillTracker\" , false ) ;", "addCheckboxForPref ( content , \"use native avrdude for uploading code\" , \"uploader.useNative\" , false ) ;", "public static void prepareNewNamespaceState ( String instanceId , Namespace . ID namespaceId , String namespace , NodeExistsPolicy existsPolicy ) throws KeeperException , InterruptedException { log . debug ( \"Creating ZooKeeper entries for new namespace {} (ID: {})\" , namespace , namespaceId ) ; }", "* @ param destinationFolder * the destinationFolder to set * @ VisibleForTesting", "* Send a post request with header values \"scenario\" : \"positive\" , \"value\" : 7e120 or \"scenario\" : \"negative\" , \"value\" : - 3.0", "", "", "import org . apache . log4j . Logger ; import org . fedoraproject . candlepin . auth . Principal ; import org . fedoraproject . candlepin . model . SubscriptionsCertificate ; import org . fedoraproject . candlepin . model . SubscriptionsCertificateCurator ;", "@ ConditionalOnClass ( SessionFactory . class ) @ ConditionalOnBean ( SessionFactory . class ) @ ConditionalOnEnabledHealthIndicator ( \"neo4j\" ) public static class Neo4jHealthIndicatorConfiguration extends CompositeHealthIndicatorConfiguration < Neo4jHealthIndicator , SessionFactory > { private final Map < String , SessionFactory > sessionFactories ; public Neo4jHealthIndicatorConfiguration ( Map < String , SessionFactory > sessionFactories ) { this . sessionFactories = sessionFactories ; } @ Bean @ ConditionalOnMissingBean ( name = \"neo4jHealthIndicator\" ) public HealthIndicator neo4jHealthIndicator ( ) { return createHealthIndicator ( this . sessionFactories ) ; } } @ Configuration @ ConditionalOnClass ( RedisConnectionFactory . class )", "public Blueprint ( @ JsonProperty ( \"name\" ) final String name , @ JsonProperty ( \"sshKey\" ) final String sshKey ,", "final var principal = resolver . resolve ( credential , Optional . of ( principalOut ) , Optional . of ( new SimpleTestUsernamePasswordAuthenticationHandler ( ) ) ) ;", "Allocator allocator , AtomicLong bytesUsed , IOContext context ) throws IOException { super ( dir , id , CODEC_NAME , VERSION_CURRENT , bytesUsed , context ) ; ByteBlockPool pool = new ByteBlockPool ( allocator ) ; hash = new BytesRefHash ( pool , BytesRefHash . DEFAULT_CAPACITY , new TrackingDirectBytesStartArray ( BytesRefHash . DEFAULT_CAPACITY , bytesUsed ) ) ;", "notifyChangeEventListeners ( EventType . REMOVED , snapshot , index ) ; notifyListenersOnDataChanged ( ) ;", "import org . apache . lucene . util . Bits ;", "import static org . junit . jupiter . api . Assertions . * ; import static org . mockito . Mockito . * ;", "rightSkipRow = new ValuesHolderRow ( rowType ) ; assert rightRow != null ;", "setState ( 340 ) ;", "Entitlement e = entitler . entitleByProduct ( parentSystem , virtHost , new Integer ( \"1\" ) ) ;", "when ( mockPersistence . getLogs ( anyString ( ) , anyListOf ( String . class ) , anyInt ( ) , anyListOf ( Log . class ) ) ) . thenAnswer ( getGetLogsAnswer ( 10 ) ) ;", "\"hawkbit.server.ddi.security.authentication.header.authority\" , String . class , Boolean . FALSE . toString ( ) , TenantConfigurationStringValidator . class ) ,", "", "", "import net . minecraft . entity . player . EntityPlayer ;", "return with ( new MongeElkan ( new SmithWatermanGotoh ( ) ) ) . tokenize ( new WhitespaceTokenizer ( ) ) . build ( ) ;", "FilteringParserDelegate p = new FilteringParserDelegate ( JSON_F . createParser ( ObjectReadContext . empty ( ) , SIMPLE ) , new IndexMatchFilter ( 1 ) , Inclusion . INCLUDE_ALL_AND_PATH , true ) ;", "import java . util . LinkedList ; import java . util . List ;", "import java . util . ArrayList ; import java . util . List ; import java . util . Set ; import static com . google . common . base . Preconditions . checkState ; import org . kairosdb . plugin . Aggregator ;", "private static final Logger LOG = LoggerFactory . getLogger ( Utils . class ) ; public static Logger LOG = LoggerFactory . getLogger ( Utils . class ) ;", "mPendingAddInfo . minSpanX = mPendingAddInfo . minSpanY = 1 ;", "public static SystemEventsAPI getSystemEventsAPI ( ) { return ( SystemEventsAPI ) getInstance ( APIIndex . SYSTEM_EVENTS_API ) ; } public static FieldApi getFieldAPI2 ( ) { return new FieldApiImpl ( ) ; } public static User systemUser ( ) throws DotDataException { return getUserAPI ( ) . getSystemUser ( ) ; } public static Host systemHost ( ) throws DotDataException { return getHostAPI ( ) . findSystemHost ( ) ; }", "pushFactory . create ( db , ident , testRepo , PushOneCommit . SUBJECT , FILE_NAME , new String ( CONTENT_OLD , StandardCharsets . UTF_8 ) ) ; return push . rm ( \"refs/for/master\" ) . getChangeId ( ) ;", "@ Override public void publish ( Object data ) { }", "import javax . persistence . EntityManager ; import javax . persistence . EntityManagerFactory ; import javax . persistence . Persistence ;", "", "import com . apollocurrency . aplwallet . apl . core . rest . endpoint . NodeInfoController ; import com . apollocurrency . aplwallet . apl . core . rest . filters . SecurityInterceptor ; import com . apollocurrency . aplwallet . apl . core . rest . filters . Secured2FA ; import com . apollocurrency . aplwallet . apl . core . rest . filters . Secured2FAInterceptor ;", "import cm . aptoide . pt . download . DownloadAnalytics ; import cm . aptoide . pt . download . DownloadCompleteAnalytics ; import cm . aptoide . pt . download . DownloadMirrorEventInterceptor ; import cm . aptoide . pt . download . PaidAppsDownloadInterceptor ;", "setState ( 478 ) ;", "boolean isSrcLocal , PathFilter deletePathFilter , boolean isMmTable , boolean purge , List < Path > newFiles ) throws HiveException {", "package net . sourceforge . pmd . lang . java . symboltable ;", "", "setState ( 422 ) ; _errHandler . sync ( this ) ;", "", "private Handler mHeartbeatHandler ; private Runnable mHeartbeatRunnable ; private Simperium mSimperium ; private boolean mIsInBackground = true ;", "setState ( 748 ) ;", "setState ( 588 ) ;", "EntitlementUserApi entitlementApi = BrainDeadProxyFactory . createBrainDeadProxyFor ( EntitlementUserApi . class ) ; BillCycleDayCalculator bcdCalculator = new BillCycleDayCalculator ( catalogService , entitlementApi ) ; CallContextFactory factory = new DefaultCallContextFactory ( clock ) ; DefaultEntitlementBillingApi api = new DefaultEntitlementBillingApi ( factory , null , dao , accountApi , bcdCalculator ) ; SortedSet < BillingEvent > events = api . getBillingEventsForAccountAndUpdateAccountBCD ( new UUID ( 0L , 0L ) ) ;", "namesystem . getBlockManager ( ) . getDatanodeManager ( ) . refreshNodes ( new HdfsConfiguration ( ) ) ;", "Function_defContext funcDef = null ; Float cost = null ; String language = null ;", "", "e = entitler . entitleByProduct ( childVirtSystem , provisioning , new Integer ( \"1\" ) ) ;", "", "ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; if ( ! this . loaders . isEmpty ( ) ) { for ( ChunkLoader loader : this . loaders . values ( ) ) { int chunkX = ( int ) loader . getX ( ) > > 4 ; int chunkZ = ( int ) loader . getZ ( ) > > 4 ; long index = Level . chunkHash ( chunkX , chunkZ ) ; int existingLoaders = Math . max ( 0 , this . chunkTickList . getOrDefault ( index , 0 ) ) ; this . chunkTickList . put ( index , existingLoaders + 1 ) ; for ( int chunk = 0 ; chunk < chunksPerLoader ; ++ chunk ) { int dx = random . nextInt ( 2 * randRange ) - randRange ; int dz = random . nextInt ( 2 * randRange ) - randRange ; long hash = Level . chunkHash ( dx + chunkX , dz + chunkZ ) ; if ( ! this . chunkTickList . containsKey ( hash ) && provider . isChunkLoaded ( hash ) ) { this . chunkTickList . put ( hash , - 1 ) ; }", "public static I_C_BP_BankAccount createBpBankAccount ( @ NonNull final BPartnerId bPartnerId , @ NonNull final CurrencyId currencyId , @ Nullable String iban ) { final I_C_BP_BankAccount bpBankAccount = newInstance ( I_C_BP_BankAccount . class ) ; bpBankAccount . setIBAN ( iban ) ; bpBankAccount . setC_BPartner_ID ( bPartnerId . getRepoId ( ) ) ; bpBankAccount . setC_Currency_ID ( currencyId . getRepoId ( ) ) ; saveRecord ( bpBankAccount ) ; return bpBankAccount ; }", "Pseudonymizer pseudonymizer = Pseudonymizer . getDefault ( userService :: hasRight , I18nProperties . getCaption ( Captions . inaccessibleValue ) ) ; visitSummaryDetails . forEach ( v -> { SymptomsDto symptoms = SymptomsFacadeEjb . toDto ( v . getSymptoms ( ) ) ;", "public DFAState . PredPrediction [ ] getPredicatePredictions ( BitSet ambigAlts , SemanticContext [ ] altToPred ) { }", "", "@ Override public boolean hasCapability ( Capability < ? > capability , @ Nullable EnumFacing facing ) { return capability == CapabilityFluidHandler . FLUID_HANDLER_CAPABILITY || super . hasCapability ( capability , facing ) ; } @ Nullable @ Override public < T > T getCapability ( Capability < T > capability , @ Nullable EnumFacing facing ) { if ( capability == CapabilityFluidHandler . FLUID_HANDLER_CAPABILITY ) { return ( T ) new FluidHandlerWrapper ( this , facing ) ; } return super . getCapability ( capability , facing ) ; }", "", "@ Override public List < ClientSessionChannelListener > getListeners ( ) { }", "public void autoGenerateAlgorithm ( EntityType sourceEntityType , EntityType targetEntityType , EntityMapping mapping , Attribute targetAttribute )", "objectsToRender . add ( new RenderEntry ( LogisticsNewRenderPipe . supports . get ( PipeSupport . EAST_UP ) , new I3DOperation [ ] { LogisticsNewRenderPipe . basicPipeTexture } ) ) ; objectsToRender . add ( new RenderEntry ( LogisticsNewRenderPipe . supports . get ( PipeSupport . WEST_UP ) , new I3DOperation [ ] { LogisticsNewRenderPipe . basicPipeTexture } ) ) ; objectsToRender . add ( new RenderEntry ( LogisticsNewRenderPipe . supports . get ( PipeSupport . UP_SIDE ) , new I3DOperation [ ] { LogisticsNewRenderPipe . basicPipeTexture } ) ) ; objectsToRender . add ( new RenderEntry ( LogisticsNewRenderPipe . supports . get ( PipeSupport . DOWN_SIDE ) , new I3DOperation [ ] { LogisticsNewRenderPipe . basicPipeTexture } ) ) ;", "JsonArray jsonArgs = FunctionUtil . paramAsJsonArray ( functionName , args , 1 ) ; List < Object > execArgs = jsonArrayFunctions . jsonArrayAsMTScriptList ( jsonArgs ) ;", "public TableBase getSubTable ( long columnIndex , long rowIndex ) { }", "import org . sufficientlysecure . keychain . helper . ContactHelper ; import org . sufficientlysecure . keychain . service . KeychainIntentService ; import org . sufficientlysecure . keychain . service . KeychainIntentServiceHandler ; import org . sufficientlysecure . keychain . service . SaveKeyringParcel ; import org . sufficientlysecure . keychain . util . Notify ; import java . util . regex . Matcher ;", "module . writeToNBT ( nbttagcompound ) ;", "", "public int getRetryCount ( ) { return retryCount ; } public void setRetryCount ( int retryCount ) { this . retryCount = retryCount ; } public int getRetryWaitMs ( ) { return retryWaitMs ; } public void setRetryWaitMs ( int retryWaitMs ) { this . retryWaitMs = retryWaitMs ; } public long getMaxSingleUploadSizeBytes ( ) { return maxSingleUploadSizeBytes ; } public void setMaxSingleUploadSizeBytes ( long maxSingleUploadSizeBytes ) { this . maxSingleUploadSizeBytes = maxSingleUploadSizeBytes ; } public long getUploadPartSize ( ) { return uploadPartSize ; } public void setUploadPartSize ( long uploadPartSize ) { this . uploadPartSize = uploadPartSize ; }", "public static boolean isTablet ( ) { Log . i ( \"this device DeviceInfo.screenSize: \" + DeviceInfo . screenSize + \" \" + DeviceInfo . displayDensity ) ; Log . i ( \"this device screenInchesByMetrics: \" + DeviceInfo . screenInchesByMetrics + \" screenInchesByConfig: \" + DeviceInfo . screenInchesByConfig ) ; final boolean isTabletByResources = appContext . getResources ( ) . getBoolean ( R . bool . isTablet ) ; final boolean isTabletByScreen = DeviceInfo . screenSize > 2 && DeviceInfo . screenInchesByMetrics > 7f ; Log . i ( \"isTabletByResources: \" + isTabletByResources + \" isTabletByScreen: \" + isTabletByScreen + \" DeviceInfo.screenSize: \" + DeviceInfo . screenSize ) ; return isTabletByResources || isTabletByScreen ; } public static float px2dp ( float px ) { if ( isInitialzed ) return ( float ) ( ( px / displayMetrics . density ) + 0.5 ) ; }", "import org . testng . AssertJUnit ; import org . testng . annotations . Test ;", "import com . guokr . simbase . events . BasisListener ; import com . guokr . simbase . events . RecommendationListener ; import com . guokr . simbase . events . VectorSetListener ; private String name ; public interface SimEngine { public void load ( SimCallback callback ) ; public void save ( SimCallback callback ) ; public void del ( ) { public void run ( ) { try { table . revise ( schema ) ; } catch ( Throwable e ) { logger . error ( \"SimEngine Error:\" , e ) ; } } } ) ; } public void add ( final int docid , final float [ ] distr ) { service . execute ( new Runnable ( ) { public void run ( ) { if ( debug ) { if ( debug ) { try { table . revise ( schema ) ; } catch ( Throwable e ) { logger . error ( \"SimEngine Error:\" , e ) ; } } } ) ; } public void add ( final int docid , final float [ ] distr ) { service . execute ( new Runnable ( ) { public void run ( ) { if ( debug ) { if ( service . execute ( new Runnable ( ) { public void run ( ) { if ( debug ) { if ( debug ) { if ( service . execute ( new Runnable ( ) { public void run ( ) { if ( new Runnable ( ) { public void run ( ) { if ( debug ) { } catch ( Throwable e ) { logger . error ( \"SimEngine Error:\" , e ) ; } } } ) ; } } } ) ; } public void del ( ) { public void run ( ) { if ( new Runnable ( ) { public void run ( ) { if ( new Runnable ( ) { public void run ( ) { if ( new Runnable ( ) { public void run ( ) { if ( new Runnable ( ) { public void run ( ) { if ( debug ) {", "", "public AstJavaInvokeInstruction JavaInvokeInstruction ( int iindex , int result [ ] , int result [ ] , int [ ] params , int exception , CallSiteReference site ) { return new AstJavaInvokeInstruction ( iindex , result , params , exception , site ) ; }", "import cm . aptoide . pt . social . commentslist . PostCommentsFragment ; import cm . aptoide . pt . reviews . LatestReviewsFragment ; import cm . aptoide . pt . reviews . ListReviewsFragment ; import cm . aptoide . pt . reviews . RateAndReviewsFragment ; import cm . aptoide . pt . search . model . SearchAdResult ;", "public void cylinderBrush ( InjectedValueAccess context , @ Arg ( desc = \"The pattern of blocks to set\" ) Pattern pattern , @ Arg ( desc = \"The radius of the cylinder\" , def = \"2\" ) Expression radius , @ Arg ( desc = \"The height of the cylinder\" , def = \"1\" ) int height , @ Switch ( name = 'h' , desc = \"Create hollow cylinders instead\" ) boolean hollow ) throws WorldEditException { }", "index = new Engine . Index ( newUid ( \"1\" ) , doc , index . seqNo ( ) , 1L", "", "private void updateNillable ( EntityType entityType , Attribute attr , Attribute updatedAttr )", "import org . stagemonitor . core . util . CompletedFuture ; import org . stagemonitor . core . util . ExecutorUtils ;", "Menu image = getMenu ( \"Image\" ) ; Menu imageType = getMenu ( \"Image>Type\" ) ;", "return new RetryableFeignBlockingLoadBalancerClient ( delegate , loadBalancerClient , loadBalancedRetryFactory ) ;", "GCResource gcResource = new GCResource ( \"SampleSun1_7_0G1_DateStamp_Detailed-mixedLine2.txt\" ) ; gcResource . getLogger ( ) . addHandler ( handler ) ; DataReader reader = getDataReader ( gcResource ) ;", "Point2D menuPos = this . wrapper . getToplevel ( ) . screenToLocal ( screenPos ) ; this . wrapper . getToplevel ( ) . showFunctionMenuAt ( menuPos . getX ( ) , menuPos . getY ( ) , false ) ;", "", "session . addListener ( ( ServerSession . DeQueueListener ) ( s , queue ) -> { long lastTimeStamp = 0 ; for ( Iterator < ServerMessage > iterator = queue . iterator ( ) ; iterator . hasNext ( ) ; ) { ServerMessage message1 = iterator . next ( ) ; if ( channelName . equals ( message1 . getChannel ( ) ) ) { long timeStamp = Long . parseLong ( message1 . get ( Message . TIMESTAMP_FIELD ) . toString ( ) ) ; if ( timeStamp <= lastTimeStamp + toleranceSeconds ) { iterator . remove ( ) ; } else { keptMessages . incrementAndGet ( ) ; lastTimeStamp = timeStamp ;", "import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . ArrayList ; import java . util . Date ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import java . util . Vector ; import java . util . concurrent . ConcurrentHashMap ; import java . util . logging . Logger ; import static org . mil . nga . giat . data . elasticsearch . ElasticAttribute . ElasticGeometryType ;", "import static org . assertj . core . api . Assertions . assertThatExceptionOfType ; import static org . assertj . core . api . Assertions . assertThat ;", "void constructHKey ( final Session session , Exchange hEx , RowDef rowDef , RowData rowData , boolean insertingRow ) throws PersistitException , InvalidOperationException { }", "setState ( 580 ) ;", "import com . xtremelabs . robolectric . tester . android . util . TestAnimationListener ; import com . xtremelabs . robolectric . util . TestAttributeSet ;", "boolean isOpen ( ) { }", "import java . util . ArrayList ; import java . util . List ; import java . util . stream . Collectors ; import java . util . stream . Stream ;", "\"\\tI\\4J\\tJ\\4K\\tK\\4L\\tL\\4M\\tM\\4N\\tN\\4O\\tO\\4P\\tP\\4Q\\tQ\\3\\2\\3\\2\\3\\2\\3\\2\\3\\2\\3\" + \"\\2\\5\\2\u00c3\u0124\u00c2\u00a8\\n\\2\\3\\2\\3\\2\\5\\2\u00c3\u0124\u00c2\u00ac\\n\\2\\3\\3\\3\\3\\3\\3\\3\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\4\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\5\\5\u00c3\u0124\u00c2\u00be\\n\\5\\3\\5\\3\\5\\7\\5\u00c3\u0125\u00c4\u00a4\\n\\5\\f\" + \"\\5\\16\\5\u00c3\u0125\u00c4\u00a7\\13\\5\\3\\5\\3\\5\\3\\5\\3\\5\\5\\5\\5\u00c3\u0125\u00c4\u00ab\\n\\5\\3\\5\\3\\5\\7\\5\u00c3\u0125\u00c4\u00af\\n\\5\\f\\5\\16\" + \"\\5\u00c3\u0125\u00c4\u00a7\\13\\5\\3\\5\\3\\5\\3\\5\\5\\5\u00c3\u0125\u00c4\u00ab\\n\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\3\\5\\5\\5\\5\\5\\5\\5\\5\\3\\5\\3\\5\\5\\5\\5\\5\\7\\5\u00c3\u0125\u00c4\u00ab\\n\\5\\f\\5\\16\\5\u00c3", "config . m_enableIV2 = true ; config . m_startAction = StartAction . REJOIN ;", "import ucar . nc2 . grib . collection . Grib ; import ucar . unidata . util . test . category . NeedsCdmUnitTest ; import ucar . unidata . util . test . TestDir ;", "public Model ( final IntegratedPropagatorBuilder [ ] builders , final List < ObservedMeasurement < ? > > measurements , final ParameterDriversList estimatedMeasurementsParameters , final ModelObserver observer ) { }", "if ( baseRepo . supports ( ) . folders ( ) ) { if ( designRepo . supports ( ) . branches ( ) ) { manifestBuilder . setBranchName ( ( ( BranchRepository ) designRepo ) . getBranch ( ) ) ; } }", "prop . setComment ( \"Set this to true for less metal use in Galacticraft recipes (makes the game easier).\" ) ; prop . setLanguageKey ( \"gc.configgui.quick_mode\" ) ;", "if ( nativeOnly || filterBuilder . toString ( ) . equals ( QueryBuilders . matchAllQuery ( ) . toString ( ) ) ) { filterBuilder = QueryBuilders . wrapperQuery ( value ) ; }", "import java . awt . Cursor ; import java . beans . PropertyChangeListener ;", "sequenceTypes . put ( \"boolean\" , new SequenceType ( ItemType . booleanItem , SequenceType . Arity . One ) ) ; sequenceTypes . put ( \"boolean?\" , new SequenceType ( itemTypes . get ( \"boolean\" ) , SequenceType . Arity . OneOrZero ) ) ;", "@ Override public void notifyClients ( ObjectContainer container , ClientContext context ) { }", "if ( jj_3R_357 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_358 ( ) ) return true ; }", "final String lf = _lf ( ) ; String encoded = b64variant . encode ( data , false , lf ) ; _emitter . emit ( new ScalarEvent ( Optional . empty ( ) , Optional . ofNullable ( TAG_BINARY ) , EXPLICIT_TAGS , encoded , STYLE_BASE64 ) ) ;", "accountsDao . removeAccount ( sidToBeRemoved ) ; clientDao . removeClients ( sidToBeRemoved ) ;", "Query studyQuery = new Query ( StudyDBAdaptor . QueryParams . UID . key ( ) , studyUid ) ; DataResult queryResult = dbAdaptorFactory . getCatalogStudyDBAdaptor ( ) . nativeGet ( studyQuery , QueryOptions . empty ( ) ) ;", "setState ( 303 ) ;", "CONNECTOR_INPUT_NAME , new ExpressionBuilder ( ) . createGroovyScriptExpression ( \"script\" , script , Long . class . getName ( ) , new ExpressionBuilder ( ) . createEngineConstant ( ExpressionConstants . API_ACCESSOR ) ,", "", "List < String > sampleIds = new ArrayList < String > ( sampleIdSet ) ; sortSampleIds ( cancerStudy . getInternalId ( ) , patientIdsStr , sampleIds ) ; request . setAttribute ( SAMPLE_ID , sampleIds ) ;", "private final PredefinedShelfService predefinedShelfService ;", "", "if ( c != null ) c . pre = pre ;", "", "import org . sufficientlysecure . keychain . R ; import org . sufficientlysecure . keychain . pgp . PgpKeyHelper ;", "private List < String > simpleList = new ArrayList < > ( ) ; private String rawSensitiveAddresses = \"http://user:password@localhost:8080,http://user2:password2@localhost:8082\" ;", "\"conc.dp.DiningServer.state\" , MHPType . PRECISE ) ; testLeaksFound ( ana , 96 ) ;", "setState ( 693 ) ;", "import java . nio . file . Path ;", "ArrayList < Object > children = new ArrayList < > ( ) ; if ( _policy != null )", "@ EnableConfigurationProperties ( { ClientProperties . class , InstanceProperties . class } ) @ ConditionalOnWebApplication", ". recursiveScanPackages ( BaseDTO . class )", "FormResult < String > result = getStepResult ( ) . getResult ( ) ;", "* @ param context the principal context of the event processor * @ param clientIds a { @ link List } of { @ link String } s containing the specified tracking event processor", "for ( int p = 0 ; p < percent . length ( ) ; ++ p ) { System . out . print ( '\\b' ) ; }", "", "struct . success = new TruncateTableResponse ( ) ; struct . success . read ( iprot ) ;", "prop . setComment ( \"If this is enabled, silicon ore will generate on the overworld.\" ) ; prop . setLanguageKey ( \"gc.configgui.enable_silicon_ore_gen\" ) . setRequiresMcRestart ( true ) ;", "getTask ( ) . classpath ( jarFile ( \"library.jar\" ) ) ; getTask ( ) . providedClasspath ( jarFile ( \"provided-library.jar\" ) ) ; executeTask ( ) ;", "private class SubscribeCommand implements ConsoleCommand { }", "DataverseName = null , itemTypeName = null , itemTypeFullyQualifiedName = null ; switch ( itemTypeExpr . getTypeKind ( ) ) { case TYPEREFERENCE : TypeReferenceExpression itemTypeRefExpr = ( TypeReferenceExpression ) itemTypeExpr ; Identifier itemTypeDataverseIdent = itemTypeRefExpr . getIdent ( ) . first ; itemTypeDataverseName = itemTypeDataverseIdent != null && itemTypeDataverseIdent . getValue ( ) != null ? itemTypeDataverseIdent . getValue ( ) : dataverseName ; itemTypeName = itemTypeRefExpr . getIdent ( ) . second . getValue ( ) ; metaItemTypeDataverseName = metaItemTypeDataverseName + '.' + itemTypeName ; break ; case RECORD : break ; default : throw new CompilationException ( ErrorCode . COMPILATION_ILLEGAL_STATE , sourceLoc , String . valueOf ( itemTypeExpr . getTypeKind ( ) ) ) ; } TypeExpression metaItemTypeExpr = dd . getMetaItemType ( ) ; String metaItemTypeDataverseName = metaItemTypeRefExpr . getIdent ( ) ; if ( metaItemTypeExpr != null ) { switch ( metaItemTypeExpr . getTypeKind ( ) ) { case TYPEREFERENCE : TypeReferenceExpression metaItemTypeRefExpr = ( TypeReferenceExpression ) metaItemTypeExpr ; Identifier metaItemTypeDataverseIdent = metaItemTypeRefExpr . getIdent ( ) . first ; metaItemTypeDataverseName = metaItemTypeDataverseIdent . second . getValue ( ) ; metaItemTypeFullyQualifiedName = metaItemTypeName . second . getValue ( ) ; }", "import org . eclipse . ditto . protocoladapter . ProtocolAdapter ; import org . eclipse . ditto . services . connectivity . config . ClientConfig ; import org . eclipse . ditto . services . connectivity . config . ConnectivityConfig ; import org . eclipse . ditto . services . connectivity . config . ConnectivityConfigBuildable ; import org . eclipse . ditto . services . connectivity . config . ConnectivityConfigModifiedBehavior ; import org . eclipse . ditto . services . connectivity . config . ConnectivityConfigProvider ; import org . eclipse . ditto . services . connectivity . config . ConnectivityConfigProviderFactory ; import org . eclipse . ditto . services . connectivity . config . DittoConnectivityConfig ; import org . eclipse . ditto . services . connectivity . config . MonitoringConfig ;", "startContactDirectoryManager ( ) ; if ( isAggregationUpgradeNeeded ( ) ) { upgradeAggregationAlgorithm ( ) ; }", "props . add ( new GlobalProperty ( GP_DASHBOARD_CONCEPTS , \"5497\" , \"Comma delimited list of concepts ids to show on the patient header overview\" ) ) ; props . add ( new GlobalProperty ( \"dashboard.encounters.showEmptyFields\" , \"true\" , \"true/false whether or not to show empty fields on the 'View Encounter' window\" , BooleanDatatype . class , null ) ) ;", "preferences . edit ( ) . putInt ( \"pin_\" + dialog_id , pinnedMessageIds . get ( 0 ) ) . apply ( ) ;", "", "try ( Scanner s = conn . createScanner ( tableName , Authorizations . EMPTY ) ) { assertEquals ( 0 , Iterables . size ( s ) ) ; }", "public BlockRenderLayer getRenderLayer ( ) { return BlockRenderLayer . CUTOUT ; } @ SuppressWarnings ( \"deprecation\" ) @ Override @ SideOnly ( Side . CLIENT ) public boolean shouldSideBeRendered ( IBlockState blockState , IBlockAccess blockAccess , BlockPos pos , EnumFacing side ) { IBlockState iblockstate = blockAccess . getBlockState ( pos . offset ( side ) ) ; Block block = iblockstate . getBlock ( ) ; return block == this ? false : super . shouldSideBeRendered ( blockState , blockAccess , pos , side ) ; }", "import com . ning . billing . entitlement . api . user . SubscriptionTransition ; import com . ning . billing . util . eventbus . EventBus ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . util . Iterator ; import java . util . List ; import java . util . Stack ;", "assertThat ( config . isExamplesEnabled ( ) ) . isTrue ( ) ;", "setState ( 603 ) ;", "private final static StateMachine2 < State , Event , Snapshot > s_fsm = new StateMachine2 < State , Event , Snapshot > ( ) ; public static StateMachine2 < State , Event , Snapshot > getStateMachine ( ) { return s_fsm ; } static { s_fsm . addTransition ( null , Event . CreateRequested , Creating ) ; s_fsm . addTransition ( Creating , Event . OperationSucceeded , CreatedOnPrimary ) ; s_fsm . addTransition ( Creating , Event . OperationNotPerformed , BackedUp ) ; s_fsm . addTransition ( Creating , Event . OperationFailed , Error ) ; s_fsm . addTransition ( CreatedOnPrimary , Event . BackupToSecondary , BackingUp ) ; s_fsm . addTransition ( BackingUp , Event . OperationSucceeded , BackedUp ) ; s_fsm . addTransition ( BackingUp , Event . OperationFailed , Error ) ; } @ Override", "import com . scottlogic . deg . profile . custom . CustomConstraint ; import com . scottlogic . deg . profile . custom . CustomConstraintFactory ; import com . scottlogic . deg . profile . services . ConstraintService ; import com . scottlogic . deg . profile . services . FieldService ; import com . scottlogic . deg . profile . services . RuleService ; import com . scottlogic . deg . profile . validators . ConfigValidator ; import com . scottlogic . deg . profile . validators . CreateProfileValidator ; import com . scottlogic . deg . profile . validators . profile . ProfileValidator ;", "jj_la1 [ 75 ] = jj_gen ;", "import com . itextpdf . layout . property . AreaBreakType ; import com . itextpdf . layout . property . FloatPropertyValue ; import com . itextpdf . layout . property . OverflowPropertyValue ; import com . itextpdf . layout . property . Property ; import com . itextpdf . layout . property . VerticalAlignment ; import com . itextpdf . layout . property . ClearPropertyValue ; import com . itextpdf . layout . property . UnitValue ;", "final var pass = AbstractLdapProperties . LdapConnectionPoolPassivator . valueOf ( l . getPoolPassivator ( ) . toUpperCase ( ) ) ;", "collections . forEach ( collection -> { derivePropertyOrCollectionDescribedAsFromType ( collection ) ; derivePropertyOrCollectionImmutableFromSpec ( collection ) ; deriveCollectionDisabledFromImmutable ( collection ) ; }", "public MolgenisUser getCurrentUser ( )", "if ( logger . isLoggable ( Level . FINER ) ) logger . log ( Level . FINER , \" --> Returning ''{0}''\" , url . toString ( ) ) ; return ( url ) ;", "this . waitingForNextTick = true ; if ( TickSpeed . time_warp_start_time != 0 )", "@ SearchRestMethod ( name = \"item\" ) public WorkspaceItemRest findByItemUuid ( @ Parameter ( value = \"uuid\" , required = true ) UUID itemUuid , Pageable pageable ) { try { Context context = obtainContext ( ) ; Item item = itemService . find ( context , itemUuid ) ; WorkspaceItem workspaceItem = wis . findByItem ( context , item ) ; if ( workspaceItem == null ) { return null ; } if ( ! authorizeService . authorizeActionBoolean ( context , workspaceItem . getItem ( ) , Constants . READ ) ) { throw new AccessDeniedException ( \"The current user does not have rights to view the WorkflowItem\" ) ; } return converter . toRest ( workspaceItem , utils . obtainProjection ( ) ) ; } catch ( SQLException e ) { throw new RuntimeException ( e . getMessage ( ) , e ) ; } } @ Override public WorkspaceItem findDomainObjectByPk ( Context context , Integer id ) throws SQLException { return wis . find ( context , id ) ; }", "", "import net . minecraftforge . common . ForgeDirection ; import static net . minecraftforge . common . util . ForgeDirection . * ;", "public void testProblemIssue445 ( ) throws JSQLParserException { assertSqlCanBeParsedAndDeparsed ( \"SELECT E.ID_NUMBER, row_number() OVER (PARTITION BY E.ID_NUMBER ORDER BY E.DEFINED_UPDATED DESC) rn FROM T_EMPLOYMENT E\" ) ; } public void testProblemIssue437Index ( ) throws JSQLParserException { assertSqlCanBeParsedAndDeparsed ( \"select count(id) from p_custom_data ignore index(pri) where tenant_id=28257 and entity_id=92609 and delete_flg=0 and ( (dbc_relation_2 = 52701) and (dbc_relation_2 in ( select id from a_order where tenant_id = 28257 and 1=1 ) ) ) order by id desc, id desc\" , true ) ; }", "\"\\3\u00e6\u0124\u012d\u00ea\u013e\u00aa\u00e8\u0126\u00b3\u00eb\u00a7\u0143\u00e4\u0127\u00bc\u00e3\u00af\u00a7\u00e7\u0140\u0128\u00e5\u00a5\u00a4\\3 \u00cd\u00b9\\4\\2\\t\" + \"\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\\7\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\\13\" +", "synchronized ( mappingsToRefresh ) { mappingsToRefresh . add ( mapping ) ; } admin . log ( ) . info ( \"Deleted {} {} documents with bulk {}\" , r . getDeleted ( ) , mapping . typeAsString ( ) , op ) ;", "Assert . assertEquals ( \"0 12 24 36 48 60 72 84 96 108\" , result2 . toString ( ) . trim ( ) ) ; ucar . unidata . test . util . CompareNetcdf . compareData ( timeDataAll , result2 ) ;", "NORMAL ( MekanismLang . DISASSEMBLER_NORMAL , 20 , ( ) -> true ) , SLOW ( MekanismLang . DISASSEMBLER_SLOW , 8 , MekanismConfig . gear . disassemblerSlowMode ) , FAST ( MekanismLang . DISASSEMBLER_FAST , 128 , MekanismConfig . gear . disassemblerFastMode ) , VEIN ( MekanismLang . DISASSEMBLER_VEIN , 20 , MekanismConfig . gear . disassemblerVeinMining ) , EXTENDED_VEIN ( MekanismLang . DISASSEMBLER_EXTENDED_VEIN , 20 , MekanismConfig . gear . disassemblerExtendedMining ) , OFF ( MekanismLang . DISASSEMBLER_OFF , 0 , ( ) -> true ) ;", "{ callbackManager = CallbackManager . Factory . create ( ) ; LoginManager . getInstance ( ) . registerCallback ( callbackManager , new FacebookCallback < LoginResult > ( ) { @ Override public void onSuccess ( @ NonNull final LoginResult result ) { presenter . inputs . facebookAccessToken ( result . getAccessToken ( ) . getToken ( ) ) ; } @ Override public void onCancel ( ) { } @ Override public void onError ( @ NonNull final FacebookException error ) { } } ) ; addSubscription ( presenter . errors . confirmFacebookSignupError ( ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( this :: startFacebookConfirmationActivity ) ) ; addSubscription ( presenter . errors . tfaChallenge ( ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( __ -> startTwoFactorActivity ( true ) ) ) ; addSubscription ( errorMessages ( ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( this :: displayToast ) ) ; addSubscription ( presenter . outputs . facebookLoginSuccess ( ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( __ -> { onSuccess ( forward ) ; } ) ) ; } private Observable < String > errorMessages ( ) { return presenter . errors . missingFacebookEmailError ( ) . map ( ObjectUtils . coalesceWith ( unableToLoginString ) ) . mergeWith ( presenter . errors . facebookInvalidAccessTokenError ( ) . map ( ObjectUtils . coalesceWith ( unableToLoginString ) ) ) ; }", "ok . setOnAction ( e -> { DebugHelper dh = new DebugHelper ( ) ; Feedback feedback = null ; try { feedback = dh . processError ( new NexuException ( ) ) ; } catch ( IOException | JAXBException ex ) { LOGGER . warn ( ex . getMessage ( ) , ex ) ; } new Thread ( ( ) -> { try { Desktop . getDesktop ( ) . browse ( new URI ( getAppConfig ( ) . getTicketUrl ( ) ) ) ; } catch ( IOException | URISyntaxException ioe ) { LOGGER . error ( ioe . getMessage ( ) ) ; } } ) . start ( ) ; signalEnd ( feedback ) ; } ) ; cancel . setOnAction ( e -> signalUserCancel ( ) ) ;", "if ( getModifiers ( ) . contains ( Modifier . FINAL ) ) { }", "try ( final Tx tx = app . tx ( true , false , false ) ) { }", "\" \u00e2\u0136\u0124 \u00e2\u0136\u0136\u00e2\u0136\u0122Authority\\n\" + \" \u00e2\u0136\u0124 \u00e2\u0136\u013e\u00e2\u0136\u0122Title\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2\u0122\u00a6\u00e2", "setState ( 238 ) ;", "import org . apache . stratos . autoscaler . stub . AutoScalerServiceInvalidPartitionExceptionException ; import org . apache . stratos . autoscaler . stub . AutoScalerServiceInvalidPolicyExceptionException ; import org . apache . stratos . cloud . controller . pojo . CartridgeConfig ; import org . apache . stratos . cloud . controller . pojo . CartridgeInfo ; import org . apache . stratos . cloud . controller . pojo . Property ; import org . apache . stratos . cloud . controller . stub . CloudControllerServiceIllegalArgumentExceptionException ; import org . apache . stratos . cloud . controller . stub . CloudControllerServiceInvalidCartridgeDefinitionExceptionException ; import org . apache . stratos . cloud . controller . stub . CloudControllerServiceInvalidCartridgeTypeExceptionException ; import org . apache . stratos . cloud . controller . stub . CloudControllerServiceInvalidIaasProviderExceptionException ; import org . apache . stratos . cloud . controller . stub . CloudControllerServiceUnregisteredCartridgeExceptionException ;", "for ( Hash tip : tps ) { TransactionViewModel tx = TransactionViewModel . fromHash ( tangle , tip ) ; }", "import org . apache . cloudstack . api . APICommand ;", "protected TreeSet < OWLClassExpression > getSubClassesImpl ( OWLClassExpression concept ) { NodeSet < OWLClass > classes ; try { classes = reasoner . getSubClasses ( concept , true ) ; TreeSet < OWLClassExpression > subClasses = getFirstClasses ( classes ) ; subClasses . remove ( df . getOWLNothing ( ) ) ; if ( concept . isOWLThing ( ) ) { Iterator < OWLClassExpression > it = subClasses . iterator ( ) ; while ( it . hasNext ( ) ) { OWLClassExpression ce = ( OWLClassExpression ) it . next ( ) ; if ( ! ce . isAnonymous ( ) && ce . asOWLClass ( ) . getIRI ( ) . isReservedVocabulary ( ) ) { it . remove ( ) ; } } } return subClasses ; } private < T extends OWLObject > SortedSet < T > getRepresentativeEntities ( NodeSet < T > nodeSet ) { SortedSet < T > representatives = new TreeSet < T > ( ) ; for ( Node < T > node : nodeSet ) { if ( ! node . isBottomNode ( ) && ! node . isTopNode ( ) ) { representatives . add ( node . getRepresentativeElement ( ) ) ; } } return representatives ; }", "import org . elasticsearch . common . ParsingException ;", "Content theContent = img . content . getTarget ( ) ; if ( ! theContent . getJsonUri ( ) . isEmpty ( ) ) ContentHelper . updateJson ( context , theContent ) ; else ContentHelper . createJson ( context , theContent ) ;", "public byte [ ] [ ] processImage ( byte [ ] img_data , int imageWidth , int imageHeight , float [ ] joint_data , float [ ] sensor_data ,", "", "@ Export ( \"meslayerContinueWidget\" ) static Widget meslayerContinueWidget ; @ Export ( \"areaSoundEffectVolume\" ) static int areaSoundEffectVolume ;", "private int numberOfSegmentsSwing0 ; public void initializeForSwing ( double initialTime , List < ? extends YoSegmentedFrameTrajectory3D > transferCMPTrajectories , List < ? extends YoSegmentedFrameTrajectory3D > swingCMPTrajectories )", "InitializingOnDemandHolderIdiom demandHolderIdiom = InitializingOnDemandHolderIdiom . getInstance ( ) ; System . out . println ( demandHolderIdiom ) ; InitializingOnDemandHolderIdiom demandHolderIdiom2 = InitializingOnDemandHolderIdiom . getInstance ( ) ; System . out . println ( demandHolderIdiom2 ) ; ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking . getInstance ( ) ; System . out . println ( dcl1 ) ; ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking . getInstance ( ) ; System . out . println ( dcl2 ) ; EnumIvoryTower enumIvoryTower = EnumIvoryTower . INSTANCE ; EnumIvoryTower enumIvoryTower = EnumIvoryTower . INSTANCE ; EnumIvoryTower enumIvoryTower2 = EnumIvoryTower . INSTANCE ; System . out . println ( \"enumIvoryTower1=\" + enumIvoryTower1 ) ; EnumIvoryTower enumIvoryTower2 = EnumIvoryTower . INSTANCE ; System . out . println ( \"enumIvoryTower enumIvoryTower . INSTANCE ; System . out . println ( \"enumIvoryTower enumIvoryTower2 = EnumIvoryTower . INSTANCE ; System . out . println ( \"enumIvoryTower2 = EnumIvoryTower . INSTANCE ; System . out . println ( \"enumIvoryTower2 = EnumIvoryTower . INSTANCE ; System . out . println ( \"enumIvoryTower2=\" + enumIvoryTower . INSTANCE ; System . out . println ( \"enumIvoryTower2=\" + enumIvoryTower .", "private void resetRecords ( ) { records . clear ( ) ; boxes . clear ( ) ; logsContainer . removeAll ( ) ; logsContainer . repaint ( ) ; plugin . deleteLocalRecords ( ) ; } private void changeCollapse ( ) { boolean isAllCollapsed = isAllCollapsed ( ) ; for ( LootTrackerBox box : boxes ) { if ( isAllCollapsed ) { box . expand ( ) ; } else if ( ! box . isCollapsed ( ) ) { box . collapse ( ) ; } } updateCollapseText ( ) ; }", "createResource ( AUDIENCE , \"whois/test/person/TP1-TEST?password=test\" ) . request ( ) . delete ( String . class ) ; fail ( ) ; } catch ( BadRequestException e ) { assertThat ( e . getResponse ( ) . readEntity ( String . class ) ,", "OffsetDateTime value = READER . with ( DeserializationFeature . UNWRAP_SINGLE_VALUE_ARRAYS ) . with ( DeserializationFeature . ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT ) . readValue ( aposToQuotes ( \"[]\" ) ) ;", "* Get an array of Dictionaries of type & lt ; string , string & gt ; with value [ { '1' : 'one' , '2' : 'two' , '3' : 'three' } , { '4' : 'four' , '5' : 'five' , '6' : 'six' } , { '7' : 'seven' , '8' : 'eight' , '9' : 'nine' } ]", "private static final String KEY_INTERVAL = \"pigeon.providerlistener.interval\" ; private RegionManager regionManager = RegionManager . getInstance ( ) ; private static final String KEY_AVAILABLE_LEAST = \"pigeon.providerlistener.availableleast\" ;", "IPluginManager pluginManager ; IComponentDefinitionPlusUIFactory componentDefinitionPlusUIFactory ; DataSource configDataSource ; DataSource executionDataSource ;", "public static JsonDataset user_dump , followers_dump , following_dump ; private static File customized_config , schema_dir , conv_schema_dir ;", "protected void processReport ( final Project project , final SensorContext context , File report ) throws javax . xml . stream . XMLStreamException { }", "", "", "public String getSetterNamePattern ( ) { return setterNamePattern ; } public void setSetterNamePattern ( String pattern ) { this . setterNamePattern = pattern ; } public String getOptionalClassname ( ) { return optionalClassname ; } public void setOptionalClassname ( String optionalClassname ) { this . optionalClassname = optionalClassname ; }", "void servletNames ( ) throws IOException { BeanDefinition filterRegistrationBean = handleBeanDefinitionForClass ( ServletNamesFilter . class ) ; }", "", "public void removeEntry ( RosterEntry entry ) throws NoResponseException , XMPPErrorException , NotConnectedException , InterruptedException { }", "* @ param created the created timestamp of the Thing to be created . * @ param metadata the metadata of the Thing to be created .", "\"<gmd:MD_ReferenceSystem xmlns:gmd=\\\"\" + LegacyNamespaces . GMD + '\"' + \" xmlns:gmx=\\\"\" + LegacyNamespaces . GMX + '\"' + \" xmlns:gco=\\\"\" + LegacyNamespaces . GCO + '\"' + \" xmlns:xlink=\\\"\" + Namespaces . XLINK + \"\\\">\\n\" + \" <gmd:referenceSystemIdentifier>\" + \" <gmd:RS_Identifier>\" + \" <gmd:code>\\n\" + \" <gmx:Anchor xlink:href=\\\"SDN:L101:2:4326\\\">EPSG:4326</gmx:Anchor>\\n\" + \" </gmd:code>\\n\" + \" <gmd:codeSpace>\\n\" + \" <gco:CharacterString>L101</gco:CharacterString>\\n\" + \" </gmd:codeSpace>\\n\" + \" </gmd:RS_Identifier>\" + \" </gmd:referenceSystemIdentifier>\" + \"</gmd:RS_Identifier>\" + \" </gmd:ReferenceSystem>\" ; final ReferenceSystemMetadata md = unmarshal ( ReferenceSystemMetadata . class , expected ) ; final Identifier id = md . getName ( ) ;", "public ExistsAndMissingFilterSearchModelSupport < ProductProjection > prices ( ) { return existsAndMissingFilterSearchModelSupport ( \"prices\" ) ; } public TermFilterSearchModel < ProductProjection , String > sku ( ) { return stringSearchModel ( \"sku\" ) . filtered ( ) ; } public ScopedPriceFilterSearchModel < ProductProjection > scopedPrice ( ) { return new ScopedPriceFilterSearchModel < > ( this , \"scopedPrice\" ) ; }", "", "ContextMenu getChartContextMenu ( MouseEvent clickEvent ) throws MissingResourceException { if ( chartContextMenu != null ) { chartContextMenu . hide ( ) ; } chartContextMenu = ActionUtils . createContextMenu ( Arrays . asList ( new Action ( NbBundle . getMessage ( EventDetailChart . class , \"EventDetailChart.chartContextMenu.placeMarker.name\" ) ) { { setGraphic ( new ImageView ( new Image ( \"/org/sleuthkit/autopsy/timeline/images/marker.png\" , 16 , 16 , true , true , true ) ) ) ; setEventHandler ( ( ActionEvent t ) -> { if ( guideLine == null ) { guideLine = new GuideLine ( 0 , 0 , 0 , getHeight ( ) , getXAxis ( ) ) ; guideLine . relocate ( sceneToLocal ( clickEvent . getSceneX ( ) , 0 ) . getX ( ) , 0 ) ; guideLine . endYProperty ( ) . bind ( heightProperty ( ) . subtract ( getXAxis ( ) . heightProperty ( ) . subtract ( getXAxis ( ) . tickLengthProperty ( ) ) ) ) ; getChartChildren ( ) . add ( guideLine ) ; guideLine . setOnMouseClicked ( ( MouseEvent event ) -> { if ( event . getButton ( ) == MouseButton . SECONDARY ) { clearGuideLine ( ) ; event . consume ( ) ; } } ) ; } else { guideLine . relocate ( sceneToLocal ( clickEvent . getSceneX ( ) , 0 ) . getX ( ) , 0 ) , 0 ) ; } } ) ; } } , new ActionGroup ( NbBundle . getMessage ( this . getClass ( ) , \"EventDetailChart.contextMenu.zoomHistory.name\" ) , new Back ( controller ) , new Forward ( controller ) , new Forward ( controller ) , new Forward ( controller ) ) ) ) ; chartContextMenu . setAutoHide ( true ) ; return", "final Collection < Representation > generatedRelationships = new ArrayList < > ( ) ;", "if ( line . length != headers . length ) { throw new UnexpectedLiquibaseException ( \"CSV file \" + getFile ( ) + \" Line \" + lineNumber + \" has \" + line . length + \" values defined, Header has \" + headers . length + \". Numbers MUST be equal (check for unquoted string with embedded commas)\" ) ; } boolean needsPreparedStatement = false ; List < ColumnConfig > columns = new ArrayList < ColumnConfig > ( ) ;", "* Send x - ms - client - request - id = 9 C4D50EE - 2D 56 - 4 CD3 - 8152 - 34347D C9F2B0 in the header of the request", "", "public MediaServersDao getMediaServersDao ( ) { return mediaServersDao ; } @ Override public MediaResourceBrokerDao getMediaResourceBrokerDao ( ) { return mediaResourceBrokerDao ; } @ Override public ExtensionsConfigurationDao getExtensionsConfigurationDao ( ) { return extensionsConfigurationDao ; } @ Override", "public void onServiceConnected ( ComponentName component , IBinder service ) { if ( component . equals ( new ComponentName ( FileDisplayActivity . this , FileDownloader . class ) ) ) { Log . d ( TAG , \"Download service connected\" ) ; mDownloaderBinder = ( FileDownloaderBinder ) service ; } else if ( component . equals ( new ComponentName ( FileDisplayActivity . this , FileUploader . class ) ) ) { Log . d ( TAG , \"Upload service connected\" ) ; mUploaderBinder = ( FileUploaderBinder ) service ; } else { return ; } if ( mFileList != null ) mFileList . listDirectory ( ) ; }", "import org . semanticweb . ontop . ontology . ClassAssertion ; import org . semanticweb . ontop . owlrefplatform . core . basicoperations . * ;", "@ Nonnull public TestTypeRequest expand ( @ Nonnull final String value ) { addExpandOption ( value ) ; return this ; }", "} ) ; FilterChain chain = new FilterChain ( chip ) ; apsFrameExtractor = new ApsFrameExtractor ( chip ) ; chain . add ( apsFrameExtractor ) ;", "* @ throws SQLFeatureNotSupportedException", "import io . gravitee . rest . api . service . impl . swagger . parser . SwaggerV1Parser ; import io . gravitee . rest . api . service . impl . swagger . parser . SwaggerV2Parser ; import io . gravitee . rest . api . service . impl . swagger . parser . WsdlParser ;", "", "import io . nuls . network . netty . task . SaveNodeInfoTask ; import io . nuls . network . netty . task . ShareMineNodeTask ;", "import com . mycelium . wapi . wallet . colu . ColuSendRequest ; import com . mycelium . wapi . wallet . coins . families . BitcoinBasedCryptoCurrency ;", "public static final String SOURCE_URL = \"https://github.com/bitcoin-wallet/bitcoin-wallet\" ; public static final String BINARY_URL = \"https://github.com/bitcoin-wallet/bitcoin-wallet/releases\" ;", "private static final String LOCK_FILE_USED = \"lockFileUsed\" ; private static final String LARGE_VALUE_SIZE_IN_BYTES = \"largeValueSizeInBytes\" ; private static final String LARGE_VALUE_PATH = \"largeValuePath\" ;", "for ( VariantAnnotation annotation : variantStorageEngine . getAnnotation ( \"v2\" , null , new QueryOptions ( QueryOptions . EXCLUDE , consequenceTypes ) ) . getResults ( ) ) { assertThat ( annotation . getConsequenceTypes ( ) , VariantMatchers . isEmpty ( ) ) ; }", "@ Nonnull", "ManagedUserVM validUser = new ManagedUserVM ( ) ; validUser . setLogin ( \"john\" ) ; validUser . setPassword ( \"password\" ) ; validUser . setFirstName ( \"John\" ) ; validUser . setLastName ( \"Doe\" ) ; validUser . setEmail ( \"john@example.com\" ) ; validUser . setActivated ( true ) ; < % _ if ( databaseType == = 'mongodb' || databaseType == = 'couchbase' || databaseType == = 'sql' ) { _ % > validUser . setImageUrl ( \"http://placehold.it/50x50\" ) ; < % _ } _ % > validUser . setLangKey ( Constants . DEFAULT_LANGUAGE ) ; validUser . setAuthorities ( Collections . singleton ( AuthoritiesConstants . USER ) ) ;", "", "loadR2rml ( p ) ;", "BattleExDto battle = results . get ( i ) ; if ( battle == null ) { continue ; }", "import com . aol . cyclops . streams . BaseHotStreamImpl ;", "import java . util . Collection ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; import java . util . Map . Entry ; import com . google . common . collect . ArrayListMultimap ; import com . google . common . collect . Maps ; import com . google . common . collect . Multimap ; import net . minecraft . block . Block ; import net . minecraft . block . state . IBlockState ;", "val userTO = MAPPER . readTree ( result ) ; return Optional . ofNullable ( userTO ) ;", "private static final Logger logger = LoggerFactory . getLogger ( SimulatorTopology . class ) ; private static final String topoName = \"simulatorTopology\" ; private final int parallelism = 1 ; public static final String SIMULATOR_TOPIC = \"kilda-simulator\" ; public static final String COMMAND_TOPIC = \"kilda-test\" ; public static final String SIMULATOR_SPOUT = \"simulator-spout\" ; public static final String COMMAND_SPOUT = \"command-spout\" ; public static final String DEPLOY_TOPOLOGY_BOLT_STREAM = \"deploy_topology_stream\" ;", "return isDisplayRawInput ( ) ? in : dirPacket ;", "dc = handleDynParts ( db , table , tbd , ti , dpCtx ) ;", "", "@ After public void tearDown ( ) { client . close ( ) ; }", "import com . google . common . collect . ImmutableList ; import de . metas . cache . CCache ;", "_logger . debug ( \"Pushing associated users {} to comet {}\" , associatedUserIds , oortURL ) ; ClientSessionChannel channel = oortComet . getChannel ( generateSetiChannel ( generateSetiId ( oortURL ) ) ) ; channel . publish ( new SetiPresence ( true , associatedUserIds ) ) ;", "private final SimpleArrayMap < String , Long > activeNotifications = new SimpleArrayMap < > ( ) ;", "\"@Store(type=\\\"testStoreContainingInMemoryTable\\\", @Cache(size=\\\"10\\\"))\\n\" +", "import com . b2international . snowowl . core . terminology . ComponentCategory ; import com . b2international . snowowl . core . terminology . TerminologyComponent ; import com . b2international . snowowl . snomed . common . SnomedRf2Headers ;", "import org . springframework . social . connect . web . ReconnectFilter ; import org . springframework . social . facebook . config . annotation . EnableFacebook ;", "} , 100 , MIN_AUTOSYNC_INTERVAL ) ; supportInvalidateOptionsMenu ( ) ; super . onStart ( ) ; } @ Override protected void onStop ( ) { stopBalanceRefreshTimer ( ) ; MbwManager . getEventBus ( ) . unregister ( this ) ; _mbwManager . getVersionManager ( ) . closeDialog ( ) ; super . onStop ( ) ; } @ Override public void onBackPressed ( ) { if ( mBalanceTab . isSelected ( ) ) {", "requestJournal = requestJournalDisabled ? new DisabledRequestJournal ( ) : new InMemoryRequestJournal ( maxRequestJournalEntries ) ; this . transformers = transformers ; this . rootFileSource = rootFileSource ;", "if ( ! originalDownloadInfo . isNoIntegrity ( ) && noSizeInfo ) { throw new StopRequestException ( DownloadsStatus . STATUS_CANNOT_RESUME , \"can't know size of download, giving up\" ) ; }", "import com . quemb . qmbform . R ; import com . quemb . qmbform . descriptor . CellDescriptor ;", "", "import de . tum . in . www1 . exerciseapp . domain . enumeration . ParticipationState ;", "private LoadableDetachableModel < Boolean > annotationFinished = LoadableDetachableModel . of ( this :: loadAnnotationFinished ) ;", "logger . lifecycle ( \"putIfSet: \" + key + \" val(\" + propValue + \") // ext(\" + extensionValue + \")\" ) ;", "case ZERO_RTT : return createZeroRttWorkflow ( ) ; case FULL_ZERO_RTT : return createFullZeroRttWorkflow ( ) ; case FALSE_START : return createFalseStartWorkflow ( ) ;", "public int getRequiredPermissionLevel ( ) { return 0 ; } @ Override public String getName ( )", "ServiceDispatcher . lookup ( Components . lookup ( \"storage\" ) , sc . getHostName ( ) ) . send ( new DetachStorageVolumeType ( cluster . getNode ( vm . getServiceTag ( ) ) . getIqn ( ) , volume . getVolumeId ( ) ) ) ; vm . getVolumes ( ) . remove ( volume ) ;", "mNavigationDrawerAdapter . updateAccountList ( ) ;", "import io . netty . handler . codec . http . DefaultHttpHeaders ; import io . netty . handler . codec . http . websocketx . extensions . WebSocketClientExtensionHandler ; import io . reactivex . Completable ; import io . reactivex . CompletableSource ;", "result = prime * result + ( ( resumeParameter == null ) ? 0 : resumeParameter . hashCode ( ) ) ; result = prime * result + ( ( rows == null ) ? 0 : rows . hashCode ( ) ) ; result = prime * result + ( ( webSafeRefetchCursor == null ) ? 0 : webSafeRefetchCursor . hashCode ( ) ) ; result = prime * result + ( ( webSafeBackwardCursor == null ) ? 0 : webSafeBackwardCursor . hashCode ( ) ) ; result = prime * result + ( ( webSafeResumeCursor == null ) ? 0 : webSafeResumeCursor . hashCode ( ) ) ; result = prime * result + ( hasMoreResults ? 0 : 1 ) ; result = prime * result + ( hasPriorResults ? 0 : 1 ) ;", "LinkingCostFunction < K > linkingCosts = new LinkingCostFunction < K > ( linkingScores , t0 , t1 , settings . maxDistObjects , BLOCKED ) ;", "{ BasicDBObject doc = new BasicDBObject ( \"user\" , user ) . append ( \"access_token\" , encryptedToken ) . append ( \"repo_url\" , url ) ; getCollection ( ) . insert ( doc ) ; }", "public static void setInitExceptionHandler ( Consumer < Exception > igniteExceptionHandler ) { getInstance ( ) . setInitExceptionHandler ( igniteExceptionHandler ) ; } public static void secure ( String keystoreFile , String keystorePassword , String truststoreFile , String truststorePassword , boolean needsClientCert ) { getInstance ( ) . secure ( keystoreFile , keystorePassword , truststoreFile , truststorePassword , needsClientCert ) ; }", "multicastEvent ( new ApplicationStartingEvent ( this . springApplication , new String [ 0 ] ) ) ;", "import edu . ucsb . eucalyptus . msgs . DescribeBundleTasksType ; import edu . ucsb . eucalyptus . msgs . DescribeRegionsResponseType ; import edu . ucsb . eucalyptus . msgs . DescribeRegionsType ;", "@ Parameter private List < IncludePath > testIncludePaths ;", "import com . b2international . snowowl . snomed . common . SnomedConstants ; import com . b2international . snowowl . snomed . cis . SnomedIdentifiers ;", "parseTimeMethod . invoke ( parser , times [ index ] , 0 , times [ index ] . length , dos ) ; AMutableTime aTime = ( AMutableTime ) aTimeField . get ( parser ) ;", "import android . widget . ListView ;", "import org . quartz . SchedulerException ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . IOException ; import java . rmi . AlreadyBoundException ; import java . rmi . NotBoundException ; import java . rmi . RemoteException ; import java . rmi . registry . LocateRegistry ; import java . rmi . registry . Registry ;", "@ ApiResponse ( code = 200 , message = \"successful operation\" , response = Pet . class , responseContainer = \"List\" ) , @ ApiResponse ( code = 400 , message = \"Invalid tag value\" ) } )", "if ( ! ( database instanceof MariaDBDatabase ) && statement . getStartValue ( ) != null ) { queryStringBuilder . append ( \" START WITH \" ) . append ( statement . getStartValue ( ) ) ; }", "", "", "if ( activeTool . getState ( ) == ToolState . INACTIVE && activeAction != ToolItem . BRUSH ) { }", "static final Learner learner = new WekaLearner ( ) ;", "import static io . neow3j . protocol . TestHelper . GAS_HASH ; import static io . neow3j . utils . Numeric . prependHexPrefix ; import static org . hamcrest . Matchers . empty ; import static org . hamcrest . Matchers . equalTo ; import static org . hamcrest . Matchers . greaterThan ; import static org . hamcrest . Matchers . greaterThanOrEqualTo ; import static org . hamcrest . Matchers . hasItem ; import static org . hamcrest . Matchers . hasItems ; import static org . hamcrest . Matchers . hasSize ; import static org . hamcrest . Matchers . is ; import static org . hamcrest . Matchers . isEmptyOrNullString ; import static org . hamcrest . Matchers . isEmptyString ; import static org . hamcrest . Matchers . lessThanOrEqualTo ; import static org . hamcrest . Matchers . not ; import static org . hamcrest . Matchers . notNullValue ; import static org . hamcrest . Matchers . nullValue ; import static org . junit . Assert . assertNotNull ; import static org . junit . Assert . assertThat ; import static org . junit . Assert . assertTrue ; import io . neow3j . model . types . AssetType ;", "import org . springframework . ide . vscode . commons . boot . app . cli . requestmappings . RequestMapping ; import org . springframework . ide . vscode . commons . boot . app . cli . requestmappings . RequestMappingImpl1 ; import org . springframework . ide . vscode . commons . boot . app . cli . livebean . LiveBeansModel ;", "traverseToInode ( PathUtils . getPathComponents ( uri . getPath ( ) ) , LockMode . READ , null ) ; traversalResult . getInodeLockGroup ( ) . close ( ) ;", "class ScriptingRegistration { private static final int MINIMAL_SCRIPT_COUNT_FOR_SUBMENU = 1 ; private static final String MENU_BAR_SCRIPTING_PARENT_LOCATION = \"/menu_bar/extras/first\" ; private static final String MENU_BAR_SCRIPTING_LOCATION = MENU_BAR_SCRIPTING_PARENT_LOCATION + \"/scripting\" ; }", "import android . os . Environment ;", "import static junit . framework . Assert . assertTrue ; import static junit . framework . Assert . assertNull ;", "CaseDbConnection connection = connections . getConnection ( ) ; s = connection . createStatement ( ) ; rs = connection . executeQuery ( s , \"SELECT display_name FROM blackboard_artifact_types WHERE artifact_type_id = \" + artifactTypeID ) ;", "import org . eclipse . gef . EditPartViewer ; import org . eclipse . gef . editparts . ZoomListener ; import org . eclipse . gef . editparts . ZoomManager ;", "import java . io . File ;", "if ( credentials instanceof TokenProducer ) { final String token = ( ( TokenProducer ) credentials ) . getToken ( ) ; builder . withUsername ( usernamePassword . getUsername ( ) ) . withPassword ( Secret . toString ( usernamePassword . getPassword ( ) ) ) ; }", "import gov . gtas . model . lookup . HitCategory ;", "else if ( c . getMode ( ) == ContainerMode . MANUAL_IMAGE_PATH ) { }", "import java . util . HashSet ; import java . util . IdentityHashMap ;", "private void callContract ( Contract . TriggerSmartContract request , StreamObserver < TransactionExtention > responseObserver , boolean isConstant ) { TransactionExtention . Builder trxExtBuilder = TransactionExtention . newBuilder ( ) ; Return . Builder retBuilder = Return . newBuilder ( ) ; try { TransactionCapsule trxCap = createTransactionCapsule ( request , ContractType . TriggerSmartContract ) ; Transaction trx ; if ( isConstant ) { trx = wallet . triggerConstantContract ( request , trxCap , trxExtBuilder , retBuilder ) ; } else { trx = wallet . triggerContract ( request , trxCap , trxExtBuilder , retBuilder ) ; } trxExtBuilder . setTransaction ( trx ) ; trxExtBuilder . setTxid ( trxCap . getTransactionId ( ) . getByteString ( ) ) ; retBuilder . setResult ( true ) . setCode ( response_code . SUCCESS ) ; trxExtBuilder . setResult ( retBuilder ) ; } catch ( ContractValidateException | VMIllegalException e ) { retBuilder . setResult ( false ) . setCode ( response_code . CONTRACT_VALIDATE_ERROR ) . setMessage ( ByteString . copyFromUtf8 ( CONTRACT_VALIDATE_ERROR + e . getMessage ( ) ) ) ; trxExtBuilder . setResult ( retBuilder ) ; logger . warn ( \"ContractValidateException: {}\" , e . getMessage ( ) ) ; } catch ( RuntimeException e ) { retBuilder . setResult ( false ) . setCode ( response_code . OTHER_ERROR ) . setMessage ( ByteString . copyFromUtf8 ( e . getClass ( ) + \" : \" + e . getMessage ( ) ) ; trxExtBuilder . setResult ( retBuilder ) ; logger . warn ( \"Error: {}\" , e . getMessage ( ) ) ; } catch ( RuntimeException e ) { retBuilder . setResult ( false ) . setCode ( response_code . OTHER_ERROR ) .", "protected abstract void initFieldMatcher ( DeserializationContext ctxt ) ; protected BeanDeserializerBase _handleByNameInclusion ( DeserializationContext ctxt , AnnotationIntrospector intr , BeanDeserializerBase contextual , AnnotatedMember accessor ) throws JsonMappingException { final DeserializationConfig config = ctxt . getConfig ( ) ; JsonIgnoreProperties . Value ignorals = intr . findPropertyIgnoralByName ( config , accessor ) ; if ( ignorals . getIgnoreUnknown ( ) && ! _ignoreAllUnknown ) { contextual = contextual . withIgnoreAllUnknown ( true ) ; } final Set < String > namesToIgnore = ignorals . findIgnoredForDeserialization ( ) ; final Set < String > prevNamesToIgnore = contextual . _ignorableProps ; final Set < String > newNamesToIgnore ; if ( namesToIgnore . isEmpty ( ) ) { newNamesToIgnore = prevNamesToIgnore ; } else if ( ( prevNamesToIgnore == null ) || prevNamesToIgnore . isEmpty ( ) ) { newNamesToIgnore = namesToIgnore ; } else { newNamesToIgnore = new HashSet < String > ( prevNamesToIgnore ) ; newNamesToIgnore . addAll ( namesToIgnore ) ; } final Set < String > prevNamesToInclude = contextual . _includableProps ; final Set < String > newNamesToInclude = IgnorePropertiesUtil . combineNamesToInclude ( prevNamesToInclude , intr . findPropertyInclusionByName ( config , accessor ) . getIncluded ( ) ) ; if ( ( newNamesToIgnore != prevNamesToIgnore ) || ( newNamesToInclude != prevNamesToInclude ) ) { contextual = contextual . withByNameInclusion ( newNamesToInclude , newNamesToInclude ) ; } final Set < String > prevNamesToInclude ) ; final Set < String > newNamesToInclude = IgnorePropertiesUtil . combineNamesToInclude ( prevNamesToInclude , intr .", "import javax . servlet . http . HttpServletRequest ; import javax . enterprise . inject . Vetoed ;", "long maxMemory = acuConf . getAsBytes ( Property . TSERV_MAXMEM ) ; boolean usingNativeMap = acuConf . getBoolean ( Property . TSERV_NATIVEMAP_ENABLED ) && NativeMap . isLoaded ( ) ;", ". setNameBefore ( Utils . calculateSignature ( ref . getOperationBefore ( ) ) ) . setNameAfter ( Utils . calculateSignature ( ref . getOperationAfter ( ) ) ) . addMarking ( ref . getOriginalType ( ) . codeRange ( ) , ref . getChangedType ( ) . codeRange ( ) , true ) ;", "byte [ ] planHash = m_fragmentMsg . getPlanHash ( frag ) ; final int outputDepId = m_fragmentMsg . getOutputDepId ( frag ) ;", "import com . quickblox . qmunicate . qb . helpers . QBChatHelper ; import com . quickblox . qmunicate . ui . base . BaseFragmentActivity ;", "setState ( 480 ) ;", "submitQuery ( \"ingest \" + relationKey . toString ( \"sqlite\" ) , \"ingest \" + relationKey . toString ( \"sqlite\" ) , scatter , workerPlans ) . sync ( ) ; } catch ( CatalogException | DbException e ) {", "", "protected void deleteExecutionEntities ( ExecutionEntityManager executionEntityManager , ExecutionEntity rootExecutionEntity , FlowElement terminateEndEvent , String deleteReason , FlowElement terminateEndEventElement ) { }", "AffineTransform transform = getState ( ) . getTransform ( ) ;", "static final String [ ] UNIFIED_PROJECTION = new String [ ] { KeyRings . _ID , KeyRings . MASTER_KEY_ID , KeyRings . HAS_SECRET , KeyRings . USER_ID , KeyRings . FINGERPRINT , KeyRings . KEY_SIZE , KeyRings . CREATION , KeyRings . EXPIRY , } ; static final int INDEX_UNIFIED_MKI = 1 ; static final int INDEX_UNIFIED_HAS_SECRET = 2 ; static final int INDEX_UNIFIED_UID = 3 ; static final int INDEX_UNIFIED_FINGERPRINT = 4 ; static final int INDEX_UNIFIED_ALGORITHM = 5 ; static final int INDEX_UNIFIED_KEY_SIZE = 6 ; static final int INDEX_UNIFIED_CREATION = 7 ; static final int INDEX_UNIFIED_EXPIRY = 8 ; static final String [ ] USER_IDS_PROJECTION = new String [ ] { UserIds . _ID , UserIds . USER_ID , UserIds . RANK , \"verified\" , } ; static final String [ ] KEYS_PROJECTION = new String [ ] { Keys . _ID , Keys . KEY_ID , Keys . RANK , Keys . ALGORITHM , Keys . KEY_SIZE , Keys . CAN_CERTIFY , Keys . CAN_ENCRYPT , Keys . CAN_SIGN , Keys . IS_REVOKED , Keys . CREATION , Keys . EXPIRY , Keys . FINGERPRINT } ; static final int KEYS_INDEX_CAN_ENCRYPT = 6 ;", "* < div class = \"warning\" > < b > Upcoming API change : < / b > * The type of this property may be changed to { @ code Set < CharSequence > } for ISO 19115 : 2014 conformance . * See < a href = \"http://jira.codehaus.org/browse/GEO-238\" > GEO - 238 < / a > for more information . < / div > * * @ param newValues the new feature types .", "Table table = new Table ( UnitValue . createPercentArray ( 3 ) ) . useAllAvailableWidth ( ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . GREEN , 1 ) ) ) . addCell ( new Cell ( 1 , 2 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . YELLOW , 3 ) ) ) . addCell ( new Cell ( 2 , 1 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . RED , 5 ) ) ) . addCell ( new Cell ( 2 , 1 ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . GRAY , 7 ) ) ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . BLUE , 12 ) ) ) . addCell ( new Cell ( ) . add ( new Paragraph ( textByron ) ) . setBorder ( new SolidBorder ( ColorConstants . CYAN , 1 ) ) ) ; table . setBorder ( new SolidBorder ( ColorConstants . GREEN , 2 ) ) ;", "putCachingSupplier ( healthInformation , ( ) -> new HealthInformation ( this , config . getNumber ( Settings . THEME_GRAPH_TPS_THRESHOLD_MED ) , config . getNumber ( Settings . ACTIVE_PLAY_THRESHOLD ) , config . getNumber ( Settings . ACTIVE_LOGIN_THRESHOLD ) , formatters . timeAmount ( ) , formatters . decimals ( ) , formatters . percentage ( ) ) ) ;", "protected Boolean isMultiColumn ; private boolean isTabsPresent = false ;", "if ( isRebase ) { Conflict conflict = checkDuplicateComponentIds ( sourceRevision , newComponentIdsInTarget ) ; if ( conflict != null ) { return conflict ; } conflict = checkDetachedReferences ( sourceRevision . getID ( ) , newSourceRevisionIdToFeatureIdMap . get ( sourceRevision . getID ( ) ) , detachedTargetIds ) ; if ( conflict != null ) { return conflict ; } }", "import java . util . * ;", "public static final class BlackboardException extends Exception { private static final long serialVersionUID = 1L ; BlackboardException ( String message ) { super ( message ) ; } BlackboardException ( String message , Throwable cause ) { super ( message , cause ) ; } } final public static class ArtifactPostedEvent { private final BlackboardArtifact artifact ; public BlackboardArtifact getArtifact ( ) { return artifact ; } ArtifactPostedEvent ( BlackboardArtifact artifact ) { this . artifact = artifact ; } public boolean artifactExists ( Content content , BlackboardArtifact . ARTIFACT_TYPE artifactType , Collection < BlackboardAttribute > attributesList ) throws TskCoreException { ArrayList < BlackboardArtifact > artifactsList ; artifactsList = content . getArtifacts ( artifactType ) ; if ( artifactsList . isEmpty ( ) ) { return false ; } for ( BlackboardArtifact artifact : artifactsList ) { if ( attributesMatch ( artifact . getAttributes ( ) , attributesList ) ) { return true ; } } return false ; } private boolean attributesMatch ( Collection < BlackboardAttribute > fileAttributesList , Collection < BlackboardAttribute > expectedAttributesList ) { for ( BlackboardAttribute expectedAttribute : expectedAttributesList ) { boolean match = false ; for ( BlackboardAttribute fileAttribute : fileAttributesList ) { BlackboardAttribute . Type attributeType = fileAttribute . getAttributeType ( ) ; if ( attributeType . getTypeID ( ) != expectedAttribute . getAttributeType ( ) . getTypeID ( ) ) { continue ; } Object fileAttributeValue ; Object expectedAttributeValue ; switch ( attributeType . getValueType ( ) ) { case BYTE : fileAttribute . getValueBytes ( ) ; expectedAttributeValue = expectedAttribute . getValueBytes ( ) ; break ; case DOUBLE : fileAttributeValue = fileAttribute . getValueDouble ( ) ; break ; case INTEGER : fileAttributeValue = fileAttribute . getValueInt ( ) ; break ; case LONG : case DATETIME : fileAttributeValue = fileAttribute . getValueLong ( ) ; break ; case STRING", "import java . math . BigInteger ; import java . security . InvalidAlgorithmParameterException ; import java . security . KeyPairGenerator ; import java . security . NoSuchAlgorithmException ; import java . security . NoSuchProviderException ; import java . security . SecureRandom ; import java . security . SignatureException ; import java . util . ArrayList ; import java . util . Date ; import java . util . GregorianCalendar ; import java . util . Iterator ; import java . util . TimeZone ; import android . content . Context ;", "private String username ; private String password ; private String salt ; private boolean acceptedUserAgreement = false ;", "import io . subutai . core . object . relation . api . RelationManager ;", "public InstallNode getStandardMasterWithEtcdNode ( ) { InstallNode node = new InstallNode ( ) ; node . setDefautNode ( true ) ; node . setHostId ( 1 ) ; node . setHostName ( \"Not Selected\" ) ; node . setIp ( \"Not Selected\" ) ; node . getNodeRoleParams ( ) . put ( Ku8ClusterTemplate . NODE_ROLE_ETCD , initInstallParameter ( ) ) ; node . getNodeRoleParams ( ) . putAll ( initInstallParameter ( Ku8ClusterTemplate . NODE_ROLE_MASTER ) ) ; node . getNodeRoleParams ( ) . put ( Ku8ClusterTemplate . NODE_ROLE_REGISTRY , initInstallParameter ( ) ) ; return node . clone ( ) ; } public InstallNode getStandardAllIneOneNode ( ) { InstallNode node = new InstallNode ( ) ; node . setDefautNode ( true ) ; node . setHostId ( 1 ) ; node . setHostName ( \"Not Selected\" ) ; node . setIp ( \"Not Selected\" ) ; node . setNodeRoleParams ( ) . putAll ( initInstallParameter ( Ku8ClusterTemplate . NODE_ROLE_REGISTRY , initInstallParameter ( ) ) ; return node . clone ( ) ; } public InstallNode getStandardAllIneOneNode ( ) { InstallNode node = new InstallNode ( ) ; node . setDefautNode ( true ) ; node . setDefautNode ( true ) ; node . setDefautNode ( true ) ; node . setHostId ( 1 ) ; node . setHostName ( \"Not Selected\" ) ; node . setIp ( \"Not Selected\" ) ; node . setHostId ( 1 ) ; node . setHostName ( \"Not Selected\" ) ; node . setIp ( \"Not Selected\" ) ; node . setDefautNode", "scheduleMacUnmuteAt ( mac , Instant . ofEpochMilli ( muteTill ) ) ;", "public long getEventId ( ) { return eventId ; }", "setState ( 753 ) ;", "", "try { term ( values ) ; label_100 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk_f ( ) : jj_ntk ) { case PLUS : case MINUS : case COMMA : case STRING : case IDENT : case HASHIDENT : case HASH : case PROGID : case DIV : case LBRACKET : case RBRACKET : case URL : case RELFONTLENGTH : case RELVIEWLENGTH : case ABSOLUTLENGTH : case FLEX : case ANGLE : case SPL : case ST : case TIME : case FREQ : case RESOLUTION : case DIMEN : case PERCENTAGE : case NUMBER : case IMPORTANT_NOT : case UNICODERANGE : case FUNCTIONCALC : case FUNCTIONATTR : case FUNCTION : { ; break ; } default : jj_la1 [ 143 ] = jj_gen ; break label_100 ;", "private static final String STEPS = \"steps\" ; public static final String ACTIONS = \"actions\" ;", "public JdbcConnector ( String url , Map < String , String > properties , boolean readOnly , String timezone ) throws URISyntaxException { this ( url , timezone ) ; }", "this . worldServer . getGeneratorPipeline ( ) . getDependentCubeManager ( ) . unregister ( cube ) ;", "* Send a 200 response with no payload , when a payload is expected - client should return a null object of thde type for model A", "import com . badlogic . gdx . Gdx ; import com . badlogic . gdx . Graphics ; import com . badlogic . gdx . Input ;", "import br . com . caelum . vraptor4 . interceptor . PackagesAcceptor ;", "import java . util . Map ; import javax . naming . Context ; import javax . naming . directory . InitialDirContext ; import javax . ws . rs . core . Response ; import org . apache . commons . io . IOUtils ; import org . apache . commons . lang3 . StringUtils ; import org . apache . syncope . client . SyncopeClient ;", "GROUND_STATION_TROPOSPHERIC_MODEL_ESTIMATED , GROUND_STATION_TROPOSPHERIC_ZENITH_DELAY , GROUND_STATION_TROPOSPHERIC_DELAY_ESTIMATED , GROUND_STATION_GLOBAL_MAPPING_FUNCTION , GROUND_STATION_NIELL_MAPPING_FUNCTION , GROUND_STATION_WEATHER_ESTIMATED ,", "jj_la1 [ 167 ] = jj_gen ; break label_113 ;", "public LinkInfo ( String label , String description , String info , Type type , String config ) { this . label = label ; this . description = description ; this . info = info ; this . type = type ; this . config = config ; }", "@ Override public String value ( ) throws Exception { RsPrint . this . printHead ( this . baos ) ; RsPrint . this . printBody ( this . baos ) ; return new TextOf ( this . baos . toByteArray ( ) ) . asString ( ) ; } } ) ) ;", "public static final int SHOW_REPO_DETAILS = 1 ; public void editRepo ( DB . Repo repo ) { Log . d ( \"FDroid\" , \"Showing details screen for repo: '\" + repo + \"'.\" ) ; Intent intent = new Intent ( this , RepoDetailsActivity . class ) ; intent . putExtra ( RepoDetailsFragment . ARG_REPO_ID , repo . id ) ; startActivityForResult ( intent , SHOW_REPO_DETAILS ) ; } @ Override public void onActivityResult ( int requestCode , int resultCode , Intent data ) { if ( requestCode == SHOW_REPO_DETAILS && resultCode == RESULT_OK ) { boolean wasDeleted = data . getBooleanExtra ( RepoDetailsActivity . ACTION_IS_DELETED , false ) ; boolean wasEnabled = data . getBooleanExtra ( RepoDetailsActivity . ACTION_IS_ENABLED , false ) ; boolean wasDisabled = data . getBooleanExtra ( RepoDetailsActivity . ACTION_IS_DISABLED , false ) ; boolean wasChanged = data . getBooleanExtra ( RepoDetailsActivity . ACTION_IS_CHANGED , false ) ; if ( wasDeleted ) { refreshList ( ) ; } else if ( wasEnabled || wasDisabled || wasChanged ) { changed = true ; } } } protected Repo getRepoByAddress ( String address , List < Repo > repos ) { if ( address != null ) for ( Repo repo : repos ) if ( address . equals ( repo . address ) ) return repo ; return null ; } @ Override public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : NavUtils . navigateUpFromSameTask ( this ) ; return true ; } return super . onOptionsItemSelected ( item ) ; } protected void showAddRepo ( String newAddress , String newAddress , String newHash ) { switch ( item . getItemId ( ) )", "Object value = line [ i ] . trim ( ) ; String columnName = headers [ i ] . trim ( ) ; boolean isNull = value . toString ( ) . equalsIgnoreCase ( \"NULL\" ) ; ColumnConfig valueConfig = new ColumnConfig ( ) ;", "private static final org . apache . thrift . protocol . TField REWRITE_ENABLED_FIELD_DESC = new org . apache . thrift . protocol . TField ( \"rewriteEnabled\" , org . apache . thrift . protocol . TType . BOOL , ( short ) 15 ) ; private static final org . apache . thrift . protocol . TField MM_NEXT_WRITE_ID_FIELD_DESC = new org . apache . thrift . protocol . TField ( \"mmNextWriteId\" , org . apache . thrift . protocol . TType . I64 , ( short ) 15 ) ; private static final org . apache . thrift . protocol . TField MM_WATERMARK_WRITE_ID_FIELD_DESC = new org . apache . thrift . protocol . TField ( \"mmWatermarkWriteId\" , org . apache . thrift . protocol . TType . I64 , ( short ) 16 ) ;", ". get ( \"edit\" ) , JLabel . TRAILING ) ; LayoutHelper . buildConstraints ( gbConstraints , 0 , 0 , 1 , 1 , 1.0 , 0.0 ) ;", "", "checkObject ( tHandle , testCollectionObject ) ; Log . info ( Log . FAC_TEST , \"testCollectionObject name: \" + testCollectionObject . getVersionedName ( ) ) ;", "String tradeId = String . valueOf ( transactionId ) ; String orderId = String . valueOf ( quadrigacxUserTransaction . getOrderId ( ) ) ; BigDecimal feeAmount = quadrigacxUserTransaction . getFee ( ) ; String feeCurrency = orderType . equals ( Order . OrderType . ASK ) ? currencyPair . counter . getCurrencyCode ( ) : currencyPair . base . getCurrencyCode ( ) ; return new UserTrade ( orderType , originalAmount . abs ( ) , currencyPair , price , timestamp , tradeId , orderId , feeAmount , Currency . getInstance ( feeCurrency ) ) ;", "public String toString ( ) { return toJson ( true ) ; } protected String toJson ( boolean pretty ) { try { StringWriter writer = new StringWriter ( ) ; JsonGenerator gen = FACTORY . createJsonGenerator ( writer ) ; if ( pretty ) gen . useDefaultPrettyPrinter ( ) ; toJson ( gen ) ; gen . flush ( ) ; return writer . toString ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } public static CoGrouperConfig parse ( String s ) throws IOException { return parse ( FACTORY . createJsonParser ( new StringReader ( s ) ) ) ; } private static CoGrouperConfig parse ( JsonParser parser ) throws IOException { try { return parse ( MAPPER . readTree ( parser ) ) ; } catch ( JsonParseException e ) { throw new IOException ( e ) ; } } public boolean equals ( Object a ) { if ( ! ( a instanceof CoGrouperConfig ) ) { return false ; } CoGrouperConfig that = ( CoGrouperConfig ) a ; return ( this . getSourcesOrder ( ) == that . getSourcesOrder ( ) && this . getCommonCriteria ( ) . equals ( that . getCommonCriteria ( ) ) && this . getGroupByFields ( ) . equals ( that . getGroupByFields ( ) ) && this . getSourceSchemas ( ) . equals ( that . getSourceSchemas ( ) ) && this . getSecondarySortBys ( ) . equals ( that . getSecondarySortBys ( ) ) && ( ( this . getCustomPartitionFields ( ) == null && that . getCustomPartitionFields ( ) == null ) || this . getCustomPartitionFields ( ) . equals ( that . getCustomPartitionFields ( ) ) && ( ( this . getCustomPartitionFields ( ) == null && that . getCustomPartitionFields ( ) == null ) || this . getCustomPartitionFields ( ) . equals ( that . getCustomPartitionFields ( ) ) && this . equals ( that . getCustomPartitionFields ( )", "import com . ubergeek42 . WeechatAndroid . WeechatActivity ; import com . ubergeek42 . WeechatAndroid . WeechatPreferencesActivity ; import com . ubergeek42 . WeechatAndroid . notifications . HotlistHandler ; import com . ubergeek42 . WeechatAndroid . notifications . HotlistObserver ; import com . ubergeek42 . weechat . relay . RelayConnection ; import com . ubergeek42 . weechat . relay . RelayConnectionHandler ; import com . ubergeek42 . weechat . relay . RelayMessageHandler ; import com . ubergeek42 . weechat . relay . connection . IConnection ; import com . ubergeek42 . weechat . relay . connection . PlainConnection ; import com . ubergeek42 . weechat . relay . connection . SSHConnection ; import com . ubergeek42 . weechat . relay . connection . SSLConnection ; import com . ubergeek42 . weechat . relay . connection . StunnelConnection ; import com . ubergeek42 . weechat . relay . connection . WebSocketConnection ; import com . ubergeek42 . weechat . relay . messagehandler . BufferManager ; import com . ubergeek42 . weechat . relay . messagehandler . HotlistManager ; import com . ubergeek42 . weechat . relay . messagehandler . LineHandler ; import com . ubergeek42 . weechat . relay . messagehandler . NicklistHandler ; import com . ubergeek42 . weechat . relay . messagehandler . UpgradeHandler ; import com . ubergeek42 . weechat . relay . messagehandler . UpgradeObserver ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import java . io . File ;", "import com . jetbrains . jetpad . vclang . term . pattern . elimtree . BranchElimTreeNode ;", "public List < ? extends Stmt > generateInitialisers ( ) { }", "logger . debug ( \"shard is now inactive\" ) ; indexEventListener . onShardInactive ( this ) ;", "import com . iota . iri . network . TransactionRequesterWorker ;", "confiscateBondComboBox = FormBuilder . < BondedRole > addComboBox ( gridPane , ++ gridRow , Res . getWithCol ( \"dao.proposal.display.confiscateBondComboBox.label\" ) ) ; comboBoxValueTextFieldIndex = gridRow ;", "abort ( e , e , mdTxnCtx ) ; throw e ;", "public class TileEntityGoldenEgg extends SyncedTileEntity implements IPlaceAwareTile , IBreakAwareTile , ITickable { }", "import org . opencb . opencga . core . SolrException ; import org . opencb . opencga . core . models . DataStore ; import org . opencb . opencga . core . models . File ; import org . opencb . opencga . core . models . Sample ; import org . opencb . opencga . core . models . Study ;", "import com . relayrides . pushy . apns . proxy . ProxyHandlerFactory ; import com . relayrides . pushy . apns . metrics . ApnsClientMetricsListener ;", "Metrics . processTxsMessage ( \"txToNodeInfoUpdated\" , acceptedTxs , sender . getPeerNodeID ( ) ) ; Metrics . processTxsMessage ( \"finish\" , acceptedTxs , sender . getPeerNodeID ( ) ) ;", "import org . n52 . sos . util . DateTimeHelper ;", "EventDetailChart ( DateAxis dateAxis , final Axis < EventCluster > verticalAxis , ObservableList < EventStripeNode < ? > > selectedNodes ) { }", "AccessLevel . PACKAGE , builderType , Collections . < EclipseNode > emptyList ( ) , false , annotationNode , Collections . < Annotation > emptyList ( ) , null , false ) ;", "", "import org . sufficientlysecure . keychain . provider . KeychainContract . KeyRings ; import org . sufficientlysecure . keychain . provider . KeychainContract . Keys ; import org . sufficientlysecure . keychain . provider . KeychainContract . UserIds ; import org . sufficientlysecure . keychain . provider . KeychainDatabase ;", "import net . minecraft . util . EnumFacing ;", "index = new Engine . Index ( newUid ( \"1\" ) , doc , index . seqNo ( ) , index . version ( ) , index . versionType ( ) . versionTypeForReplicationAndRecovery ( ) , REPLICA , 0 , - 1 , false ) ;", "final void processDebugCommand_serverStats ( final Connection c , final SOCGame ga ) { final long diff = System . currentTimeMillis ( ) - srv . startTime ; final long hours = diff / ( 60 * 60 * 1000 ) , minutes = ( diff - ( hours * 60 * 60 * 1000 ) ) / ( 60 * 1000 ) , seconds = ( diff - ( hours * 60 * 60 * 1000 ) - ( minutes * 60 * 1000 ) ) / 1000 ; Runtime rt = Runtime . getRuntime ( ) ; final String gaName = ga . getName ( ) ; if ( hours < 24 ) { srv . messageToPlayer ( c , gaName , \"> Uptime: \" + hours + \":\" + minutes + \":\" + seconds ) ; } else { final int days = ( int ) ( hours / 24 ) , hr = ( int ) ( hours - ( days * 24L ) ) ; srv . messageToPlayer ( c , gaName , \"> Uptime: \" + days + \"d \" + hr + \":\" + minutes + \":\" + seconds ) ; } srv . messageToPlayer ( c , gaName , \"> Connections since startup: \" + srv . getRunConnectionCount ( ) ) ; srv . messageToPlayer ( c , gaName , \"> Current named connections: \" + srv . getNamedConnectionCount ( ) ) ; srv . messageToPlayer ( c , gaName , \"> Current connections including unnamed: \" + srv . getCurrentConnectionCount ( ) ) ; srv . messageToPlayer ( c , gaName , \"> Version: \" + vers + \" (\" + Version . version ( ) + \") build \" + Version . buildnum ( ) ) ; } srv . messageToPlayer ( c , gaName , \"> Connections since startup: \" + srv . getRunConnectionCount ( ) ) ; srv . messageToPlayer ( c , gaName , \"> Current named connections: \" + srv . numberOfUsers ) ; srv . messageTo", "NodeResponse nodeResponse = call ( ( ) -> client ( ) . findNodeByUuid ( PROJECT_NAME , childUuid , new VersioningParametersImpl ( ) . setBranch ( branchName ) ) ) ; assertNull ( \"We currently expect the node to be returned but without any contents.\" , nodeResponse . getLanguage ( ) ) ;", "setState ( 662 ) ;", "import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . ConcurrentHashMap ;", "ClusterSingletonManager . props ( new ClusterRouterPool ( new RoundRobinPool ( 2 ) . withSupervisorStrategy ( superviseStrategy . getStrategy ( ) ) , next . getValue ( ) ) . props ( new RemoteRouterConfig ( new RoundRobinPool ( 6 ) , this . memberAddresses ) . props (", "import com . gentics . mesh . json . JsonUtil ; import com . gentics . mesh . util . RestModelHelper ;", "private class ConfirmItemAdapter extends RecyclerView . Adapter < RecyclerView . ViewHolder > { }", "if ( part == 1 || part == - 1 ) { dataSource . getAttributeMap ( ) . write ( stroomZipOutputStream . addEntry ( new StroomZipEntry ( null , basePartName , StroomZipFileType . Manifest ) . getFullName ( ) ) , true ) ; }", "PathNavigate nav = mob . getNavigator ( ) ;", "String relocatingNodeId , RestoreSource restoreSource , long primaryTerm , boolean primary , ShardRoutingState state , UnassignedInfo unassignedInfo ) { return newShardRouting ( new Index ( index , IndexMetaData . INDEX_UUID_NA_VALUE ) , shardId , currentNodeId , relocatingNodeId , restoreSource , primaryTerm , primary , state , unassignedInfo ) ; } public static ShardRouting newShardRouting ( Index index , int shardId , String currentNodeId , String relocatingNodeId , RestoreSource restoreSource , long primaryTerm , boolean primary , ShardRoutingState state , UnassignedInfo unassignedInfo ) { return new ShardRouting ( index , shardId , currentNodeId , relocatingNodeId , restoreSource , primaryTerm , primary , state , unassignedInfo , buildAllocationId ( state ) , true , - 1 ) ; } public static void relocate ( ShardRouting shardRouting , String relocatingNodeId , long expectedShardSize ) { shardRouting . relocate ( relocatingNodeId , expectedShardSize ) ;", "private String mapSelectedOnStart ; final private LastOpenedMapsRibbonContributorFactory lastOpenedMapsRibbonContributorFactory ; public LastOpenedMapsRibbonContributorFactory getLastOpenedMapsRibbonContributorFactory ( ) { return lastOpenedMapsRibbonContributorFactory ; }", "Attribute mrefAttr = mrefAttrsInQuery . get ( i ) ; if ( mrefAttr . getDataType ( ) == ONE_TO_MANY && mrefAttr . isMappedBy ( ) )", "paintMotors ( gl2 ) ; if ( drawDecorator != null ) { drawDecorator . render ( gl2 , machine ) ; }", "SecurityContextToken sct ; if ( tokenIdToRenew != null ) { ( ( TokenStore ) exchange . get ( Endpoint . class ) . getEndpointInfo ( ) . getProperty ( TokenStore . class . getName ( ) ) ) . remove ( tokenIdToRenew ) ; sct = new SecurityContextToken ( NegotiationUtils . getWSCVersion ( tokenType ) , writer . getDocument ( ) , tokenIdToRenew ) ; sct . setID ( WSSConfig . getNewInstance ( ) . getIdAllocator ( ) . createSecureId ( \"sctId-\" , sct . getElement ( ) ) ) ; } else { sct = new SecurityContextToken ( NegotiationUtils . getWSCVersion ( tokenType ) , writer . getDocument ( ) ) ; } WSSConfig wssConfig = WSSConfig . getNewInstance ( ) ; sct . setID ( wssConfig . getIdAllocator ( ) . createId ( \"sctId-\" , sct ) ) ;", "private final ClassLoader classLoader ;", "public List < Task > getTasksToBeScheduled ( Workflow workflow ,", "import static org . assertj . core . api . Assertions . assertThat ; import static org . bonitasoft . engine . test . persistence . builder . ActorBuilder . anActor ; import static org . bonitasoft . engine . test . persistence . builder . ActorMemberBuilder . anActorMember ; import static org . bonitasoft . engine . test . persistence . builder . CallActivityInstanceBuilder . aCallActivityInstanceBuilder ; import static org . bonitasoft . engine . test . persistence . builder . GatewayInstanceBuilder . aGatewayInstanceBuilder ; import static org . bonitasoft . engine . test . persistence . builder . PendingActivityMappingBuilder . aPendingActivityMapping ; import static org . bonitasoft . engine . test . persistence . builder . ProcessInstanceBuilder . aProcessInstance ; import static org . bonitasoft . engine . test . persistence . builder . UserBuilder . aUser ; import static org . bonitasoft . engine . test . persistence . builder . UserMembershipBuilder . aUserMembership ; import static org . junit . Assert . assertEquals ; import static org . junit . Assert . assertFalse ; import static org . junit . Assert . assertTrue ; import java . util . Arrays ;", "* Test explicitly required complex object . Please put a valid class - wrapper with 'value' = null and the client library should throw before the request is sent .", "{ spellChecker . init ( options , \"spellChecker\" , true ) ; grammarChecker . init ( options , \"grammarChecker\" , true ) ; language . init ( options , \"language\" , null ) ; userDictionary . init ( options , \"userDictionary\" , null ) ; disabledRules . init ( options , \"disabledRules\" ) ; formatOnlyModifiedParagraphs . init ( options , \"formatOnlyModifiedParagraphs\" , false ) ; ProjectManager . activeProjectProperty ( ) . addListener ( ( observer , oldProject , newProject ) -> { set ( getProjectOptions ( newProject ) ) ; } ) ; } private static void set ( Preferences options ) { if ( Options . options == options ) return ; Options . options = options ; fontFamily . setPreferences ( options ) ; fontSize . setPreferences ( options ) ; lineSeparator . setPreferences ( options ) ; encoding . setPreferences ( options ) ; markdownFileExtensions . setPreferences ( options ) ; markdownExtensions . setPreferences ( options ) ; markdownRenderer . setPreferences ( options ) ; showLineNo . setPreferences ( options ) ; showWhitespace . setPreferences ( options ) ; showImagesEmbedded . setPreferences ( options ) ; emphasisMarker . setPreferences ( options ) ; strongEmphasisMarker . setPreferences ( options ) ; bulletListMarker . setPreferences ( options ) ; wrapLineLength . setPreferences ( options ) ; formatOnSave . setPreferences ( options ) ; formatOnlyModifiedParagraphs . setPreferences ( options ) ; } private static Preferences getProjectOptions ( File project ) { if ( project != null ) { Preferences projectOptions = ProjectSettings . get ( project ) . getOptions ( options ) ; formatOnSave . setPreferences ( options ) ; bulletListMarker . setPreferences ( options ) ; wrapLineLength . setPreferences ( options ) ; wrapLineLength . setPreferences ( options ) ; formatOnSave . setPreferences ( options ) ; formatOnlyModifiedParagraph", "Engine . Index firstIndexRequest = new Engine . Index ( newUid ( Integer . toString ( i ) ) , doc , SequenceNumbersService . UNASSIGNED_SEQ_NO , Versions . MATCH_DELETED , VersionType . INTERNAL , PRIMARY , System . nanoTime ( ) , - 1 , false ) ;", "if ( this . styleObject == null && this . style != null ) { final StyleParserPlugin parser = new SLDParserPlugin ( ) ; }", "else if ( root_ == CONDITIONAL ) { result_ = conditional ( builder_ , 0 ) ; } else if ( root_ == CONSTRUCTOR_NAME ) { result_ = constructorName ( builder_ , 0 ) ; }", "private final Photography photography ; private final Basketball basketball ;", "* < div class = \"warning\" > < b > Warning : < / b > in a future SIS version , the return type may be changed * to { @ code org . opengis . referencing . cs . ParametricCS } . This change is pending GeoAPI revision . < / div > * * @ param properties name and other properties to give to the new object . * @ param axis the single axis .", "private static final String EXTENSIONS = \"extensions\" ; private static final String MAX_ENTRIES_REQUEST_JOURNAL = \"max-request-journal-entries\" ;", "if ( _accountService . isRootAdmin ( account . getId ( ) ) ) { return true ; } else if ( _accountService . isNormalUser ( account . getId ( ) ) || account . getType ( ) == Account . ACCOUNT_TYPE_PROJECT ) { }", "private String dnsDomain ; private String nameserver ; private String nameserverAddress ; private Integer maxUserPublicAddresses ; private boolean doDynamicPublicAddresses ; private Integer systemReservedPublicAddresses ;", "mSyncInProgress = ( ! FileSyncAdapter . EVENT_FULL_SYNC_END . equals ( event ) && ! RefreshFolderOperation . EVENT_SINGLE_FOLDER_SHARES_SYNCED . equals ( event ) ) ; if ( RefreshFolderOperation . EVENT_SINGLE_FOLDER_CONTENTS_SYNCED .", "BaseItemStack itemStack = player . getItemInHand ( HandSide . MAIN_HAND ) ; session . setTool ( player , new BlockReplacer ( pattern ) ) ; player . printInfo ( TranslatableComponent . of ( \"worldedit.tool.repl.equip\" , TextComponent . of ( itemType . getName ( ) ) ) ) ;", "mergePolicyFactory . createMergePolicy ( mergePolicyProperties ) , opTrackerFactory , ioSchedulerProvider . getIOScheduler ( ctx ) , ioOpCallbackFactory ) ;", "import javax . vecmath . Matrix3d ; import javax . vecmath . Vector3f ; import java . util . * ;", "import static reactor . core . publisher . Sinks . EmitFailureHandler . FAIL_FAST ;", ". addComponent ( optionSaveMothballState ) . addComponent ( labelMiscellaneous ) . addGroup ( layout . createParallelGroup ( GroupLayout . Alignment . BASELINE ) . addComponent ( labelStartGameDelay ) . addComponent ( optionStartGameDelay , GroupLayout . Alignment . TRAILING ) )", "", "private Set < String > getExistingBeans ( ConfigurableListableBeanFactory beanFactory , ResolvableType type , QualifierDefinition qualifier ) { }", "FacadeProvider . getPersonFacade ( ) . getPersonByUuid ( caze . getPerson ( ) . getUuid ( ) ) , caze . getDisease ( ) , viewMode , isInJurisdiction ) ;", "import org . geysermc . connector . entity . Entity ; import org . geysermc . connector . inventory . Inventory ; import org . geysermc . connector . network . session . GeyserSession ; import org . geysermc . connector . network . translators . PacketTranslator ; import org . geysermc . connector . network . translators . Translator ; import org . geysermc . connector . network . translators . Translators ; import org . geysermc . connector . network . translators . item . ItemTranslator ; import org . geysermc . connector . utils . InventoryUtils ; import com . nukkitx . math . vector . Vector3f ;", "if ( subtermStart != index - 1 || expr != null ) throw new BadArgumentException ( \"expression needs & or |\" , new String ( expression , UTF_8 ) , index - 1 ) ;", "{ for ( ContactExportDto exportDto : resultList ) { exportDto . setNumberOfVisits ( visitService . getVisitCountByContactId ( exportDto . getPersonId ( ) , exportDto . getLastContactDate ( ) , exportDto . getReportDate ( ) , exportDto . getFollowUpUntil ( ) , exportDto . getInternalDisease ( ) ) ) ; Visit lastCooperativeVisit = visitService . getLastVisitByContactId ( exportDto . getPersonId ( ) , exportDto . getLastContactDate ( ) , exportDto . getReportDate ( ) , exportDto . getFollowUpUntil ( ) , exportDto . getInternalDisease ( ) , VisitStatus . COOPERATIVE ) ; if ( lastCooperativeVisit != null ) { exportDto . setLastCooperativeVisitSymptomatic ( lastCooperativeVisit . getSymptoms ( ) . getSymptomatic ( ) ? YesNoUnknown . YES : YesNoUnknown . NO ) ; exportDto . setLastCooperativeVisitDate ( lastCooperativeVisit . getVisitDateTime ( ) ) ; exportDto . setLastCooperativeVisitSymptoms ( ) . toHumanString ( true , userLanguage ) ) ; } } return resultList ; } private Predicate createContactFilter ( ContactCriteria contactCriteria , CriteriaBuilder cb , Root < Contact > contact , Predicate userFilter ) { Predicate filter = null ; if ( contactCriteria == null || contactCriteria . getCaze ( ) == null ) { filter = userFilter ; } if ( contactCriteria != null ) { Predicate criteriaFilter = contactService . buildCriteriaFilter ( contactCriteria , cb , contact ) ; filter = AbstractAdoService . and ( cb , filter , criteriaFilter ) ; } if ( contactCriteria != null ) { Predicate criteriaFilter = contactService . buildCriteriaFilter ( contactCriteria , cb , contact ) ; filter = AbstractAdoService . and ( cb , filter , criteriaFilter ) ; }", "import java . util . ArrayList ; import java . util . Comparator ; import java . util . Date ; import java . util . List ; import java . util . Map ; import java . util . NavigableMap ; import java . util . TreeMap ;", "if ( evt . map . getTextureType ( ) == 0 ) { for ( FillerPattern pattern : FillerPattern . patterns . values ( ) ) { } }", "import org . scale7 . cassandra . pelops . Bytes ; import org . scale7 . cassandra . pelops . Pelops ;", "switch ( category ) { case CLICK : maxValue = Math . max ( maxValue , clickCount ) ; try { clicks . add ( new Counter < Date , Double > ( ColumnQualifier . DAY . parseDate ( kp [ 0 ] ) , new Double ( clickCount ) , Counter . Sort . KeyDesc ) ) ; } catch ( ParseException e ) { throw new IOException ( e ) ; } break ; case COUNTRY : Counter < String , Long > countryCount = clicksByCountry . get ( kp [ 2 ] ) ; if ( countryCount == null ) { countryCount = new Counter < String , Long > ( kp [ 2 ] , Math . round ( clickCount ) , Counter . Sort . ValueDesc ) ; } else { countryCount . setValue ( new Long ( Math . round ( clickCount ) + countryCount . getValue ( ) . longValue ( ) ) ) ; } clicksByCountry . put ( kp [ 2 ] , countryCount ) ; }", "protected Class makeLazyClass ( ClassMirror classMirror , Class superClass , MethodMirror constructor , boolean forTopLevelObject ) { LazyClass klass = new LazyClass ( classMirror , this , superClass , constructor , forTopLevelObject ) ; klass . setAnonymous ( classMirror . getAnnotation ( CEYLON_OBJECT_ANNOTATION ) != null ) ; }", "dbl . antiSamyPolicy = antiSamyPolicy ; dbl . sessionCookie = sessionCookie ; dbl . authCookie = authCookie ;", "@ Test public void shouldRememberIsPressed ( ) { view . setPressed ( true ) ; assertTrue ( view . isPressed ( ) ) ; view . setPressed ( false ) ; assertFalse ( view . isPressed ( ) ) ; } @ Test public void shouldAddOnClickListenerFromAttribute ( ) throws Exception { TestAttributeSet attrs = new TestAttributeSet ( ) ; attrs . put ( \"android:onClick\" , \"clickMe\" ) ; view = new View ( null , attrs ) ; assertNotNull ( shadowOf ( view ) . getOnClickListener ( ) ) ; } @ Test public void shouldCallOnClickWithAttribute ( ) throws Exception { final AtomicBoolean called = new AtomicBoolean ( false ) ; Activity context = new Activity ( ) { public void clickMe ( View view ) { called . set ( true ) ; } } ; TestAttributeSet attrs = new TestAttributeSet ( ) ; attrs . put ( \"android:onClick\" , \"clickMe\" ) ; view = new View ( context , attrs ) ; view . performClick ( ) ; assertTrue ( \"Should have been called\" , called . get ( ) ) ; } @ Test ( expected = RuntimeException . class ) public void shouldThrowExceptionWithBadMethodName ( ) throws Exception { final AtomicBoolean called = new AtomicBoolean ( false ) ; Activity context = new Activity ( ) { public void clickMe ( View view ) { called . set ( true ) ; } } ; TestAttributeSet attrs = new TestAttributeSet ( ) ; attrs . put ( \"android:onClick\" , \"clickYou\" ) ; view = new View ( context , attrs ) ; view . performClick ( ) ; } @ Test ( expected = RuntimeException . class ) public void shouldThrowExceptionWithBadMethodName ( ) throws Exception { final AtomicBoolean called = new AtomicBoolean ( ) ; assertThat ( listener . wasThrowExceptionWithBadMethodName ( ) ; view . startAnimation ( anim ) ; assert", "import static net . minecraftforge . permissions . PermissionsManager . RegisteredPermValue . FALSE ; import static net . minecraftforge . permissions . PermissionsManager . RegisteredPermValue . OP ; import static net . minecraftforge . permissions . PermissionsManager . RegisteredPermValue . TRUE ;", "boolean removed = false ;", "else if ( command . equals ( \"Find...\" ) )", "* Long running delete request , service returns a location header in the initial request . Subsequent calls to operation status do not contain location header .", "synchronized boolean save ( ) { try { return HashLookupSettings . writeSettings ( new HashLookupSettings ( this . knownHashSets , this . knownBadHashSets ) ) ; } catch ( HashLookupSettings . HashLookupSettingsException ex ) { return false ; } }", "this . bounceAfterScale = bounceAfterScale ; this . skipHealthchecks = skipHealthchecks ;", "final List < CoordinateOperation > flattened = new ArrayList < CoordinateOperation > ( operations . length ) ; initialize ( properties , operations , flattened , mtFactory , ( coordinateOperationAccuracy == null ) , ( domainOfValidity == null ) ) ;", "public void redefine ( ParserMethod newMethod , ParserKlass newKlass , Ids < Object > ids ) { LinkedMethod newLinkedMethod = new LinkedMethod ( newMethod ) ; RuntimeConstantPool runtimePool = new RuntimeConstantPool ( getContext ( ) , newKlass . getConstantPool ( ) , getDeclaringKlass ( ) . getDefiningClassLoader ( ) ) ; MethodVersion oldVersion = methodVersion ; methodVersion = new MethodVersion ( runtimePool , newLinkedMethod , ( CodeAttribute ) newMethod . getAttribute ( Name . Code ) ) ; oldVersion . getAssumption ( ) . invalidate ( ) ; ids . replaceObject ( oldVersion , methodVersion ) ; } public MethodVersion getMethodVersion ( ) { MethodVersion version = methodVersion ; while ( ! version . getAssumption ( ) . isValid ( ) ) { version = methodVersion ; } return version ; } public final class MethodVersion implements MethodRef { private final Assumption assumption ; private final RuntimeConstantPool pool ; private final LinkedMethod linkedMethod ; private final CodeAttribute codeAttribute ; @ CompilationFinal private CallTarget callTarget ; MethodVersion ( RuntimeConstantPool pool , LinkedMethod linkedMethod , CodeAttribute codeAttribute ) { this . assumption = Truffle . getRuntime ( ) . createAssumption ( ) ; this . pool = pool ; this . linkedMethod = linkedMethod ; this . codeAttribute = codeAttribute ; } public Method getMethod ( ) { return Method . this ; } public Assumption getAssumption ( ) { return assumption ; } public CodeAttribute codeAttribute ; @ CompilationFinal private CallTarget callTarget ; MethodVersion ( RuntimeConstantPool pool , LinkedMethod linkedMethod , CodeAttribute codeAttribute ) { this . assumption = Truffle . getRuntime ( ) . transferToInterpreterAndInvalidate ( ) ; Meta meta = getMeta ( ) ; this . linkedMethod = linkedMethod ; this . codeAttribute = codeAttribute ; } public MethodVersion ( RuntimeConstantPool", "public static final String COMBINED_RESULTS = \") COMBINED_RESULTS\" ; public static final Map < Type , List < Modifier > > supportedModifiersMap ; public static final String COMMA = \", \" ; public static final char QUOTE = '\\'' ;", "securityService . createAclBuilder ( ) . grant ( GeneralPermission . WRITE ) . to ( securityService . getCurrentUser ( ) ) . on ( topic ) . flush ( ) ; securityService . createAclBuilder ( ) . grant ( ROLE_ADMIN ) . to ( securityService . getCurrentUser ( ) ) . on ( first ) . flush ( ) ;", "", "List < DayAssignment > dayAssignments = getFilteredDayAssignments ( start , finish ) ;", "new Document < > ( document , partition , documentId ) . toString ( ) , new HashMap < String , String > ( ) { { put ( \"x-ms-documentdb-is-upsert\" , \"true\" ) ; } } ,", "callback . throwAssertionErrors ( ) ; AssertJUnit . assertEquals ( \"Number of success events\" , 1 , callback . getInEventCount ( ) ) ; AssertJUnit . assertEquals ( \"Number of remove events\" , 0 , callback . getRemoveEventCount ( ) ) ; AssertJUnit . assertTrue ( \"Event arrived\" , callback . isEventArrived ( ) ) ;", "import java . io . IOException ; import java . util . * ;", "private static boolean modBOPLoaded = Loader . isModLoaded ( \"BiomesOPlenty\" ) ; private static boolean wailaLoaded ; public static boolean isMFRLoaded = Loader . isModLoaded ( \"MineFactoryReloaded\" ) ; public static boolean isSmartMovingLoaded = Loader . isModLoaded ( \"SmartMoving\" ) ; public static boolean isTConstructLoaded = Loader . isModLoaded ( \"tconstruct\" ) ; public static boolean isWitcheryLoaded = Loader . isModLoaded ( \"witchery\" ) ; private static boolean spongeLoaded ;", "jj_la1 [ 226 ] = jj_gen ; break label_151 ;", "final MetaMapFilterFactory metaMapFilterFactory ) {", "import net . minecraftforge . fe . event . player . PlayerPostInteractEvent ; import net . minecraftforge . fml . common . FMLCommonHandler ; import net . minecraftforge . fml . common . eventhandler . Event . Result ; import net . minecraftforge . fml . common . eventhandler . EventPriority ; import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; import net . minecraftforge . fml . relauncher . Side ;", "Modes . I . swift ( ) , Mode . I . tcl ( ) ,", "this . configEnc = TestUtils . createXSLConfigurationForCodeGeneration ( this . developerProject , this . encTask ) ; this . generatorEnc . generateCodeTemplates ( this . configEnc , this . encTask . getAdditionalResources ( ) ) ; this . configSecPassword = TestUtils . createXSLConfigurationForCodeGeneration ( this . developerProject , this . secPasswordTask ) ; this . generatorSecPassword . generateCodeTemplates ( this . configSecPassword , this . secPasswordTask . getAdditionalResources ( ) ) ; final ICompilationUnit outputUnit = TestUtils . getICompilationUnit ( this . developerProject , Constants . PackageName , \"Output.java\" ) ; assertEquals ( 2 , countMethods ( outputUnit ) ) ;", "", "LinearRestrictions < OffsetDateTime > restrictions = mock ( LinearRestrictions . class ) ; FieldSpec augmentedFieldSpec = original . withRestrictions ( restrictions ) ;", "setState ( 438 ) ;", "if ( null == systemLoaderString ) { }", "registerVariationFunc ( LoziFunc . class ) ; registerVariationFunc ( WangTilesFunc . class ) ; registerVariationFunc ( TapratsFunc . class ) ; registerVariationFunc ( GPatternFunc . class ) ; registerVariationFunc ( NSudokuFunc . class ) ;", "void initParameters ( ) throws IOException { BeanDefinition filterRegistrationBean = handleBeanDefinitionForClass ( InitParametersFilter . class ) ; }", "accountType = AccountType . INDIVIDUAL ; if ( client . isNotActive ( ) ) { throw new ClientNotActiveException ( clientId ) ; }", "private int lastEntryTerm = - 1 ; private final CasLock flushLock = new CasLock ( ) ; private final ReadWriteLock rollbackLock = new ReentrantReadWriteLock ( ) ;", "", "List < ServerAttribute > attributes = dolphinModel . getAttributes ( ) ; assertThat ( attributes , containsInAnyOrder ( allOf ( hasProperty ( \"propertyName\" , is ( \"text\" ) ) , hasProperty ( \"value\" , nullValue ( ) ) , hasProperty ( \"baseValue\" , nullValue ( ) ) , hasProperty ( \"qualifier\" , nullValue ( ) ) , hasProperty ( \"tag\" , is ( Tag . VALUE ) ) ) , allOf ( hasProperty ( \"propertyName\" , is ( DolphinConstants . SOURCE_SYSTEM ) ) , hasProperty ( \"value\" , is ( DolphinConstants . SOURCE_SYSTEM_SERVER ) ) , hasProperty ( \"baseValue\" , is ( DolphinConstants . SOURCE_SYSTEM_SERVER ) ) , hasProperty ( \"qualifier\" , nullValue ( ) ) , hasProperty ( \"tag\" , is ( Tag . VALUE ) ) ) ) ) ; List < ServerPresentationModel > classModels = dolphin . findAllPresentationModelsByType ( DolphinConstants . DOLPHIN_BEAN ) ; assertThat ( classModels , contains ( hasProperty ( \"attributes\" , containsInAnyOrder ( allOf ( hasProperty ( \"propertyName\" , is ( DolphinConstants . JAVA_CLASS ) ) , hasProperty ( \"value\" , is ( SimpleTestModel . class . getName ( ) ) ) , hasProperty ( \"qualifier\" , nullValue ( ) ) , hasProperty ( \"tag\" , is ( ClassRepository . FieldType . UNKNOWN . ordinal ( ) ) ) , hasProperty ( \"value\" , is ( ClassRepository . FieldType . UNKNOWN . ordinal ( ) ) , hasProperty ( \"value\" , is ( SimpleTestModel . class . getName ( ) ) , containsInAnyOrder ( allOf ( hasProperty ( \"value\" , is ( SimpleTestModel . class . getName ( ) ) , hasProperty ( \"value\" , is (", "Assert . fail ( ex . getMessage ( ) ) ;", ". rowType ( PurchaseRowType . AVAILABILITY_DETAIL ) . qtyToPurchase ( BigDecimal . ZERO ) . readonly ( true ) . uomOrAvailablility ( Util . coalesce ( throwable . getLocalizedMessage ( ) , throwable . getMessage ( ) , throwable . getClass ( ) . getName ( ) ) )", "import org . hibernate . internal . util . jdbc . TypeInfo ; import org . hibernate . internal . util . jdbc . TypeInfoExtracter ; import org . hibernate . service . jdbc . connections . spi . ConnectionProvider ; import org . hibernate . service . jdbc . dialect . spi . DialectFactory ;", "builder = addOptionalAccessConditionHeader ( builder , options . getAccessCondition ( ) ) ; if ( options . isComputeRangeMD5 ( ) ) { builder = addOptionalHeader ( builder , \"x-ms-range-get-content-md5\" , \"true\" ) ; }", "{ return new ConfigDatabaseUpgrader ( \"/schema.xml\" , configDatabasePlatform ( ) , true , tablePrefix ( ) ) ; } @ Bean @ Scope ( value = \"singleton\" ) public ConfigDatabaseUpgrader executionDatabaseUpgrader ( ) { return new ConfigDatabaseUpgrader ( \"/schema-exec.xml\" , executionDatabasePlatform ( ) , true , tablePrefix ( ) ) ; }", "import java . util . ArrayList ; import javax . net . ssl . SSLContext ; import javax . net . ssl . SSLServerSocketFactory ; import io . netty . channel . Channel ; import io . netty . channel . ChannelFuture ; import io . netty . channel . ChannelFutureListener ; import io . netty . util . AttributeKey ;", "", "if ( jj_3R_784 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_785 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_786 ( ) ) return true ; } }", "else if ( component . equals ( new ComponentName ( FileDisplayActivity . this , FileUploadService . class ) ) ) { }", "PACKET_HEADER_UNDEFINED ( 49 , \"Parse number exception\" ) , UNKNOWN_LINK_TYPE ( 50 , \"Emule link has unrecognized type\" ) , FAIL ( 51 , \"Packet header contains wrong bytes or undefined\" ) , FAIL ( 60 , \"Fail\" ) ;", "private boolean checkPermissions ( ) { }", "childChannel . getReference ( ) . publish ( null , \"data\" ) ;", "+ \" final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(\\n\" + \" FUNC_FUNCTIONNAME, \\n\"", "import android . app . AlertDialog ; import android . content . DialogInterface ; import android . app . backup . BackupManager ; import android . app . backup . RestoreObserver ;", "mHomeTZ = preferenceScreen . findPreference ( KEY_HOME_TZ ) ; mSnoozeDelay = ( ListPreference ) preferenceScreen . findPreference ( KEY_DEFAULT_SNOOZE_DELAY ) ; buildSnoozeDelayEntries ( ) ;", "Boolean webcamsOnlyForModerator , String moderatorPass , String viewerPass , Long createTime , String createDate , Map < String , String > metadata ) {", "import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiModelProperty ; import java . util . HashSet ; import java . util . Set ;", "import java . util . Map ; import static io . improbable . keanu . tensor . TensorShape . shapeToDesiredRankByPrependingOnes ; import static io . improbable . keanu . tensor . TensorShapeValidation . checkHasSingleNonScalarShapeOrAllScalar ; import static io . improbable . keanu . tensor . TensorShapeValidation . checkTensorsMatchNonScalarShapeOrAreScalar ;", "", "server . authenticator . unbanLogin ( this ) ; if ( usedAuthenticator ) { if ( guest ) { server . authenticator . releaseGuestName ( name ) ; } else { server . authenticator . rememberAuthentication ( name , getIPAddress ( ) ) ; } } else if ( guest ) { server . authenticator . rememberGuest ( name , getIPAddress ( ) ) ; } server . data . players . stats . add ( this , StatField . PLAY_TIME , ( int ) ( System . currentTimeMillis ( ) - connected ) / 1000 / 60 ) ; server . data . players . stats . add ( this , StatField . BLOCKS_DESTROYED , blocksDestroyed ) ; server . data . players . stats . add ( this , StatField . BLOCKS_PLACED , blocksPlaced ) ; server . data . save ( ) ;", "private List < Entitlement > bindByProduct ( String productHash , Consumer consumer , Integer quantity ) { List < Entitlement > entitlementList = new LinkedList < Entitlement > ( ) ; Product p = productAdapter . getProductByHash ( productHash , consumer . getOwner ( ) ) ; if ( p == null ) { } }", "path ) ) ; } return null ; } @ Override protected void onProgressUpdate ( Uri ... progress ) { setCurrentLocation ( progress [ 0 ] ) ; } @ Override protected void onPostExecute ( Bundle result ) { super . onPostExecute ( result ) ; if ( result != null ) { getLoaderManager ( ) . initLoader ( mIdLoaderData , result , FragmentFiles . this ) ; } else if ( errMsg != null ) { Dlg . toast ( getActivity ( ) , errMsg , Dlg . LENGTH_SHORT ) ; getActivity ( ) . finish ( ) ; } else showCannotConnectToServiceAndWaitForTheUserToFinish ( ) ; } } . execute ( ) ;", "setState ( 536 ) ; ( ( CaseClauseContext ) _localctx ) . sequenceType = sequenceType ( ) ; ( ( CaseClauseContext ) _localctx ) . union . add ( ( ( CaseClauseContext ) _localctx ) . sequenceType ) ; setState ( 541 ) ;", "sourceEntityType = entityTypeFactory . create ( \"source\" ) ; sourceEntityType . addAttributes ( Lists . newArrayList ( sourceAttribute ) ) ;", "EvaluationContextImpl context = this . initContext ( locale ) ;", "public MappingJacksonValue create ( @ RequestBody @ Validated ( ScimUser . NewUserValidation . class ) final ScimUser user , final BindingResult validationResult ) { }", "@ SuppressWarnings ( \"all\" ) Object obj = session . getAttribute ( CURRENT_USER ) ; if ( obj == null ) { return new JsonView ( Restful . instance ( ) . code ( ApiException . TokenAuthorNotFound ) . msg ( \"\u00c3\u00a6\u00c4\u00be\u00c2\u00aa\u00c3\u00a7\u00c4\u00bb\u00c2\u00bb\u00c3\u00a5\u00c2\u00bd\u00c4\u00b7\" ) . ok ( false ) ) ; }", "objMngr . registerObject ( new PathDesired ( ) ) ; objMngr . registerObject ( new PathPlannerSettings ( ) ) ; objMngr . registerObject ( new PathAction ( ) ) ;", "", "public static final String OVERFLOW = \"overflow\" ;", "", "String title , String appName , float rating , String packageName , long size , String icon , String graphic , Obb obb , long storeId , String storeName , String storeTheme , String vername , int vercode , String path , String backgroundImage , String pathAlt , String md5 ) {", "List < String > newFiles ;", "", "Attribute idAttribute = entityType . getIdAttribute ( ) ;", "static private final String FILE_EXTENSION_CLAUSE = \"(name LIKE '%.\" + StringUtils . join ( FileTypeUtils . getAllSupportedExtensions ( ) , \"' OR name LIKE '%.\" )", "return holder . getAccountAccesses ( ) ;", "import org . eclipse . che . ide . CoreLocalizationConstant ; import org . eclipse . che . ide . actions . WorkspaceSnapshotNotifier ; import org . eclipse . che . ide . api . app . AppContext ; import org . eclipse . che . ide . api . notification . NotificationManager ; import org . eclipse . che . ide . api . workspace . WorkspaceServiceClient ; import org . eclipse . che . ide . api . workspace . event . WsStatusChangedEvent ; import org . eclipse . che . ide . jsonrpc . RequestHandlerConfigurator ; import org . eclipse . che . ide . ui . loaders . LoaderPresenter ;", "", "DataPropertyRangeExpression role = prop . getRange ( ) ; Equivalences < DataRangeExpression > roleNode = reasonerDag . getDataRangeDAG ( ) . getVertex ( role ) ; Set < Equivalences < DataRangeExpression > > ancestors = reasonerDag . getDataRangeDAG ( ) . getSuper ( roleNode ) ;", "private static JLabel labelTimeElapse = null ; private static JLabel labelContentLength = null ; private static JLabel labelTotalLength = null ; private static JToolBar footerToolbar = null ; private Map < Class < ? extends Message > , MessageSender > mapMessageSenders ;", "@ Deprecated public static final Key < Value < Boolean > > JOHNNY_VINDICATOR = DummyObjectProvider . createExtendedFor ( Key . class , \"JOHNNY_VINDICATOR\" ) ; ;", "private final RequestLoggingConfig config = new RequestLoggingConfig ( ) ;", "corefLayer . setOverlapMode ( ANY_OVERLAP ) ; sut . addSpan ( document , username , jcas . getCas ( ) , 0 , 4 ) ;", "boolean allowSaveCard = true ; boolean isPreAuth = false ;", "", "import io . netflix . titus . api . jobmanager . model . job . ServiceJobProcesses ; import io . netflix . titus . api . jobmanager . model . job . migration . MigrationPolicy ;", "if ( reportFolderPath != null ? ! reportFolderPath . equals ( config . reportFolderPath ) : config . reportFolderPath != null ) return false ; if ( reportFilePath != null ? ! reportFilePath . equals ( config . reportFilePath ) : config . reportFilePath != null ) return false ; if ( flavour != config . flavour ) return false ; if ( policyProfilePath != null ? ! policyProfilePath . equals ( config . policyProfilePath ) : config . policyProfilePath != null ) return false ; return pluginsConfigPath != null ? pluginsConfigPath . equals ( config . pluginsConfigPath ) : config . pluginsConfigPath == null ;", "new KeyValue < > ( \"car-advertisement\" , \"shown/not-clicked-yet\" ) , new KeyValue < > ( \"newspaper-advertisement\" , \"shown/not-clicked-yet\" ) , new KeyValue < > ( \"gadget-advertisement\" , \"shown/not-clicked-yet\" ) , new KeyValue < > ( \"newspaper-advertisement\" , \"shown/clicked\" ) , new KeyValue < > ( \"gadget-advertisement\" , \"shown/clicked\" ) , new KeyValue < > ( \"newspaper-advertisement\" , \"shown/clicked\" )", "private void setupJSONAPIServer ( ) throws Exception { String portStr = System . getProperty ( GlobalConfig . JSON_API_SERVER_PORT_PROPERTY ) ; int port = DEFAULT_JSON_API_SERVER_PORT ; if ( portStr != null ) { port = Integer . parseInt ( portStr ) ; } jsonAPIServer = new Server ( port ) ; ServletContextHandler context = new ServletContextHandler ( ServletContextHandler . SESSIONS ) ; context . setContextPath ( \"/\" ) ; jsonAPIServer . setHandler ( context ) ; context . addServlet ( new ServletHolder ( new QueryAPIServlet ( ) ) , \"/query\" ) ; context . addServlet ( new ServletHolder ( new QueryStatusAPIServlet ( ) ) , \"/query/status\" ) ; context . addServlet ( new ServletHolder ( new QueryResultAPIServlet ( ) ) , \"/query/result\" ) ; context . addServlet ( new ServletHolder ( new UpdateAPIServlet ( ) ) , \"/update\" ) ; context . addServlet ( new ServletHolder ( new DDLAPIServlet ( ) ) , \"/ddl\" ) ; } private void setupAPIServer ( ) throws Exception { int startPort = DEFAULT_API_NODEDATA_SERVER_PORT ; Map < String , Set < String > > nodeNameMap = new HashMap < String , Set < String > > ( ) ; getIPAddressNodeMap ( Map < String , Set < String > > entry : nodeNameMap . entrySet ( ) ) { Set < String > nodeNames = entry . getValue ( ) ; Iterator < String > it = nodeNames . iterator ( ) ; while ( it . hasNext ( ) ) { AsterixNodeState ns = new AsterixNodeState ( ) ; ns . setAPINodeDataServerPort ( startPort ++ ) ; proxy . setAsterixNodeState ( appCtx . getCCContext ( ) . getIPAddressNodeMap ( Map < String , Set < String > > nodeNameMap ) ; for", "public static final StringId AgentConfigImpl_SNMPDIRECTORY_DOES_NOT_EXIST = new StringId ( 2227 , \"snmp-directory does not exist\" ) ; public static final StringId AgentConfigImpl_SNMPDIRECTORY_MUST_BE_SPECIFIED_BECAUSE_SNMP_IS_ENABLED = new StringId ( 2228 , \"snmp-directory must be specified because SNMP is enabled\" ) ; public static final StringId AgentConfigImpl_SPECIFIED_PROPERTIES_FILE_DOES_NOT_EXIST_0 = new StringId ( 2229 , \"Specified properties file does not exist: {0}\" ) ; public static final StringId AgentConfigImpl_UNKNOWN_CONFIG_PROPERTY_0 = new StringId ( 2230 , \"Unknown config property: {0}\" ) ; public static final StringId AgentImpl_AGENTCONFIG_MUST_NOT_BE_NULL = new StringId ( 2231 , \"AgentConfig must not be null\" ) ; public static final StringId AgentImpl_SNMPDIRECTORY_DOES_NOT_EXIST = new StringId ( 2232 , \"snmp-directory does not exist\" ) ; public static final StringId AgentImpl_SNMPDIRECTORY_MUST_BE_SPECIFIED_BECAUSE_SNMP_IS_ENABLED = new StringId ( 2233 , \"snmp-directory must be specified because SNMP is enabled\" ) ; public static final StringId AgentImpl_THE_DIRECTORY_DOES_NOT_EXIST = new StringId ( 2234 , \"The directory {0} does not exist.\" ) ; public static final StringId AgentImpl_SNMPDIRECTORY_MUST_NOT_EXIST = new StringId ( 2235 , \"The directory {0} does not exist.\" ) ; public static final StringId AgentImpl_THE_FILE_0_IS_A_DIRECTORY = new StringId (", "return getRegistry ( ) . instanceIDs ( SliderKeys . APP_TYPE ) ; } catch ( IOException e ) { throw e ; } catch ( YarnException e ) {", "listComments , getMyStoresSubscribed , getStoresRecommended ,", "BaseRobotRules rules = createRobotRules ( \"anybot\" , htmlFile . getBytes ( \"us-ascii\" ) ) ; assertTrue ( rules . isAllowed ( \"http://www.domain.com/\" ) ) ; assertFalse ( rules . isDeferVisits ( ) ) ;", "public UserTO suspend ( final String username , final PropagationRequestTO propagationRequestTO ) { }", "renderer = @ JsfRenderer ( type = \"org.richfaces.ui.OrderingListRenderer\" ) , tag = @ Tag ( name = \"orderingList\" ) ) public abstract class AbstractOrderingList extends AbstractOrderingComponent implements SelectItemsInterface , EventsKeyProps , EventsMouseProps , MultiSelectProps { public static final String COMPONENT_TYPE = \"org.richfaces.ui.OrderingList\" ; public static final String COMPONENT_FAMILY = \"org.richfaces.ui.SelectMany\" ;", "public LDAPConfiguration getLdapConfiguration ( ) { return ldapConfiguration ; } public void setLdapConfiguration ( LDAPConfiguration ldapConfiguration ) { this . ldapConfiguration = ldapConfiguration ; } public Boolean isAutocompleteLogin ( ) { return this . autocompleteLogin != null ? this . autocompleteLogin : true ; } public void setAutocompleteLogin ( Boolean autocompleteLogin ) { this . autocompleteLogin = autocompleteLogin ; }", "final LinearRestrictions < OffsetDateTime > dateTimeRestrictions = createDateTimeRestrictions ( DATETIME_MIN_LIMIT , new Limit < > ( referenceValue . getValue ( ) , true ) ) ; return FieldSpecFactory . fromRestriction ( dateTimeRestrictions ) ;", "private StructuredGraph copy ( String newName , Consumer < UnmodifiableEconomicMap < Node , Node > > duplicationMapCallback , CompilationIdentifier newCompilationId ) { AllowAssumptions allowAssumptions = AllowAssumptions . ifNonNull ( assumptions ) ; AllowuredGraph copy = new StructuredGraph ( newName , method ( ) , entryBCI , assumptions == null ? null : new Assumptions ( ) , speculationLog , useProfilingInfo , newCompilationId , getOptions ( ) ) ; }", "import team . chisel . api . carving . CarvingUtils ; import team . chisel . client . util . ClientUtil ;", "TokenValueDto fndFunds = totalFunds ( list , FunderDto :: getFndFunds ) ; final TokenValueDto otherFunds = totalFunds ( list , FunderDto :: getOtherFunds ) ;", "import net . minecraft . util . math . RayTraceResult . Type ;", ""]